<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github加速访问文件</title>
      <link href="/tools/github-jia-su-fang-wen-wen-jian/"/>
      <url>/tools/github-jia-su-fang-wen-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="加速访问github文件"><a href="#加速访问github文件" class="headerlink" title="加速访问github文件"></a>加速访问github文件</h3><h4 id="加速地址"><a href="#加速地址" class="headerlink" title="加速地址"></a>加速地址</h4><ul><li><a href="https://ghproxy.cc/">https://ghproxy.cc/</a></li><li><a href="https://hub.gitmirror.com/">https://hub.gitmirror.com/</a></li><li><a href="https://gh.con.sh/">https://gh.con.sh/</a></li><li><a href="https://mirror.ghproxy.com/">https://mirror.ghproxy.com/</a></li><li><a href="https://ghproxy.homeboyc.cn/">https://ghproxy.homeboyc.cn/</a></li><li><a href="https://tool.mintimate.cn/gh/">https://tool.mintimate.cn/gh/</a></li><li><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz/</a></li><li><a href="https://gh.ddlc.top/">https://gh.ddlc.top/</a></li><li><a href="https://ghps.cc/">https://ghps.cc/</a></li><li><a href="https://github.abskoop.workers.dev/">https://github.abskoop.workers.dev/</a></li><li><a href="https://git.886.be/">https://git.886.be/</a></li><li><a href="https://gh.llkk.cc/">https://gh.llkk.cc/</a></li></ul><h4 id="加速使用方法"><a href="#加速使用方法" class="headerlink" title="加速使用方法"></a>加速使用方法</h4><p>在需要访问的地址前加上加速地址</p><p>例如：<a href="https://github.com/test/xx/blob/main/README.md%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AEhttps://ghproxy.cc/https://github.com/test/xx/blob/main/README.md">https://github.com/test/xx/blob/main/README.md加速访问https://ghproxy.cc/https://github.com/test/xx/blob/main/README.md</a></p><h3 id="配置git自动替换"><a href="#配置git自动替换" class="headerlink" title="配置git自动替换"></a>配置git自动替换</h3><ul><li>使用镜像地址替换所有只想github的链接</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> url.<span class="token string">"https://hub.fastgit.xyz/"</span>.insteadOf <span class="token string">"https://github.com/"</span><span class="token function">git</span> config protocol.https.allow always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看git配置信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>取消设置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> url.<span class="token string">"https://hub.fastgit.xyz/"</span>.insteadof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加速访问Release"><a href="#加速访问Release" class="headerlink" title="加速访问Release"></a>加速访问Release</h3><p>对于正常的 clone ， push 操作，FastGit 已经提供了相当完善的操作。对于 Release 和源码存档的下载，我们可以使用如下方法进行操作。</p><ul><li>Release</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设下载链接为 https://github.com/A/A/releases/download/1.0/1.0.tar.gz</span><span class="token function">wget</span> https://download.fastgit.org/A/A/releases/download/1.0/1.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Codeload</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设下载链接为 https://hub.fastgit.xyz/A/A/archive/master.zip</span><span class="token comment"># 或者 https://codeload.github.com/A/A/zip/master</span><span class="token function">wget</span> https://download.fastgit.org/A/A/archive/master.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>加速raw</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 原地址 </span><span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/kubernetes/master/README.md<span class="token comment"># 加速下载方法一</span><span class="token function">wget</span> https://raw.staticdn.net/kubernetes/kubernetes/master/README.md<span class="token comment"># 加速下载方法二</span><span class="token function">wget</span> https://raw.fastgit.org/kubernetes/kubernetes/master/README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="谷歌搜索镜像"><a href="#谷歌搜索镜像" class="headerlink" title="谷歌搜索镜像"></a>谷歌搜索镜像</h3><ul><li>Google Mirror 1：<a href="https://search.aust.cf/">https://search.aust.cf/</a></li><li>Google Mirror 2：<a href="https://search.ecnu.cf/">https://search.ecnu.cf/</a></li><li>Google Mirror 3：<a href="https://search.ahnu.cf/">https://search.ahnu.cf/</a></li></ul><h3 id="Google-scholar-谷歌学术镜像"><a href="#Google-scholar-谷歌学术镜像" class="headerlink" title="Google scholar 谷歌学术镜像"></a>Google scholar 谷歌学术镜像</h3><p>思谋学术导航：<a href="https://ac.scmor.com/">https://ac.scmor.com/</a></p><ul><li>scqylaw：<a href="http://scholar.scqylaw.com/">http://scholar.scqylaw.com/</a></li><li>熊猫学术：<a href="https://sc.panda321.com/">https://sc.panda321.com/</a></li><li>HiQQ学术搜索（有链接转到sci-hub）：<a href="https://so.hiqq.com.cn/">https://so.hiqq.com.cn/</a></li><li>学术网：<a href="https://www.scholarnet.cn/">https://www.scholarnet.cn/</a></li><li>学术屋：<a href="https://www.scholarnet.cn/">http://sci.xueshuwu.cn/</a></li></ul><p>参考：<a href="https://www.cnblogs.com/cyra/p/17836397.html">github加速</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyUI 控件使用总结</title>
      <link href="/js/easyui-kong-jian-shi-yong-zong-jie/"/>
      <url>/js/easyui-kong-jian-shi-yong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="combobox模糊匹配"><a href="#combobox模糊匹配" class="headerlink" title="combobox模糊匹配"></a>combobox模糊匹配</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#cc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">combobox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">q<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">combobox</span><span class="token punctuation">(</span><span class="token string">'options'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> row<span class="token punctuation">[</span>opts<span class="token punctuation">.</span>textField<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easyui-重置弹出窗大小"><a href="#easyui-重置弹出窗大小" class="headerlink" title="easyui 重置弹出窗大小"></a>easyui 重置弹出窗大小</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//window是继承自panel，改变窗体大小可以使用panel中的resize</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#windowPanel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考 <a href="https://www.jeasyui.cn/document/index/index.html">easyUI</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java监听Kafka消息</title>
      <link href="/java/java-jian-ting-kafka-xiao-xi/"/>
      <url>/java/java-jian-ting-kafka-xiao-xi/</url>
      
        <content type="html"><![CDATA[<p>监听类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemEvent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SYSTEM_EVENT_TOPIC_NAME</span><span class="token operator">=</span><span class="token string">"system-event"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> timeStamp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SystemEventType</span> eventType<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SystemEventType</span><span class="token punctuation">&#123;</span>    <span class="token constant">USER_LOGIN</span><span class="token punctuation">,</span>    <span class="token constant">USER_LOGOUT</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Copyright (c) Test Corp. * All Rights Reserved. */</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumerRecord</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>core<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">SystemEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>core<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">SystemEvent</span><span class="token punctuation">.</span><span class="token class-name">SystemEventType</span></span><span class="token punctuation">;</span><span class="token comment">/** * 系统登录监听 * */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysKafkaLoginConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SysLoginTipService</span> loginTipService<span class="token punctuation">;</span>    <span class="token comment">/**     * 处理消息     *      * @param record ConsumerRecord&lt;?,?>     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"system-event"</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">"#&#123;@environment.getProperty('spring.application.name')&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onListener</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> loginMsg <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SystemEvent</span> loginEvent <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>loginMsg<span class="token punctuation">,</span> <span class="token class-name">SystemEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>loginEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 执行类     */</span>    <span class="token keyword">class</span> <span class="token class-name">Runner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">SystemEvent</span> systemEvent<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span><span class="token class-name">SystemEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            systemEvent <span class="token operator">=</span> event<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SystemEventType</span> systemEventType <span class="token operator">=</span> systemEvent<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SystemEventType</span><span class="token punctuation">.</span><span class="token constant">USER_LOGIN</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>systemEventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                loginTipService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>systemEvent<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送消息类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * Copyright (c) Test Corp. * All Rights Reserved. */</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">CiCmcontractService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RedisUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">SysLoginTipReviewDTO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">UserInfoDTO</span></span><span class="token punctuation">;</span><span class="token comment">/** * 系统登录提示 *  */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysLoginTipService</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REDIS_KEY_PREFIX</span> <span class="token operator">=</span> <span class="token string">"CI:TIP:LOGIN:"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">EXPIRED_TIME</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24L</span><span class="token punctuation">;</span> <span class="token comment">//24小时</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MessageService</span> messageService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserinfoService</span> userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SystemparametersService</span> systemParamterService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisUtils</span> redisUtils<span class="token punctuation">;</span>        <span class="token comment">/**     * 发送消息     *      * @param userId 登录名     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> systemParamterService<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">MM</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserInfoDTO</span> userInfo <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">REDIS_KEY_PREFIX</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>                <span class="token comment">// 24小时内只发送一次登录提醒</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token function">findLoginTips</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> templateId <span class="token operator">=</span> <span class="token string">"LOGIN-TIP"</span><span class="token punctuation">;</span>                        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        content<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        content<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">sendLoginTipMessage</span><span class="token punctuation">(</span>templateId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>                        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token constant">EXPIRED_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>                       <span class="token comment">/**     * 获取换行符     *      * @return String     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     *      * 发送登录提示信息     *      * @param templateId 消息模板id     * @param toUser 用户     * @param contents 内容     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendLoginTipMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateId<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">,</span>                                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> contents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//发送消息实现</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>公用类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * Copyright (c) Test Corp. * All Rights Reserved. */</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>acca<span class="token punctuation">.</span>opra<span class="token punctuation">.</span>ci<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">araf<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p> */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtils</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 指定缓存失效时间     *     * @param key 键     * @param time 时间(秒)     * @return boolean     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis expire错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis hasKey错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ============================String=============================</span>    <span class="token comment">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 普通缓存放入     *     * @param key 键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis set错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 普通缓存放入并设置时间     *     * @param key 键     * @param value 值     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis set错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 递增     *     * @param key 键     * @param delta 要增加几(大于0)     * @return 计数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 递减     *     * @param key 键     * @param delta 要减少几(小于0)     * @return 计数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ================================Map=================================</span>    <span class="token comment">/**     * HashGet     *     * @param key 键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">hmget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis hmset错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * HashSet 并设置时间     *     * @param key 键     * @param map 对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis hmset错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key 键     * @param item 项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key 键     * @param item 项     * @param value 值     * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除hash表中的值     *     * @param key 键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断hash表中是否有该项的值     *     * @param key 键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key 键     * @param item 项     * @param by 要增加几(大于0)     * @return 计数     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * hash递减     *     * @param key 键     * @param item 项     * @param by 要减少记(小于0)     * @return 计数     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ============================set=============================</span>    <span class="token comment">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return set     */</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">sGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis sGet错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据value从一个set中查询,是否存在     *     * @param key 键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis sHasKey错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将数据放入set缓存     *     * @param key 键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis sSet错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将set数据放入缓存     *     * @param key 键     * @param time 时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis sSetAndTime错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取set缓存的长度     *     * @param key 键     * @return long     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis sGetSetSize错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 移除值为value的     *     * @param key 键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis setRemove错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ===============================list=================================</span>    <span class="token comment">/**     * 获取list缓存的内容     *     * @param key 键     * @param start 开始     * @param end 结束 0 到 -1代表所有值     * @return list     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">lGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lGet错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取list缓存的长度     *     * @param key 键     * @return long     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lGetListSize错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过索引 获取list中的值     *     * @param key 键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return o     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">lGetIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lGetIndex错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将list放入缓存     *     * @param key 键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lSet4错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将list放入缓存     *     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lSet错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将list放入缓存     *     * @param key 键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lSet2错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将list放入缓存     *     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lSet3错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据索引修改list中的某条数据     *     * @param key 键     * @param index 索引     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lUpdateIndex错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 移除N个值为value     *     * @param key 键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis lRemove错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-文件处理</title>
      <link href="/python/python-xue-xi-wen-jian-chu-li/"/>
      <url>/python/python-xue-xi-wen-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><p><img src="/images/2024091315500101.png" alt="2024091315500101"><br>文件打开模式<br><img src="/images/2024091315500102.png" alt="2024091315500102"><br>文件打开常用组合<br><img src="/images/2024091315500103.png" alt="2024091315500103"><br><img src="/images/2024091315500104.png" alt="2024091315500104"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.创建test文件，写入Hello World"</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello Li Lei"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.创建test文件，覆盖Hello World"</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.打开test文件，追加..."</span><span class="token punctuation">)</span><span class="token comment">#fpath=r"c:\test\test.txt" # linux或mac下路径</span><span class="token comment">#fpath=r"c:\\test\\test.txt"</span>fpath<span class="token operator">=</span><span class="token string">"c:/test/test.txt"</span> <span class="token comment"># window下路径，linux下是\\</span>f<span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.打开test文件，在文件尾部追加Hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h3><h4 id="finally代码块中"><a href="#finally代码块中" class="headerlink" title="finally代码块中"></a>finally代码块中</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding =utf-8</span>file_name <span class="token operator">=</span><span class="token string">'test.txt'</span>f<span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打开文件成功"</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件不存在，请先创建文件"</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"处理OSError异常"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> f <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"关闭文件成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="with-as代码块"><a href="#with-as代码块" class="headerlink" title="with as代码块"></a>with as代码块</h4><p>with as 提供了一个代码块，在as后面声明一个资源变量，在with as代码块结束后自动释放资源</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding =utf-8</span>file_name <span class="token operator">=</span><span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本文件读写"><a href="#文本文件读写" class="headerlink" title="文本文件读写"></a>文本文件读写</h3><ul><li>read(size&#x3D;-1) 从文件中读取字符串，size限制读取的字符数，size&#x3D;-1表示不限制</li><li>readline(size&#x3D;-1) 在读取到换行符或文件结尾是返回单行字符串，如果已经到文件尾，则返回一个空字符串，size是限制读取字符数，size&#x3D;-1表示不限制</li><li>readlines() 读取文件数据到一个字符串列表中，每一行数据都是列表的一个元素</li><li>write(s) 将字符串s写入文件中，并返回写入的字符数</li><li>writelines(lines) 向文件中写入一个字符串列表，不添加行分隔符，因此通常为每一行末尾都提供行分隔符</li><li>flush() 刷新写缓冲区，在文件没有关闭的情况下将数据写入文件中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding =utf-8</span>f_name<span class="token operator">=</span><span class="token string">'src_file.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    copy_f_name <span class="token operator">=</span> <span class="token string">'dest_file.txt'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>copy_f_name<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> copy_f<span class="token punctuation">:</span>        copy_f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件复制成功!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h3><ul><li>read(size&#x3D;-1) 从文件中读取字节，size限制读取的字节数，size&#x3D;-1，则读取全部字节</li><li>readline(size&#x3D;-1) 从文件中读取并返回一行。，size是限制读取字节数，size&#x3D;-1表示不限制</li><li>readlines() 读取文件数据到一个字节列表中，每一行数据都是列表的一个元素</li><li>write(b) 写入字节b，并返回写入的字节数</li><li>writelines(lines) 向文件中写入一个字节列表，不添加行分隔符，因此通常为每一行末尾都提供行分隔符</li><li>flush() 刷新写缓冲区，在文件没有关闭的情况下将数据写入文件中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding =utf-8</span>f_name<span class="token operator">=</span><span class="token string">'logo.jpg'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    b <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    copy_f_name <span class="token operator">=</span> <span class="token string">'logo-new.jpg'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>copy_f_name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> copy_f<span class="token punctuation">:</span>        copy_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件复制成功!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-内置模块</title>
      <link href="/python/python-xue-xi-nei-zhi-mo-kuai/"/>
      <url>/python/python-xue-xi-nei-zhi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><h3 id="数据计算模块"><a href="#数据计算模块" class="headerlink" title="数据计算模块"></a>数据计算模块</h3><h4 id="math"><a href="#math" class="headerlink" title="math"></a>math</h4><p><img src="/images/2024091210440101.png" alt="2024091210440101"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> mathmath<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment"># -2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期时间模块"><a href="#日期时间模块" class="headerlink" title="日期时间模块"></a>日期时间模块</h3><ul><li>datetime  包含时间和日期</li><li>date      只包含日期</li><li>time      只包含时间</li><li>timedelta 计算时间跨度</li><li>tzinfo    时区信息</li></ul><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p><img src="/images/2024091210440102.png" alt="2024091210440102"></p><ul><li>datetime.today() 返回当前的本地日期和时间</li><li>datetime.now(tz&#x3D;None) 返回指定时区的当前日期和时间，参数tz用于设置时区，如果tz&#x3D;None或省略，则等同于today()</li><li>datetime.fromtimestamp(timestamp,tz&#x3D;None) 返回于UNIX时间戳对应的本地日期和时间。UNIX时间戳是从1970年1月1日00:00:00开始到现在为止的总秒数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> datetimed <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">99999999999.23</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p><strong>语法</strong><br>datetime.date(year,month,day)</p><p>常用方法</p><ul><li>date.today() 返回当前本地日期</li><li>date.fromtimestamp(timestamp) 返回于UNIX时间戳对应的本地日期</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p><strong>语法</strong><br>datetime.time(hour&#x3D;0,minute&#x3D;0,second&#x3D;0,microsecond&#x3D;0,tzinfo&#x3D;None)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="timedelta"><a href="#timedelta" class="headerlink" title="timedelta"></a>timedelta</h4><p><img src="/images/2024091210440103.png" alt="2024091210440103"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> datetimed <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>d <span class="token operator">+=</span> delta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日期时间与字符串相互转换"><a href="#日期时间与字符串相互转换" class="headerlink" title="日期时间与字符串相互转换"></a>日期时间与字符串相互转换</h4><ul><li>将日期时间对象转换为字符串时，称之为日期时间格式化。在Python中使用strftime()方法进行日期时间格式化，在datetime、date和time三个类中都一个一个实例方法strftime(formate)</li><li>将字符串转换为日期时间对象的过程，叫做日期时间解析。在Python中使用datetime.strptime(date_string,formate)类方法进行日期时间解析</li></ul><p><img src="/images/2024091210440104.png" alt="2024091210440104"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> datetimed <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M%S"</span><span class="token punctuation">)</span>str_date <span class="token operator">=</span><span class="token string">'2024-02-12 10:40:32'</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%M%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正则表达式模块"><a href="#正则表达式模块" class="headerlink" title="正则表达式模块"></a>正则表达式模块</h3><p>正则表达式指预先定义好一个”字符串模版”，通过这个”字符串模版”可以匹配、查找和替换那些匹配”字符串模版”的字符串</p><h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><p>使用match(p,text)函数进行字符串匹配，其中参数p是正则表达式，即字符串模版，text是要验证的字符串。如果匹配成功，则返回一个Match对象(匹配对象)，否则返回None。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'w+@163\.com'</span>email<span class="token operator">=</span><span class="token string">"zhangsan@163.com"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>email2<span class="token operator">=</span><span class="token string">"lishi@126.com"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token comment"># 返回None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><ul><li>search(p,text) 在text字符串中查找匹配的内容，如果找到则返回第一个匹配的Match对象，否则返回None，p是正则表达式</li><li>findall(p,text) 在text字符串中查找所有匹配的内容，如果找到则返回所有匹配的字符串列表，如果一个都没有匹配到则返回None，p是正则表达式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'w+@163\.com'</span>text<span class="token operator">=</span><span class="token string">"zhangsan email is zhangsan@163.com"</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span>text<span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token string">r"Java|java|JAVA"</span>text<span class="token operator">=</span><span class="token string">"I like Java and JAVA"</span>m_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p><strong>语法</strong><br>re.sub(pattern,repl,string,count&#x3D;0)</p><p>参数pattern是正则表达式; 参数repl是用于替换的新字符串;参数string是即将被替换的旧字符串; 参数count是要替换的最大数量，默认值为零表示不限制替换数量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r"\d+"</span>text<span class="token operator">=</span><span class="token string">"AB12CD34EF56GH"</span>replace_text<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token comment"># 结果 AB CD EF GH</span>replace_text<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 结果 AB CD34EF56GH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><p><strong>语法</strong><br>re.split(pattern,string,maxsplit&#x3D;0)</p><p>参数pattern是正则表达式;参数string是要分割的字符串;参数maxsplit是最大分割次数;maxsplit的默认值为零，表示分割次数没有限制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> rep<span class="token operator">=</span><span class="token string">r"\d+"</span>text<span class="token operator">=</span><span class="token string">"AB12CD34EF"</span>split_text <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token comment"># 结果 AB CD EF</span>split_text <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span>text<span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 结果 AB CD34EF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-异常处理</title>
      <link href="/python/python-xue-xi-yi-chang-chu-li/"/>
      <url>/python/python-xue-xi-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span>result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># ZeroDivisionError异常</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>我们不能防止用户输入0，但是出现异常后我们能捕获并处理异常，不至于让程序崩溃。</p><h4 id="try-except语句"><a href="#try-except语句" class="headerlink" title="try-except语句"></a>try-except语句</h4><p><img src="/images/2024091110050201.png" alt="2024091110050201"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># ZeroDivisionError异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能除以0，异常：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个except代码块"><a href="#多个except代码块" class="headerlink" title="多个except代码块"></a>多个except代码块</h4><p><img src="/images/2024091110050202.png" alt="2024091110050202"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># ZeroDivisionError异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能除以0，异常：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的是无效数字，异常&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多重异常捕获"><a href="#多重异常捕获" class="headerlink" title="多重异常捕获"></a>多重异常捕获</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># ZeroDivisionError异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span>ValueError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"异常：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="try-except语句嵌套"><a href="#try-except语句嵌套" class="headerlink" title="try-except语句嵌套"></a>try-except语句嵌套</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    i2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">try</span>：        result <span class="token operator">=</span>n<span class="token operator">/</span>i2        <span class="token comment"># ZeroDivisionError异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能除以0，异常：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> ex<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的是无效数字，异常&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用finally代码块"><a href="#使用finally代码块" class="headerlink" title="使用finally代码块"></a>使用finally代码块</h3><p><img src="/images/2024091110050203.png" alt="2024091110050203"><br>有时在try-except语句中会占用一些资源，可以使用finally代码块释放资源。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># ZeroDivisionError异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能除以0，异常：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的是无效数字，异常&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment"># 释放资源代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"释放资源..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">customException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        supper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动引发异常"><a href="#手动引发异常" class="headerlink" title="手动引发异常"></a>手动引发异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">customException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        supper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">8888</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span>n<span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># ZeroDivisionError异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;除以&#123;1&#125;等于&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment">#print("不能除以0，异常：&#123;&#125;".format(e))</span>    <span class="token keyword">raise</span> customException<span class="token punctuation">(</span><span class="token string">"不能除以0"</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment">#print("输入的是无效数字，异常&#123;&#125;".format(e))</span>    <span class="token keyword">raise</span> customException<span class="token punctuation">(</span><span class="token string">"输入的是无效数字"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-类与对象</title>
      <link href="/python/python-xue-xi-lei-yu-dui-xiang/"/>
      <url>/python/python-xue-xi-lei-yu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><p>面向对象是一种编程思想，即按照真实世界的思维方式构建软件系统<br><img src="/images/2024090913450201.png" alt="2024090913450201"></p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 语法</span><span class="token keyword">class</span> 类名<span class="token punctuation">[</span><span class="token punctuation">(</span>父类<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    类体<span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#类体</span>    <span class="token keyword">pass</span> <span class="token comment">#类体还没设计好，为了保证代码完整性，相当占位符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#类体</span>    <span class="token keyword">pass</span> car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h3><p><img src="/images/2024090913450202.png" alt="2024090913450202"></p><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><p>实例变量就是对象个体特有的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建和初始化实例变量</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name         self<span class="token punctuation">.</span>age<span class="token operator">=</span>aged <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'Dog'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我们家狗狗叫&#123;0&#125;,&#123;1&#125;岁了。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>类中的__init__()方法是一个非常特殊的方法，用来创建和初始化实例变量，这种方法就是构造方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"雌性"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建和初始化实例变量</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name         self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sexd1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'Dog1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'Dog2'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"雄性"</span><span class="token punctuation">)</span>d3 <span class="token operator">=</span> Dog<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Dog2'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"雄性"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;: &#123;1&#125;岁&#123;2&#125;&#125;。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d1<span class="token punctuation">.</span>age<span class="token punctuation">,</span>d1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;: &#123;1&#125;岁&#123;2&#125;&#125;。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d2<span class="token punctuation">.</span>age<span class="token punctuation">,</span>d2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;: &#123;1&#125;岁&#123;2&#125;&#125;。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d3<span class="token punctuation">.</span>age<span class="token punctuation">,</span>d3<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><p>实例方法与实例变量一样，都是某个实例(对象)个人特有的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"雌性"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建和初始化实例变量</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name         self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex    <span class="token comment"># 实例方法</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;在跑"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sound<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;在叫，'&#123;&#125;'!"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>sound<span class="token punctuation">)</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'Dog1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>d1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>d1<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><p>类变量是属于类的变量，不属于单个对象;类变量是通过<strong>类名.类变量</strong>访问，实例变量是通过<strong>对象.实例变量</strong>访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0568</span> <span class="token comment">#利率</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amout<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amout<span class="token operator">=</span>amout    account <span class="token operator">=</span> Account<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">1000000.0</span><span class="token punctuation">)</span><span class="token comment">#实例变量是通过对象.实例变量访问</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"账户名：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"账户金额：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>amout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#类变量是通过类名.类变量访问</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"利率：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span>interest_rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p>类方法与类变量类似，属于类，不属于个体实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span> <span class="token comment">#类变量利率</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amout<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amout<span class="token operator">=</span>amout    <span class="token comment"># 类方法</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_by</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>interest_rate<span class="token operator">*</span>amt    interest <span class="token operator">=</span> Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"计算利息：&#123;0:.4f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>interest<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><p>为了防止外部调用者随意存取类的内部数据(成员变量)，内部数据会被分装为私有变量；</p><p>私有变量：在变量前加上双下划线(_)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    __interest_rate<span class="token operator">=</span><span class="token number">0.0568</span> <span class="token comment">#类私有变量利率</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amout<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner <span class="token comment">#创建并初始化公有实例变量</span>        self<span class="token punctuation">.</span>__amout<span class="token operator">=</span>amout <span class="token comment">#创建并初始化私有实例变量__amout</span>        <span class="token keyword">def</span> <span class="token function">desc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"&#123;0&#125; 金额：&#123;1&#125; 利率：&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__amout<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>__interest_rate<span class="token punctuation">)</span>    account <span class="token operator">=</span> Account<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">1000000.0</span><span class="token punctuation">)</span>account<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"账户名：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#print("账户金额：&#123;0&#125;".format(account.__amout)) # 会报错，私有变量不能访问</span><span class="token comment">#print("利率：&#123;0&#125;".format(Account.__interest_rate)) # 会报错，私有类变量不能访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>私有方法与私有变量的封装类似，在方法前加上双下划线(_)就是私有方法了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    __interest_rate<span class="token operator">=</span><span class="token number">0.0568</span> <span class="token comment">#类私有变量利率</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amout<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner <span class="token comment">#创建并初始化公有实例变量</span>        self<span class="token punctuation">.</span>__amout<span class="token operator">=</span>amout <span class="token comment">#创建并初始化私有实例变量__amout</span>        <span class="token keyword">def</span> <span class="token function">__get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"&#123;0&#125; 金额：&#123;1&#125; 利率：&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__amout<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>__interest_rate<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">desc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__get_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    account <span class="token operator">=</span> Account<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">1000000.0</span><span class="token punctuation">)</span>account<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"账户名：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用属性"><a href="#使用属性" class="headerlink" title="使用属性"></a>使用属性</h4><p>为了实现对象的封装，在一个类中不应该有公有的成员变量，这些成员变量应该被设计为私有的，然后通过公有的赋值(set)和取值(get)方法访问</p><p><img src="/images/2024090913450203.png" alt="2024090913450203"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"雌性"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建和初始化实例变量</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name         self<span class="token punctuation">.</span>__age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex    <span class="token comment"># 实例方法</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;在跑"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sound<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;在叫，'&#123;&#125;'!"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>sound<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 替代get_age(self):</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__age    <span class="token decorator annotation punctuation">@age<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 替代set_age(self,age)</span>        self<span class="token punctuation">.</span>__age<span class="token operator">=</span>agedog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"哈士奇"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;年龄：&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">3</span> <span class="token comment"># dog.set_age(3)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改&#123;0&#125;后年龄：&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>继承性也是面向对象重要的基本特性之一，在现实世界中继承关系无处不在</p><p>例如狗和动物的关系：狗是一种特殊的动物，具有动物的全部特性和行为，即数据和操作。在面向对象中动物是一般类，被称为<strong>父类</strong>；狗是特殊类，被称为<strong>子类</strong>。特殊类拥有一般类的全部数据和操作，可以称之为子类继承父类。</p><p><img src="/images/2024090913450204.png" alt="2024090913450204"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span>name <span class="token comment">#实例变量name</span>        <span class="token keyword">def</span> show info<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token string">"动物的名字:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"动一动..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age <span class="token comment">#实例变量age</span>cat <span class="token operator">=</span>Cat<span class="token punctuation">(</span><span class="token string">'Tom'</span>，<span class="token number">2</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><p><img src="/images/2024090913450205.png" alt="2024090913450205"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Horse</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name <span class="token comment">#实例变量name</span>        <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"马的名字:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"马跑..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Donkey</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span>name <span class="token comment">#实例变量name</span>        <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"驴的名字:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"驴跑..."</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">roll</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"驴打滚..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Mule</span><span class="token punctuation">(</span>Horse<span class="token punctuation">,</span> Donkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_init <span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age <span class="token comment">#实例变量age</span><span class="token comment"># 继承的顺序是从左到右，左边的没有接着继续找下一个</span>m <span class="token operator">=</span> Mule<span class="token punctuation">(</span><span class="token string">"骡子"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 继承父类Hourse的方法</span>m<span class="token punctuation">.</span>roll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 继承父类Donkey的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 继承父类Hourse的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Horse</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name <span class="token comment">#实例变量name</span>        <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"马的名字:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"马跑..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Donkey</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span>name <span class="token comment">#实例变量name</span>        <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"驴的名字:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"驴跑..."</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">roll</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"驴打滚..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Mule</span><span class="token punctuation">(</span>Horse<span class="token punctuation">,</span> Donkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_init <span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age <span class="token comment">#实例变量age</span>    <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"骡子：&#123;0&#125;,年龄：&#123;1&#125;岁！"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 继承的顺序是从左到右，左边的没有接着继续找下一个</span>m <span class="token operator">=</span> Mule<span class="token punctuation">(</span><span class="token string">"骡子"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 继承父类Hourse的方法</span>m<span class="token punctuation">.</span>roll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 继承父类Donkey的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 子类Mule的方法，重写了父类的show_info方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>多态指对象可以表现出多种形态</p><p>例如:猫、狗、鸭子都属于动物，它们都有<strong>叫</strong>和<strong>动</strong>等行为，但是<strong>叫</strong>的方式不同，<strong>动</strong>的方式也不动</p><h4 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h4><p>在多个子类继承父类，并重写父类方法后，这些子类所创建的对象之间就是多态的，这些对象采用不同的方式实现父类方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"动物叫，但不知道是哪种动物！"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小狗叫，汪汪汪！"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫叫，喵喵喵！"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="鸭子类型测试与多态"><a href="#鸭子类型测试与多态" class="headerlink" title="鸭子类型测试与多态"></a>鸭子类型测试与多态</h4><p><img src="/images/2024090913450206.png" alt="2024090913450206"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding-utf-8</span><span class="token comment"># 设计一个函数start，接收具有speak方法的对象</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义几个类都有speak方法</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"动物叫，但不知道是哪种动物叫！"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小狗叫，汪汪汪！"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫叫，喵喵喵！"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汽车叫，滴滴滴！"</span><span class="token punctuation">)</span><span class="token comment"># start可以接收所有speak方法对象</span>start<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span>Car<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-函数</title>
      <link href="/python/python-xue-xi-han-shu/"/>
      <url>/python/python-xue-xi-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数具有<strong>函数名</strong>、<strong>参数</strong>和<strong>Python</strong></p><p>函数分类</p><ol><li>函数:作用域是当前模块</li><li>嵌套函数:定义在别的函数中</li><li>方法:定义在类中</li></ol><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p><img src="/images/2024090909341201.png" alt="2024090909341201"></p><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><img src="/images/2024090909341202.png" alt="2024090909341202"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">def</span> <span class="token function">rect_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area <span class="token operator">=</span> width<span class="token operator">*</span>height    <span class="token keyword">return</span> area<span class="token keyword">def</span> <span class="token function">print_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area <span class="token operator">=</span> width<span class="token operator">*</span>height    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; X &#123;1&#125; 长方形面积：&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h4 id="使用位置参数调用参数"><a href="#使用位置参数调用参数" class="headerlink" title="使用位置参数调用参数"></a>使用位置参数调用参数</h4><p>在调用函数是传递的实参与定义函数时的形参顺序一致，就是调用函数的基本形式。</p><p><img src="/images/2024090909341203.png" alt="2024090909341203"></p><h4 id="使用关键字参数调用函数"><a href="#使用关键字参数调用函数" class="headerlink" title="使用关键字参数调用函数"></a>使用关键字参数调用函数</h4><p>在调用函数时可以用采用<strong>关键字&#x3D;实参</strong>的形式，其中关键字的名字就是定义函数时形参的名称</p><p><img src="/images/2024090909341204.png" alt="2024090909341204"></p><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>python中没有函数重载的概念</p><p><img src="/images/2024090909341205.png" alt="2024090909341205"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">def</span> <span class="token function">make_coffee</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"卡布奇诺"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"制作一杯&#123;0&#125;咖啡"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>coffee1 <span class="token operator">=</span> make_coffee<span class="token punctuation">(</span><span class="token string">"拿铁"</span><span class="token punctuation">)</span>coffee2 <span class="token operator">=</span> make_coffee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>python中的函数可以定义接受不确定数量的参数，这种参数被称为可变参数。可变参数有两种，即在参数前加<em>或者</em>*</p><h4 id="基于元组的可变参数-可变参数"><a href="#基于元组的可变参数-可变参数" class="headerlink" title="基于元组的可变参数(*可变参数)"></a>基于元组的可变参数(*可变参数)</h4><p>*可变参数在函数中被组装成一个元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>    total<span class="token operator">=</span><span class="token number">0.0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        total<span class="token operator">+=</span>number    <span class="token keyword">return</span> total<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">30.0</span><span class="token punctuation">,</span><span class="token number">70.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于字典的可变参数-可变参数"><a href="#基于字典的可变参数-可变参数" class="headerlink" title="基于字典的可变参数(**可变参数)"></a>基于字典的可变参数(**可变参数)</h4><p>**可变参数在函数中被组装成一个字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span><span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"######show_info######"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; - &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>show_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jack"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>show_info<span class="token punctuation">(</span>student_name<span class="token operator">=</span><span class="token string">"json"</span><span class="token punctuation">,</span>student_no<span class="token operator">=</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数中变量的作用域"><a href="#函数中变量的作用域" class="headerlink" title="函数中变量的作用域"></a>函数中变量的作用域</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment"># 创建全局变量</span>x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># global x # 将变量x提升为全局变量</span>    x <span class="token operator">=</span><span class="token number">10</span>  <span class="token comment">#最好不要将变量名和全局变量名定义成一样的</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span>。<span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>print_val<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>python中的任意一个函数都有数据类型，这种数据类型是function</p><h4 id="理解函数类型"><a href="#理解函数类型" class="headerlink" title="理解函数类型"></a>理解函数类型</h4><ol><li>一个函数可以作为另一个函数的返回值使用</li><li>一个函数可以作为另一个函数的参数使用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> subf1 <span class="token operator">=</span> calc<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token comment">#f1实际上是add函数</span>f2 <span class="token operator">=</span> calc<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token comment">#f2实际上是sub函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10+5=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10-5=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="过滤函数filter"><a href="#过滤函数filter" class="headerlink" title="过滤函数filter()"></a>过滤函数filter()</h4><p><img src="/images/2024090909341206.png" alt="2024090909341206"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">></span><span class="token number">50</span> <span class="token comment">#找出大于50的元素</span>data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">]</span>filtered <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>data1<span class="token punctuation">)</span>data2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射函数map"><a href="#映射函数map" class="headerlink" title="映射函数map()"></a>映射函数map()</h4><p><img src="/images/2024090909341207.png" alt="2024090909341207"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span> <span class="token comment">#数据扩大2倍</span>data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">]</span>mapped <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>data1<span class="token punctuation">)</span>data2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>mapped<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><p>在python中使用lambda关键字定义匿名函数。lambda关键字定义的函数也被称为lambda函数</p><p><strong>lambda 函数列表:lambda体</strong></p><p>lambda表达式中不能有多行语句，如果想实现多行代码，可以调用函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span>f1 <span class="token operator">=</span> calc<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> calc<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10+5=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10-5=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中使用Anaconda</title>
      <link href="/tools/linux-zhong-shi-yong-anaconda/"/>
      <url>/tools/linux-zhong-shi-yong-anaconda/</url>
      
        <content type="html"><![CDATA[<h2 id="开环境"><a href="#开环境" class="headerlink" title="开环境"></a>开环境</h2><p>操作系统：<a href="https://cn.ubuntu.com/download/desktop">ubuntu</a><br>开发工具：<a href="%5BLinux%E4%B8%AD%E4%BD%BF%E7%94%A8Pycharm%5D(https://download-cdn.jetbrains.com.cn/python/pycharm-community-2024.2.1.tar.gz)">pycharm</a><br>Anaconda: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2024.06-1-Linux-x86_64.sh">anaconda</a></p><h3 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h3><h4 id="官网手动下载"><a href="#官网手动下载" class="headerlink" title="官网手动下载"></a>官网手动下载</h4><p><a href="https://www.anaconda.com/download/success">anaconda</a></p><h4 id="wget命令下载"><a href="#wget命令下载" class="headerlink" title="wget命令下载"></a>wget命令下载</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以去别的源下载 -c 断点续传 -P 指定目录</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2024.06-1-Linux-x86_64.sh <span class="token parameter variable">-P</span> /home/vbox/soft<span class="token comment"># 下载完成后，给文件执行权限</span><span class="token function">chmod</span> a+x Anaconda3-2024.06-1-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h3><h4 id="bash命令"><a href="#bash命令" class="headerlink" title="bash命令"></a>bash命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下面两种都可以，第二种需要先到文件下载的目录</span><span class="token function">bash</span> ~/soft/Anaconda3-2024.06-1-Linux-x86_64.sh./Anaconda3-2024.06-1-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="接受安装协议"><a href="#接受安装协议" class="headerlink" title="接受安装协议"></a>接受安装协议</h4><p>执行bash命令后，一直按Enter键，直到出现Do you accept the license terms?[yes|no]，输入yes表示继续安装</p><h4 id="确认安装位置"><a href="#确认安装位置" class="headerlink" title="确认安装位置"></a>确认安装位置</h4><p>接受安装协议后会提示安装位置，直接确认安装到默认为止即可</p><h4 id="初始化Anaconda"><a href="#初始化Anaconda" class="headerlink" title="初始化Anaconda"></a>初始化Anaconda</h4><p>执行完前面步骤，Anaconda在Ubuntu中基本安装完毕了，最后初始化Anaconda，这步只需要输入yes</p><p>激活或者切换anconda的base环境需要执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Anaconda常用命令"><a href="#Anaconda常用命令" class="headerlink" title="Anaconda常用命令"></a>Anaconda常用命令</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看帮助</span>conda <span class="token parameter variable">--help</span> 或者 conda <span class="token parameter variable">-h</span><span class="token comment"># 查看版本</span>conda <span class="token parameter variable">--version</span><span class="token comment"># 更新conda</span>conda update conda<span class="token comment"># 降级conda版本</span>conda <span class="token function">install</span> <span class="token parameter variable">-n</span> base <span class="token assign-left variable">conda</span><span class="token operator">==</span><span class="token number">4.6</span>.7<span class="token comment"># 更新anaconda</span>conda update anaconda<span class="token comment"># 卸载anaconda</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> anaconda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="conda环境管理"><a href="#conda环境管理" class="headerlink" title="conda环境管理"></a>conda环境管理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建conda环境</span>conda create <span class="token parameter variable">--name</span> 环境名 包名（多个包名用空格分隔）  //例如：conda create <span class="token parameter variable">--name</span> base <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span> numpy pandas scipy<span class="token comment"># 激活（切换）conda环境</span>conda activate 环境名  //例如：conda activate base<span class="token comment"># 退出当前环境，默认进入上一个使用过的conda中python环境</span>conda deactivate<span class="token comment"># 显示已安装的conda环境</span>conda info <span class="token parameter variable">--envs</span>  //或者：conda info -e，亦或者conda <span class="token function">env</span> list<span class="token comment"># 删除指定的conda环境</span><span class="token comment"># 通过环境名删除</span>conda remove <span class="token parameter variable">--name</span> 要删除的环境名 <span class="token parameter variable">--all</span><span class="token comment"># 通过指定环境文件位置删除（这个方法可以删除不同位置的同名环境）</span>conda remove <span class="token parameter variable">-p</span> 要删除的环境所在位置 <span class="token parameter variable">--all</span>  //例如：conda remove <span class="token parameter variable">-p</span> /home/vbox/anaconda3/envs <span class="token parameter variable">--all</span><span class="token comment"># 复制conda环境</span>conda create <span class="token parameter variable">--name</span> 新环境名 <span class="token parameter variable">--clone</span> 被复制的环境名  //例如：conda create <span class="token parameter variable">--name</span> base_new <span class="token parameter variable">--clone</span> base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="环境软件包的管理"><a href="#环境软件包的管理" class="headerlink" title="环境软件包的管理"></a>环境软件包的管理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前环境中已安装的包</span>conda list<span class="token comment"># 查看指定环境中的Python软件包</span>conda list <span class="token parameter variable">--name</span> 环境名<span class="token comment"># 显示当前环境中的指定包</span>conda list 包名<span class="token comment"># conda命令在当前激活环境中安装需要的包</span>conda <span class="token function">install</span> <span class="token parameter variable">--name</span> 环境名 要安装的包名<span class="token operator">=</span>版本号  //注意这里的版本号不是必须的<span class="token comment"># conda环境安装制定版本的包</span>conda <span class="token function">install</span> <span class="token parameter variable">--name</span> 环境名 要安装的包名<span class="token operator">=</span>版本号  //注意这里的版本号不是必须的<span class="token comment"># conda命令删除当前环境中安装的包</span>conda uninstall 包名<span class="token comment"># 精确查找当前环境中可以安装的包</span>conda search --full-name 包的准确名字<span class="token comment"># 模糊查找当前环境中可以安装的包</span>codna search 包的模糊名字<span class="token comment"># conda从requirements.txt文件安装需求包</span>conda <span class="token function">install</span> <span class="token parameter variable">--file</span>  requirements.txt <span class="token parameter variable">--yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="conda的Python软件包安装源管理"><a href="#conda的Python软件包安装源管理" class="headerlink" title="conda的Python软件包安装源管理"></a>conda的Python软件包安装源管理</h3><p>Windows环境</p><p>conda的Python软件包安装源设置后会在Windows系统当前用户目录下生成一个.condarc文件，可以通过记事本打开。<br>例如：将conda的Python软件包下载源设置成清华大学镜像源后，.condarc文件内容如下：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">channels:  - conda-forge  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - defaultsshow_channel_urls: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看安装源"><a href="#查看安装源" class="headerlink" title="查看安装源"></a>查看安装源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --show-sources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加安装源"><a href="#添加安装源" class="headerlink" title="添加安装源"></a>添加安装源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清华源</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除镜像源"><a href="#删除镜像源" class="headerlink" title="删除镜像源"></a>删除镜像源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--remove</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置安装Python软件包时显示镜像源地址"><a href="#设置安装Python软件包时显示镜像源地址" class="headerlink" title="设置安装Python软件包时显示镜像源地址"></a>设置安装Python软件包时显示镜像源地址</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用yaml文件导出或者创建conda的Python虚拟环境"><a href="#使用yaml文件导出或者创建conda的Python虚拟环境" class="headerlink" title="使用yaml文件导出或者创建conda的Python虚拟环境"></a>使用yaml文件导出或者创建conda的Python虚拟环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用environment.yml文件导出或者创建conda的Python虚拟环境</span><span class="token comment"># 导出当前虚拟环境到指定environment.yml文件</span>conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">></span> environment.yml  <span class="token comment"># 在当前目录下生成环境文件</span>conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">></span> <span class="token string">"environment.yml文件路径"</span>  <span class="token comment"># 指定文件路径</span><span class="token comment"># 根据指定environment.yml文件创建conda虚拟环境</span>conda <span class="token function">env</span> create <span class="token parameter variable">--n</span> 环境名 <span class="token parameter variable">--f</span> <span class="token string">"environment.yml文件路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用requirements-txt文件管理conda虚拟环境中的Python软件包"><a href="#使用requirements-txt文件管理conda虚拟环境中的Python软件包" class="headerlink" title="使用requirements.txt文件管理conda虚拟环境中的Python软件包"></a>使用requirements.txt文件管理conda虚拟环境中的Python软件包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出虚拟环境中的Python软件包到requirements.txt文件</span>conda list <span class="token parameter variable">-e</span> <span class="token operator">></span> requirements.txt<span class="token comment"># 使用requirements.txt文件安装Python软件包</span>conda <span class="token function">install</span> <span class="token parameter variable">--yes</span> <span class="token parameter variable">--file</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="conda指令执行技巧"><a href="#conda指令执行技巧" class="headerlink" title="conda指令执行技巧"></a>conda指令执行技巧</h4><p>在指令后输入-y或者–yes可以制动确认指令，避免后期再次输入y确认，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip create <span class="token parameter variable">--name</span> demo <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span> <span class="token parameter variable">--yes</span>  <span class="token comment"># 自动创建python环境demo，并指定python版本为3.8</span>pip <span class="token function">install</span> numpy pandas matplotlib <span class="token parameter variable">-y</span>  <span class="token comment"># 自动安装numpy、pandas和matplotlib软件包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://blog.csdn.net/weixin_44955407/article/details/139725961">Ubuntu安装Anaconda</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中使用Pycharm</title>
      <link href="/tools/linux-zhong-shi-yong-pycharm/"/>
      <url>/tools/linux-zhong-shi-yong-pycharm/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：<a href="https://cn.ubuntu.com/download/desktop">ubuntu</a><br>开发工具：<a href="%5BLinux%E4%B8%AD%E4%BD%BF%E7%94%A8Pycharm%5D(https://download-cdn.jetbrains.com.cn/python/pycharm-community-2024.2.1.tar.gz)">pycharm</a></p><h2 id="配置开发工具"><a href="#配置开发工具" class="headerlink" title="配置开发工具"></a>配置开发工具</h2><h3 id="解压pycharm"><a href="#解压pycharm" class="headerlink" title="解压pycharm"></a>解压pycharm</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> pycharm包名<span class="token comment"># 进入文件夹，到bin目录找到pycharm.sh</span>./pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>启动pycharm后，找到设置按图中配置地址</p><p><img src="/images/2024090310531201.png" alt="2024090310531201"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><img src="/images/2024090310531202.png" alt="2024090310531202"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑问题总结</title>
      <link href="/computer/dian-nao-wen-ti-zong-jie/"/>
      <url>/computer/dian-nao-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="U盘打不开"><a href="#U盘打不开" class="headerlink" title="U盘打不开"></a>U盘打不开</h3><ol><li>使用命令尝试修复</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># H为u盘的盘符</span>chkdsk H:/f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>格式化u盘</li></ol><h3 id="电脑上的磁盘管理无法打开"><a href="#电脑上的磁盘管理无法打开" class="headerlink" title="电脑上的磁盘管理无法打开"></a>电脑上的磁盘管理无法打开</h3><ol><li>打开本地组策略，gpedit.msc</li><li>依次展开用户配置-管理模板-Windows组件-Microsoft 管理控制台-受限的许可的管理单元</li><li>双击打开磁盘管理，设置为未配置然后确定</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux问题总结</title>
      <link href="/tools/linux-wen-ti-zong-jie/"/>
      <url>/tools/linux-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="使用sudo执行命令提示"><a href="#使用sudo执行命令提示" class="headerlink" title="使用sudo执行命令提示"></a>使用sudo执行命令提示</h3><p><strong>ubuntu linxu中提示</strong><br>vboxuser is not in the sudoers file. This incident will be reported</p><p>安装软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token comment"># 使用su命令，输入密码切换超级用户,用户名后面会由$变为#</span><span class="token function">su</span><span class="token comment"># 编辑sudoers</span><span class="token function">vim</span> /etc/sudoers<span class="token comment"># 找到root ALL=(ALL:ALL) ALL在下面增加一行</span>用户名  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 最后强制保存</span>:wq<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024081515003101.png" alt="2024081515003101"></p><h3 id="ubuntu中使用ssh连接"><a href="#ubuntu中使用ssh连接" class="headerlink" title="ubuntu中使用ssh连接"></a>ubuntu中使用ssh连接</h3><h4 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启动openssh"><a href="#启动openssh" class="headerlink" title="启动openssh"></a>启动openssh</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动</span><span class="token function">sudo</span> systemctl start <span class="token function">ssh</span><span class="token comment"># 设置开机启动</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">ssh</span><span class="token comment"># 查看openssh是否启动</span><span class="token function">sudo</span> systemctl status <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ubuntu中无法打开终端"><a href="#ubuntu中无法打开终端" class="headerlink" title="ubuntu中无法打开终端"></a>ubuntu中无法打开终端</h3><p>设置中language和regional formats的语言保持一次，都设置为中文或者英文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换命令窗口</span>Ctrl+Alt+F5<span class="token comment"># 切换会图形化桌面</span>Ctrl+alt+F7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024081515003102.png" alt="2024081515003102"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux替换软件源</title>
      <link href="/tools/linux-ti-huan-ruan-jian-yuan/"/>
      <url>/tools/linux-ti-huan-ruan-jian-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="设置和替换linux软件源"><a href="#设置和替换linux软件源" class="headerlink" title="设置和替换linux软件源"></a>设置和替换linux软件源</h2><h3 id="默认源"><a href="#默认源" class="headerlink" title="默认源"></a>默认源</h3><p>以CentOS为例，安装CentOS一般默认带的源既是官方源，默认路径在&#x2F;etc&#x2F;yum.repos.d文件夹下<br><img src="/images/2024080810270301.png" alt="2024080810270301"></p><h3 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h3><ul><li><a href="https://developer.aliyun.com/mirror/centos">阿里源</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华源</a></li><li><a href="https://mirrors.cloud.tencent.com/">腾讯源</a></li><li><a href="https://mirrors.huaweicloud.com/home">华为源</a></li><li><a href="https://mirrors.ustc.edu.cn/help/centos-vault.html">中科大</a></li><li><a href="https://mirrors.163.com/">网易</a></li></ul><p>替换<a href="https://developer.aliyun.com/mirror/centos">阿里源文档</a>，其它的类似参考对应的文档</p><p><img src="/images/2024080810270302.png" alt="2024080810270302"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份官方源</span><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token comment"># 下载阿里源，并命名为CentOS-Base.repo</span><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment"># 清除缓存</span>yum clean all<span class="token comment"># 生成缓存</span>yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos-vault/">清华源文档</a><br><img src="/images/2024080810270303.png" alt="2024080810270303"><br><a href="https://mirrors.cloud.tencent.com/help/centos.html">腾讯源文档</a><br><img src="/images/2024080810270304.png" alt="2024080810270304"><br><a href="https://mirrors.huaweicloud.com/mirrorDetail/5ea14ecab05943f36fb75ee5?mirrorName=centos&catalog=os">华为源文档</a><br><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/">中科大</a><br><a href="https://mirrors.163.com/.help/centos.html">网易源文档</a><br><img src="/images/2024080810270305.png" alt="2024080810270305"></p><p>参考 <a href="https://blog.csdn.net/SUBSEA123/article/details/132453046">https://blog.csdn.net/SUBSEA123/article/details/132453046</a><br><a href="https://www.centoschina.cn/course/config-centos/10313.html">centoschina</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装python3</title>
      <link href="/tools/linux-an-zhuang-python3/"/>
      <url>/tools/linux-an-zhuang-python3/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS7</p><h3 id="安装依赖等"><a href="#安装依赖等" class="headerlink" title="安装依赖等"></a>安装依赖等</h3><ul><li>wget下载命令没有则安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 非root用户需要加上sudo</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>检查是否安装了编译套件gcc</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 非root用户需要加上sudo</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>依赖</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 非root用户需要加上sudo</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> zlib*  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="下载python"><a href="#下载python" class="headerlink" title="下载python"></a>下载python</h3><p>下载<a href="https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz">python</a>到&#x2F;opt&#x2F;soft目录下并解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz<span class="token comment"># 后台下载</span><span class="token function">wget</span> <span class="token parameter variable">-b</span> https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz<span class="token comment"># 后台递归下载文件</span><span class="token function">wget</span> <span class="token parameter variable">-br</span> https://www.python.org/ftp/python/3.12.4/<span class="token comment"># 下载文本中的链接内容</span><span class="token comment"># test.txt https://wordpress.org/latest.zip https://ftp.drupal.org/files/projects/drupal-8.4.5.zip</span><span class="token function">wget</span> <span class="token parameter variable">-i</span> test.txt<span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> Python-3.12.4.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译安装python"><a href="#编译安装python" class="headerlink" title="编译安装python"></a>编译安装python</h3><p>创建python3文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /usr/local/python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置python安装路径"><a href="#配置python安装路径" class="headerlink" title="配置python安装路径"></a>配置python安装路径</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入解压python路径</span><span class="token builtin class-name">cd</span> /opt/soft/Python-3.12.4<span class="token comment"># 配置路径</span>./configure <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/python3<span class="token comment"># 编译</span><span class="token function">make</span><span class="token operator">&amp;&amp;</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024080714190301.png" alt="2024080714190301"></p><h4 id="配置python环境变量"><a href="#配置python环境变量" class="headerlink" title="配置python环境变量"></a>配置python环境变量</h4><ul><li><code>/etc/profile （适用于所有用户）</code></li><li><code>~/.bashrc （适用于当前用户）</code></li><li><code>/etc/bashrc （适用于所有用户）</code></li></ul><p><a href="/computer/linux-xi-tong-pei-zhi/">配置</a>profile文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHON3</span><span class="token operator">=</span>/usr/local/python3<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;PYTHON3&#125;</span>/bin<span class="token comment">#保存配置后</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024080714190303.png" alt="2024080714190303"></p><h4 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3/bin/python3 /usr/bin/python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2024080714190302.png" alt="2024080714190302"></p><h4 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编译源代码安装python3"><a href="#编译源代码安装python3" class="headerlink" title="编译源代码安装python3"></a>编译源代码安装python3</h2><p>操作系统：Ubuntu16.04</p><h3 id="下载解压源代码"><a href="#下载解压源代码" class="headerlink" title="下载解压源代码"></a>下载解压源代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -c 表示断点续传</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://www.python.org/ftp/python/3.12.0/Python-3.12.0.tgz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> Python-3.12.0.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入Python-3.12.0文件夹</span><span class="token builtin class-name">cd</span> Python-3.12.0<span class="token comment"># 配置 --prefix是可选参数</span><span class="token function">sudo</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/bin/python3.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p><a href="https://devguide.python.org/getting-started/setup-building/#unix">python3</a>必须先安装依赖，python2可以不用</p><p><img src="/images/2024081613243101.png" alt="2024081613243101"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential gdb lcov pkg-config <span class="token punctuation">\</span>      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev <span class="token punctuation">\</span>      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev <span class="token punctuation">\</span>      lzma lzma-dev tk-dev uuid-dev zlib1g-dev libmpdec-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 编译和安装可以一步执行</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置软连接"><a href="#配置软连接" class="headerlink" title="配置软连接"></a>配置软连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/bin/python3.12/python3 /usr/bin/python3.12<span class="token comment"># 如果有问题可以加-f 表示可以覆盖</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-f</span> /usr/bin/python3.12/python3 /usr/bin/python3.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024080714190304.png" alt="2024080714190304"></p><h3 id="切换linux下默认python版本"><a href="#切换linux下默认python版本" class="headerlink" title="切换linux下默认python版本"></a>切换linux下默认python版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除python的软连接</span><span class="token function">rm</span> /usr/bin/python<span class="token comment"># 新建python3的软连接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/bin/python3 /usr/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装wxpython"><a href="#安装wxpython" class="headerlink" title="安装wxpython"></a>安装wxpython</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -i后指定国内源</span>pip <span class="token function">install</span> wxpython <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考 <a href="https://www.cnblogs.com/Hunry/p/9350607.html">https://www.cnblogs.com/Hunry/p/9350607.html</a><br><a href="https://www.cnblogs.com/lidabo/p/17562425.html#1_6">https://www.cnblogs.com/lidabo/p/17562425.html#1_6</a><br><a href="https://python.p2hp.com/">Python中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven配置和参数</title>
      <link href="/tools/maven-pei-zhi-he-can-shu/"/>
      <url>/tools/maven-pei-zhi-he-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven环境配置"><a href="#Maven环境配置" class="headerlink" title="Maven环境配置"></a>Maven环境配置</h2><p><a href="https://maven.apache.org/download.cgi">maven</a></p><h3 id="设置Maven环境变量"><a href="#设置Maven环境变量" class="headerlink" title="设置Maven环境变量"></a>设置Maven环境变量</h3><h4 id="window环境"><a href="#window环境" class="headerlink" title="window环境"></a>window环境</h4><p>设置环境变量<br><img src="/images/2024080614230901.png" alt="2024080614230901"></p><h4 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h4><ul><li>下载linux版本<a href="https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz">maven</a></li><li>解压maven<br><img src="/images/2024080614230902.png" alt="2024080614230902"><br><img src="/images/2024080614230903.png" alt="2024080614230903"></li><li>配置环境变量<br><img src="/images/2024080614230904.png" alt="2024080614230904"><br><img src="/images/2024080614230905.png" alt="2024080614230905"></li></ul><h2 id="Maven-POM"><a href="#Maven-POM" class="headerlink" title="Maven POM"></a>Maven POM</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 模型版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.companyname.project-group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 版本号 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>project</td><td>工程的根标签</td></tr><tr><td>groupId</td><td>这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目</td></tr><tr><td>artifactId</td><td>这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置</td></tr><tr><td>version</td><td>这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：com.company.bank:consumer-banking:1.0 com.company.bank:consumer-banking:1.1</td></tr></tbody></table><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>POM文件中可以定义项目的依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>POM 文件中也可以定义构建过程中的插件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他常用元素"><a href="#其他常用元素" class="headerlink" title="其他常用元素"></a>其他常用元素</h3><p>properties: 定义项目中的一些属性变量：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cloud.version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cloud.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>repositories: 定义项目的依赖库：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.maven.apache.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dependencyManagement: 用于管理依赖的版本，特别是在多模块项目中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>profiles: 用于定义不同的构建配置，可以根据不同的环境进行构建：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>production<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承和聚合"><a href="#继承和聚合" class="headerlink" title="继承和聚合"></a>继承和聚合</h3><p>继承: 通过parent元素，一个POM文件可以继承另一个POM文件的配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent-project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合: 通过modules元素，一个POM文件可以管理多个子模块：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>module1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>module2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Maven构建生命周期"><a href="#Maven构建生命周期" class="headerlink" title="Maven构建生命周期"></a>Maven构建生命周期</h2><h3 id="Clean-生命周期"><a href="#Clean-生命周期" class="headerlink" title="Clean 生命周期"></a>Clean 生命周期</h3><p>clean：删除目标目录中的编译输出文件。这通常是在构建之前执行的，以确保项目从一个干净的状态开始。</p><p>当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：</p><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul><p>mvn clean 中的 clean 就是上面的 clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行 mvn clean 将运行以下两个生命周期阶段：pre-clean, clean</p><h3 id="Default-生命周期（也称为-Build-生命周期）"><a href="#Default-生命周期（也称为-Build-生命周期）" class="headerlink" title="Default 生命周期（也称为 Build 生命周期）"></a>Default 生命周期（也称为 Build 生命周期）</h3><ul><li>validate：验证项目的正确性，例如检查项目的版本是否正确</li><li>compile：编译项目的源代码。</li><li>test：运行项目的单元测试。</li><li>package：将编译后的代码打包成可分发的格式，例如 JAR 或 WAR。</li><li>verify：对项目进行额外的检查以确保质量。</li><li>install：将项目的构建结果安装到本地 Maven 仓库中，以供其他项目使用。</li><li>deploy：将项目的构建结果复制到远程仓库，以供其他开发人员或团队使用。</li></ul><p><img src="/images/2024080614230906.png" alt="2024080614230906"></p><h4 id="命令行调用"><a href="#命令行调用" class="headerlink" title="命令行调用"></a>命令行调用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在开发环境中，使用下面的命令去构建、安装工程到本地仓库 </span><span class="token comment">#这个命令在执行 install 阶段前，按顺序执行了 default 生命周期的阶段 （validate，compile，package，等等），我们只需要调用最后一个阶段，如这里是 install。 </span>mvn <span class="token function">install</span><span class="token comment">#在构建环境中，使用下面的调用来纯净地构建和部署项目到共享仓库中 </span><span class="token comment">#这行命令也可以用于多模块的情况下，即包含多个子项目的项目，Maven 会在每一个子项目执行 clean 命令，然后再执行 deploy 命令。 </span>mvn clean deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Site-生命周期"><a href="#Site-生命周期" class="headerlink" title="Site 生命周期"></a>Site 生命周期</h3><ul><li>site：生成项目文档和站点信息。</li><li>deploy-site：将生成的站点信息发布到远程服务器，以便共享项目文档。</li></ul><p>Maven Site 插件一般用来创建新的报告文档、部署站点等。</p><ul><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ul><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。 在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Site 生命周期的所有阶段中。这样我们可以显示生命周期的所有文本信息。</p><h2 id="Maven-构建配置文件"><a href="#Maven-构建配置文件" class="headerlink" title="Maven 构建配置文件"></a>Maven 构建配置文件</h2><p>构建配置文件是一系列的配置项的值，可以用来设置或者覆盖 Maven 构建默认值。</p><p>使用构建配置文件，你可以为不同的环境，比如说生产环境（Production）和开发（Development）环境，定制构建方式。</p><p>配置文件在 pom.xml 文件中使用 activeProfiles 或者 profiles 元素指定，并且可以通过各种方式触发。配置文件在构建时修改 POM，并且用来给参数设定不同的目标环境（比如说，开发（Development）、测试（Testing）和生产环境（Production）中数据库服务器的地址）。</p><h3 id="构建配置文件的类型"><a href="#构建配置文件的类型" class="headerlink" title="构建配置文件的类型"></a>构建配置文件的类型</h3><p>构建配置文件大体上有三种类型:</p><table><thead><tr><th>类型</th><th>定义</th></tr></thead><tbody><tr><td>项目级（Per Project）</td><td>定义在项目的POM文件pom.xml中</td></tr><tr><td>用户级 （Per User）</td><td>定义在Maven的设置xml文件中 (%USER_HOME%&#x2F;.m2&#x2F;settings.xml)</td></tr><tr><td>全局（Global）</td><td>定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%&#x2F;conf&#x2F;settings.xml)</td></tr></tbody></table><h3 id="配置文件激活"><a href="#配置文件激活" class="headerlink" title="配置文件激活"></a>配置文件激活</h3><h4 id="配置文件激活示例"><a href="#配置文件激活示例" class="headerlink" title="配置文件激活示例"></a>配置文件激活示例</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jsoft.test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>testproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>testproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.test.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.test.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.prod.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.prod.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：构建配置文件采用的是 <code>&lt;profiles&gt;</code> 节点。</p><p>说明：上面新建了三个 <code>&lt;profiles&gt;</code>，其中 <code>&lt;id&gt;</code> 区分了不同的 <code>&lt;profiles&gt;</code> 执行不同的 AntRun 任务；而 AntRun 的任务可以这么理解，AntRun 监听 test 的 Maven 生命周期阶段，当 Maven 执行 test 时，就触发了 AntRun 的任务，任务里面为输出文本并复制文件到指定的位置；而至于要执行哪个 AntRun 任务，此时构建配置文件起到了传输指定的作用，比如，通过命令行参数输入指定的<code>&lt;id&gt;</code>。</p><p>执行命令：<code>mvn test -Pdev</code></p><p>提示：第一个 test 为 Maven 生命周期阶段，第二个 dev 为构建配置文件指定的 <code>&lt;id&gt;</code> 参数，这个参数通过<code>-P</code>来传输，当然，它可以是 prod 或者 normal 这些由你定义的<code>&lt;id&gt;</code>。</p><h4 id="通过Maven设置激活配置文件"><a href="#通过Maven设置激活配置文件" class="headerlink" title="通过Maven设置激活配置文件"></a>通过Maven设置激活配置文件</h4><p>打开 %USER_HOME%&#x2F;.m2 目录下的 settings.xml 文件，其中 %USER_HOME% 代表用户主目录。如果 setting.xml 文件不存在就直接拷贝 %M2_HOME%&#x2F;conf&#x2F;settings.xml 到 .m2 目录，其中 %M2_HOME% 代表 Maven 的安装目录。</p><p>配置 setting.xml 文件，增加<code>&lt;activeProfiles&gt;</code>属性：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   ...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令<code>mvn dev</code></p><p><strong>提示 1：</strong>此时不需要使用 -Pdev 来输入参数了，上面的 setting.xml 文件的<code>&lt;activeprofile&gt;</code>已经指定了 dev 参数代替了。</p><p><strong>提示 2：</strong>同样可以使用在 %M2_HOME%&#x2F;conf&#x2F;settings.xml 的文件进行配置，效果一致</p><h4 id="通过环境变量激活配置文件"><a href="#通过环境变量激活配置文件" class="headerlink" title="通过环境变量激活配置文件"></a>通过环境变量激活配置文件</h4><p>先把上一步测试的 setting.xml 值全部去掉。</p><p>然后在 pom.xml 里面的<code>&lt;id&gt;</code>为 dev 的<code>&lt;profile&gt;</code>节点，加入<code>&lt;activation&gt;</code>节点：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jsoft.test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>testproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>testproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.test.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.test.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.prod.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.prod.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令： <code>mvn test -Denv=test</code></p><p>提示 1：上面使用 -D 传递环境变量，其中 env 对应刚才设置的<code>&lt;name&gt;</code>值，test 对应<code>&lt;value&gt;</code>。</p><p>提示 2：在 Windows 10 上测试了系统的环境变量，但是不生效，所以，只能通过 -D 传递。</p><h4 id="通过操作系统激活配置文件"><a href="#通过操作系统激活配置文件" class="headerlink" title="通过操作系统激活配置文件"></a>通过操作系统激活配置文件</h4><p>activation 元素包含下面的操作系统信息。当系统为 windows XP,dev Profile 将会被触发。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Windows XP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>Windows<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arch</span><span class="token punctuation">></span></span>x86<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arch</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.2600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>os</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 dev Profile 的结果。</p><h4 id="通过文件的存在或者缺失激活配置文件"><a href="#通过文件的存在或者缺失激活配置文件" class="headerlink" title="通过文件的存在或者缺失激活配置文件"></a>通过文件的存在或者缺失激活配置文件</h4><p>现在使用 activation 元素包含下面的操作系统信息。当 target&#x2F;generated-sources&#x2F;axistools&#x2F;wsdl2java&#x2F;com&#x2F;companyname&#x2F;group,dev Profile 将会被触发。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">></span></span>target/generated-sources/axistools/wsdl2java/         com/companyname/group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>missing</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># clean 删除目标目录中的编译输出文件</span><span class="token comment"># install 将项目的构建结果安装到本地 Maven 仓库中，以供其他项目使用</span><span class="token comment"># -U maven 命令中使用 -U 参数强制 maven 下载最新的快照构建</span>mvn clean <span class="token function">install</span> <span class="token parameter variable">-U</span><span class="token comment"># -P dev -P参数用于激活一个或多个指定构建配置文件(profiles)</span><span class="token comment"># -D skip Tests -D 表示pom文件中properties标签下的属性,跳过maven生命周期的测试环节;Maven还提供了一个-Dmaven.test.skip参数，它与-DskipTests具有相同的效果，Dmaven.test.skip则是一个较旧的参数</span>mvn clean <span class="token function">install</span> <span class="token parameter variable">-Pdev</span> <span class="token parameter variable">-Dskip</span> Tests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数-P"><a href="#参数-P" class="headerlink" title="参数-P"></a>参数-P</h3><p>P代表（Profiles配置文件） 在<code>&lt;profiles&gt;</code>指定的<code>&lt;id&gt;</code>中，可以通过-P进行传递或者赋值。 打包时执行mvn clean package -P prod将触发prod环境的profile配置 打包时执行mvn clean package -P test将触发test环境的profile配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数-D"><a href="#参数-D" class="headerlink" title="参数-D"></a>参数-D</h3><p>-D代表（Properties属性）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span><span class="token punctuation">></span></span>defaultattr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>mvn -Dattr=newattr clean package</code>，则pom.xml内attr的实际值将被替换成newattr</p><p>命令行： <code>mvn -DpropertyName=propertyValue clean package</code>如果propertyName不存在pom.xml，它将被设置。 如果propertyName已经存在pom.xml，其值将被作为参数传递的值覆盖-D。</p><p>如果要发送多个变量，请使用多个空格分隔符加-D：<br><code>mvn -DpropA=valueA -DpropB=valueB -DpropC=valueC clean package</code></p><p>参考 <a href="https://www.runoob.com/maven/maven-build-profiles.html">Maven 构建配置文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++生成和使用动态库</title>
      <link href="/c-c/c-sheng-cheng-he-shi-yong-dong-tai-ku/"/>
      <url>/c-c/c-sheng-cheng-he-shi-yong-dong-tai-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是动态库"><a href="#什么是动态库" class="headerlink" title="什么是动态库"></a>什么是动态库</h3><ul><li>动态库（也称为共享库）是一种可重定位的二进制文件，包含了程序可以在运行时动态加载的一组函数、变量、对象等代码和数据。</li><li>它们可以被多个进程共享，因此可以减少内存空间的占用，并提高程序的运行效率和可维护性。</li><li>与静态库不同，动态库在编译时不会被链接到可执行文件中，而是在程序运行时才被加载到内存中，并且可以被多个程序共享使用。</li><li>动态库可以使用dlopen函数进行动态加载，使用dlsym函数获取动态库中的函数地址，使用dlclose函数进行动态卸载。</li><li>动态库可以分为两种类型：系统动态库和自定义动态库。</li><li>系统动态库是操作系统提供的，包含了一些通用的函数和系统调用，例如libc、libm等。</li><li>自定义动态库是程序开发人员自己编写的，包含了程序中需要的一些函数和数据结构等。</li><li>使用动态库的好处是可以减少代码冗余，提高代码复用率，方便程序的开发和维护，同时也可以减少内存空间的占用，提高程序的运行效率。</li></ul><h3 id="为什么要用动态库"><a href="#为什么要用动态库" class="headerlink" title="为什么要用动态库"></a>为什么要用动态库</h3><p>使用动态库的好处有以下几点：</p><ul><li>节省内存空间：动态库在程序运行时才会被加载，不会像静态库那样在编译时就被全部链接进可执行文件中，因此可以节省内存空间。</li><li>便于更新：当动态库更新时，只需要替换动态库文件即可，不需要重新编译整个程序。</li><li>提高程序运行效率：由于动态库可以被多个程序共享，因此可以减少内存中的重复代码，提高程序运行效率。</li><li>方便程序的开发和维护：动态库可以被多个程序共享，因此可以减少代码冗余，提高代码复用率，方便程序的开发和维护。</li><li>支持动态加载：动态库可以使用dlopen函数进行动态加载，因此可以实现动态加载和卸载，提高程序的灵活性和可扩展性。</li></ul><h3 id="C-使用动态库的方法"><a href="#C-使用动态库的方法" class="headerlink" title="C++使用动态库的方法"></a>C++使用动态库的方法</h3><h4 id="显式链接"><a href="#显式链接" class="headerlink" title="显式链接"></a>显式链接</h4><p>显式链接是通过代码中直接调用动态库中的函数来使用动态库的功能。这种方式需要在程序中显式地链接动态库，并在代码中使用动态库中的函数。使用显式链接的步骤如下：</p><ul><li>编写动态库的代码，并将其编译为动态库文件（.so文件）。</li><li>在程序中使用dlopen函数打开动态库，并使用dlsym函数获取动态库中的函数地址。</li><li>通过获取到的函数地址调用动态库中的函数。</li><li>在程序结束时使用dlclose函数关闭动态库。</li></ul><h4 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h4><p>隐式链接是在编译时将动态库链接到可执行文件中，程序运行时自动加载动态库的方式。这种方式需要在编译时指定动态库的名称，并在程序中使用动态库中的函数，编译器会自动将动态库链接到可执行文件中。使用隐式链接的步骤如下：</p><ul><li>编写动态库的代码，并将其编译为动态库文件（.so文件）。</li><li>在程序中包含动态库的头文件，并在编译时指定动态库的名称。</li><li>在代码中使用动态库中的函数。</li><li>需要注意的是，使用隐式链接时需要将动态库文件放置在系统的动态库搜索路径中，或者通过设置环境变量LD_LIBRARY_PATH来指定动态库的搜索路径。</li></ul><p>总的来说，显式链接需要手动打开和关闭动态库，并且需要在代码中显式地调用动态库中的函数；</p><p>而隐式链接则需要在编译时指定动态库的名称，并将动态库文件放置在系统动态库搜索路径中，但是在代码中使用动态库中的函数时与静态库没有区别。</p><h3 id="linux下C-生成动态库so"><a href="#linux下C-生成动态库so" class="headerlink" title="linux下C++生成动态库so"></a>linux下C++生成动态库so</h3><h4 id="新建需要的文件"><a href="#新建需要的文件" class="headerlink" title="新建需要的文件"></a>新建需要的文件</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;test.h#ifndef __TEST__#define __TEST__int add(int a, int b);#endif&#x2F;&#x2F;test.cpp#include &quot;test.h&quot;int add(int a, int b)&#123;    return a + b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译动态库"><a href="#编译动态库" class="headerlink" title="编译动态库"></a>编译动态库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ test.cpp <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libtest.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>-fPIC</strong>：生成位置无关代码，方便动态链接，常用于编译动态链接库（shared library）。</li><li><strong>-shared</strong>：用于生成动态链接库（shared library）。使用-shared选项将多个目标文件链接在一起生成动态链接库。</li><li><strong>动态库命名</strong>：必须是**以lib开头(隐式链接中)**，以so为后缀。</li></ul><h4 id="隐式链接使用动态库"><a href="#隐式链接使用动态库" class="headerlink" title="隐式链接使用动态库"></a>隐式链接使用动态库</h4><ul><li>新建main.cpp准备调用动态库</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &quot;test.h&quot;using namespace std;int main() &#123;    cout &lt;&lt; add(10, 20) &lt;&lt; endl;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用下列命令编译main.cpp，并链接到动态库libtest.so</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ main.cpp -L. <span class="token parameter variable">-ltest</span> <span class="token parameter variable">-o</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>-L：使用”-L”参数编译源文件时，G++编译器会在指定的目录中寻找库文件。如果库文件不在默认的系统路径下，我们就需要使用”-L”参数来告诉编译器库文件的位置。</li><li>-l：用于指定链接的库文件名，即告诉编译器链接哪个库文件。去掉libtest.so开头的lib和后缀。</li></ol><ul><li><p>可用使用ldd命令查看是否成功链接到动态库，如下图所示，没有链接成功，需要使用LD_LIBRARY_PATH指定动态库环境变量；<br><img src="/images/2024080514511101.png" alt="2024080514511101"></p></li><li><p>LD_LIBRARY_PATH是一个Linux环境变量，用于指定动态链接库的搜索路径。当一个程序运行时，如果需要使用动态链接库，系统会在LD_LIBRARY_PATH中指定的路径中搜索相应的库文件，以便程序能够正确运行。</p></li><li><p>LD_LIBRARY_PATH使用方法一：直接在终端命令行中执行export LD_LIBRARY_PATH&#x3D;&#x2F;path&#x2F;to&#x2F;library:$LD_LIBRARY_PATH，但是这时临时的，退出当前终端后就失效了</p></li></ul><p><strong>修改配置文件</strong></p><ul><li><code>/etc/profile （适用于所有用户）</code></li><li><code>~/.bashrc （适用于当前用户）</code></li><li><code>/etc/bashrc （适用于所有用户）</code></li></ul><p>在<code>.bashrc</code>文件中填入export LD_LIBRARY_PATH&#x3D;&#x2F;path&#x2F;to&#x2F;library:$LD_LIBRARY_PATH，执行source .bashrc立即生效。<br><img src="/images/2024080514511102.png" alt="2024080514511102"></p><h4 id="显示链接使用动态库"><a href="#显示链接使用动态库" class="headerlink" title="显示链接使用动态库"></a>显示链接使用动态库</h4><p>如果使用显示连接动态库的方式去调用前面编译的动态库，会发现打开动态库成功，但是使用dlsym()函数查找动态库函数地址时找不到，这是因为C++中默认开启了名称修饰。</p><h5 id="C-名称修饰"><a href="#C-名称修饰" class="headerlink" title="C++名称修饰"></a>C++名称修饰</h5><p>在C++中，函数的名称修饰（Name Mangling）是指编译器根据函数的参数类型和返回值类型等信息生成的一个唯一的符号名称，用于在链接时标识不同的函数。</p><p>名称修饰的目的在于支持函数重载，在函数名相同但参数类型不同的情况下，生成不同的符号名称，以避免函数名冲突。</p><p>然而，名称修饰也导致了动态库中函数的名称与实际使用时的名称不匹配的问题，从而无法正确链接和调用动态库中的函数。<br>为了解决这个问题，我们可以采用以下两种方法：</p><ul><li>使用extern “C”来关闭名称修饰：在C++中，extern “C”是一种链接指示符号，用于告诉编译器不要采用C++名称修饰，并按照C语言的方式生成符号名称（关闭后函数重载就失效了）。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;在使用这种方式定义函数时，编译器将不会对函数名进行名称修饰，因此可以避免函数名称不匹配的问题。extern &quot;C&quot; void my_function(int arg1, int arg2) &#123;    &#x2F;&#x2F; function body&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用编译器选项关闭名称修饰：一些编译器提供了选项来关闭名称修饰，例如在GCC编译器中，可以使用-fno-rtti选项关闭名称修饰。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;在使用这种方式时，需要注意一些问题，例如关闭名称修饰可能会影响C++的RTTI（Run-Time Type Information）功能，因此需要根据具体情况进行选择。&#x2F;&#x2F;总的来说，为了避免动态库中函数名称不匹配的问题，我们应该尽可能使用extern &quot;C&quot;来关闭名称修饰。&#x2F;&#x2F;如果使用其他方式关闭名称修饰，在做出选择之前需要仔细考虑影响。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成代码文件<br>使用extern “C”和不使用extern “C”修饰分别定义两个函数，然后编译成动态库；</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;test.hint add1(int a, int b);&#x2F;&#x2F;test.cppextern &quot;C&quot; int add(int a, int b)      &#x2F;&#x2F; 关闭名称修饰&#123;    return a + b;&#125;int add1(int a, int b)                &#x2F;&#x2F; 未关闭名称修饰&#123;    return a + b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ test.cpp <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> test.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先生成动态库文件再使用<code>objdump -t test.so &gt; test.txt</code>命令 输出文件test.so的符号列表（变量名与函数名就是符号）内容，如下图所示，经过extern “C”修饰的函数名称不变，没有修饰的就变成了_Z4add1ii；当然，如果在使用dlsym()函数查找函数地址时使用_Z4add1ii也是可以的。<br><img src="/images/2024080514511103.png" alt="2024080514511103"></p><ul><li>新建main.cpp文件</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;dlfcn.h&gt;using namespace std;typedef int (*Add)(int,int);int main()&#123;   void* handle &#x3D; dlopen(&quot;.&#x2F;test.so&quot;,RTLD_LAZY);   if(!handle)&#123;     cout&lt;&lt;&quot;未能加载动态库&quot;&lt;&lt;dlerror()&lt;&lt;endl;     return 1;   &#125;   &#x2F;&#x2F;关闭名称修饰   Add testAdd &#x3D; (Add)dlsym(handle,&quot;add&quot;);   if(!testAdd)  &#123;     cout&lt;&lt;&quot;找不到函数&quot;&lt;&lt;dlerror()&lt;&lt;endl;     dlclose(handle);     return 1;   &#125;   cout&lt;&lt;testAdd(10,20)&lt;&lt;endl;   &#x2F;&#x2F;未关闭名称修饰   Add testAdd1 &#x3D; (Add)dlsym(handle,&quot;_Z4add1ii&quot;);   if(!testAdd1)&#123;     cout&lt;&lt;&quot;找不到函数&quot;&lt;&lt;dlerror()&lt;&lt;endl;     dlclose(handle);     return 1;   &#125;   cout&lt;&lt;testAdd1(20,30)&lt;&lt;endl;   dlclose(handle);   return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用-ldl选项指明生成的对象模块需要使用共享库</span> g++ main.cpp <span class="token parameter variable">-o</span> main <span class="token parameter variable">-ldl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/2024080514511104.png" alt="2024080514511104"></p><h5 id="显示链接动态库函数说明"><a href="#显示链接动态库函数说明" class="headerlink" title="显示链接动态库函数说明"></a>显示链接动态库函数说明</h5><p>显示连接动态库需要用到头文件dlfcn.h，主要用于在Unix&#x2F;Linux系统上动态加载共享库（动态链接库）。</p><p>dlfcn.h是一个C语言的头文件，定义了一些函数和结构体，用于动态链接共享库的操作。</p><p>以下是dlfcn.h文件中常用的函数的详细说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. dlopen函数函数原型：void *dlopen<span class="token punctuation">(</span>const char *filename, int flag<span class="token punctuation">)</span><span class="token punctuation">;</span>函数作用：打开指定的动态共享对象，并返回一个句柄，该句柄可以用于后续的操作，比如获取动态库中的符号地址。参数说明：    filename：要打开的动态共享对象的文件名，可以是完整路径或相对路径。    flag：打开标志，可以是下列值的按位或组合：    RTLD_LAZY：指定动态库的延迟绑定，只有在使用到某个符号时才解析并加载该符号，常用于优化启动时间和内存占用。    RTLD_NOW：指定动态库的立即绑定，加载动态库时会立即解析并加载所有符号，常用于减少动态库初始的启动延迟。    RTLD_GLOBAL：指定动态库的符号可以被其他动态库和程序共享。    RTLD_LOCAL：指定动态库的符号只能被当前动态库内部使用，不能被其他动态库和程序使用。    返回值说明：返回打开的动态共享对象的句柄，如果打开失败，则返回NULL。<span class="token number">2</span>. dlerror函数函数原型：char *dlerror<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">;</span>函数作用：返回最近一次发生的动态链接错误信息。返回值说明：返回一个指向动态链接错误信息的字符串指针，如果没有错误发生，则返回NULL。<span class="token number">3</span>. dlsym函数函数原型：void *dlsym<span class="token punctuation">(</span>void *handle, const char *symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>函数作用：在打开的动态共享对象中查找指定名称的符号，并返回符号地址。参数说明：    handle：打开的动态共享对象的句柄。    symbol：要查找的符号名称。返回值说明：返回指定符号的地址，如果查找失败，则返回NULL。<span class="token number">4</span>. dlclose函数函数原型：int dlclose<span class="token punctuation">(</span>void *handle<span class="token punctuation">)</span><span class="token punctuation">;</span>函数作用：关闭指定的动态共享对象。参数说明：    handle：要关闭的动态共享对象的句柄。返回值说明：如果关闭成功，则返回0，否则返回非零值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://blog.csdn.net/qq_43627907/article/details/129998604">https://blog.csdn.net/qq_43627907&#x2F;article&#x2F;details&#x2F;129998604</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/java/java-duo-xian-cheng/"/>
      <url>/java/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程实现方式"><a href="#Java多线程实现方式" class="headerlink" title="Java多线程实现方式"></a>Java多线程实现方式</h2><h3 id="集成Thread类"><a href="#集成Thread类" class="headerlink" title="集成Thread类"></a>集成Thread类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyThread</span><span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> threadName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> threadName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token operator">=</span>threadName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadName<span class="token operator">+</span><span class="token string">" is run!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Thread</span><span class="token class-name">MyThread</span> t1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MyThread</span> t2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyRunable</span><span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"runable is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//myRunable</span><span class="token class-name">MyRunable</span> r <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyRunable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t  <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyCallable</span><span class="token punctuation">.</span>java<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> taskNum<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskNum <span class="token operator">=</span> taskNum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span> <span class="token operator">+</span> taskNum <span class="token operator">+</span> <span class="token string">"任务开始="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> dateTmp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> dateTmp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> time <span class="token operator">=</span> dateTmp2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dateTmp1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span> <span class="token operator">+</span> taskNum <span class="token operator">+</span> <span class="token string">"任务结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> taskNum <span class="token operator">+</span> <span class="token string">"任务返回运行结果,当前任务耗时【"</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"毫秒】"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MulThreadTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Execttors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Execttors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----程序开始运行----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> taskSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 创建一个线程池</span><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建多个有返回值的任务</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> taskSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Callable</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Future&lt;Object> f = new FutureTask&lt;Object>(c);</span><span class="token comment">// 执行任务并获取Future对象</span><span class="token class-name">Future</span> f <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭线程池</span>pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取所有并发任务的运行结果</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span> f <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 从Future对象上获取任务的返回值，并输出到控制台</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----程序结束运行----，程序运行时间【"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考<a href="https://www.jianshu.com/p/ebf717443257">https://www.jianshu.com/p/ebf717443257</a><br><a href="https://www.cnblogs.com/ttxxdd/p/15242816.html">https://www.cnblogs.com/ttxxdd/p/15242816.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作命令</title>
      <link href="/computer/linux-chang-yong-cao-zuo-ming-ling/"/>
      <url>/computer/linux-chang-yong-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="linux查看内存和cpu"><a href="#linux查看内存和cpu" class="headerlink" title="linux查看内存和cpu"></a>linux查看内存和cpu</h2><p>找出cpu占用率高的线程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> H <span class="token parameter variable">-eo</span> user,pid,ppid,tid,time,%cpu,cmd <span class="token parameter variable">--sort</span><span class="token operator">=</span>%cpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看占用内存最多的程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">head</span> -1<span class="token punctuation">;</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> PID<span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-rn</span> <span class="token parameter variable">-k</span> +4<span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看占用cpu最多的程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">head</span> -1<span class="token punctuation">;</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> PID<span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-rn</span> <span class="token parameter variable">-k</span> +3<span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 <a href="https://www.163.com/dy/article/I2K5RS4505560OM8.html">https://www.163.com/dy/article/I2K5RS4505560OM8.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot创建子模块问题总结</title>
      <link href="/java/springboot-chuang-jian-zi-mo-kuai-wen-ti-zong-jie/"/>
      <url>/java/springboot-chuang-jian-zi-mo-kuai-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="SprintBoot问题总结"><a href="#SprintBoot问题总结" class="headerlink" title="SprintBoot问题总结"></a>SprintBoot问题总结</h2><h3 id="pom中引入依赖报错"><a href="#pom中引入依赖报错" class="headerlink" title="pom中引入依赖报错"></a>pom中引入依赖报错</h3><p><img src="/images/2024071715441201.png" alt="2024071715441201"></p><p>这个问题大概是配置文件里统一配置了依赖版本，在子模块中引入依赖找不到版本号<br>解决方法：在<code>&lt;dependencies&gt;</code>外在增加<code>&lt;dependencyManagement&gt;</code>标签</p><h3 id="springboot-Process-finished-with-exit-code-0"><a href="#springboot-Process-finished-with-exit-code-0" class="headerlink" title="springboot Process finished with exit code 0"></a>springboot Process finished with exit code 0</h3><p><img src="/images/2024080114241201.png" alt="2024080114241201"></p><p>上图中是HospitalAppServer启动花了7.207s而jvm花了8.806，jvm运行8s多就挂了，是应为缺少web服务器，springboot中会内置tomcat服务器，是不是pom文件中没有引入依赖。</p><p>tomcat的依赖是在spring-boot-starter-web中，检查pom文件中有没有改依赖或者依赖的位置是否正确，最后放到最顶层的pom中启动就没有问题了。</p><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中配置myBatis</title>
      <link href="/java/springboot-zhong-pei-zhi-mybatis/"/>
      <url>/java/springboot-zhong-pei-zhi-mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis自动填充"><a href="#MyBatis自动填充" class="headerlink" title="MyBatis自动填充"></a>MyBatis自动填充</h2><h3 id="新建配置类"><a href="#新建配置类" class="headerlink" title="新建配置类"></a>新建配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.school.eduservice.mapper"</span><span class="token punctuation">)</span> <span class="token comment">//config配置类增加此注解则启动类不用增加了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//分页</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置实体类"><a href="#配置实体类" class="headerlink" title="配置实体类"></a>配置实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现元对象处理器接口"><a href="#实现元对象处理器接口" class="headerlink" title="实现元对象处理器接口"></a>实现元对象处理器接口</h3><p><a href="https://baomidou.com/guides/auto-fill-field/">参考</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><h3 id="配置实体"><a href="#配置实体" class="headerlink" title="配置实体"></a>配置实体</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"乐观锁"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Version</span><span class="token keyword">private</span> <span class="token class-name">Long</span> version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p><a href="https://baomidou.com/plugins/optimistic-locker/">参考</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.school.eduservice.mapper"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//乐观锁</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span><span class="token comment">#不写默认就是0和1,1是逻辑删除，0是不删除;配置logic-delete-field可以不用在实体类上添加@TableLogic</span><span class="token comment">#  global-config:</span><span class="token comment">#    db-config:</span><span class="token comment">#      logic-delete-field: isDeleted</span><span class="token comment">#      logic-delete-value: 1</span><span class="token comment">#      logic-not-delete-value: 0</span><span class="token comment"># ----------------------- 使用logback日志，需要删除原先的日志配置 ---------------------</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>com/school/eduservice/mapper/xml/<span class="token important">*.xml</span><span class="token comment">#日志级别</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># mysql</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment">#mysql 数据库连接</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/school<span class="token punctuation">?</span>serverTimeZone=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token comment"># oracle</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment">#mysql 数据库连接</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> oracle.jdbc.driver.OracleDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>oracle<span class="token punctuation">:</span>thin<span class="token punctuation">:</span>@192.168.2.1<span class="token punctuation">:</span>1521<span class="token punctuation">:</span>school    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具-webpack</title>
      <link href="/js/zi-dong-hua-gou-jian-gong-ju-webpack/"/>
      <url>/js/zi-dong-hua-gou-jian-gong-ju-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="了解Webpack相关"><a href="#了解Webpack相关" class="headerlink" title="了解Webpack相关"></a>了解Webpack相关</h3><ul><li>什么是webpack</li><li>Webpack是一个模块打包器(bundler)。</li><li>在Webpack看来, 前端的所有资源文件(js&#x2F;json&#x2F;css&#x2F;img&#x2F;less&#x2F;…)都会作为模块处理</li><li>它将根据模块的依赖关系进行静态分析，生成对应的静态资源</li><li>理解Loader</li><li>Webpack 本身只能加载JS&#x2F;JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换&#x2F;加载</li><li>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块</li><li>它本身是一个函数，接受源文件作为参数，返回转换的结果</li><li>loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。</li><li>配置文件(默认)</li><li>webpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象</li><li>插件</li><li>插件件可以完成一些loader不能完成的功能。</li><li>插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。</li><li>CleanWebpackPlugin: 自动清除指定文件夹资源</li><li>HtmlWebpackPlugin: 自动生成HTML文件并</li><li>UglifyJSPlugin: 压缩js文件</li></ul><h3 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h3><ul><li><a href="http://webpack.github.io/">webpack官网</a></li><li><a href="https://webpack.js.org/">webpack文档(英文)</a></li><li><a href="https://www.webpackjs.com/">webpack文档(中文)</a></li></ul><h3 id="开启项目"><a href="#开启项目" class="headerlink" title="开启项目"></a>开启项目</h3><ul><li>初始化项目：</li><li>生成package.json文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webpack_test"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装webpack</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> webpack <span class="token parameter variable">-g</span> //全局安装<span class="token function">npm</span> <span class="token function">install</span> webpack --save-dev //局部安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编译打包应用"><a href="#编译打包应用" class="headerlink" title="编译打包应用"></a>编译打包应用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建入口src/js/entry.js</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this is enitry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建主页面 dist/index.html</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//编译js</span>webpack src<span class="token operator">/</span>js<span class="token operator">/</span>entry<span class="token punctuation">.</span>js dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js<span class="token comment">//查看页面效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加js-json文件"><a href="#添加js-json文件" class="headerlink" title="添加js&#x2F;json文件"></a>添加js&#x2F;json文件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建js: src/js/math.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建json文件 src/json/data.json</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token string-property property">"age"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token comment">//更新入口js : entry.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>cube<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./math'</span><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">'../json/data.json'</span><span class="token comment">//注意data会自动被转换为原生的js对象或者数组</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this is enitry&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">cube</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token comment">//编译js</span>webpack src<span class="token operator">/</span>js<span class="token operator">/</span>entry<span class="token punctuation">.</span>js dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js<span class="token comment">//查看页面效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用webpack配置文件"><a href="#使用webpack配置文件" class="headerlink" title="使用webpack配置文件"></a>使用webpack配置文件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//path内置的模块，用来设置路径。</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/js/entry.js'</span><span class="token punctuation">,</span>   <span class="token comment">// 入口文件</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                     <span class="token comment">// 输出配置</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      <span class="token comment">// 输出文件名</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>   <span class="token comment">//输出文件路径配置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//配置npm命令: package.json</span><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//打包应用</span>npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包css和图片文件"><a href="#打包css和图片文件" class="headerlink" title="打包css和图片文件"></a>打包css和图片文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装样式的loader</span><span class="token function">npm</span> <span class="token function">install</span> css-loader style-loader --save-dev<span class="token function">npm</span> <span class="token function">install</span> file-loader url-loader --save-dev<span class="token comment">#补充：url-loader是对象file-loader的上层封装，使用时需配合file-loader使用。</span><span class="token comment">#配置loader</span>module: <span class="token punctuation">&#123;</span>  rules: <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test: /<span class="token punctuation">\</span>.css$/,      use: <span class="token punctuation">[</span>        <span class="token string">'style-loader'</span>,        <span class="token string">'css-loader'</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      test: /<span class="token punctuation">\</span>.<span class="token punctuation">(</span>png<span class="token operator">|</span>jpg<span class="token operator">|</span>gif<span class="token punctuation">)</span>$/,      use: <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          loader: <span class="token string">'url-loader'</span>,          options: <span class="token punctuation">&#123;</span>            limit: <span class="token number">8192</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 添加2张图片，小图img/logo.png小于8kb，大图img/big.jpg大于8kb</span><span class="token comment"># 创建样式文件src/css/test.css</span>body <span class="token punctuation">&#123;</span>  background: url<span class="token punctuation">(</span><span class="token string">'../img/logo.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment"># 更新入口js entry.js</span><span class="token function">import</span> <span class="token string">'../css/test.css'</span><span class="token comment">#添加css样式</span> <span class="token comment">#box1&#123;</span>  width: 300px<span class="token punctuation">;</span>  height: 300px<span class="token punctuation">;</span>  background-image: url<span class="token punctuation">(</span><span class="token string">"../image/logo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#box2&#123;</span>  width: 300px<span class="token punctuation">;</span>  height: 300px<span class="token punctuation">;</span>  background-image: url<span class="token punctuation">(</span><span class="token string">"../image/big.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#index.html添加元素</span><span class="token operator">&lt;</span>div <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token comment">#执行打包命令</span><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>发现问题：</p><ul><li>大图无法打包到entry.js文件中，index.html不在生成资源目录下。</li><li>页面加载图片会在所在目录位置查找，导致页面加载图片时候大图路径无法找到</li><li>解决办法：<ul><li>使用publicPath : ‘dist&#x2F;js&#x2F;‘ &#x2F;&#x2F;设置为index.html提供资源的路径,设置完后找所有的资源都会去当前目录下找。</li><li>将index.html放在dist&#x2F;js&#x2F;也可以解决。</li></ul></li></ul></li></ul><h3 id="自动编译打包"><a href="#自动编译打包" class="headerlink" title="自动编译打包"></a>自动编译打包</h3><ul><li><p>利用webpack开发服务器工具: webpack-dev-server</p></li><li><p>下载</p></li><li><p>npm install –save-dev webpack-dev-server</p></li><li><p>webpack配置<br>devServer: {<br>contentBase: ‘.&#x2F;dist’<br>},</p></li><li><p>package配置</p></li><li><p>“start”: “webpack-dev-server –open”</p></li><li><p>编译打包应用并运行</p></li><li><p>npm start</p></li></ul><h3 id="使用webpack插件"><a href="#使用webpack插件" class="headerlink" title="使用webpack插件"></a>使用webpack插件</h3><ul><li><p>常用的插件</p><ul><li>使用html-webpack-plugin根据模板html生成引入script的页面</li><li>使用clean-webpack-plugin清除dist文件夹</li><li>使用uglifyjs-webpack-plugin压缩打包的js文件</li></ul></li><li><p>下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev  html-webpack-plugin clean-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>webpack配置</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自动生成html文件的插件</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清除之前打包的文件   </span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建页面: index.html</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>webpack test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--打包文件将自动通过script标签注入到此处--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打包运行项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm总结</title>
      <link href="/tools/npm-zong-jie/"/>
      <url>/tools/npm-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 淘宝之前的镜像地址 </span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># 淘宝最新镜像地址</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span class="token comment"># 查看镜像地址</span><span class="token function">npm</span> config get registry<span class="token comment"># npm官方镜像地址</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024070416541101.png" alt="2024070416541101"></p><h2 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h2><p>基础命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">(</span>with no args, <span class="token keyword">in</span> package <span class="token function">dir</span><span class="token punctuation">)</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version range<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>tarball file<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>tarball url<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>alias: <span class="token function">npm</span> icommon options: <span class="token punctuation">[</span>-S<span class="token operator">|</span>--save<span class="token operator">|</span>-D<span class="token operator">|</span>--save-dev<span class="token operator">|</span>-O<span class="token operator">|</span>--save-optional<span class="token punctuation">]</span> <span class="token punctuation">[</span>-E<span class="token operator">|</span>--save-exact<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dry-run<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装gulp最新版本</span><span class="token function">npm</span> <span class="token function">install</span> grunt 或 <span class="token function">npm</span> i grunt<span class="token comment"># 安装gulp指定版本</span><span class="token function">npm</span> <span class="token function">install</span> grunt@1.6.1<span class="token comment">#-S, --save 安装包信息将加入到dependencies（生产阶段的依赖）</span><span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">--save</span> 或 <span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">-S</span><span class="token comment">#package.json 文件的 dependencies 字段：</span><span class="token comment">#"dependencies": &#123;</span><span class="token comment">#    "grunt": "^1.6.1"</span><span class="token comment">#&#125;</span><span class="token comment">#-D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</span><span class="token function">npm</span> <span class="token function">install</span> grunt --save-dev 或 <span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">-D</span><span class="token comment">#package.json 文件的 devDependencies字段：</span><span class="token comment">#"devDependencies": &#123;</span><span class="token comment">#    "grunt": "^1.6.1"</span><span class="token comment">#&#125;</span><span class="token comment">#-O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</span><span class="token function">npm</span> <span class="token function">install</span> grunt --save-optional 或 <span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">-O</span><span class="token comment">#package.json 文件的 optionalDependencies字段：</span><span class="token comment">#"optionalDependencies字段：": &#123;</span><span class="token comment">#    "grunt": "^1.6.1"</span><span class="token comment">#&#125;</span><span class="token comment">#-E, --save-exact 精确安装指定模块版本</span><span class="token function">npm</span> <span class="token function">install</span> grunt --save-exact 或 <span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">-E</span><span class="token comment">#输入命令npm install grunt -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了</span><span class="token comment">#"dependencies": &#123;</span><span class="token comment">#    "grunt": "1.6.1"</span><span class="token comment">#&#125;</span><span class="token comment">#本地安装（local）</span><span class="token function">npm</span> <span class="token function">install</span> grunt<span class="token comment">#全局安装（global）,使用 -g 或 --global</span><span class="token function">npm</span> <span class="token function">install</span> grunt <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基础语法</span><span class="token function">npm</span> uninstall <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>-S<span class="token operator">|</span>--save<span class="token operator">|</span>-D<span class="token operator">|</span>--save-dev<span class="token operator">|</span>-O<span class="token operator">|</span>--save-optional<span class="token punctuation">]</span>aliases: remove, rm, r, un, unlink<span class="token comment">#如卸载开发版本的模块</span><span class="token function">npm</span> uninstall grunt --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基础语法</span><span class="token function">npm</span> update <span class="token punctuation">[</span>-g<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token function">npm</span> outdated 检查模块是否已经过时<span class="token comment">#基础语法</span><span class="token function">npm</span> outdated <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>npm ls 查看安装的模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基础语法</span><span class="token function">npm</span> <span class="token function">ls</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>aliases: list, la, ll<span class="token comment">#查看全局安装的模块及依赖 </span><span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>npm init 在项目中引导创建一个package.json文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。</span><span class="token function">npm</span> init <span class="token punctuation">[</span>-f<span class="token operator">|</span>--force<span class="token operator">|</span>-y<span class="token operator">|</span>--yes<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>npm help 查看某条命令的详细帮助</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基础语法</span><span class="token function">npm</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>term<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>terms<span class="token punctuation">..</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token comment">#例如输入npm help install，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件/nodejs/node_modules/npm/html/doc/cli/npm-install.html</span><span class="token function">npm</span> <span class="token builtin class-name">help</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>npm root 查看包的安装路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输出 node_modules的路径</span><span class="token function">npm</span> root <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/2024070914081101.png" alt="2024070914081101"></p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>npm config 管理npm的配置路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基础语法</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span><span class="token function">npm</span> config get <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token function">npm</span> config delete <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token function">npm</span> config list<span class="token function">npm</span> config edit<span class="token function">npm</span> get <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token function">npm</span> <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span><span class="token comment"># 临时配置，如安装淘宝镜像</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>npm cache 管理模块的缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基础语法</span><span class="token function">npm</span> cache <span class="token function">add</span> <span class="token operator">&lt;</span>tarball file<span class="token operator">></span><span class="token function">npm</span> cache <span class="token function">add</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">npm</span> cache <span class="token function">add</span> <span class="token operator">&lt;</span>tarball url<span class="token operator">></span><span class="token function">npm</span> cache <span class="token function">add</span> <span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token function">npm</span> cache <span class="token function">ls</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span><span class="token function">npm</span> cache clean <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token comment">#清除npm本地缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/xiaotaiyang/p/7093923.html">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具-Gulp</title>
      <link href="/js/zi-dong-hua-gou-jian-gong-ju-gulp/"/>
      <url>/js/zi-dong-hua-gou-jian-gong-ju-gulp/</url>
      
        <content type="html"><![CDATA[<h2 id="Glup"><a href="#Glup" class="headerlink" title="Glup"></a>Glup</h2><p><a href="http://www.gulpjs.com.cn/">中文主页</a></p><p>gulp是与grunt功能类似的<strong>前端项目构建</strong>工具, 也是基于Nodejs的自动<strong>任务运行器</strong></p><ul><li>能自动化地完成 javascript&#x2F;coffee&#x2F;sass&#x2F;less&#x2F;html&#x2F;image&#x2F;css 等文件的合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务</li><li>gulp更高效(异步多任务), 更易于使用, 插件高质量</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="项目目录简介"><a href="#项目目录简介" class="headerlink" title="项目目录简介"></a>项目目录简介</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">|- dist|- src  |- js  |- css  |- less|- index.html|- gulpfile.js-----gulp配置文件|- package.json  &#123;    "name": "gulp_sample",    "version": "1.0.0"  &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="glup环境"><a href="#glup环境" class="headerlink" title="glup环境"></a>glup环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装gulp</span><span class="token function">npm</span> <span class="token function">install</span> gulp <span class="token parameter variable">-g</span><span class="token comment"># 局部安装gulp</span><span class="token function">npm</span> <span class="token function">install</span> gulp --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置gulpfile-js"><a href="#配置gulpfile-js" class="headerlink" title="配置gulpfile.js"></a>配置gulpfile.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*var gulp =require('gulp');//注册任务gulp.task('taskName',function()&#123;  console.log('execute');&#125;);//注册默认任务gulp.task('default',function()&#123;&#125;);*/</span><span class="token comment">//新版写法</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> series<span class="token punctuation">,</span> parallel<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">combin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'excute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//合并js</span>    <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'test.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncAwaitTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'some result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span> asyncAwaitTask<span class="token punctuation">,</span>combin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令gulp合并js</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>gulp-concat : 合并文件(js&#x2F;css)</li><li>gulp-uglify : 压缩js文件</li><li>gulp-rename : 文件重命名</li><li>gulp-less : 编译less</li><li>gulp-clean-css : 压缩css</li><li>gulp-livereload : 实时自动编译刷新</li></ul><h4 id="合并压缩文件"><a href="#合并压缩文件" class="headerlink" title="合并压缩文件"></a>合并压缩文件</h4><p>安装插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp-concat gulp-uglify gulp-rename --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src&#x2F;js&#x2F;test1.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src&#x2F;js&#x2F;test2.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并压缩</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> parallel<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rename <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">combinPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'test.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">suffix</span><span class="token operator">:</span><span class="token string">'.min'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//重命名  </span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//压缩</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span> combinPress<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul><li>gulp.src(filePath&#x2F;pathArr) :<ul><li>指向指定路径的所有文件, 返回文件流对象</li><li>用于读取文件</li></ul></li><li>gulp.dest(dirPath&#x2F;pathArr)<ul><li>指向指定的所有文件夹</li><li>用于向文件夹中输出文件</li></ul></li><li>gulp.task(name, [deps], fn)<ul><li>定义一个任务</li></ul></li><li>gulp.watch()<ul><li>监视文件的变化</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具-Grunt</title>
      <link href="/js/zi-dong-hua-gou-jian-gong-ju-grunt/"/>
      <url>/js/zi-dong-hua-gou-jian-gong-ju-grunt/</url>
      
        <content type="html"><![CDATA[<h2 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h2><p><a href="http://www.gruntjs.net/">中文主页</a></p><p>grunt 是一套前端<strong>自动化构建</strong>工具，一个基于nodeJs的命令行工具,它是一个<strong>任务运行器</strong>, 配合其丰富强大的**插件</p><p>常用功能</p><ol><li><strong>合并文件</strong>(js&#x2F;css)</li><li><strong>压缩文件</strong>(js&#x2F;css)</li><li><strong>语法检查</strong>(js)</li><li><strong>less&#x2F;sass预编译处理</strong></li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="项目目录简介"><a href="#项目目录简介" class="headerlink" title="项目目录简介"></a>项目目录简介</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">|- build----------构建生成的文件所在的文件夹|- src------------源码文件夹       |- js---------------js源文件夹    |- css--------------css源文件夹|- index.html-----页面文件|- Gruntfile.js---grunt配置文件(注意首字母大写)|- package.json---项目包配置文件    &#123;      "name": "grunt_sample",      "version": "1.0.0"       &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装grunt环境"><a href="#安装grunt环境" class="headerlink" title="安装grunt环境"></a>安装grunt环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> grunt-cli <span class="token function">npm</span> <span class="token function">install</span> grunt --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置文件Gruntfile-js"><a href="#配置文件Gruntfile-js" class="headerlink" title="配置文件Gruntfile.js"></a>配置文件Gruntfile.js</h4><p>该配置文件本质就是一个node函数类型模块</p><p>配置文件编码步骤</p><ol><li>初始化插件配置</li><li>加载插件任务</li><li>注册构建任务</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">module.exports &#x3D; function(grunt)&#123;  &#x2F;&#x2F; 1. 初始化插件配置  grunt.initConfig(&#123;      &#x2F;&#x2F;主要编码处  &#125;);  &#x2F;&#x2F; 2. 加载插件任务  &#x2F;&#x2F; grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);  &#x2F;&#x2F; 3. 注册构建任务  grunt.registerTask(&#39;default&#39;, []);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令: grunt &#x2F;&#x2F;提示成功, 但没有任何效果(还没有使用插件定义任务)</p><p>注意：提示 Warning: Task “default” not found则是没有Gruntfile.js文件</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p><a href="http://www.gruntjs.net/plugins">grunt官网的插件</a></p><h3 id="插件分类"><a href="#插件分类" class="headerlink" title="插件分类"></a>插件分类</h3><h4 id="grunt团队贡献插件"><a href="#grunt团队贡献插件" class="headerlink" title="grunt团队贡献插件"></a>grunt团队贡献插件</h4><p>插件名大都以contrib-开头</p><p>常用插件</p><ul><li>grunt-contrib-clean——清除文件(打包处理生成的)</li><li>grunt-contrib-concat——合并多个文件的代码到一个文件中</li><li>grunt-contrib-uglify——压缩js文件</li><li>grunt-contrib-jshint——javascript语法错误检查；</li><li>grunt-contrib-cssmin——压缩&#x2F;合并css文件</li><li>grunt-contrib-htmlmin——压缩html文件</li><li>grunt-contrib-imagemin——压缩图片文件(无损)</li><li>grunt-contrib-copy——复制文件、文件夹</li><li>grunt-contrib-requirejs——合并压缩requirejs管理的所有js模块文件</li><li>grunt-contrib-watch——实时监控文件变化、调用相应的任务重新执行</li></ul><h4 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h4><p>大都不以contrib-开头</p><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><h4 id="合并js"><a href="#合并js" class="headerlink" title="合并js"></a>合并js</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> grunt-contrib-concat --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src&#x2F;js&#x2F;test1.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src&#x2F;js&#x2F;test2.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置Gruntfile-js"><a href="#配置Gruntfile-js" class="headerlink" title="配置Gruntfile.js"></a>配置Gruntfile.js</h5><ul><li>配置任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">concat: <span class="token punctuation">&#123;</span>  options: <span class="token punctuation">&#123;</span> //可选项配置    separator: <span class="token string">';'</span>   //使用<span class="token punctuation">;</span>连接合并  <span class="token punctuation">&#125;</span>,  build: <span class="token punctuation">&#123;</span> //此名称任意    src:  <span class="token punctuation">[</span><span class="token string">"src/js/*.js"</span><span class="token punctuation">]</span>,  //合并哪些js文件    dest: <span class="token string">"build/js/built.js"</span> //输出的js文件  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.loadNpmTasks<span class="token punctuation">(</span><span class="token string">'grunt-contrib-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注册任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.registerTask<span class="token punctuation">(</span><span class="token string">'default'</span>, <span class="token punctuation">[</span><span class="token string">'concat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt   //会在build下生成一个built.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="压缩js"><a href="#压缩js" class="headerlink" title="压缩js"></a>压缩js</h4><h5 id="安装插件uglify"><a href="#安装插件uglify" class="headerlink" title="安装插件uglify"></a>安装插件uglify</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> grunt-contrib-uglify --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置-Gruntfile-js"><a href="#配置-Gruntfile-js" class="headerlink" title="配置 Gruntfile.js"></a>配置 Gruntfile.js</h5><ul><li>配置任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg <span class="token builtin class-name">:</span> grunt.file.readJSON<span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span>,uglify <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>  options: <span class="token punctuation">&#123;</span>  //不是必须的    banner: <span class="token string">'/*! &lt;%= pkg.name %> - v&lt;%= pkg.version %> - '</span> +    <span class="token string">'&lt;%= grunt.template.today("yyyy-mm-dd") %> */'</span>  <span class="token punctuation">&#125;</span>,  build: <span class="token punctuation">&#123;</span>    files: <span class="token punctuation">&#123;</span>      <span class="token string">'build/js/built-&lt;%=pkg.name%>-&lt;%=pkg.version%>.min.js'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'build/js/built.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.loadNpmTasks<span class="token punctuation">(</span><span class="token string">'grunt-contrib-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注册任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.registerTask<span class="token punctuation">(</span><span class="token string">'default'</span>, <span class="token punctuation">[</span><span class="token string">'concat'</span>, <span class="token string">'uglify'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt   //会在build下生成一个built.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h4><h5 id="安装插件jshint"><a href="#安装插件jshint" class="headerlink" title="安装插件jshint"></a>安装插件jshint</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> grunt-contrib-jshint --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编码: .jshintrc</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"curly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eqeqeq"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eqnull"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"expr"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"immed"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"newcap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"noempty"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"noarg"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"devel"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"boss"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//不能使用未定义的变量,在正式配置文件不能留注释</span>  <span class="token property">"undef"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//语句后面必须有分号</span>  <span class="token property">"asi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//预定义不检查的全局变量</span>  <span class="token property">"predef"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"define"</span><span class="token punctuation">,</span> <span class="token string">"BMap"</span><span class="token punctuation">,</span> <span class="token string">"angular"</span><span class="token punctuation">,</span> <span class="token string">"BMAP_STATUS_SUCCESS"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src&#x2F;js&#x2F;test1.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> num3    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置-Gruntfile-js-1"><a href="#配置-Gruntfile-js-1" class="headerlink" title="配置  Gruntfile.js"></a>配置  Gruntfile.js</h5><ul><li>配置任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jshint <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>  options: <span class="token punctuation">&#123;</span>    jshintrc <span class="token builtin class-name">:</span> <span class="token string">'.jshintrc'</span> //指定配置文件  <span class="token punctuation">&#125;</span>,  build <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'Gruntfile.js'</span>, <span class="token string">'src/js/*.js'</span><span class="token punctuation">]</span> //指定检查的文件<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.loadNpmTasks<span class="token punctuation">(</span><span class="token string">'grunt-contrib-jshint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注册任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.registerTask<span class="token punctuation">(</span><span class="token string">'default'</span>, <span class="token punctuation">[</span><span class="token string">'concat'</span>, <span class="token string">'uglify'</span>, <span class="token string">'jshint'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt   //提示变量未定义和语句后未加分号 --<span class="token operator">></span>修改后重新编译<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用cssmin"><a href="#使用cssmin" class="headerlink" title="使用cssmin"></a>使用cssmin</h4><h5 id="安装插件cssmin"><a href="#安装插件cssmin" class="headerlink" title="安装插件cssmin"></a>安装插件cssmin</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> grunt-contrib-cssmin --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编码: src&#x2F;css&#x2F;test1.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src&#x2F;css&#x2F;test2.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>build/css/output.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="配置-Gruntfile-js-2"><a href="#配置-Gruntfile-js-2" class="headerlink" title="配置   Gruntfile.js"></a>配置   Gruntfile.js</h5><ul><li>配置任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cssmin:<span class="token punctuation">&#123;</span>  options: <span class="token punctuation">&#123;</span>    shorthandCompacting: false,    roundingPrecision: <span class="token parameter variable">-1</span>  <span class="token punctuation">&#125;</span>,  build: <span class="token punctuation">&#123;</span>    files: <span class="token punctuation">&#123;</span>        <span class="token string">'build/css/output.min.css'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.loadNpmTasks<span class="token punctuation">(</span><span class="token string">'grunt-contrib-cssmin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注册任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.registerTask<span class="token punctuation">(</span><span class="token string">'default'</span>, <span class="token punctuation">[</span><span class="token string">'concat'</span>, <span class="token string">'uglify'</span>, <span class="token string">'jshint'</span>, <span class="token string">'cssmin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt    //在build/css/下生成output.min.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用watch"><a href="#使用watch" class="headerlink" title="使用watch"></a>使用watch</h4><h5 id="安装插件watch"><a href="#安装插件watch" class="headerlink" title="安装插件watch"></a>安装插件watch</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> grunt-contrib-watch --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置-Gruntfile-js-3"><a href="#配置-Gruntfile-js-3" class="headerlink" title="配置:Gruntfile.js"></a>配置:Gruntfile.js</h5><ul><li>配置任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">watch</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>  scripts <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    files <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'src/js/*.js'</span>, <span class="token string">'src/css/*.css'</span><span class="token punctuation">]</span>,    tasks <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'concat'</span>, <span class="token string">'jshint'</span>, <span class="token string">'uglify'</span>, <span class="token string">'cssmin'</span><span class="token punctuation">]</span>,    options <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>spawn <span class="token builtin class-name">:</span> false<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt.loadNpmTasks<span class="token punctuation">(</span><span class="token string">'grunt-contrib-watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注册任务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注册一个默认任务和一个自定义任务，正式环境执行gurnt，开发的时候执行grunt myWatch</span><span class="token comment">#执行myWatch任务是会先执行default任务</span>grunt.registerTask<span class="token punctuation">(</span><span class="token string">'default'</span>, <span class="token punctuation">[</span><span class="token string">'concat'</span>, <span class="token string">'uglify'</span>, <span class="token string">'jshint'</span>, <span class="token string">'watch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>grunt.registerTask<span class="token punctuation">(</span><span class="token string">'myWatch'</span>, <span class="token punctuation">[</span><span class="token string">'default'</span>,<span class="token string">'watch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grunt   //控制台提示watch已经开始监听, 修改保存后自动编译处理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS判断中文字符长度</title>
      <link href="/js/js-pan-duan-zhong-wen-zi-fu-chang-du/"/>
      <url>/js/js-pan-duan-zhong-wen-zi-fu-chang-du/</url>
      
        <content type="html"><![CDATA[<p>中文字符算两个字节使用javascript去判断字符串长度</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;把双字节的替换成两个单字节的然后再获得长度 function getByteLength(str) &#123;  if (str &#x3D;&#x3D; null)&#123;    return 0;  &#125;  if (typeof str !&#x3D; &quot;string&quot;)&#123;    str +&#x3D; &quot;&quot;;  &#125;  return str.replace(&#x2F;[^\x00-\xff]&#x2F;g,&quot;01&quot;).length;&#125;function getBlen(str)&#123;    var len &#x3D; 0;    for (var i&#x3D;0; i&lt;str.length; i++) &#123;      if (str.charCodeAt(i)&gt;127 || str.charCodeAt(i)&#x3D;&#x3D;94) &#123;         len +&#x3D; 2;       &#125; else &#123;         len ++;       &#125;     &#125;    return len;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高-STL常用算法</title>
      <link href="/c-c/c-ti-gao-stl-chang-yong-suan-fa/"/>
      <url>/c-c/c-ti-gao-stl-chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="STL-常用算法"><a href="#STL-常用算法" class="headerlink" title="STL- 常用算法"></a>STL- 常用算法</h2><p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="常用遍历算法"><a href="#常用遍历算法" class="headerlink" title="常用遍历算法"></a>常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code> &#x2F;&#x2F;遍历容器</li><li><code>transform</code> &#x2F;&#x2F;搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func); </code></p><p>&#x2F;&#x2F; 遍历算法 遍历容器元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;&#x2F;&#x2F;普通函数void print01(int val) &#123;    cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;&#x2F;&#x2F;函数对象class print02 &#123; public:    void operator()(int val)     &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;&#x2F;&#x2F;for_each算法基本用法void test01() &#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt; 10; i++)     &#123;        v.push_back(i);    &#125;    &#x2F;&#x2F;遍历算法    for_each(v.begin(), v.end(), print01);    cout &lt;&lt; endl;    for_each(v.begin(), v.end(), print02());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>&#x2F;&#x2F;beg1 源容器开始迭代器</p><p>&#x2F;&#x2F;end1 源容器结束迭代器</p><p>&#x2F;&#x2F;beg2 目标容器开始迭代器</p><p>&#x2F;&#x2F;_func 函数或者函数对象</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;vector&gt;#include&lt;algorithm&gt;&#x2F;&#x2F;常用遍历算法  搬运 transformclass TransForm&#123;public:    int operator()(int val)    &#123;        return val;    &#125;&#125;;class MyPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt;v;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v.push_back(i);    &#125;    vector&lt;int&gt;vTarget; &#x2F;&#x2F;目标容器    vTarget.resize(v.size()); &#x2F;&#x2F; 目标容器需要提前开辟空间    transform(v.begin(), v.end(), vTarget.begin(), TransForm());    for_each(vTarget.begin(), vTarget.end(), MyPrint());&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h3 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code> &#x2F;&#x2F;查找元素</li><li><code>find_if</code> &#x2F;&#x2F;按条件查找元素</li><li><code>adjacent_find</code> &#x2F;&#x2F;查找相邻重复元素</li><li><code>binary_search</code> &#x2F;&#x2F;二分查找法</li><li><code>count</code> &#x2F;&#x2F;统计元素个数</li><li><code>count_if</code> &#x2F;&#x2F;按条件统计元素个数</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value); </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;void test01() &#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v.push_back(i + 1);    &#125;    &#x2F;&#x2F;查找容器中是否有 5 这个元素    vector&lt;int&gt;::iterator it &#x3D; find(v.begin(), v.end(), 5);    if (it &#x3D;&#x3D; v.end())     &#123;        cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;    &#125;    else     &#123;        cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;    &#125;&#125;class Person &#123;public:    Person(string name, int age)     &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    &#x2F;&#x2F;重载&#x3D;&#x3D;    bool operator&#x3D;&#x3D;(const Person&amp; p)     &#123;        if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)         &#123;            return true;        &#125;        return false;    &#125;public:    string m_Name;    int m_Age;&#125;;void test02() &#123;    vector&lt;Person&gt; v;    &#x2F;&#x2F;创建数据    Person p1(&quot;aaa&quot;, 10);    Person p2(&quot;bbb&quot;, 20);    Person p3(&quot;ccc&quot;, 30);    Person p4(&quot;ddd&quot;, 40);    v.push_back(p1);    v.push_back(p2);    v.push_back(p3);    v.push_back(p4);    vector&lt;Person&gt;::iterator it &#x3D; find(v.begin(), v.end(), p2);    if (it &#x3D;&#x3D; v.end())     &#123;        cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;    &#125;    else     &#123;        cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred); </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;&#x2F;&#x2F;内置数据类型class GreaterFive&#123;public:    bool operator()(int val)    &#123;        return val &gt; 5;    &#125;&#125;;void test01() &#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v.push_back(i + 1);    &#125;    vector&lt;int&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), GreaterFive());    if (it &#x3D;&#x3D; v.end()) &#123;        cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl;    &#125;&#125;&#x2F;&#x2F;自定义数据类型class Person &#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;public:    string m_Name;    int m_Age;&#125;;class Greater20&#123;public:    bool operator()(Person &amp;p)    &#123;        return p.m_Age &gt; 20;    &#125;&#125;;void test02() &#123;    vector&lt;Person&gt; v;    &#x2F;&#x2F;创建数据    Person p1(&quot;aaa&quot;, 10);    Person p2(&quot;bbb&quot;, 20);    Person p3(&quot;ccc&quot;, 30);    Person p4(&quot;ddd&quot;, 40);    v.push_back(p1);    v.push_back(p2);    v.push_back(p3);    v.push_back(p4);    vector&lt;Person&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), Greater20());    if (it &#x3D;&#x3D; v.end())    &#123;        cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;    &#125;&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end); </code></p><p>&#x2F;&#x2F; 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(1);    v.push_back(2);    v.push_back(5);    v.push_back(2);    v.push_back(4);    v.push_back(4);    v.push_back(3);    &#x2F;&#x2F;查找相邻重复元素    vector&lt;int&gt;::iterator it &#x3D; adjacent_find(v.begin(), v.end());    if (it &#x3D;&#x3D; v.end()) &#123;        cout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value); </code></p><p>&#x2F;&#x2F; 查找指定的元素，查到 返回true 否则false</p><p>&#x2F;&#x2F; 注意: 在<strong>无序序列中不可用</strong></p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123;    vector&lt;int&gt;v;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v.push_back(i);    &#125;    &#x2F;&#x2F;二分查找    bool ret &#x3D; binary_search(v.begin(), v.end(),2);    if (ret)    &#123;        cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value); </code></p><p>&#x2F;&#x2F; 统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 统计的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;&#x2F;&#x2F;内置数据类型void test01()&#123;    vector&lt;int&gt; v;    v.push_back(1);    v.push_back(2);    v.push_back(4);    v.push_back(5);    v.push_back(3);    v.push_back(4);    v.push_back(4);    int num &#x3D; count(v.begin(), v.end(), 4);    cout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;&#x2F;&#x2F;自定义数据类型class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    bool operator&#x3D;&#x3D;(const Person &amp; p)    &#123;        if (this-&gt;m_Age &#x3D;&#x3D; p.m_Age)        &#123;            return true;        &#125;        else        &#123;            return false;        &#125;    &#125;    string m_Name;    int m_Age;&#125;;void test02()&#123;    vector&lt;Person&gt; v;    Person p1(&quot;刘备&quot;, 35);    Person p2(&quot;关羽&quot;, 35);    Person p3(&quot;张飞&quot;, 35);    Person p4(&quot;赵云&quot;, 30);    Person p5(&quot;曹操&quot;, 25);    v.push_back(p1);    v.push_back(p2);    v.push_back(p3);    v.push_back(p4);    v.push_back(p5);    Person p(&quot;诸葛亮&quot;,35);    int num &#x3D; count(v.begin(), v.end(), p);    cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred); </code></p><p>&#x2F;&#x2F; 按条件统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;class Greater4&#123;public:    bool operator()(int val)    &#123;        return val &gt;&#x3D; 4;    &#125;&#125;;&#x2F;&#x2F;内置数据类型void test01()&#123;    vector&lt;int&gt; v;    v.push_back(1);    v.push_back(2);    v.push_back(4);    v.push_back(5);    v.push_back(3);    v.push_back(4);    v.push_back(4);    int num &#x3D; count_if(v.begin(), v.end(), Greater4());    cout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;&#x2F;&#x2F;自定义数据类型class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    string m_Name;    int m_Age;&#125;;class AgeLess35&#123;public:    bool operator()(const Person &amp;p)    &#123;        return p.m_Age &lt; 35;    &#125;&#125;;void test02()&#123;    vector&lt;Person&gt; v;    Person p1(&quot;刘备&quot;, 35);    Person p2(&quot;关羽&quot;, 35);    Person p3(&quot;张飞&quot;, 35);    Person p4(&quot;赵云&quot;, 30);    Person p5(&quot;曹操&quot;, 25);    v.push_back(p1);    v.push_back(p2);    v.push_back(p3);    v.push_back(p4);    v.push_back(p5);    int num &#x3D; count_if(v.begin(), v.end(), AgeLess35());    cout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 按值统计用count，按条件统计用count_if</p><h3 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code> &#x2F;&#x2F;对容器内元素进行排序</li><li><code>random_shuffle</code> &#x2F;&#x2F;洗牌 指定范围内的元素随机调整次序</li><li><code>merge </code> &#x2F;&#x2F; 容器元素合并，并存储到另一容器中</li><li><code>reverse</code> &#x2F;&#x2F; 反转指定范围的元素</li></ul><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred); </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;void myPrint(int val)&#123;    cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;void test01() &#123;    vector&lt;int&gt; v;    v.push_back(10);    v.push_back(30);    v.push_back(50);    v.push_back(20);    v.push_back(40);    &#x2F;&#x2F;sort默认从小到大排序    sort(v.begin(), v.end());    for_each(v.begin(), v.end(), myPrint);    cout &lt;&lt; endl;    &#x2F;&#x2F;从大到小排序    sort(v.begin(), v.end(), greater&lt;int&gt;());    for_each(v.begin(), v.end(), myPrint);    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌 指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end); </code></p><p>&#x2F;&#x2F; 指定范围内的元素随机调整次序</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;ctime&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    srand((unsigned int)time(NULL));    vector&lt;int&gt; v;    for(int i &#x3D; 0 ; i &lt; 10;i++)    &#123;        v.push_back(i);    &#125;    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;    &#x2F;&#x2F;打乱顺序    random_shuffle(v.begin(), v.end());    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); </code></p><p>&#x2F;&#x2F; 容器元素合并，并存储到另一容器中</p><p>&#x2F;&#x2F; 注意: 两个容器必须是<strong>有序的</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i &#x3D; 0; i &lt; 10 ; i++)     &#123;        v1.push_back(i);        v2.push_back(i + 1);    &#125;    vector&lt;int&gt; vtarget;    &#x2F;&#x2F;目标容器需要提前开辟空间    vtarget.resize(v1.size() + v2.size());    &#x2F;&#x2F;合并  需要两个有序序列    merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());    for_each(vtarget.begin(), vtarget.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> merge合并的两个容器必须的有序序列</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end); </code></p><p>&#x2F;&#x2F; 反转指定范围的元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(10);    v.push_back(30);    v.push_back(50);    v.push_back(20);    v.push_back(40);    cout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl;    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;    cout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl;    reverse(v.begin(), v.end());    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> reverse反转区间内元素，面试题可能涉及到</p><h3 id="常用拷贝和替换算法"><a href="#常用拷贝和替换算法" class="headerlink" title="常用拷贝和替换算法"></a>常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code> &#x2F;&#x2F; 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code> &#x2F;&#x2F; 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code> &#x2F;&#x2F; 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code> &#x2F;&#x2F; 互换两个容器的元素</li></ul><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest); </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v1.push_back(i + 1);    &#125;    vector&lt;int&gt; v2;    v2.resize(v1.size());    copy(v1.begin(), v1.end(), v2.begin());    for_each(v2.begin(), v2.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 利用copy算法在拷贝时，目标容器记得提前开辟空间</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue); </code></p><p>&#x2F;&#x2F; 将区间内旧元素 替换成 新元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; oldvalue 旧元素</p><p>&#x2F;&#x2F; newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(20);    v.push_back(30);    v.push_back(20);    v.push_back(40);    v.push_back(50);    v.push_back(10);    v.push_back(20);    cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;    &#x2F;&#x2F;将容器中的20 替换成 2000    cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;    replace(v.begin(), v.end(), 20,2000);    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> replace会替换区间内满足条件的元素</p><h4 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h4><p><strong>功能描述:</strong></p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue); </code></p><p>&#x2F;&#x2F; 按条件替换元素，满足条件的替换成指定元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _pred 谓词</p><p>&#x2F;&#x2F; newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;class ReplaceGreater30&#123;public:    bool operator()(int val)    &#123;        return val &gt;&#x3D; 30;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(20);    v.push_back(30);    v.push_back(20);    v.push_back(40);    v.push_back(50);    v.push_back(10);    v.push_back(20);    cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;    &#x2F;&#x2F;将容器中大于等于的30 替换成 3000    cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;    replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2); </code></p><p>&#x2F;&#x2F; 互换两个容器的元素</p><p>&#x2F;&#x2F; c1容器1</p><p>&#x2F;&#x2F; c2容器2</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v1.push_back(i);        v2.push_back(i+100);    &#125;    cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;    for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt; endl;    for_each(v2.begin(), v2.end(), myPrint());    cout &lt;&lt; endl;    cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;    swap(v1, v2);    for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt; endl;    for_each(v2.begin(), v2.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> swap交换容器时，注意交换的容器要同种类型</p><h3 id="常用算术生成算法"><a href="#常用算术生成算法" class="headerlink" title="常用算术生成算法"></a>常用算术生成算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code> &#x2F;&#x2F; 计算容器元素累计总和</p></li><li><p><code>fill</code> &#x2F;&#x2F; 向容器中添加元素</p></li></ul><h4 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value); </code></p><p>&#x2F;&#x2F; 计算容器元素累计总和</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 起始值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;void test01()&#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt;&#x3D; 100; i++) &#123;        v.push_back(i);    &#125;    int total &#x3D; accumulate(v.begin(), v.end(), 0);    cout &lt;&lt; &quot;total &#x3D; &quot; &lt;&lt; total &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value); </code></p><p>&#x2F;&#x2F; 向容器中填充元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 填充的值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.resize(10);    &#x2F;&#x2F;填充    fill(v.begin(), v.end(), 100);    for_each(v.begin(), v.end(), myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="常用集合算法"><a href="#常用集合算法" class="headerlink" title="常用集合算法"></a>常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code> &#x2F;&#x2F; 求两个容器的交集</p></li><li><p><code>set_union</code> &#x2F;&#x2F; 求两个容器的并集</p></li><li><p><code>set_difference </code> &#x2F;&#x2F; 求两个容器的差集</p></li></ul><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); </code></p><p>&#x2F;&#x2F; 求两个集合的交集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);        v2.push_back(i+5);    &#125;    vector&lt;int&gt; vTarget;    &#x2F;&#x2F;取两个里面较小的值给目标容器开辟空间    vTarget.resize(min(v1.size(), v2.size()));    &#x2F;&#x2F;返回目标容器的最后一个元素的迭代器地址    vector&lt;int&gt;::iterator itEnd &#x3D;         set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());    for_each(vTarget.begin(), itEnd, myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); </code></p><p>&#x2F;&#x2F; 求两个集合的并集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v1.push_back(i);        v2.push_back(i+5);    &#125;    vector&lt;int&gt; vTarget;    &#x2F;&#x2F;取两个容器的和给目标容器开辟空间    vTarget.resize(v1.size() + v2.size());    &#x2F;&#x2F;返回目标容器的最后一个元素的迭代器地址    vector&lt;int&gt;::iterator itEnd &#x3D;         set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());    for_each(vTarget.begin(), itEnd, myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); </code></p><p>&#x2F;&#x2F; 求两个集合的差集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public:    void operator()(int val)    &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i &#x3D; 0; i &lt; 10; i++) &#123;        v1.push_back(i);        v2.push_back(i+5);    &#125;    vector&lt;int&gt; vTarget;    &#x2F;&#x2F;取两个里面较大的值给目标容器开辟空间    vTarget.resize( max(v1.size() , v2.size()));    &#x2F;&#x2F;返回目标容器的最后一个元素的迭代器地址    cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;    vector&lt;int&gt;::iterator itEnd &#x3D;         set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());    for_each(vTarget.begin(), itEnd, myPrint());    cout &lt;&lt; endl;    cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;    itEnd &#x3D; set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());    for_each(vTarget.begin(), itEnd, myPrint());    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高-STL函数对象</title>
      <link href="/c-c/c-ti-gao-stl-han-shu-dui-xiang/"/>
      <url>/c-c/c-ti-gao-stl-han-shu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="STL-函数对象"><a href="#STL-函数对象" class="headerlink" title="STL- 函数对象"></a>STL- 函数对象</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><h4 id="函数对象概念"><a href="#函数对象概念" class="headerlink" title="函数对象概念"></a>函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="函数对象使用"><a href="#函数对象使用" class="headerlink" title="函数对象使用"></a>函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值class MyAdd&#123;public :    int operator()(int v1,int v2)    &#123;        return v1 + v2;    &#125;&#125;;void test01()&#123;    MyAdd myAdd;    cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;&#125;&#x2F;&#x2F;2、函数对象可以有自己的状态class MyPrint&#123;public:    MyPrint()    &#123;        count &#x3D; 0;    &#125;    void operator()(string test)    &#123;        cout &lt;&lt; test &lt;&lt; endl;        count++; &#x2F;&#x2F;统计使用次数    &#125;    int count; &#x2F;&#x2F;内部自己的状态&#125;;void test02()&#123;    MyPrint myPrint;    myPrint(&quot;hello world&quot;);    myPrint(&quot;hello world&quot;);    myPrint(&quot;hello world&quot;);    cout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;&#125;&#x2F;&#x2F;3、函数对象可以作为参数传递void doPrint(MyPrint &amp;mp , string test)&#123;    mp(test);&#125;void test03()&#123;    MyPrint myPrint;    doPrint(myPrint, &quot;Hello C++&quot;);&#125;int main() &#123;    &#x2F;&#x2F;test01();    &#x2F;&#x2F;test02();    test03();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><h4 id="谓词概念"><a href="#谓词概念" class="headerlink" title="谓词概念"></a>谓词概念</h4><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;&#x2F;&#x2F;1.一元谓词struct GreaterFive&#123;    bool operator()(int val) &#123;        return val &gt; 5;    &#125;&#125;;void test01() &#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v.push_back(i);    &#125;    vector&lt;int&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), GreaterFive());    if (it &#x3D;&#x3D; v.end()) &#123;        cout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;&#x2F;&#x2F;二元谓词class MyCompare&#123;public:    bool operator()(int num1, int num2)    &#123;        return num1 &gt; num2;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(10);    v.push_back(40);    v.push_back(20);    v.push_back(30);    v.push_back(50);    &#x2F;&#x2F;默认从小到大    sort(v.begin(), v.end());    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;    &#x2F;&#x2F;使用函数对象改变算法策略，排序从大到小    sort(v.begin(), v.end(), MyCompare());    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><h4 id="内建函数对象意义"><a href="#内建函数对象意义" class="headerlink" title="内建函数对象意义"></a>内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="算术仿函数"><a href="#算术仿函数" class="headerlink" title="算术仿函数"></a>算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> &#x2F;&#x2F;加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> &#x2F;&#x2F;减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> &#x2F;&#x2F;乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> &#x2F;&#x2F;除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> &#x2F;&#x2F;取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> &#x2F;&#x2F;取反仿函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;&#x2F;&#x2F;negatevoid test01()&#123;    negate&lt;int&gt; n;    cout &lt;&lt; n(50) &lt;&lt; endl;&#125;&#x2F;&#x2F;plusvoid test02()&#123;    plus&lt;int&gt; p;    cout &lt;&lt; p(10, 20) &lt;&lt; endl;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> &#x2F;&#x2F;等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> &#x2F;&#x2F;不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> &#x2F;&#x2F;大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> &#x2F;&#x2F;大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> &#x2F;&#x2F;小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> &#x2F;&#x2F;小于等于</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class MyCompare&#123;public:    bool operator()(int v1,int v2)    &#123;        return v1 &gt; v2;    &#125;&#125;;void test01()&#123;    vector&lt;int&gt; v;    v.push_back(10);    v.push_back(30);    v.push_back(50);    v.push_back(40);    v.push_back(20);    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    &#x2F;&#x2F;自己实现仿函数    &#x2F;&#x2F;sort(v.begin(), v.end(), MyCompare());    &#x2F;&#x2F;STL内建仿函数  大于仿函数    sort(v.begin(), v.end(), greater&lt;int&gt;());    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> &#x2F;&#x2F;逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> &#x2F;&#x2F;逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> &#x2F;&#x2F;逻辑非</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;void test01()&#123;    vector&lt;bool&gt; v;    v.push_back(true);    v.push_back(false);    v.push_back(true);    v.push_back(false);    for (vector&lt;bool&gt;::iterator it &#x3D; v.begin();it!&#x3D; v.end();it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    &#x2F;&#x2F;逻辑非  将v容器搬运到v2中，并执行逻辑非运算    vector&lt;bool&gt; v2;    v2.resize(v.size());    transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());    for (vector&lt;bool&gt;::iterator it &#x3D; v2.begin(); it !&#x3D; v2.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：逻辑仿函数实际应用较少，了解即可</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高-STL常用容器</title>
      <link href="/c-c/c-ti-gao-stl-chang-yong-rong-qi/"/>
      <url>/c-c/c-ti-gao-stl-chang-yong-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="STL-常用容器"><a href="#STL-常用容器" class="headerlink" title="STL- 常用容器"></a>STL- 常用容器</h2><h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><h4 id="string基本概念"><a href="#string基本概念" class="headerlink" title="string基本概念"></a>string基本概念</h4><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code> &#x2F;&#x2F;创建一个空的字符串 例如: string str;<br> <code>string(const char* s);</code> &#x2F;&#x2F;使用字符串s初始化</li><li><code>string(const string&amp; str);</code> &#x2F;&#x2F;使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code> &#x2F;&#x2F;使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;string构造void test01()&#123;    string s1; &#x2F;&#x2F;创建空字符串，调用无参构造函数    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; s1 &lt;&lt; endl;    const char* str &#x3D; &quot;hello world&quot;;    string s2(str); &#x2F;&#x2F;把c_string转换成了string    cout &lt;&lt; &quot;str2 &#x3D; &quot; &lt;&lt; s2 &lt;&lt; endl;    string s3(s2); &#x2F;&#x2F;调用拷贝构造函数    cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; s3 &lt;&lt; endl;    string s4(10, &#39;a&#39;);    cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; s3 &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code> &#x2F;&#x2F;char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> &#x2F;&#x2F;字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code> &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code> &#x2F;&#x2F;用n个字符c赋给当前字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;赋值void test01()&#123;    string str1;    str1 &#x3D; &quot;hello world&quot;;    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;    string str2;    str2 &#x3D; str1;    cout &lt;&lt; &quot;str2 &#x3D; &quot; &lt;&lt; str2 &lt;&lt; endl;    string str3;    str3 &#x3D; &#39;a&#39;;    cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;    string str4;    str4.assign(&quot;hello c++&quot;);    cout &lt;&lt; &quot;str4 &#x3D; &quot; &lt;&lt; str4 &lt;&lt; endl;    string str5;    str5.assign(&quot;hello c++&quot;,5);    cout &lt;&lt; &quot;str5 &#x3D; &quot; &lt;&lt; str5 &lt;&lt; endl;    string str6;    str6.assign(str5);    cout &lt;&lt; &quot;str6 &#x3D; &quot; &lt;&lt; str6 &lt;&lt; endl;    string str7;    str7.assign(5, &#39;x&#39;);    cout &lt;&lt; &quot;str7 &#x3D; &quot; &lt;&lt; str7 &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​ string的赋值方式很多，<code>operator=</code> 这种方式是比较实用的</p><h4 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s); </code> &#x2F;&#x2F;把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code> &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>&#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;字符串拼接void test01()&#123;    string str1 &#x3D; &quot;我&quot;;    str1 +&#x3D; &quot;爱玩游戏&quot;;    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;    str1 +&#x3D; &#39;:&#39;;    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;    string str2 &#x3D; &quot;LOL DNF&quot;;    str1 +&#x3D; str2;    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;    string str3 &#x3D; &quot;I&quot;;    str3.append(&quot; love &quot;);    str3.append(&quot;game abcde&quot;, 4);    &#x2F;&#x2F;str3.append(str2);    str3.append(str2, 4, 3); &#x2F;&#x2F; 从下标4位置开始 ，截取3个字符，拼接到字符串末尾    cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code> &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code> &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code> &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code> &#x2F;&#x2F;查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code> &#x2F;&#x2F;查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code> &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code> &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const; </code> &#x2F;&#x2F;查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code> &#x2F;&#x2F;替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code> &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;查找和替换void test01()&#123;    &#x2F;&#x2F;查找    string str1 &#x3D; &quot;abcdefgde&quot;;    int pos &#x3D; str1.find(&quot;de&quot;);    if (pos &#x3D;&#x3D; -1)    &#123;        cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;pos &#x3D; &quot; &lt;&lt; pos &lt;&lt; endl;    &#125;    pos &#x3D; str1.rfind(&quot;de&quot;);    cout &lt;&lt; &quot;pos &#x3D; &quot; &lt;&lt; pos &lt;&lt; endl;&#125;void test02()&#123;    &#x2F;&#x2F;替换    string str1 &#x3D; &quot;abcdefgde&quot;;    str1.replace(1, 3, &quot;1111&quot;);    cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;test01();    &#x2F;&#x2F;test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>&#x3D; 返回 0</p><p>&gt; 返回 1</p><p>&lt; 返回 -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code> &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s) const;</code> &#x2F;&#x2F;与字符串s比较</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;字符串比较void test01()&#123;    string s1 &#x3D; &quot;hello&quot;;    string s2 &#x3D; &quot;aello&quot;;    int ret &#x3D; s1.compare(s2);    if (ret &#x3D;&#x3D; 0) &#123;        cout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl;    &#125;    else if (ret &gt; 0)    &#123;        cout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h4 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code> &#x2F;&#x2F;通过[]方式取字符</li><li><code>char&amp; at(int n); </code> &#x2F;&#x2F;通过at方法获取字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void test01()&#123;    string str &#x3D; &quot;hello world&quot;;    for (int i &#x3D; 0; i &lt; str.size(); i++)    &#123;        cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    for (int i &#x3D; 0; i &lt; str.size(); i++)    &#123;        cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    &#x2F;&#x2F;字符修改    str[0] &#x3D; &#39;x&#39;;    str.at(1) &#x3D; &#39;x&#39;;    cout &lt;&lt; str &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h4 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s); </code> &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code> &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code> &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code> &#x2F;&#x2F;删除从Pos开始的n个字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;字符串插入和删除void test01()&#123;    string str &#x3D; &quot;hello&quot;;    str.insert(1, &quot;111&quot;);    cout &lt;&lt; str &lt;&lt; endl;    str.erase(1, 3);  &#x2F;&#x2F;从1号位置开始3个字符    cout &lt;&lt; str &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 插入和删除的起始下标都是从0开始</p><h4 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;子串void test01()&#123;    string str &#x3D; &quot;abcdefg&quot;;    string subStr &#x3D; str.substr(1, 3);    cout &lt;&lt; &quot;subStr &#x3D; &quot; &lt;&lt; subStr &lt;&lt; endl;    string email &#x3D; &quot;hello@sina.com&quot;;    int pos &#x3D; email.find(&quot;@&quot;);    string username &#x3D; email.substr(0, pos);    cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><h4 id="vector基本概念"><a href="#vector基本概念" class="headerlink" title="vector基本概念"></a>vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src="/images/2024060610031501.jpg?msec=1717382137730" alt="2024060610031501"></p><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code> &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end()); </code> &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123;    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    vector&lt;int&gt; v1; &#x2F;&#x2F;无参构造    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);    &#125;    printVector(v1);    vector&lt;int&gt; v2(v1.begin(), v1.end());    printVector(v2);    vector&lt;int&gt; v3(10, 100);    printVector(v3);    vector&lt;int&gt; v4(v3);    printVector(v4);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>&#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123;    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;赋值操作void test01()&#123;    vector&lt;int&gt; v1; &#x2F;&#x2F;无参构造    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);    &#125;    printVector(v1);    vector&lt;int&gt;v2;    v2 &#x3D; v1;    printVector(v2);    vector&lt;int&gt;v3;    v3.assign(v1.begin(), v1.end());    printVector(v3);    vector&lt;int&gt;v4;    v4.assign(10, 100);    printVector(v4);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： vector赋值方式比较简单，使用operator&#x3D;，或者assign都可以</p><h4 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>capacity();</code> &#x2F;&#x2F;容器的容量</p></li><li><p><code>size();</code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>resize(int num);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123;    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    vector&lt;int&gt; v1;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);    &#125;    printVector(v1);    if (v1.empty())    &#123;        cout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;v1的容量 &#x3D; &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;        cout &lt;&lt; &quot;v1的大小 &#x3D; &quot; &lt;&lt; v1.size() &lt;&lt; endl;    &#125;    &#x2F;&#x2F;resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充    v1.resize(15,10);    printVector(v1);    &#x2F;&#x2F;resize 重新指定大小 ，若指定的更小，超出部分元素被删除    v1.resize(5);    printVector(v1);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>返回容器容量 — capacity</li><li>重新指定大小 — resize</li></ul><h4 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code> &#x2F;&#x2F;尾部插入元素ele</li><li><code>pop_back();</code> &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code> &#x2F;&#x2F;迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>&#x2F;&#x2F;删除迭代器从start到end之间的元素</li><li><code>clear();</code> &#x2F;&#x2F;删除容器中所有元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123;    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;插入和删除void test01()&#123;    vector&lt;int&gt; v1;    &#x2F;&#x2F;尾插    v1.push_back(10);    v1.push_back(20);    v1.push_back(30);    v1.push_back(40);    v1.push_back(50);    printVector(v1);    &#x2F;&#x2F;尾删    v1.pop_back();    printVector(v1);    &#x2F;&#x2F;插入    v1.insert(v1.begin(), 100);    printVector(v1);    v1.insert(v1.begin(), 2, 1000);    printVector(v1);    &#x2F;&#x2F;删除    v1.erase(v1.begin());    printVector(v1);    &#x2F;&#x2F;清空    v1.erase(v1.begin(), v1.end());    v1.clear();    printVector(v1);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>插入 — insert (位置迭代器)</li><li>删除 — erase （位置迭代器）</li><li>清空 — clear</li></ul><h4 id="vector数据存取"><a href="#vector数据存取" class="headerlink" title="vector数据存取"></a>vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[]; </code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front(); </code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01()&#123;    vector&lt;int&gt;v1;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);    &#125;    for (int i &#x3D; 0; i &lt; v1.size(); i++)    &#123;        cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    for (int i &#x3D; 0; i &lt; v1.size(); i++)    &#123;        cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    cout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl;    cout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code> &#x2F;&#x2F; 将vec与本身的元素互换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123;    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    vector&lt;int&gt;v1;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        v1.push_back(i);    &#125;    printVector(v1);    vector&lt;int&gt;v2;    for (int i &#x3D; 10; i &gt; 0; i--)    &#123;        v2.push_back(i);    &#125;    printVector(v2);    &#x2F;&#x2F;互换容器    cout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl;    v1.swap(v2);    printVector(v1);    printVector(v2);&#125;void test02()&#123;    vector&lt;int&gt; v;    for (int i &#x3D; 0; i &lt; 100000; i++) &#123;        v.push_back(i);    &#125;    cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;    cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;    v.resize(3);    cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;    cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;    &#x2F;&#x2F;收缩内存    vector&lt;int&gt;(v).swap(v); &#x2F;&#x2F;匿名对象    cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;    cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01()&#123;    vector&lt;int&gt; v;    &#x2F;&#x2F;预留空间    v.reserve(100000);    int num &#x3D; 0;    int* p &#x3D; NULL;    for (int i &#x3D; 0; i &lt; 100000; i++) &#123;        v.push_back(i);        if (p !&#x3D; &amp;v[0]) &#123;            p &#x3D; &amp;v[0];            num++;        &#125;    &#125;    cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果数据量较大，可以一开始利用reserve预留空间</p><h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><h4 id="deque容器基本概念"><a href="#deque容器基本概念" class="headerlink" title="deque容器基本概念"></a>deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><p><img src="/images/2024060610031502.jpg?msec=1717382137729" alt="2024060610031502"></p><p>deque内部工作原理:</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><p><img src="/images/2024060610031503.jpg?msec=1717382137730" alt="clipimage0021547547896341"></p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h4 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT; &#x2F;&#x2F;默认构造形式</li><li><code>deque(beg, end);</code> &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;deque构造void test01() &#123;    deque&lt;int&gt; d1; &#x2F;&#x2F;无参构造函数    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        d1.push_back(i);    &#125;    printDeque(d1);    deque&lt;int&gt; d2(d1.begin(),d1.end());    printDeque(d2);    deque&lt;int&gt;d3(10,100);    printDeque(d3);    deque&lt;int&gt;d4 &#x3D; d3;    printDeque(d4);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> deque容器和vector容器的构造方式几乎一致，灵活使用即可</p><h4 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code> &#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;赋值操作void test01()&#123;    deque&lt;int&gt; d1;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        d1.push_back(i);    &#125;    printDeque(d1);    deque&lt;int&gt;d2;    d2 &#x3D; d1;    printDeque(d2);    deque&lt;int&gt;d3;    d3.assign(d1.begin(), d1.end());    printDeque(d3);    deque&lt;int&gt;d4;    d4.assign(10, 100);    printDeque(d4);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>deque.size();</code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;大小操作void test01()&#123;    deque&lt;int&gt; d1;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        d1.push_back(i);    &#125;    printDeque(d1);    &#x2F;&#x2F;判断容器是否为空    if (d1.empty()) &#123;        cout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl;        &#x2F;&#x2F;统计大小        cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl;    &#125;    &#x2F;&#x2F;重新指定大小    d1.resize(15, 1);    printDeque(d1);    d1.resize(5);    printDeque(d1);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>重新指定个数 — resize</li></ul><h4 id="deque-插入和删除"><a href="#deque-插入和删除" class="headerlink" title="deque 插入和删除"></a>deque 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code> &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code> &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code> &#x2F;&#x2F;删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code> &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> &#x2F;&#x2F;清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code> &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;两端操作void test01()&#123;    deque&lt;int&gt; d;    &#x2F;&#x2F;尾插    d.push_back(10);    d.push_back(20);    &#x2F;&#x2F;头插    d.push_front(100);    d.push_front(200);    printDeque(d);    &#x2F;&#x2F;尾删    d.pop_back();    &#x2F;&#x2F;头删    d.pop_front();    printDeque(d);&#125;&#x2F;&#x2F;插入void test02()&#123;    deque&lt;int&gt; d;    d.push_back(10);    d.push_back(20);    d.push_front(100);    d.push_front(200);    printDeque(d);    d.insert(d.begin(), 1000);    printDeque(d);    d.insert(d.begin(), 2,10000);    printDeque(d);    deque&lt;int&gt;d2;    d2.push_back(1);    d2.push_back(2);    d2.push_back(3);    d.insert(d.begin(), d2.begin(), d2.end());    printDeque(d);&#125;&#x2F;&#x2F;删除void test03()&#123;    deque&lt;int&gt; d;    d.push_back(10);    d.push_back(20);    d.push_front(100);    d.push_front(200);    printDeque(d);    d.erase(d.begin());    printDeque(d);    d.erase(d.begin(), d.end());    d.clear();    printDeque(d);&#125;int main() &#123;    &#x2F;&#x2F;test01();    &#x2F;&#x2F;test02();    test03();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>头插 — push_front</li><li>头删 — pop_front</li></ul><h4 id="deque-数据存取"><a href="#deque-数据存取" class="headerlink" title="deque 数据存取"></a>deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[]; </code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front(); </code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;数据存取void test01()&#123;    deque&lt;int&gt; d;    d.push_back(10);    d.push_back(20);    d.push_front(100);    d.push_front(200);    for (int i &#x3D; 0; i &lt; d.size(); i++) &#123;        cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    for (int i &#x3D; 0; i &lt; d.size(); i++) &#123;        cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    cout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl;    cout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="deque-排序"><a href="#deque-排序" class="headerlink" title="deque 排序"></a>deque 排序</h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> &#x2F;&#x2F;对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;#include &lt;algorithm&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123;    for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    deque&lt;int&gt; d;    d.push_back(10);    d.push_back(20);    d.push_front(100);    d.push_front(200);    printDeque(d);    sort(d.begin(), d.end());    printDeque(d);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="案例-评委打分"><a href="#案例-评委打分" class="headerlink" title="案例-评委打分"></a>案例-评委打分</h3><h4 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;选手类class Person&#123;public:    Person(string name, int score)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Score &#x3D; score;    &#125;    string m_Name; &#x2F;&#x2F;姓名    int m_Score;  &#x2F;&#x2F;平均分&#125;;void createPerson(vector&lt;Person&gt;&amp;v)&#123;    string nameSeed &#x3D; &quot;ABCDE&quot;;    for (int i &#x3D; 0; i &lt; 5; i++)    &#123;        string name &#x3D; &quot;选手&quot;;        name +&#x3D; nameSeed[i];        int score &#x3D; 0;        Person p(name, score);        &#x2F;&#x2F;将创建的person对象 放入到容器中        v.push_back(p);    &#125;&#125;&#x2F;&#x2F;打分void setScore(vector&lt;Person&gt;&amp;v)&#123;    for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        &#x2F;&#x2F;将评委的分数 放入到deque容器中        deque&lt;int&gt;d;        for (int i &#x3D; 0; i &lt; 10; i++)        &#123;            int score &#x3D; rand() % 41 + 60;  &#x2F;&#x2F; 60 ~ 100            d.push_back(score);        &#125;        &#x2F;&#x2F;cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;        &#x2F;&#x2F;for (deque&lt;int&gt;::iterator dit &#x3D; d.begin(); dit !&#x3D; d.end(); dit++)        &#x2F;&#x2F;&#123;        &#x2F;&#x2F;    cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;        &#x2F;&#x2F;&#125;        &#x2F;&#x2F;cout &lt;&lt; endl;        &#x2F;&#x2F;排序        sort(d.begin(), d.end());        &#x2F;&#x2F;去除最高和最低分        d.pop_back();        d.pop_front();        &#x2F;&#x2F;取平均分        int sum &#x3D; 0;        for (deque&lt;int&gt;::iterator dit &#x3D; d.begin(); dit !&#x3D; d.end(); dit++)        &#123;            sum +&#x3D; *dit; &#x2F;&#x2F;累加每个评委的分数        &#125;        int avg &#x3D; sum &#x2F; d.size();        &#x2F;&#x2F;将平均分 赋值给选手身上        it-&gt;m_Score &#x3D; avg;    &#125;&#125;void showScore(vector&lt;Person&gt;&amp;v)&#123;    for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 平均分： &quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl;    &#125;&#125;int main() &#123;    &#x2F;&#x2F;随机数种子    srand((unsigned int)time(NULL));    &#x2F;&#x2F;1、创建5名选手    vector&lt;Person&gt;v;  &#x2F;&#x2F;存放选手容器    createPerson(v);    &#x2F;&#x2F;测试    &#x2F;&#x2F;for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;2、给5名选手打分    setScore(v);    &#x2F;&#x2F;3、显示最后得分    showScore(v);    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h3><h4 id="stack-基本概念"><a href="#stack-基本概念" class="headerlink" title="stack 基本概念"></a>stack 基本概念</h4><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><p><img src="/images/2024060610031504.jpg?msec=1717382137731" alt="2024060610031504"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为 — <strong>入栈</strong> <code>push</code></p><p>栈中弹出数据称为 — <strong>出栈</strong> <code>pop</code></p><p>生活中的栈：</p><p><img src="/images/2024060610031505.png?msec=1717382137905" alt="2024060610031505"></p><p><img src="/images/2024060610031506.jpg?msec=1717382137731" alt="2024060610031506"></p><h4 id="stack-常用接口"><a href="#stack-常用接口" class="headerlink" title="stack 常用接口"></a>stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code> &#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop();</code> &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top(); </code> &#x2F;&#x2F;返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code> &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;stack&gt;&#x2F;&#x2F;栈容器常用接口void test01()&#123;    &#x2F;&#x2F;创建栈容器 栈容器必须符合先进后出    stack&lt;int&gt; s;    &#x2F;&#x2F;向栈中添加元素，叫做 压栈 入栈    s.push(10);    s.push(20);    s.push(30);    while (!s.empty()) &#123;        &#x2F;&#x2F;输出栈顶元素        cout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl;        &#x2F;&#x2F;弹出栈顶元素        s.pop();    &#125;    cout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入栈 — push</li><li>出栈 — pop</li><li>返回栈顶 — top</li><li>判断栈是否为空 — empty</li><li>返回栈大小 — size</li></ul><h3 id="queue-容器"><a href="#queue-容器" class="headerlink" title="queue 容器"></a>queue 容器</h3><h4 id="queue-基本概念"><a href="#queue-基本概念" class="headerlink" title="queue 基本概念"></a>queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/images/2024060610031507.jpg?msec=1717382137728" alt="2024060610031507"></p><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 — <strong>入队</strong> <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong> <code>pop</code></p><p>生活中的队列：</p><p><img src="/images/2024060610031508.png?msec=1717382137828" alt="2024060610031508"></p><h4 id="queue-常用接口"><a href="#queue-常用接口" class="headerlink" title="queue 常用接口"></a>queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code> &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> &#x2F;&#x2F;往队尾添加元素</li><li><code>pop();</code> &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back();</code> &#x2F;&#x2F;返回最后一个元素</li><li><code>front(); </code> &#x2F;&#x2F;返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code> &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;queue&gt;#include &lt;string&gt;class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    string m_Name;    int m_Age;&#125;;void test01() &#123;    &#x2F;&#x2F;创建队列    queue&lt;Person&gt; q;    &#x2F;&#x2F;准备数据    Person p1(&quot;唐僧&quot;, 30);    Person p2(&quot;孙悟空&quot;, 1000);    Person p3(&quot;猪八戒&quot;, 900);    Person p4(&quot;沙僧&quot;, 800);    &#x2F;&#x2F;向队列中添加元素  入队操作    q.push(p1);    q.push(p2);    q.push(p3);    q.push(p4);    &#x2F;&#x2F;队列不提供迭代器，更不支持随机访问        while (!q.empty()) &#123;        &#x2F;&#x2F;输出队头元素        cout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name               &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl;        cout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name                &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl;        cout &lt;&lt; endl;        &#x2F;&#x2F;弹出队头元素        q.pop();    &#125;    cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入队 — push</li><li>出队 — pop</li><li>返回队头元素 — front</li><li>返回队尾元素 — back</li><li>判断队是否为空 — empty</li><li>返回队列大小 — size</li></ul><h3 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h3><h4 id="list基本概念"><a href="#list基本概念" class="headerlink" title="list基本概念"></a>list基本概念</h4><p><strong>功能：</strong> 将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个双向循环链表</p><p><img src="/images/2024060610031509.jpg?msec=1717382137719" alt="2024060610031509"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code> &#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code> &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123;    for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    list&lt;int&gt;L1;    L1.push_back(10);    L1.push_back(20);    L1.push_back(30);    L1.push_back(40);    printList(L1);    list&lt;int&gt;L2(L1.begin(),L1.end());    printList(L2);    list&lt;int&gt;L3(L2);    printList(L3);    list&lt;int&gt;L4(10, 1000);    printList(L4);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><h4 id="list-赋值和交换"><a href="#list-赋值和交换" class="headerlink" title="list 赋值和交换"></a>list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lst);</code> &#x2F;&#x2F;将lst与本身的元素互换。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123;    for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;赋值和交换void test01()&#123;    list&lt;int&gt;L1;    L1.push_back(10);    L1.push_back(20);    L1.push_back(30);    L1.push_back(40);    printList(L1);    &#x2F;&#x2F;赋值    list&lt;int&gt;L2;    L2 &#x3D; L1;    printList(L2);    list&lt;int&gt;L3;    L3.assign(L2.begin(), L2.end());    printList(L3);    list&lt;int&gt;L4;    L4.assign(10, 100);    printList(L4);&#125;&#x2F;&#x2F;交换void test02()&#123;    list&lt;int&gt;L1;    L1.push_back(10);    L1.push_back(20);    L1.push_back(30);    L1.push_back(40);    list&lt;int&gt;L2;    L2.assign(10, 100);    cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;    printList(L1);    printList(L2);    cout &lt;&lt; endl;    L1.swap(L2);    cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;    printList(L1);    printList(L2);&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="list-大小操作"><a href="#list-大小操作" class="headerlink" title="list 大小操作"></a>list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>empty(); </code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem); </code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123;    for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;大小操作void test01()&#123;    list&lt;int&gt;L1;    L1.push_back(10);    L1.push_back(20);    L1.push_back(30);    L1.push_back(40);    if (L1.empty())    &#123;        cout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl;    &#125;    &#x2F;&#x2F;重新指定大小    L1.resize(10);    printList(L1);    L1.resize(2);    printList(L1);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>重新指定个数 — resize</li></ul><h4 id="list-插入和删除"><a href="#list-插入和删除" class="headerlink" title="list 插入和删除"></a>list 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素</li><li>pop_back();&#x2F;&#x2F;删除容器中最后一个元素</li><li>push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素</li><li>pop_front();&#x2F;&#x2F;从容器开头移除第一个元素</li><li>insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li>insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</li><li>clear();&#x2F;&#x2F;移除容器的所有数据</li><li>erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li><li>remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123;    for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;插入和删除void test01()&#123;    list&lt;int&gt; L;    &#x2F;&#x2F;尾插    L.push_back(10);    L.push_back(20);    L.push_back(30);    &#x2F;&#x2F;头插    L.push_front(100);    L.push_front(200);    L.push_front(300);    printList(L);    &#x2F;&#x2F;尾删    L.pop_back();    printList(L);    &#x2F;&#x2F;头删    L.pop_front();    printList(L);    &#x2F;&#x2F;插入    list&lt;int&gt;::iterator it &#x3D; L.begin();    L.insert(++it, 1000);    printList(L);    &#x2F;&#x2F;删除    it &#x3D; L.begin();    L.erase(++it);    printList(L);    &#x2F;&#x2F;移除    L.push_back(10000);    L.push_back(10000);    L.push_back(10000);    printList(L);    L.remove(10000);    printList(L);    &#x2F;&#x2F;清空    L.clear();    printList(L);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>头插 — push_front</li><li>头删 — pop_front</li><li>插入 — insert</li><li>删除 — erase</li><li>移除 — remove</li><li>清空 — clear</li></ul><h4 id="list-数据存取"><a href="#list-数据存取" class="headerlink" title="list 数据存取"></a>list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code> &#x2F;&#x2F;返回第一个元素。</li><li><code>back();</code> &#x2F;&#x2F;返回最后一个元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;&#x2F;&#x2F;数据存取void test01()&#123;    list&lt;int&gt;L1;    L1.push_back(10);    L1.push_back(20);    L1.push_back(30);    L1.push_back(40);    &#x2F;&#x2F;cout &lt;&lt; L1.at(0) &lt;&lt; endl;&#x2F;&#x2F;错误 不支持at访问数据    &#x2F;&#x2F;cout &lt;&lt; L1[0] &lt;&lt; endl; &#x2F;&#x2F;错误  不支持[]方式访问数据    cout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl;    cout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl;    &#x2F;&#x2F;list容器的迭代器是双向迭代器，不支持随机访问    list&lt;int&gt;::iterator it &#x3D; L1.begin();    &#x2F;&#x2F;it &#x3D; it + 1;&#x2F;&#x2F;错误，不可以跳跃访问，即使是+1&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素 — front</li><li>返回最后一个元素 — back</li></ul><h4 id="list-反转和排序"><a href="#list-反转和排序" class="headerlink" title="list 反转和排序"></a>list 反转和排序</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code> &#x2F;&#x2F;反转链表</li><li><code>sort();</code> &#x2F;&#x2F;链表排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printList(const list&lt;int&gt;&amp; L) &#123;    for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;bool myCompare(int val1 , int val2)&#123;    return val1 &gt; val2;&#125;&#x2F;&#x2F;反转和排序void test01()&#123;    list&lt;int&gt; L;    L.push_back(90);    L.push_back(30);    L.push_back(20);    L.push_back(70);    printList(L);    &#x2F;&#x2F;反转容器的元素    L.reverse();    printList(L);    &#x2F;&#x2F;排序    L.sort(); &#x2F;&#x2F;默认的排序规则 从小到大    printList(L);    L.sort(myCompare); &#x2F;&#x2F;指定规则，从大到小    printList(L);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>反转 — reverse</li><li>排序 — sort （成员函数）</li></ul><h4 id="排序案例"><a href="#排序案例" class="headerlink" title="排序案例"></a>排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;#include &lt;string&gt;class Person &#123;public:    Person(string name, int age , int height) &#123;        m_Name &#x3D; name;        m_Age &#x3D; age;        m_Height &#x3D; height;    &#125;public:    string m_Name;  &#x2F;&#x2F;姓名    int m_Age;      &#x2F;&#x2F;年龄    int m_Height;   &#x2F;&#x2F;身高&#125;;bool ComparePerson(Person&amp; p1, Person&amp; p2) &#123;    if (p1.m_Age &#x3D;&#x3D; p2.m_Age) &#123;        return p1.m_Height  &gt; p2.m_Height;    &#125;    else    &#123;        return  p1.m_Age &lt; p2.m_Age;    &#125;&#125;void test01() &#123;    list&lt;Person&gt; L;    Person p1(&quot;刘备&quot;, 35 , 175);    Person p2(&quot;曹操&quot;, 45 , 180);    Person p3(&quot;孙权&quot;, 40 , 170);    Person p4(&quot;赵云&quot;, 25 , 190);    Person p5(&quot;张飞&quot;, 35 , 160);    Person p6(&quot;关羽&quot;, 35 , 200);    L.push_back(p1);    L.push_back(p2);    L.push_back(p3);    L.push_back(p4);    L.push_back(p5);    L.push_back(p6);    for (list&lt;Person&gt;::iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age               &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;    &#125;    cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl;    L.sort(ComparePerson); &#x2F;&#x2F;排序    for (list&lt;Person&gt;::iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++) &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age               &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="set-multiset-容器"><a href="#set-multiset-容器" class="headerlink" title="set&#x2F; multiset 容器"></a>set&#x2F; multiset 容器</h3><h4 id="set基本概念"><a href="#set基本概念" class="headerlink" title="set基本概念"></a>set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set&#x2F;multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code> &#x2F;&#x2F;默认构造函数：</li><li><code>set(const set &amp;st);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123;    for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;构造和赋值void test01()&#123;    set&lt;int&gt; s1;    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    printSet(s1);    &#x2F;&#x2F;拷贝构造    set&lt;int&gt;s2(s1);    printSet(s2);    &#x2F;&#x2F;赋值    set&lt;int&gt;s3;    s3 &#x3D; s2;    printSet(s3);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul><h4 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123;    for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;大小void test01()&#123;    set&lt;int&gt; s1;    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    if (s1.empty())    &#123;        cout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl;    &#125;&#125;&#x2F;&#x2F;交换void test02()&#123;    set&lt;int&gt; s1;    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    set&lt;int&gt; s2;    s2.insert(100);    s2.insert(300);    s2.insert(200);    s2.insert(400);    cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;    printSet(s1);    printSet(s2);    cout &lt;&lt; endl;    cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;    s1.swap(s2);    printSet(s1);    printSet(s2);&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小 — size</li><li>判断是否为空 — empty</li><li>交换容器 — swap</li></ul><h4 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code> &#x2F;&#x2F;删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123;    for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)    &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;插入和删除void test01()&#123;    set&lt;int&gt; s1;    &#x2F;&#x2F;插入    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    printSet(s1);    &#x2F;&#x2F;删除    s1.erase(s1.begin());    printSet(s1);    s1.erase(30);    printSet(s1);    &#x2F;&#x2F;清空    &#x2F;&#x2F;s1.erase(s1.begin(), s1.end());    s1.clear();    printSet(s1);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入 — insert</li><li>删除 — erase</li><li>清空 — clear</li></ul><h4 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;&#x2F;&#x2F;查找和统计void test01()&#123;    set&lt;int&gt; s1;    &#x2F;&#x2F;插入    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    &#x2F;&#x2F;查找    set&lt;int&gt;::iterator pos &#x3D; s1.find(30);    if (pos !&#x3D; s1.end())    &#123;        cout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;统计    int num &#x3D; s1.count(30);    cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找 — find （返回的是迭代器）</li><li>统计 — count （对于set，结果为0或者1）</li></ul><h4 id="set和multiset区别"><a href="#set和multiset区别" class="headerlink" title="set和multiset区别"></a>set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;&#x2F;&#x2F;set和multiset区别void test01()&#123;    set&lt;int&gt; s;    pair&lt;set&lt;int&gt;::iterator, bool&gt;  ret &#x3D; s.insert(10);    if (ret.second) &#123;        cout &lt;&lt; &quot;第一次插入成功!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;第一次插入失败!&quot; &lt;&lt; endl;    &#125;    ret &#x3D; s.insert(10);    if (ret.second) &#123;        cout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl;    &#125;    else &#123;        cout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;multiset    multiset&lt;int&gt; ms;    ms.insert(10);    ms.insert(10);    for (multiset&lt;int&gt;::iterator it &#x3D; ms.begin(); it !&#x3D; ms.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;对组创建void test01()&#123;    pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20);    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt;  p.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.second &lt;&lt; endl;    pair&lt;string, int&gt; p2 &#x3D; make_pair(&quot;Jerry&quot;, 10);    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h4 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong> set存放内置数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;class MyCompare &#123;public:    bool operator()(int v1, int v2) &#123;        return v1 &gt; v2;    &#125;&#125;;void test01() &#123;        set&lt;int&gt; s1;    s1.insert(10);    s1.insert(40);    s1.insert(20);    s1.insert(30);    s1.insert(50);    &#x2F;&#x2F;默认从小到大    for (set&lt;int&gt;::iterator it &#x3D; s1.begin(); it !&#x3D; s1.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    &#x2F;&#x2F;指定排序规则    set&lt;int,MyCompare&gt; s2;    s2.insert(10);    s2.insert(40);    s2.insert(20);    s2.insert(30);    s2.insert(50);    for (set&lt;int, MyCompare&gt;::iterator it &#x3D; s2.begin(); it !&#x3D; s2.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> set存放自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;#include &lt;string&gt;class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    string m_Name;    int m_Age;&#125;;class comparePerson&#123;public:    bool operator()(const Person&amp; p1, const Person &amp;p2)    &#123;        &#x2F;&#x2F;按照年龄进行排序  降序        return p1.m_Age &gt; p2.m_Age;    &#125;&#125;;void test01()&#123;    set&lt;Person, comparePerson&gt; s;    Person p1(&quot;刘备&quot;, 23);    Person p2(&quot;关羽&quot;, 27);    Person p3(&quot;张飞&quot;, 25);    Person p4(&quot;赵云&quot;, 21);    s.insert(p1);    s.insert(p2);    s.insert(p3);    s.insert(p4);    for (set&lt;Person, comparePerson&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><h3 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="map&#x2F; multimap容器"></a>map&#x2F; multimap容器</h3><h4 id="map基本概念"><a href="#map基本概念" class="headerlink" title="map基本概念"></a>map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map&#x2F;multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code> &#x2F;&#x2F;map默认构造函数:</li><li><code>map(const map &amp;mp);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123;    for (map&lt;int, int&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)    &#123;        cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    map&lt;int,int&gt;m; &#x2F;&#x2F;默认构造    m.insert(pair&lt;int, int&gt;(1, 10));    m.insert(pair&lt;int, int&gt;(2, 20));    m.insert(pair&lt;int, int&gt;(3, 30));    printMap(m);    map&lt;int, int&gt;m2(m); &#x2F;&#x2F;拷贝构造    printMap(m2);    map&lt;int, int&gt;m3;    m3 &#x3D; m2; &#x2F;&#x2F;赋值    printMap(m3);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123;    for (map&lt;int, int&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)    &#123;        cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    map&lt;int, int&gt;m;    m.insert(pair&lt;int, int&gt;(1, 10));    m.insert(pair&lt;int, int&gt;(2, 20));    m.insert(pair&lt;int, int&gt;(3, 30));    if (m.empty())    &#123;        cout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl;    &#125;&#125;&#x2F;&#x2F;交换void test02()&#123;    map&lt;int, int&gt;m;    m.insert(pair&lt;int, int&gt;(1, 10));    m.insert(pair&lt;int, int&gt;(2, 20));    m.insert(pair&lt;int, int&gt;(3, 30));    map&lt;int, int&gt;m2;    m2.insert(pair&lt;int, int&gt;(4, 100));    m2.insert(pair&lt;int, int&gt;(5, 200));    m2.insert(pair&lt;int, int&gt;(6, 300));    cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;    printMap(m);    printMap(m2);    cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;    m.swap(m2);    printMap(m);    printMap(m2);&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小 — size</li><li>判断是否为空 — empty</li><li>交换容器 — swap</li></ul><h4 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code> &#x2F;&#x2F;删除容器中值为key的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123;    for (map&lt;int, int&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)    &#123;        cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    &#x2F;&#x2F;插入    map&lt;int, int&gt; m;    &#x2F;&#x2F;第一种插入方式    m.insert(pair&lt;int, int&gt;(1, 10));    &#x2F;&#x2F;第二种插入方式    m.insert(make_pair(2, 20));    &#x2F;&#x2F;第三种插入方式    m.insert(map&lt;int, int&gt;::value_type(3, 30));    &#x2F;&#x2F;第四种插入方式    m[4] &#x3D; 40;     printMap(m);    &#x2F;&#x2F;删除    m.erase(m.begin());    printMap(m);    m.erase(3);    printMap(m);    &#x2F;&#x2F;清空    m.erase(m.begin(),m.end());    m.clear();    printMap(m);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>map插入方式很多，记住其一即可</p></li><li><p>插入 — insert</p></li><li><p>删除 — erase</p></li><li><p>清空 — clear</p></li></ul><h4 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;&#x2F;&#x2F;查找和统计void test01()&#123;    map&lt;int, int&gt;m;     m.insert(pair&lt;int, int&gt;(1, 10));    m.insert(pair&lt;int, int&gt;(2, 20));    m.insert(pair&lt;int, int&gt;(3, 30));    &#x2F;&#x2F;查找    map&lt;int, int&gt;::iterator pos &#x3D; m.find(3);    if (pos !&#x3D; m.end())    &#123;        cout &lt;&lt; &quot;找到了元素 key &#x3D; &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; (*pos).second &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;统计    int num &#x3D; m.count(3);    cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找 — find （返回的是迭代器）</li><li>统计 — count （对于map，结果为0或者1）</li></ul><h4 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;class MyCompare &#123;public:    bool operator()(int v1, int v2) &#123;        return v1 &gt; v2;    &#125;&#125;;void test01() &#123;    &#x2F;&#x2F;默认从小到大排序    &#x2F;&#x2F;利用仿函数实现从大到小排序    map&lt;int, int, MyCompare&gt; m;    m.insert(make_pair(1, 10));    m.insert(make_pair(2, 20));    m.insert(make_pair(3, 30));    m.insert(make_pair(4, 40));    m.insert(make_pair(5, 50));    for (map&lt;int, int, MyCompare&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++) &#123;        cout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="案例-员工分组"><a href="#案例-员工分组" class="headerlink" title="案例-员工分组"></a>案例-员工分组</h3><h4 id="案例描述-1"><a href="#案例描述-1" class="headerlink" title="案例描述"></a>案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名 工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入 key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;ctime&gt;&#x2F;*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入  key(部门编号) value(员工)- 分部门显示员工信息*&#x2F;#define CEHUA  0#define MEISHU 1#define YANFA  2class Worker&#123;public:    string m_Name;    int m_Salary;&#125;;void createWorker(vector&lt;Worker&gt;&amp;v)&#123;    string nameSeed &#x3D; &quot;ABCDEFGHIJ&quot;;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        Worker worker;        worker.m_Name &#x3D; &quot;员工&quot;;        worker.m_Name +&#x3D; nameSeed[i];        worker.m_Salary &#x3D; rand() % 10000 + 10000; &#x2F;&#x2F; 10000 ~ 19999        &#x2F;&#x2F;将员工放入到容器中        v.push_back(worker);    &#125;&#125;&#x2F;&#x2F;员工分组void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m)&#123;    for (vector&lt;Worker&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        &#x2F;&#x2F;产生随机部门编号        int deptId &#x3D; rand() % 3; &#x2F;&#x2F; 0 1 2         &#x2F;&#x2F;将员工插入到分组中        &#x2F;&#x2F;key部门编号，value具体员工        m.insert(make_pair(deptId, *it));    &#125;&#125;void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m)&#123;    &#x2F;&#x2F; 0  A  B  C   1  D  E   2  F G ...    cout &lt;&lt; &quot;策划部门：&quot; &lt;&lt; endl;    multimap&lt;int,Worker&gt;::iterator pos &#x3D; m.find(CEHUA);    int count &#x3D; m.count(CEHUA); &#x2F;&#x2F; 统计具体人数    int index &#x3D; 0;    for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++ , index++)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;    &#125;    cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;美术部门： &quot; &lt;&lt; endl;    pos &#x3D; m.find(MEISHU);    count &#x3D; m.count(MEISHU); &#x2F;&#x2F; 统计具体人数    index &#x3D; 0;    for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++, index++)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;    &#125;    cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;研发部门： &quot; &lt;&lt; endl;    pos &#x3D; m.find(YANFA);    count &#x3D; m.count(YANFA); &#x2F;&#x2F; 统计具体人数    index &#x3D; 0;    for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++, index++)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;    &#125;&#125;int main() &#123;    srand((unsigned int)time(NULL));    &#x2F;&#x2F;1、创建员工    vector&lt;Worker&gt;vWorker;    createWorker(vWorker);    &#x2F;&#x2F;2、员工分组    multimap&lt;int, Worker&gt;mWorker;    setGroup(vWorker, mWorker);    &#x2F;&#x2F;3、分组显示员工    showWorkerByGourp(mWorker);    &#x2F;&#x2F;&#x2F;&#x2F;测试    &#x2F;&#x2F;for (vector&lt;Worker&gt;::iterator it &#x3D; vWorker.begin(); it !&#x3D; vWorker.end(); it++)    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;    &#x2F;&#x2F;&#125;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高-STL</title>
      <link href="/c-c/c-ti-gao-stl/"/>
      <url>/c-c/c-ti-gao-stl/</url>
      
        <content type="html"><![CDATA[<h2 id="STL初识"><a href="#STL初识" class="headerlink" title="STL初识"></a>STL初识</h2><h3 id="STL的诞生"><a href="#STL的诞生" class="headerlink" title="STL的诞生"></a>STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h3 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="STL中容器、算法、迭代器"><a href="#STL中容器、算法、迭代器" class="headerlink" title="STL中容器、算法、迭代器"></a>STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>​ <strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br> <strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h3 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a>容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h4><p>容器： <code>vector</code></p><p>算法： <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;void MyPrint(int val)&#123;    cout &lt;&lt; val &lt;&lt; endl;&#125;void test01() &#123;    &#x2F;&#x2F;创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型    vector&lt;int&gt; v;    &#x2F;&#x2F;向容器中放数据    v.push_back(10);    v.push_back(20);    v.push_back(30);    v.push_back(40);    &#x2F;&#x2F;每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素    &#x2F;&#x2F;v.begin()返回迭代器，这个迭代器指向容器中第一个数据    &#x2F;&#x2F;v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置    &#x2F;&#x2F;vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型    vector&lt;int&gt;::iterator pBegin &#x3D; v.begin();    vector&lt;int&gt;::iterator pEnd &#x3D; v.end();    &#x2F;&#x2F;第一种遍历方式：    while (pBegin !&#x3D; pEnd) &#123;        cout &lt;&lt; *pBegin &lt;&lt; endl;        pBegin++;    &#125;    &#x2F;&#x2F;第二种遍历方式：    for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; *it &lt;&lt; endl;    &#125;    cout &lt;&lt; endl;    &#x2F;&#x2F;第三种遍历方式：    &#x2F;&#x2F;使用STL提供标准遍历算法  头文件 algorithm    for_each(v.begin(), v.end(), MyPrint);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vector存放自定义数据类型"><a href="#Vector存放自定义数据类型" class="headerlink" title="Vector存放自定义数据类型"></a>Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;&#x2F;&#x2F;自定义数据类型class Person &#123;public:    Person(string name, int age) &#123;        mName &#x3D; name;        mAge &#x3D; age;    &#125;public:    string mName;    int mAge;&#125;;&#x2F;&#x2F;存放对象void test01() &#123;    vector&lt;Person&gt; v;    &#x2F;&#x2F;创建数据    Person p1(&quot;aaa&quot;, 10);    Person p2(&quot;bbb&quot;, 20);    Person p3(&quot;ccc&quot;, 30);    Person p4(&quot;ddd&quot;, 40);    Person p5(&quot;eee&quot;, 50);    v.push_back(p1);    v.push_back(p2);    v.push_back(p3);    v.push_back(p4);    v.push_back(p5);    for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl;    &#125;&#125;&#x2F;&#x2F;放对象指针void test02() &#123;    vector&lt;Person*&gt; v;    &#x2F;&#x2F;创建数据    Person p1(&quot;aaa&quot;, 10);    Person p2(&quot;bbb&quot;, 20);    Person p3(&quot;ccc&quot;, 30);    Person p4(&quot;ddd&quot;, 40);    Person p5(&quot;eee&quot;, 50);    v.push_back(&amp;p1);    v.push_back(&amp;p2);    v.push_back(&amp;p3);    v.push_back(&amp;p4);    v.push_back(&amp;p5);    for (vector&lt;Person*&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        Person * p &#x3D; (*it);        cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vector容器嵌套容器"><a href="#Vector容器嵌套容器" class="headerlink" title="Vector容器嵌套容器"></a>Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;&#x2F;&#x2F;容器嵌套容器void test01() &#123;    vector&lt; vector&lt;int&gt; &gt;  v;    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    vector&lt;int&gt; v3;    vector&lt;int&gt; v4;    for (int i &#x3D; 0; i &lt; 4; i++) &#123;        v1.push_back(i + 1);        v2.push_back(i + 2);        v3.push_back(i + 3);        v4.push_back(i + 4);    &#125;    &#x2F;&#x2F;将容器元素插入到vector v中    v.push_back(v1);    v.push_back(v2);    v.push_back(v3);    v.push_back(v4);    for (vector&lt;vector&lt;int&gt;&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++) &#123;        for (vector&lt;int&gt;::iterator vit &#x3D; (*it).begin(); vit !&#x3D; (*it).end(); vit++) &#123;            cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高-模版</title>
      <link href="/c-c/c-ti-gao-mo-ban/"/>
      <url>/c-c/c-ti-gao-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="模板的概念"><a href="#模板的概念" class="headerlink" title="模板的概念"></a>模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板、PPT模板</p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><ul><li><p>C++另一种编程思想称为 &#x3D;&#x3D;泛型编程&#x3D;&#x3D; ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="函数模板语法"><a href="#函数模板语法" class="headerlink" title="函数模板语法"></a>函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;typename T&gt;函数声明或定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template — 声明创建模板</p><p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T — 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;交换整型函数void swapInt(int&amp; a, int&amp; b) &#123;    int temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;&#x2F;&#x2F;交换浮点型函数void swapDouble(double&amp; a, double&amp; b) &#123;    double temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;&#x2F;&#x2F;利用模板提供通用的交换函数template&lt;typename T&gt;void mySwap(T&amp; a, T&amp; b)&#123;    T temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;void test01()&#123;    int a &#x3D; 10;    int b &#x3D; 20;    &#x2F;&#x2F;swapInt(a, b);    &#x2F;&#x2F;利用模板实现交换    &#x2F;&#x2F;1、自动类型推导    mySwap(a, b);    &#x2F;&#x2F;2、显示指定类型    mySwap&lt;int&gt;(a, b);    cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="函数模板注意事项"><a href="#函数模板注意事项" class="headerlink" title="函数模板注意事项"></a>函数模板注意事项</h4><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;利用模板提供通用的交换函数template&lt;class T&gt;void mySwap(T&amp; a, T&amp; b)&#123;    T temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;&#x2F;&#x2F; 1、自动类型推导，必须推导出一致的数据类型T,才可以使用void test01()&#123;    int a &#x3D; 10;    int b &#x3D; 20;    char c &#x3D; &#39;c&#39;;    mySwap(a, b); &#x2F;&#x2F; 正确，可以推导出一致的T    &#x2F;&#x2F;mySwap(a, c); &#x2F;&#x2F; 错误，推导不出一致的T类型&#125;&#x2F;&#x2F; 2、模板必须要确定出T的数据类型，才可以使用template&lt;class T&gt;void func()&#123;    cout &lt;&lt; &quot;func 调用&quot; &lt;&lt; endl;&#125;void test02()&#123;    &#x2F;&#x2F;func(); &#x2F;&#x2F;错误，模板不能独立使用，必须确定出T的类型    func&lt;int&gt;(); &#x2F;&#x2F;利用显示指定类型的方式，给T一个类型，才可以使用该模板&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h4 id="函数模板案例"><a href="#函数模板案例" class="headerlink" title="函数模板案例"></a>函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;交换的函数模板template&lt;typename T&gt;void mySwap(T &amp;a, T&amp;b)&#123;    T temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;template&lt;class T&gt; &#x2F;&#x2F; 也可以替换成typename&#x2F;&#x2F;利用选择排序，进行对数组从大到小的排序void mySort(T arr[], int len)&#123;    for (int i &#x3D; 0; i &lt; len; i++)    &#123;        int max &#x3D; i; &#x2F;&#x2F;最大数的下标        for (int j &#x3D; i + 1; j &lt; len; j++)        &#123;            if (arr[max] &lt; arr[j])            &#123;                max &#x3D; j;            &#125;        &#125;        if (max !&#x3D; i) &#x2F;&#x2F;如果最大数的下标不是i，交换两者        &#123;            mySwap(arr[max], arr[i]);        &#125;    &#125;&#125;template&lt;typename T&gt;void printArray(T arr[], int len) &#123;    for (int i &#x3D; 0; i &lt; len; i++) &#123;        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;void test01()&#123;    &#x2F;&#x2F;测试char数组    char charArr[] &#x3D; &quot;bdcfeagh&quot;;    int num &#x3D; sizeof(charArr) &#x2F; sizeof(char);    mySort(charArr, num);    printArray(charArr, num);&#125;void test02()&#123;    &#x2F;&#x2F;测试int数组    int intArr[] &#x3D; &#123; 7, 5, 8, 1, 3, 9, 2, 4, 6 &#125;;    int num &#x3D; sizeof(intArr) &#x2F; sizeof(int);    mySort(intArr, num);    printArray(intArr, num);&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：模板可以提高代码复用，需要熟练掌握</p><h4 id="普通函数与函数模板的区别"><a href="#普通函数与函数模板的区别" class="headerlink" title="普通函数与函数模板的区别"></a>普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;普通函数int myAdd01(int a, int b)&#123;    return a + b;&#125;&#x2F;&#x2F;函数模板template&lt;class T&gt;T myAdd02(T a, T b)  &#123;    return a + b;&#125;&#x2F;&#x2F;使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换void test01()&#123;    int a &#x3D; 10;    int b &#x3D; 20;    char c &#x3D; &#39;c&#39;;    cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; &#x2F;&#x2F;正确，将char类型的&#39;c&#39;隐式转换为int类型  &#39;c&#39; 对应 ASCII码 99    &#x2F;&#x2F;myAdd02(a, c); &#x2F;&#x2F; 报错，使用自动类型推导时，不会发生隐式类型转换    myAdd02&lt;int&gt;(a, c); &#x2F;&#x2F;正确，如果用显示指定类型，可以发生隐式类型转换&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="普通函数与函数模板的调用规则"><a href="#普通函数与函数模板的调用规则" class="headerlink" title="普通函数与函数模板的调用规则"></a>普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;普通函数与函数模板调用规则void myPrint(int a, int b)&#123;    cout &lt;&lt; &quot;调用的普通函数&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b) &#123;     cout &lt;&lt; &quot;调用的模板&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b, T c) &#123;     cout &lt;&lt; &quot;调用重载的模板&quot; &lt;&lt; endl; &#125;void test01()&#123;    &#x2F;&#x2F;1、如果函数模板和普通函数都可以实现，优先调用普通函数    &#x2F;&#x2F; 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到    int a &#x3D; 10;    int b &#x3D; 20;    myPrint(a, b); &#x2F;&#x2F;调用普通函数    &#x2F;&#x2F;2、可以通过空模板参数列表来强制调用函数模板    myPrint&lt;&gt;(a, b); &#x2F;&#x2F;调用函数模板    &#x2F;&#x2F;3、函数模板也可以发生重载    int c &#x3D; 30;    myPrint(a, b, c); &#x2F;&#x2F;调用重载的函数模板    &#x2F;&#x2F;4、 如果函数模板可以产生更好的匹配,优先调用函数模板    char c1 &#x3D; &#39;a&#39;;    char c2 &#x3D; &#39;b&#39;;    myPrint(c1, c2); &#x2F;&#x2F;调用函数模板&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h4 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b)&#123;     a &#x3D; b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b)&#123;     if(a &gt; b) &#123; ... &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;    string m_Name;    int m_Age;&#125;;&#x2F;&#x2F;普通函数模板template&lt;class T&gt;bool myCompare(T&amp; a, T&amp; b)&#123;    if (a &#x3D;&#x3D; b)    &#123;        return true;    &#125;    else    &#123;        return false;    &#125;&#125;&#x2F;&#x2F;具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型&#x2F;&#x2F;具体化优先于常规模板template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)&#123;    if ( p1.m_Name  &#x3D;&#x3D; p2.m_Name &amp;&amp; p1.m_Age &#x3D;&#x3D; p2.m_Age)    &#123;        return true;    &#125;    else    &#123;        return false;    &#125;&#125;void test01()&#123;    int a &#x3D; 10;    int b &#x3D; 20;    &#x2F;&#x2F;内置数据类型可以直接使用通用的函数模板    bool ret &#x3D; myCompare(a, b);    if (ret)    &#123;        cout &lt;&lt; &quot;a &#x3D;&#x3D; b &quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;a !&#x3D; b &quot; &lt;&lt; endl;    &#125;&#125;void test02()&#123;    Person p1(&quot;Tom&quot;, 10);    Person p2(&quot;Tom&quot;, 10);    &#x2F;&#x2F;自定义数据类型，不会调用普通的函数模板    &#x2F;&#x2F;可以创建具体化的Person数据类型的模板，用于特殊处理这个类型    bool ret &#x3D; myCompare(p1, p2);    if (ret)    &#123;        cout &lt;&lt; &quot;p1 &#x3D;&#x3D; p2 &quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;p1 !&#x3D; p2 &quot; &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="类模板语法"><a href="#类模板语法" class="headerlink" title="类模板语法"></a>类模板语法</h4><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template — 声明创建模板</p><p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T — 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;类模板template&lt;class NameType, class AgeType&gt; class Person&#123;public:    Person(NameType name, AgeType age)    &#123;        this-&gt;mName &#x3D; name;        this-&gt;mAge &#x3D; age;    &#125;    void showPerson()    &#123;        cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;    &#125;public:    NameType mName;    AgeType mAge;&#125;;void test01()&#123;    &#x2F;&#x2F; 指定NameType 为string类型，AgeType 为 int类型    Person&lt;string, int&gt;P1(&quot;孙悟空&quot;, 999);    P1.showPerson();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h4 id="类模板与函数模板区别"><a href="#类模板与函数模板区别" class="headerlink" title="类模板与函数模板区别"></a>类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;类模板template&lt;class NameType, class AgeType &#x3D; int&gt; class Person&#123;public:    Person(NameType name, AgeType age)    &#123;        this-&gt;mName &#x3D; name;        this-&gt;mAge &#x3D; age;    &#125;    void showPerson()    &#123;        cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;    &#125;public:    NameType mName;    AgeType mAge;&#125;;&#x2F;&#x2F;1、类模板没有自动类型推导的使用方式void test01()&#123;    &#x2F;&#x2F; Person p(&quot;孙悟空&quot;, 1000); &#x2F;&#x2F; 错误 类模板使用时候，不可以用自动类型推导    Person &lt;string ,int&gt;p(&quot;孙悟空&quot;, 1000); &#x2F;&#x2F;必须使用显示指定类型的方式，使用类模板    p.showPerson();&#125;&#x2F;&#x2F;2、类模板在模板参数列表中可以有默认参数void test02()&#123;    Person &lt;string&gt; p(&quot;猪八戒&quot;, 999); &#x2F;&#x2F;类模板中的模板参数列表 可以指定默认参数    p.showPerson();&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="类模板中成员函数创建时机"><a href="#类模板中成员函数创建时机" class="headerlink" title="类模板中成员函数创建时机"></a>类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person1&#123;public:    void showPerson1()    &#123;        cout &lt;&lt; &quot;Person1 show&quot; &lt;&lt; endl;    &#125;&#125;;class Person2&#123;public:    void showPerson2()    &#123;        cout &lt;&lt; &quot;Person2 show&quot; &lt;&lt; endl;    &#125;&#125;;template&lt;class T&gt;class MyClass&#123;public:    T obj;    &#x2F;&#x2F;类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成    void fun1() &#123; obj.showPerson1(); &#125;    void fun2() &#123; obj.showPerson2(); &#125;&#125;;void test01()&#123;    MyClass&lt;Person1&gt; m;    m.fun1();    &#x2F;&#x2F;m.fun2();&#x2F;&#x2F;编译会出错，说明函数调用才会去创建成员函数&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h4 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型 — 直接显示对象的数据类型</li><li>参数模板化 — 将对象中的参数变为模板进行传递</li><li>整个类模板化 — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;类模板template&lt;class NameType, class AgeType &#x3D; int&gt; class Person&#123;public:    Person(NameType name, AgeType age)    &#123;        this-&gt;mName &#x3D; name;        this-&gt;mAge &#x3D; age;    &#125;    void showPerson()    &#123;        cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;    &#125;public:    NameType mName;    AgeType mAge;&#125;;&#x2F;&#x2F;1、指定传入的类型void printPerson1(Person&lt;string, int&gt; &amp;p) &#123;    p.showPerson();&#125;void test01()&#123;    Person &lt;string, int &gt;p(&quot;孙悟空&quot;, 100);    printPerson1(p);&#125;&#x2F;&#x2F;2、参数模板化template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p)&#123;    p.showPerson();    cout &lt;&lt; &quot;T1的类型为： &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl;    cout &lt;&lt; &quot;T2的类型为： &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;&#125;void test02()&#123;    Person &lt;string, int &gt;p(&quot;猪八戒&quot;, 90);    printPerson2(p);&#125;&#x2F;&#x2F;3、整个类模板化template&lt;class T&gt;void printPerson3(T &amp; p)&#123;    cout &lt;&lt; &quot;T的类型为： &quot; &lt;&lt; typeid(T).name() &lt;&lt; endl;    p.showPerson();&#125;void test03()&#123;    Person &lt;string, int &gt;p(&quot;唐僧&quot;, 30);    printPerson3(p);&#125;int main() &#123;    test01();    test02();    test03();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h4 id="类模板与继承"><a href="#类模板与继承" class="headerlink" title="类模板与继承"></a>类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;class Base&#123;    T m;&#125;;&#x2F;&#x2F;class Son:public Base  &#x2F;&#x2F;错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承class Son :public Base&lt;int&gt; &#x2F;&#x2F;必须指定一个类型&#123;&#125;;void test01()&#123;    Son c;&#125;&#x2F;&#x2F;类模板继承类模板 ,可以用T2指定父类中的T类型template&lt;class T1, class T2&gt;class Son2 :public Base&lt;T2&gt;&#123;public:    Son2()    &#123;        cout &lt;&lt; typeid(T1).name() &lt;&lt; endl;        cout &lt;&lt; typeid(T2).name() &lt;&lt; endl;    &#125;&#125;;void test02()&#123;    Son2&lt;int, char&gt; child1;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;类模板中成员函数类外实现template&lt;class T1, class T2&gt;class Person &#123;public:    &#x2F;&#x2F;成员函数类内声明    Person(T1 name, T2 age);    void showPerson();public:    T1 m_Name;    T2 m_Age;&#125;;&#x2F;&#x2F;构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;    this-&gt;m_Name &#x3D; name;    this-&gt;m_Age &#x3D; age;&#125;&#x2F;&#x2F;成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123;    cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125;void test01()&#123;    Person&lt;string, int&gt; p(&quot;Tom&quot;, 20);    p.showPerson();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="类模板分文件编写"><a href="#类模板分文件编写" class="headerlink" title="类模板分文件编写"></a>类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;template&lt;class T1, class T2&gt;class Person &#123;public:    Person(T1 name, T2 age);    void showPerson();public:    T1 m_Name;    T2 m_Age;&#125;;&#x2F;&#x2F;构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;    this-&gt;m_Name &#x3D; name;    this-&gt;m_Age &#x3D; age;&#125;&#x2F;&#x2F;成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123;    cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板分文件编写.cpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;#include &quot;person.h&quot;#include &quot;person.cpp&quot; &#x2F;&#x2F;解决方式1，包含cpp源文件&#x2F;&#x2F;解决方式2，将声明和实现写到一起，文件后缀名改为.hpp#include &quot;person.hpp&quot;void test01()&#123;    Person&lt;string, int&gt; p(&quot;Tom&quot;, 10);    p.showPerson();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;&#x2F;&#x2F;2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元template&lt;class T1, class T2&gt; class Person;&#x2F;&#x2F;如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到&#x2F;&#x2F;template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); template&lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt; &amp; p)&#123;    cout &lt;&lt; &quot;类外实现 ---- 姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;template&lt;class T1, class T2&gt;class Person&#123;    &#x2F;&#x2F;1、全局函数配合友元   类内实现    friend void printPerson(Person&lt;T1, T2&gt; &amp; p)    &#123;        cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;    &#125;    &#x2F;&#x2F;全局函数配合友元  类外实现    friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);public:    Person(T1 name, T2 age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;private:    T1 m_Name;    T2 m_Age;&#125;;&#x2F;&#x2F;1、全局函数在类内实现void test01()&#123;    Person &lt;string, int &gt;p(&quot;Tom&quot;, 20);    printPerson(p);&#125;&#x2F;&#x2F;2、全局函数在类外实现void test02()&#123;    Person &lt;string, int &gt;p(&quot;Jerry&quot;, 30);    printPerson2(p);&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="类模板案例"><a href="#类模板案例" class="headerlink" title="类模板案例"></a>类模板案例</h4><p>案例描述: 实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray&#123;public:    &#x2F;&#x2F;构造函数    MyArray(int capacity)    &#123;        this-&gt;m_Capacity &#x3D; capacity;        this-&gt;m_Size &#x3D; 0;        pAddress &#x3D; new T[this-&gt;m_Capacity];    &#125;    &#x2F;&#x2F;拷贝构造    MyArray(const MyArray &amp; arr)    &#123;        this-&gt;m_Capacity &#x3D; arr.m_Capacity;        this-&gt;m_Size &#x3D; arr.m_Size;        this-&gt;pAddress &#x3D; new T[this-&gt;m_Capacity];        for (int i &#x3D; 0; i &lt; this-&gt;m_Size; i++)        &#123;            &#x2F;&#x2F;如果T为对象，而且还包含指针，必须需要重载 &#x3D; 操作符，因为这个等号不是 构造 而是赋值，            &#x2F;&#x2F; 普通类型可以直接&#x3D; 但是指针类型需要深拷贝            this-&gt;pAddress[i] &#x3D; arr.pAddress[i];        &#125;    &#125;    &#x2F;&#x2F;重载&#x3D; 操作符  防止浅拷贝问题    MyArray&amp; operator&#x3D;(const MyArray&amp; myarray) &#123;        if (this-&gt;pAddress !&#x3D; NULL) &#123;            delete[] this-&gt;pAddress;            this-&gt;m_Capacity &#x3D; 0;            this-&gt;m_Size &#x3D; 0;        &#125;        this-&gt;m_Capacity &#x3D; myarray.m_Capacity;        this-&gt;m_Size &#x3D; myarray.m_Size;        this-&gt;pAddress &#x3D; new T[this-&gt;m_Capacity];        for (int i &#x3D; 0; i &lt; this-&gt;m_Size; i++) &#123;            this-&gt;pAddress[i] &#x3D; myarray[i];        &#125;        return *this;    &#125;    &#x2F;&#x2F;重载[] 操作符  arr[0]    T&amp; operator [](int index)    &#123;        return this-&gt;pAddress[index]; &#x2F;&#x2F;不考虑越界，用户自己去处理    &#125;    &#x2F;&#x2F;尾插法    void Push_back(const T &amp; val)    &#123;        if (this-&gt;m_Capacity &#x3D;&#x3D; this-&gt;m_Size)        &#123;            return;        &#125;        this-&gt;pAddress[this-&gt;m_Size] &#x3D; val;        this-&gt;m_Size++;    &#125;    &#x2F;&#x2F;尾删法    void Pop_back()    &#123;        if (this-&gt;m_Size &#x3D;&#x3D; 0)        &#123;            return;        &#125;        this-&gt;m_Size--;    &#125;    &#x2F;&#x2F;获取数组容量    int getCapacity()    &#123;        return this-&gt;m_Capacity;    &#125;    &#x2F;&#x2F;获取数组大小    int    getSize()    &#123;        return this-&gt;m_Size;    &#125;    &#x2F;&#x2F;析构    ~MyArray()    &#123;        if (this-&gt;pAddress !&#x3D; NULL)        &#123;            delete[] this-&gt;pAddress;            this-&gt;pAddress &#x3D; NULL;            this-&gt;m_Capacity &#x3D; 0;            this-&gt;m_Size &#x3D; 0;        &#125;    &#125;private:    T * pAddress;  &#x2F;&#x2F;指向一个堆空间，这个空间存储真正的数据    int m_Capacity; &#x2F;&#x2F;容量    int m_Size;   &#x2F;&#x2F; 大小&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板案例—数组类封装.cpp中</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;myArray.hpp&quot;#include &lt;string&gt;void printIntArray(MyArray&lt;int&gt;&amp; arr) &#123;    for (int i &#x3D; 0; i &lt; arr.getSize(); i++) &#123;        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F;测试内置数据类型void test01()&#123;    MyArray&lt;int&gt; array1(10);    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        array1.Push_back(i);    &#125;    cout &lt;&lt; &quot;array1打印输出：&quot; &lt;&lt; endl;    printIntArray(array1);    cout &lt;&lt; &quot;array1的大小：&quot; &lt;&lt; array1.getSize() &lt;&lt; endl;    cout &lt;&lt; &quot;array1的容量：&quot; &lt;&lt; array1.getCapacity() &lt;&lt; endl;    cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl;    MyArray&lt;int&gt; array2(array1);    array2.Pop_back();    cout &lt;&lt; &quot;array2打印输出：&quot; &lt;&lt; endl;    printIntArray(array2);    cout &lt;&lt; &quot;array2的大小：&quot; &lt;&lt; array2.getSize() &lt;&lt; endl;    cout &lt;&lt; &quot;array2的容量：&quot; &lt;&lt; array2.getCapacity() &lt;&lt; endl;&#125;&#x2F;&#x2F;测试自定义数据类型class Person &#123;public:    Person() &#123;&#125;         Person(string name, int age) &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;public:    string m_Name;    int m_Age;&#125;;void printPersonArray(MyArray&lt;Person&gt;&amp; personArr)&#123;    for (int i &#x3D; 0; i &lt; personArr.getSize(); i++) &#123;        cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; personArr[i].m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; personArr[i].m_Age &lt;&lt; endl;    &#125;&#125;void test02()&#123;    &#x2F;&#x2F;创建数组    MyArray&lt;Person&gt; pArray(10);    Person p1(&quot;孙悟空&quot;, 30);    Person p2(&quot;韩信&quot;, 20);    Person p3(&quot;妲己&quot;, 18);    Person p4(&quot;王昭君&quot;, 15);    Person p5(&quot;赵云&quot;, 24);    &#x2F;&#x2F;插入数据    pArray.Push_back(p1);    pArray.Push_back(p2);    pArray.Push_back(p3);    pArray.Push_back(p4);    pArray.Push_back(p5);    printPersonArray(pArray);    cout &lt;&lt; &quot;pArray的大小：&quot; &lt;&lt; pArray.getSize() &lt;&lt; endl;    cout &lt;&lt; &quot;pArray的容量：&quot; &lt;&lt; pArray.getCapacity() &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>能够利用所学知识点实现通用的数组</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程-文件操作</title>
      <link href="/c-c/c-he-xin-bian-cheng-wen-jian-cao-zuo/"/>
      <url>/c-c/c-he-xin-bian-cheng-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 <strong>&lt; fstream &gt;</strong></p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong> - 文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> - 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li><code>ofstream</code>：写操作</li><li><code>ifstream</code>： 读操作</li><li><code>fstream</code> ： 读写操作</li></ol><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>写文件步骤如下：</p><ol><li><p>包含头文件<br>  <code>#include &lt;fstream&gt;</code></p></li><li><p>创建流对象<br>  <code>ofstream ofs;</code></p></li><li><p>打开文件<br>  <code>ofs.open(&quot;文件路径&quot;,打开方式);</code></p></li><li><p>写数据<br>  <code>ofs &lt;&lt; &quot;写入的数据&quot;;</code></p></li><li><p>关闭文件<br>  <code>ofs.close();</code></p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary | ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01()&#123;    ofstream ofs;    ofs.open(&quot;test.txt&quot;, ios::out);    ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;    ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;    ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;    ofs.close();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件<br>  <code>#include &lt;fstream&gt;</code></p></li><li><p>创建流对象<br>  <code>ifstream ifs;</code></p></li><li><p>打开文件并判断文件是否打开成功<br>  <code>ifs.open(&quot;文件路径&quot;,打开方式);</code></p></li><li><p>读数据</p><blockquote><blockquote><p>四种方式读取</p></blockquote></blockquote></li><li><p>关闭文件<br>  <code>ifs.close();</code></p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01()&#123;    ifstream ifs;    ifs.open(&quot;test.txt&quot;, ios::in);    if (!ifs.is_open())    &#123;        cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;        return;    &#125;    &#x2F;&#x2F;第一种方式    &#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;    &#x2F;&#x2F;while (ifs &gt;&gt; buf)    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; buf &lt;&lt; endl;    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;第二种    &#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;    &#x2F;&#x2F;while (ifs.getline(buf,sizeof(buf)))    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; buf &lt;&lt; endl;    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;第三种    &#x2F;&#x2F;string buf;    &#x2F;&#x2F;while (getline(ifs, buf))    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; buf &lt;&lt; endl;    &#x2F;&#x2F;&#125;    char c;    while ((c &#x3D; ifs.get()) !&#x3D; EOF)    &#123;        cout &lt;&lt; c;    &#125;    ifs.close();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h4 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:    char m_Name[64];    int m_Age;&#125;;&#x2F;&#x2F;二进制文件  写文件void test01()&#123;    &#x2F;&#x2F;1、包含头文件    &#x2F;&#x2F;2、创建输出流对象    ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);    &#x2F;&#x2F;3、打开文件    &#x2F;&#x2F;ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);    Person p &#x3D; &#123;&quot;张三&quot;  , 18&#125;;    &#x2F;&#x2F;4、写文件    ofs.write((const char *)&amp;p, sizeof(p));    &#x2F;&#x2F;5、关闭文件    ofs.close();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:    char m_Name[64];    int m_Age;&#125;;void test01()&#123;    ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);    if (!ifs.is_open())    &#123;        cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;    &#125;    Person p;    ifs.read((char *)&amp;p, sizeof(p));    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程-类和对象</title>
      <link href="/c-c/c-he-xin-bian-cheng-lei-he-dui-xiang/"/>
      <url>/c-c/c-he-xin-bian-cheng-lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>C++面向对象的三大特性为：<strong>封装、继承、多态</strong></p><p>C++认为<strong>万事万物都皆为对象</strong>，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​ 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​ 车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​ 具有相同性质的<strong>对象</strong>，我们可以抽象称为<strong>类</strong>，人属于人类，车属于车类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​ 在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名&#123; 访问权限： 属性 / 行为 &#125;;</code></p><p><strong>示例1：</strong> 设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;圆周率const double PI &#x3D; 3.14;&#x2F;&#x2F;1、封装的意义&#x2F;&#x2F;将属性和行为作为一个整体，用来表现生活中的事物&#x2F;&#x2F;封装一个圆类，求圆的周长&#x2F;&#x2F;class代表设计一个类，后面跟着的是类名class Circle&#123;public:  &#x2F;&#x2F;访问权限  公共的权限    &#x2F;&#x2F;属性    int m_r;&#x2F;&#x2F;半径    &#x2F;&#x2F;行为    &#x2F;&#x2F;获取到圆的周长    double calculateZC()    &#123;        &#x2F;&#x2F;2 * pi  * r        &#x2F;&#x2F;获取圆的周长        return  2 * PI * m_r;    &#125;&#125;;int main() &#123;    &#x2F;&#x2F;通过圆类，创建圆的对象    &#x2F;&#x2F; c1就是一个具体的圆    Circle c1;    c1.m_r &#x3D; 10; &#x2F;&#x2F;给圆对象的半径 进行赋值操作    &#x2F;&#x2F;2 * pi * 10 &#x3D; &#x3D; 62.8    cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong> 设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生类class Student &#123;public:    void setName(string name) &#123;        m_name &#x3D; name;    &#125;    void setID(int id) &#123;        m_id &#x3D; id;    &#125;    void showStudent() &#123;        cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;    &#125;public:    string m_name;    int m_id;&#125;;int main() &#123;    Student stu;    stu.setName(&quot;德玛西亚&quot;);    stu.setID(250);    stu.showStudent();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public 公共权限</li><li>protected 保护权限</li><li>private 私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;三种权限&#x2F;&#x2F;公共权限  public     类内可以访问  类外可以访问&#x2F;&#x2F;保护权限  protected  类内可以访问  类外不可以访问&#x2F;&#x2F;私有权限  private    类内可以访问  类外不可以访问class Person&#123;    &#x2F;&#x2F;姓名  公共权限public:    string m_Name;    &#x2F;&#x2F;汽车  保护权限protected:    string m_Car;    &#x2F;&#x2F;银行卡密码  私有权限private:    int m_Password;public:    void func()    &#123;        m_Name &#x3D; &quot;张三&quot;;        m_Car &#x3D; &quot;拖拉机&quot;;        m_Password &#x3D; 123456;    &#125;&#125;;int main() &#123;    Person p;    p.m_Name &#x3D; &quot;李四&quot;;    &#x2F;&#x2F;p.m_Car &#x3D; &quot;奔驰&quot;;  &#x2F;&#x2F;保护权限类外访问不到    &#x2F;&#x2F;p.m_Password &#x3D; 123; &#x2F;&#x2F;私有权限类外访问不到    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="struct和class区别"><a href="#struct和class区别" class="headerlink" title="struct和class区别"></a>struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class 默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1&#123;    int  m_A; &#x2F;&#x2F;默认是私有权限&#125;;struct C2&#123;    int m_A;  &#x2F;&#x2F;默认是公共权限&#125;;int main() &#123;    C1 c1;    c1.m_A &#x3D; 10; &#x2F;&#x2F;错误，访问权限是私有    C2 c2;    c2.m_A &#x3D; 10; &#x2F;&#x2F;正确，访问权限是公共    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h4><p><strong>优点1：</strong> 将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong> 对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    &#x2F;&#x2F;姓名设置可读可写    void setName(string name) &#123;        m_Name &#x3D; name;    &#125;    string getName()    &#123;        return m_Name;    &#125;    &#x2F;&#x2F;获取年龄     int getAge() &#123;        return m_Age;    &#125;    &#x2F;&#x2F;设置年龄    void setAge(int age) &#123;        if (age &lt; 0 || age &gt; 150) &#123;            cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;            return;        &#125;        m_Age &#x3D; age;    &#125;    &#x2F;&#x2F;情人设置为只写    void setLover(string lover) &#123;        m_Lover &#x3D; lover;    &#125;private:    string m_Name; &#x2F;&#x2F;可读可写  姓名    int m_Age; &#x2F;&#x2F;只读  年龄    string m_Lover; &#x2F;&#x2F;只写  情人&#125;;int main() &#123;    Person p;    &#x2F;&#x2F;姓名设置    p.setName(&quot;张三&quot;);    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;    &#x2F;&#x2F;年龄设置    p.setAge(50);    cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;    &#x2F;&#x2F;情人设置    p.setLover(&quot;苍井&quot;);    &#x2F;&#x2F;cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  &#x2F;&#x2F;只写属性，不可以读取    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/images/2024060409311501.png?msec=1717382122233" alt="2024060409311501"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/images/2024060409311502.png?msec=1717382122237" alt="2024060409311502"></p><h3 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​ 一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号 ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    &#x2F;&#x2F;构造函数    Person()    &#123;        cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;析构函数    ~Person()    &#123;        cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    Person p;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><p>两种分类方式：</p><p>​ 按参数分为： 有参构造和无参构造</p><p>​ 按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​ 括号法</p><p>​ 显示法</p><p>​ 隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、构造函数分类&#x2F;&#x2F; 按照参数分类分为 有参和无参构造   无参又称为默认构造函数&#x2F;&#x2F; 按照类型分类分为 普通构造和拷贝构造class Person &#123;public:    &#x2F;&#x2F;无参（默认）构造函数    Person() &#123;        cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;有参构造函数    Person(int a) &#123;        age &#x3D; a;        cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;拷贝构造函数    Person(const Person&amp; p) &#123;        age &#x3D; p.age;        cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;析构函数    ~Person() &#123;        cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;    &#125;public:    int age;&#125;;&#x2F;&#x2F;2、构造函数的调用&#x2F;&#x2F;调用无参构造函数void test01() &#123;    Person p; &#x2F;&#x2F;调用无参构造函数&#125;&#x2F;&#x2F;调用有参的构造函数void test02() &#123;    &#x2F;&#x2F;2.1  括号法，常用    Person p1(10);    &#x2F;&#x2F;注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明    &#x2F;&#x2F;Person p2();    &#x2F;&#x2F;2.2 显式法    Person p2 &#x3D; Person(10);     Person p3 &#x3D; Person(p2);    &#x2F;&#x2F;Person(10)单独写就是匿名对象  当前行结束之后，马上析构    &#x2F;&#x2F;2.3 隐式转换法    Person p4 &#x3D; 10; &#x2F;&#x2F; Person p4 &#x3D; Person(10);     Person p5 &#x3D; p4; &#x2F;&#x2F; Person p5 &#x3D; Person(p4);     &#x2F;&#x2F;注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明    &#x2F;&#x2F;Person p5(p4);&#125;int main() &#123;    test01();    &#x2F;&#x2F;test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    Person() &#123;        cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;        mAge &#x3D; 0;    &#125;    Person(int age) &#123;        cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;        mAge &#x3D; age;    &#125;    Person(const Person&amp; p) &#123;        cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;        mAge &#x3D; p.mAge;    &#125;    &#x2F;&#x2F;析构函数在释放内存之前调用    ~Person() &#123;        cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;    &#125;public:    int mAge;&#125;;&#x2F;&#x2F;1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() &#123;    Person man(100); &#x2F;&#x2F;p对象已经创建完毕    Person newman(man); &#x2F;&#x2F;调用拷贝构造函数    Person newman2 &#x3D; man; &#x2F;&#x2F;拷贝构造    &#x2F;&#x2F;Person newman3;    &#x2F;&#x2F;newman3 &#x3D; man; &#x2F;&#x2F;不是调用拷贝构造函数，赋值操作&#125;&#x2F;&#x2F;2. 值传递的方式给函数参数传值&#x2F;&#x2F;相当于Person p1 &#x3D; p;void doWork(Person p1) &#123;&#125;void test02() &#123;    Person p; &#x2F;&#x2F;无参构造函数    doWork(p);&#125;&#x2F;&#x2F;3. 以值方式返回局部对象Person doWork2()&#123;    Person p1;    cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;    return p1;&#125;void test03()&#123;    Person p &#x3D; doWork2();    cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;test01();    &#x2F;&#x2F;test02();    test03();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    &#x2F;&#x2F;无参（默认）构造函数    Person() &#123;        cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;有参构造函数    Person(int a) &#123;        age &#x3D; a;        cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;拷贝构造函数    Person(const Person&amp; p) &#123;        age &#x3D; p.age;        cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;析构函数    ~Person() &#123;        cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;    &#125;public:    int age;&#125;;void test01()&#123;    Person p1(18);    &#x2F;&#x2F;如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作    Person p2(p1);    cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123;    &#x2F;&#x2F;如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造    Person p1; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错    Person p2(10); &#x2F;&#x2F;用户提供的有参    Person p3(p2); &#x2F;&#x2F;此时如果用户没有提供拷贝构造，编译器会提供    &#x2F;&#x2F;如果用户提供拷贝构造，编译器不会提供其他构造函数    Person p4; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错    Person p5(10); &#x2F;&#x2F;此时如果用户自己没有提供有参，会出错    Person p6(p5); &#x2F;&#x2F;用户自己提供拷贝构造&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    &#x2F;&#x2F;无参（默认）构造函数    Person() &#123;        cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;有参构造函数    Person(int age ,int height) &#123;        cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;        m_age &#x3D; age;        m_height &#x3D; new int(height);    &#125;    &#x2F;&#x2F;拷贝构造函数      Person(const Person&amp; p) &#123;        cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;        &#x2F;&#x2F;如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题        m_age &#x3D; p.m_age;        m_height &#x3D; new int(*p.m_height);    &#125;    &#x2F;&#x2F;析构函数    ~Person() &#123;        cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;        if (m_height !&#x3D; NULL)        &#123;            delete m_height;        &#125;    &#125;public:    int m_age;    int* m_height;&#125;;void test01()&#123;    Person p1(18, 180);    Person p2(p1);    cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;    cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    &#x2F;&#x2F;&#x2F;&#x2F;传统方式初始化    &#x2F;&#x2F;Person(int a, int b, int c) &#123;    &#x2F;&#x2F;    m_A &#x3D; a;    &#x2F;&#x2F;    m_B &#x3D; b;    &#x2F;&#x2F;    m_C &#x3D; c;    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;初始化列表方式初始化    Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;    void PrintPerson() &#123;        cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;        cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;        cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;    &#125;private:    int m_A;    int m_B;    int m_C;&#125;;int main() &#123;    Person p(1, 2, 3);    p.PrintPerson();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A &#123;&#125;class B&#123;    A a；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone&#123;public:    Phone(string name)    &#123;        m_PhoneName &#x3D; name;        cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;    &#125;    ~Phone()    &#123;        cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;    &#125;    string m_PhoneName;&#125;;class Person&#123;public:    &#x2F;&#x2F;初始化列表可以告诉编译器调用哪一个构造函数    Person(string name, string pName) :m_Name(name), m_Phone(pName)    &#123;        cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;    &#125;    ~Person()    &#123;        cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;    &#125;    void playGame()    &#123;        cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;    &#125;    string m_Name;    Phone m_Phone;&#125;;void test01()&#123;    &#x2F;&#x2F;当类中成员是其他类对象时，我们称该成员为 对象成员    &#x2F;&#x2F;构造的顺序是 ：先调用对象成员的构造，再调用本类构造    &#x2F;&#x2F;析构顺序与构造相反    Person p(&quot;张三&quot; , &quot;苹果X&quot;);    p.playGame();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong> 静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    static int m_A; &#x2F;&#x2F;静态成员变量    &#x2F;&#x2F;静态成员变量特点：    &#x2F;&#x2F;1 在编译阶段分配内存    &#x2F;&#x2F;2 类内声明，类外初始化    &#x2F;&#x2F;3 所有对象共享同一份数据private:    static int m_B; &#x2F;&#x2F;静态成员变量也是有访问权限的&#125;;int Person::m_A &#x3D; 10;int Person::m_B &#x3D; 10;void test01()&#123;    &#x2F;&#x2F;静态成员变量两种访问方式    &#x2F;&#x2F;1、通过对象    Person p1;    p1.m_A &#x3D; 100;    cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl;    Person p2;    p2.m_A &#x3D; 200;    cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl; &#x2F;&#x2F;共享同一份数据    cout &lt;&lt; &quot;p2.m_A &#x3D; &quot; &lt;&lt; p2.m_A &lt;&lt; endl;    &#x2F;&#x2F;2、通过类名    cout &lt;&lt; &quot;m_A &#x3D; &quot; &lt;&lt; Person::m_A &lt;&lt; endl;    &#x2F;&#x2F;cout &lt;&lt; &quot;m_B &#x3D; &quot; &lt;&lt; Person::m_B &lt;&lt; endl; &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong> 静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    &#x2F;&#x2F;静态成员函数特点：    &#x2F;&#x2F;1 程序共享一个函数    &#x2F;&#x2F;2 静态成员函数只能访问静态成员变量    static void func()    &#123;        cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;        m_A &#x3D; 100;        &#x2F;&#x2F;m_B &#x3D; 100; &#x2F;&#x2F;错误，不可以访问非静态成员变量    &#125;    static int m_A; &#x2F;&#x2F;静态成员变量    int m_B; &#x2F;&#x2F; private:    &#x2F;&#x2F;静态成员函数也是有访问权限的    static void func2()    &#123;        cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;    &#125;&#125;;int Person::m_A &#x3D; 10;void test01()&#123;    &#x2F;&#x2F;静态成员变量两种访问方式    &#x2F;&#x2F;1、通过对象    Person p1;    p1.func();    &#x2F;&#x2F;2、通过类名    Person::func();    &#x2F;&#x2F;Person::func2(); &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-对象模型和this指针"><a href="#C-对象模型和this指针" class="headerlink" title="C++对象模型和this指针"></a>C++对象模型和this指针</h3><h4 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    Person() &#123;        mA &#x3D; 0;    &#125;    &#x2F;&#x2F;非静态成员变量占对象空间    int mA;    &#x2F;&#x2F;静态成员变量不占对象空间    static int mB;     &#x2F;&#x2F;函数也不占对象空间，所有函数共享一个函数实例    void func() &#123;        cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;    &#125;    &#x2F;&#x2F;静态成员函数也不占对象空间    static void sfunc() &#123;    &#125;&#125;;int main() &#123;    cout &lt;&lt; sizeof(Person) &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="this指针概念"><a href="#this指针概念" class="headerlink" title="this指针概念"></a>this指针概念</h4><p>通过<strong>成员变量和成员函数分开存储</strong>我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。</p><p><strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    Person(int age)    &#123;        &#x2F;&#x2F;1、当形参和成员变量同名时，可用this指针来区分        this-&gt;age &#x3D; age;    &#125;    Person&amp; PersonAddPerson(Person p)    &#123;        this-&gt;age +&#x3D; p.age;        &#x2F;&#x2F;返回对象本身        return *this;    &#125;    int age;&#125;;void test01()&#123;    Person p1(10);    cout &lt;&lt; &quot;p1.age &#x3D; &quot; &lt;&lt; p1.age &lt;&lt; endl;    Person p2(10);    p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);    cout &lt;&lt; &quot;p2.age &#x3D; &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;空指针访问成员函数class Person &#123;public:    void ShowClassName() &#123;        cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;    &#125;    void ShowPerson() &#123;        if (this &#x3D;&#x3D; NULL) &#123;            return;        &#125;        cout &lt;&lt; mAge &lt;&lt; endl;    &#125;public:    int mAge;&#125;;void test01()&#123;    Person * p &#x3D; NULL;    p-&gt;ShowClassName(); &#x2F;&#x2F;空指针，可以调用成员函数    p-&gt;ShowPerson();  &#x2F;&#x2F;但是如果成员函数中用到了this指针，就不可以了&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    Person() &#123;        m_A &#x3D; 0;        m_B &#x3D; 0;    &#125;    &#x2F;&#x2F;this指针的本质是一个指针常量，指针的指向不可修改    &#x2F;&#x2F;如果想让指针指向的值也不可以修改，需要声明常函数    void ShowPerson() const &#123;        &#x2F;&#x2F;const Type* const pointer;        &#x2F;&#x2F;this &#x3D; NULL; &#x2F;&#x2F;不能修改指针的指向 Person* const this;        &#x2F;&#x2F;this-&gt;mA &#x3D; 100; &#x2F;&#x2F;但是this指针指向的对象的数据是可以修改的        &#x2F;&#x2F;const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量        this-&gt;m_B &#x3D; 100;    &#125;    void MyFunc() const &#123;        &#x2F;&#x2F;mA &#x3D; 10000;    &#125;public:    int m_A;    mutable int m_B; &#x2F;&#x2F;可修改 可变的&#125;;&#x2F;&#x2F;const修饰对象  常对象void test01() &#123;    const Person person; &#x2F;&#x2F;常量对象      cout &lt;&lt; person.m_A &lt;&lt; endl;    &#x2F;&#x2F;person.mA &#x3D; 100; &#x2F;&#x2F;常对象不能修改成员变量的值,但是可以访问    person.m_B &#x3D; 100; &#x2F;&#x2F;但是常对象可以修改mutable修饰成员变量    &#x2F;&#x2F;常对象访问成员函数    person.MyFunc(); &#x2F;&#x2F;常对象不能调用const的函数&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为 <strong>friend</strong></p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building&#123;    &#x2F;&#x2F;告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容    friend void goodGay(Building * building);public:    Building()    &#123;        this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;        this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;    &#125;public:    string m_SittingRoom; &#x2F;&#x2F;客厅private:    string m_BedRoom; &#x2F;&#x2F;卧室&#125;;void goodGay(Building * building)&#123;    cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;    cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;    Building b;    goodGay(&amp;b);&#125;int main()&#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:    goodGay();    void visit();private:    Building *building;&#125;;class Building&#123;    &#x2F;&#x2F;告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容    friend class goodGay;public:    Building();public:    string m_SittingRoom; &#x2F;&#x2F;客厅private:    string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;    this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;    this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;    building &#x3D; new Building;&#125;void goodGay::visit()&#123;    cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;    cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;    goodGay gg;    gg.visit();&#125;int main()&#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:    goodGay();    void visit(); &#x2F;&#x2F;只让visit函数作为Building的好朋友，可以发访问Building中私有内容    void visit2(); private:    Building *building;&#125;;class Building&#123;    &#x2F;&#x2F;告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容    friend void goodGay::visit();public:    Building();public:    string m_SittingRoom; &#x2F;&#x2F;客厅private:    string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;    this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;    this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;    building &#x3D; new Building;&#125;void goodGay::visit()&#123;    cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;    cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123;    cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;    &#x2F;&#x2F;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;    goodGay  gg;    gg.visit();&#125;int main()&#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:    Person() &#123;&#125;;    Person(int a, int b)    &#123;        this-&gt;m_A &#x3D; a;        this-&gt;m_B &#x3D; b;    &#125;    &#x2F;&#x2F;成员函数实现 + 号运算符重载    Person operator+(const Person&amp; p) &#123;        Person temp;        temp.m_A &#x3D; this-&gt;m_A + p.m_A;        temp.m_B &#x3D; this-&gt;m_B + p.m_B;        return temp;    &#125;public:    int m_A;    int m_B;&#125;;&#x2F;&#x2F;全局函数实现 + 号运算符重载&#x2F;&#x2F;Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;&#x2F;&#x2F;    Person temp(0, 0);&#x2F;&#x2F;    temp.m_A &#x3D; p1.m_A + p2.m_A;&#x2F;&#x2F;    temp.m_B &#x3D; p1.m_B + p2.m_B;&#x2F;&#x2F;    return temp;&#x2F;&#x2F;&#125;&#x2F;&#x2F;运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  &#123;    Person temp;    temp.m_A &#x3D; p2.m_A + val;    temp.m_B &#x3D; p2.m_B + val;    return temp;&#125;void test() &#123;    Person p1(10, 10);    Person p2(20, 20);    &#x2F;&#x2F;成员函数方式    Person p3 &#x3D; p2 + p1;  &#x2F;&#x2F;相当于 p2.operaor+(p1)    cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;    Person p4 &#x3D; p3 + 10; &#x2F;&#x2F;相当于 operator+(p3,10)    cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;&#125;int main() &#123;    test();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的<br>总结2：不要滥用运算符重载</p></blockquote><h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:    Person(int a, int b)    &#123;        this-&gt;m_A &#x3D; a;        this-&gt;m_B &#x3D; b;    &#125;    &#x2F;&#x2F;成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果    &#x2F;&#x2F;void operator&lt;&lt;(Person&amp; p)&#123;    &#x2F;&#x2F;&#125;private:    int m_A;    int m_B;&#125;;&#x2F;&#x2F;全局函数实现左移重载&#x2F;&#x2F;ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;    out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;    return out;&#125;void test() &#123;    Person p1(10, 20);    cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; &#x2F;&#x2F;链式编程&#125;int main() &#123;    test();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger &#123;    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:    MyInteger() &#123;        m_Num &#x3D; 0;    &#125;    &#x2F;&#x2F;前置++    MyInteger&amp; operator++() &#123;        &#x2F;&#x2F;先++        m_Num++;        &#x2F;&#x2F;再返回        return *this;    &#125;    &#x2F;&#x2F;后置++    MyInteger operator++(int) &#123;        &#x2F;&#x2F;先返回        MyInteger temp &#x3D; *this; &#x2F;&#x2F;记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；        m_Num++;        return temp;    &#125;private:    int m_Num;&#125;;ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;    out &lt;&lt; myint.m_Num;    return out;&#125;&#x2F;&#x2F;前置++ 先++ 再返回void test01() &#123;    MyInteger myInt;    cout &lt;&lt; ++myInt &lt;&lt; endl;    cout &lt;&lt; myInt &lt;&lt; endl;&#125;&#x2F;&#x2F;后置++ 先返回 再++void test02() &#123;    MyInteger myInt;    cout &lt;&lt; myInt++ &lt;&lt; endl;    cout &lt;&lt; myInt &lt;&lt; endl;&#125;int main() &#123;    test01();    &#x2F;&#x2F;test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator&#x3D;, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    Person(int age)    &#123;        &#x2F;&#x2F;将年龄数据开辟到堆区        m_Age &#x3D; new int(age);    &#125;    &#x2F;&#x2F;重载赋值运算符     Person&amp; operator&#x3D;(Person &amp;p)    &#123;        if (m_Age !&#x3D; NULL)        &#123;            delete m_Age;            m_Age &#x3D; NULL;        &#125;        &#x2F;&#x2F;编译器提供的代码是浅拷贝        &#x2F;&#x2F;m_Age &#x3D; p.m_Age;        &#x2F;&#x2F;提供深拷贝 解决浅拷贝的问题        m_Age &#x3D; new int(*p.m_Age);        &#x2F;&#x2F;返回自身        return *this;    &#125;    ~Person()    &#123;        if (m_Age !&#x3D; NULL)        &#123;            delete m_Age;            m_Age &#x3D; NULL;        &#125;    &#125;    &#x2F;&#x2F;年龄的指针    int *m_Age;&#125;;void test01()&#123;    Person p1(18);    Person p2(20);    Person p3(30);    p3 &#x3D; p2 &#x3D; p1; &#x2F;&#x2F;赋值操作    cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;    cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;    cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;&#125;int main() &#123;    test01();    &#x2F;&#x2F;int a &#x3D; 10;    &#x2F;&#x2F;int b &#x3D; 20;    &#x2F;&#x2F;int c &#x3D; 30;    &#x2F;&#x2F;c &#x3D; b &#x3D; a;    &#x2F;&#x2F;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;    &#x2F;&#x2F;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;    &#x2F;&#x2F;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:    Person(string name, int age)    &#123;        this-&gt;m_Name &#x3D; name;        this-&gt;m_Age &#x3D; age;    &#125;;    bool operator&#x3D;&#x3D;(Person &amp; p)    &#123;        if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)        &#123;            return true;        &#125;        else        &#123;            return false;        &#125;    &#125;    bool operator!&#x3D;(Person &amp; p)    &#123;        if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)        &#123;            return false;        &#125;        else        &#123;            return true;        &#125;    &#125;    string m_Name;    int m_Age;&#125;;void test01()&#123;    &#x2F;&#x2F;int a &#x3D; 0;    &#x2F;&#x2F;int b &#x3D; 0;    Person a(&quot;孙悟空&quot;, 18);    Person b(&quot;孙悟空&quot;, 18);    if (a &#x3D;&#x3D; b)    &#123;        cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;    &#125;    if (a !&#x3D; b)    &#123;        cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;    &#125;    else    &#123;        cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;    &#125;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><ul><li>函数调用运算符 () 也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint&#123;public:    void operator()(string text)    &#123;        cout &lt;&lt; text &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    &#x2F;&#x2F;重载的（）操作符 也称为仿函数    MyPrint myFunc;    myFunc(&quot;hello world&quot;);&#125;class MyAdd&#123;public:    int operator()(int v1, int v2)    &#123;        return v1 + v2;    &#125;&#125;;void test02()&#123;    MyAdd add;    int ret &#x3D; add(10, 10);    cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; ret &lt;&lt; endl;    &#x2F;&#x2F;匿名对象调用      cout &lt;&lt; &quot;MyAdd()(100,100) &#x3D; &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;&#125;int main() &#123;    test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/images/2024060409311503.png?msec=1717382122233" alt="2024060409311503"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;Java页面class Java &#123;public:    void header()    &#123;        cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;    &#125;    void footer()    &#123;        cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;    &#125;    void left()    &#123;        cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;    &#125;    void content()    &#123;        cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;Python页面class Python&#123;public:    void header()    &#123;        cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;    &#125;    void footer()    &#123;        cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;    &#125;    void left()    &#123;        cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;    &#125;    void content()    &#123;        cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;C++页面class CPP &#123;public:    void header()    &#123;        cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;    &#125;    void footer()    &#123;        cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;    &#125;    void left()    &#123;        cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;    &#125;    void content()    &#123;        cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    &#x2F;&#x2F;Java页面    cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;    Java ja;    ja.header();    ja.footer();    ja.left();    ja.content();    cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;    &#x2F;&#x2F;Python页面    cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;    Python py;    py.header();    py.footer();    py.left();    py.content();    cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;    &#x2F;&#x2F;C++页面    cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;    CPP cp;    cp.header();    cp.footer();    cp.left();    cp.content();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;公共页面class BasePage&#123;public:    void header()    &#123;        cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;    &#125;    void footer()    &#123;        cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;    &#125;    void left()    &#123;        cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;Java页面class Java : public BasePage&#123;public:    void content()    &#123;        cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;Python页面class Python : public BasePage&#123;public:    void content()    &#123;        cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;C++页面class CPP : public BasePage&#123;public:    void content()    &#123;        cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    &#x2F;&#x2F;Java页面    cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;    Java ja;    ja.header();    ja.footer();    ja.left();    ja.content();    cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;    &#x2F;&#x2F;Python页面    cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;    Python py;    py.header();    py.footer();    py.left();    py.content();    cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;    &#x2F;&#x2F;C++页面    cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;    CPP cp;    cp.header();    cp.footer();    cp.left();    cp.content();&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：<strong>可以减少重复的代码</strong></p><p>class A : public B;</p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式 父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/images/2024060409311504.png?msec=1717382122236" alt="2024060409311504"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1&#123;public:     int m_A;protected:    int m_B;private:    int m_C;&#125;;&#x2F;&#x2F;公共继承class Son1 :public Base1&#123;public:    void func()    &#123;        m_A; &#x2F;&#x2F;可访问 public权限        m_B; &#x2F;&#x2F;可访问 protected权限        &#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问    &#125;&#125;;void myClass()&#123;    Son1 s1;    s1.m_A; &#x2F;&#x2F;其他类只能访问到公共权限&#125;&#x2F;&#x2F;保护继承class Base2&#123;public:    int m_A;protected:    int m_B;private:    int m_C;&#125;;class Son2:protected Base2&#123;public:    void func()    &#123;        m_A; &#x2F;&#x2F;可访问 protected权限        m_B; &#x2F;&#x2F;可访问 protected权限        &#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问    &#125;&#125;;void myClass2()&#123;    Son2 s;    &#x2F;&#x2F;s.m_A; &#x2F;&#x2F;不可访问&#125;&#x2F;&#x2F;私有继承class Base3&#123;public:    int m_A;protected:    int m_B;private:    int m_C;&#125;;class Son3:private Base3&#123;public:    void func()    &#123;        m_A; &#x2F;&#x2F;可访问 private权限        m_B; &#x2F;&#x2F;可访问 private权限        &#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问    &#125;&#125;;class GrandSon3 :public Son3&#123;public:    void func()    &#123;        &#x2F;&#x2F;Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到        &#x2F;&#x2F;m_A;        &#x2F;&#x2F;m_B;        &#x2F;&#x2F;m_C;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:    int m_A;protected:    int m_B;private:    int m_C; &#x2F;&#x2F;私有成员只是被隐藏了，但是还是会继承下去&#125;;&#x2F;&#x2F;公共继承class Son :public Base&#123;public:    int m_D;&#125;;void test01()&#123;    cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/images/2024060409311505.png?msec=1717382122278" alt="2024060409311505"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名 所属文件名</p><p>效果如下图：</p><p><img src="/images/2024060409311506.png?msec=1717382122235" alt="2024060409311506"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="继承中构造和析构顺序"><a href="#继承中构造和析构顺序" class="headerlink" title="继承中构造和析构顺序"></a>继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:    Base()    &#123;        cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;    &#125;    ~Base()    &#123;        cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;    &#125;&#125;;class Son : public Base&#123;public:    Son()    &#123;        cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;    &#125;    ~Son()    &#123;        cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    &#x2F;&#x2F;继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反    Son s;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:    Base()    &#123;        m_A &#x3D; 100;    &#125;    void func()    &#123;        cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;    &#125;    void func(int a)    &#123;        cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;    &#125;public:    int m_A;&#125;;class Son : public Base &#123;public:    Son()    &#123;        m_A &#x3D; 200;    &#125;    &#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数    &#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域    void func()    &#123;        cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;    &#125;public:    int m_A;&#125;;void test01()&#123;    Son s;    cout &lt;&lt; &quot;Son下的m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;    cout &lt;&lt; &quot;Base下的m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;    s.func();    s.Base::func();    s.Base::func(10);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="继承同名静态成员处理方式"><a href="#继承同名静态成员处理方式" class="headerlink" title="继承同名静态成员处理方式"></a>继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:    static void func()    &#123;        cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;    &#125;    static void func(int a)    &#123;        cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;    &#125;    static int m_A;&#125;;int Base::m_A &#x3D; 100;class Son : public Base &#123;public:    static void func()    &#123;        cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;    &#125;    static int m_A;&#125;;int Son::m_A &#x3D; 200;&#x2F;&#x2F;同名成员属性void test01()&#123;    &#x2F;&#x2F;通过对象访问    cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;    Son s;    cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;    cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;    &#x2F;&#x2F;通过类名访问    cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;    cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; Son::m_A &lt;&lt; endl;    cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;&#125;&#x2F;&#x2F;同名成员函数void test02()&#123;    &#x2F;&#x2F;通过对象访问    cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;    Son s;    s.func();    s.Base::func();    cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;    Son::func();    Son::Base::func();    &#x2F;&#x2F;出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问    Son::Base::func(100);&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 &#123;public:    Base1()    &#123;        m_A &#x3D; 100;    &#125;public:    int m_A;&#125;;class Base2 &#123;public:    Base2()    &#123;        m_A &#x3D; 200;  &#x2F;&#x2F;开始是m_B 不会出问题，但是改为mA就会出现不明确    &#125;public:    int m_A;&#125;;&#x2F;&#x2F;语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 &#123;public:    Son()    &#123;        m_C &#x3D; 300;        m_D &#x3D; 400;    &#125;public:    int m_C;    int m_D;&#125;;&#x2F;&#x2F;多继承容易产生成员同名的情况&#x2F;&#x2F;通过使用类名作用域可以区分调用哪一个基类的成员void test01()&#123;    Son s;    cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;    cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;    cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​ 两个派生类继承同一个基类</p><p>​ 又有某个类同时继承者两个派生类</p><p>​ 这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="/images/2024060409311508.jpg?msec=1717382122234" alt="2024060409311508"></p><p><strong>菱形继承问题：</strong></p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</li><li>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:    int m_Age;&#125;;&#x2F;&#x2F;继承前加virtual关键字后，变为虚继承&#x2F;&#x2F;此时公共的父类Animal称为虚基类class Sheep : virtual public Animal &#123;&#125;;class Tuo   : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01()&#123;    SheepTuo st;    st.Sheep::m_Age &#x3D; 100;    st.Tuo::m_Age &#x3D; 200;    cout &lt;&lt; &quot;st.Sheep::m_Age &#x3D; &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;    cout &lt;&lt; &quot;st.Tuo::m_Age &#x3D; &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;    cout &lt;&lt; &quot;st.m_Age &#x3D; &quot; &lt;&lt; st.m_Age &lt;&lt; endl;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="多态的基本概念"><a href="#多态的基本概念" class="headerlink" title="多态的基本概念"></a>多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:    &#x2F;&#x2F;Speak函数就是虚函数    &#x2F;&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。    virtual void speak()    &#123;        cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;    &#125;&#125;;class Cat :public Animal&#123;public:    void speak()    &#123;        cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;    &#125;&#125;;class Dog :public Animal&#123;public:    void speak()    &#123;        cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal)&#123;    animal.speak();&#125;&#x2F;&#x2F;&#x2F;&#x2F;多态满足条件： &#x2F;&#x2F;1、有继承关系&#x2F;&#x2F;2、子类重写父类中的虚函数&#x2F;&#x2F;多态使用：&#x2F;&#x2F;父类指针或引用指向子类对象void test01()&#123;    Cat cat;    DoSpeak(cat);    Dog dog;    DoSpeak(dog);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p><h4 id="多态案例一-计算器类"><a href="#多态案例一-计算器类" class="headerlink" title="多态案例一-计算器类"></a>多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;普通实现class Calculator &#123;public:    int getResult(string oper)    &#123;        if (oper &#x3D;&#x3D; &quot;+&quot;) &#123;            return m_Num1 + m_Num2;        &#125;        else if (oper &#x3D;&#x3D; &quot;-&quot;) &#123;            return m_Num1 - m_Num2;        &#125;        else if (oper &#x3D;&#x3D; &quot;*&quot;) &#123;            return m_Num1 * m_Num2;        &#125;        &#x2F;&#x2F;如果要提供新的运算，需要修改源码    &#125;public:    int m_Num1;    int m_Num2;&#125;;void test01()&#123;    &#x2F;&#x2F;普通实现测试    Calculator c;    c.m_Num1 &#x3D; 10;    c.m_Num2 &#x3D; 10;    cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;    cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;    cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;&#125;&#x2F;&#x2F;多态实现&#x2F;&#x2F;抽象计算器类&#x2F;&#x2F;多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator&#123;public :    virtual int getResult()    &#123;        return 0;    &#125;    int m_Num1;    int m_Num2;&#125;;&#x2F;&#x2F;加法计算器class AddCalculator :public AbstractCalculator&#123;public:    int getResult()    &#123;        return m_Num1 + m_Num2;    &#125;&#125;;&#x2F;&#x2F;减法计算器class SubCalculator :public AbstractCalculator&#123;public:    int getResult()    &#123;        return m_Num1 - m_Num2;    &#125;&#125;;&#x2F;&#x2F;乘法计算器class MulCalculator :public AbstractCalculator&#123;public:    int getResult()    &#123;        return m_Num1 * m_Num2;    &#125;&#125;;void test02()&#123;    &#x2F;&#x2F;创建加法计算器    AbstractCalculator *abc &#x3D; new AddCalculator;    abc-&gt;m_Num1 &#x3D; 10;    abc-&gt;m_Num2 &#x3D; 10;    cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;    delete abc;  &#x2F;&#x2F;用完了记得销毁    &#x2F;&#x2F;创建减法计算器    abc &#x3D; new SubCalculator;    abc-&gt;m_Num1 &#x3D; 10;    abc-&gt;m_Num2 &#x3D; 10;    cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;    delete abc;      &#x2F;&#x2F;创建乘法计算器    abc &#x3D; new MulCalculator;    abc-&gt;m_Num1 &#x3D; 10;    abc-&gt;m_Num2 &#x3D; 10;    cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;    delete abc;&#125;int main() &#123;    &#x2F;&#x2F;test01();    test02();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:    &#x2F;&#x2F;纯虚函数    &#x2F;&#x2F;类中只要有一个纯虚函数就称为抽象类    &#x2F;&#x2F;抽象类无法实例化对象    &#x2F;&#x2F;子类必须重写父类中的纯虚函数，否则也属于抽象类    virtual void func() &#x3D; 0;&#125;;class Son :public Base&#123;public:    virtual void func()     &#123;        cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;    &#125;;&#125;;void test01()&#123;    Base * base &#x3D; NULL;    &#x2F;&#x2F;base &#x3D; new Base; &#x2F;&#x2F; 错误，抽象类无法实例化对象    base &#x3D; new Son;    base-&gt;func();    delete base;&#x2F;&#x2F;记得销毁&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多态案例二-制作饮品"><a href="#多态案例二-制作饮品" class="headerlink" title="多态案例二-制作饮品"></a>多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/images/2024060409311507.png?msec=1717382122343" alt="2024060409311507"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;抽象制作饮品class AbstractDrinking &#123;public:    &#x2F;&#x2F;烧水    virtual void Boil() &#x3D; 0;    &#x2F;&#x2F;冲泡    virtual void Brew() &#x3D; 0;    &#x2F;&#x2F;倒入杯中    virtual void PourInCup() &#x3D; 0;    &#x2F;&#x2F;加入辅料    virtual void PutSomething() &#x3D; 0;    &#x2F;&#x2F;规定流程    void MakeDrink() &#123;        Boil();        Brew();        PourInCup();        PutSomething();    &#125;&#125;;&#x2F;&#x2F;制作咖啡class Coffee : public AbstractDrinking &#123;public:    &#x2F;&#x2F;烧水    virtual void Boil() &#123;        cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;冲泡    virtual void Brew() &#123;        cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;倒入杯中    virtual void PourInCup() &#123;        cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;加入辅料    virtual void PutSomething() &#123;        cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;制作茶水class Tea : public AbstractDrinking &#123;public:    &#x2F;&#x2F;烧水    virtual void Boil() &#123;        cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;冲泡    virtual void Brew() &#123;        cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;倒入杯中    virtual void PourInCup() &#123;        cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;加入辅料    virtual void PutSomething() &#123;        cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;业务函数void DoWork(AbstractDrinking* drink) &#123;    drink-&gt;MakeDrink();    delete drink;&#125;void test01() &#123;    DoWork(new Coffee);    cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;    DoWork(new Tea);&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal &#123;public:    Animal()    &#123;        cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;    &#125;    virtual void Speak() &#x3D; 0;    &#x2F;&#x2F;析构函数加上virtual关键字，变成虚析构函数    &#x2F;&#x2F;virtual ~Animal()    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;    cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;    &#x2F;&#x2F;&#125;    virtual ~Animal() &#x3D; 0;&#125;;Animal::~Animal()&#123;    cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal &#123;public:    Cat(string name)    &#123;        cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;        m_Name &#x3D; new string(name);    &#125;    virtual void Speak()    &#123;        cout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;    &#125;    ~Cat()    &#123;        cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;        if (this-&gt;m_Name !&#x3D; NULL) &#123;            delete m_Name;            m_Name &#x3D; NULL;        &#125;    &#125;public:    string *m_Name;&#125;;void test01()&#123;    Animal *animal &#x3D; new Cat(&quot;Tom&quot;);    animal-&gt;Speak();    &#x2F;&#x2F;通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏    &#x2F;&#x2F;怎么解决？给基类增加一个虚析构函数    &#x2F;&#x2F;虚析构函数就是用来解决通过父类指针释放子类对象    delete animal;&#125;int main() &#123;    test01();    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​ 3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="多态案例三-电脑组装"><a href="#多态案例三-电脑组装" class="headerlink" title="多态案例三-电脑组装"></a>多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;抽象CPU类class CPU&#123;public:    &#x2F;&#x2F;抽象的计算函数    virtual void calculate() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象显卡类class VideoCard&#123;public:    &#x2F;&#x2F;抽象的显示函数    virtual void display() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象内存条类class Memory&#123;public:    &#x2F;&#x2F;抽象的存储函数    virtual void storage() &#x3D; 0;&#125;;&#x2F;&#x2F;电脑类class Computer&#123;public:    Computer(CPU * cpu, VideoCard * vc, Memory * mem)    &#123;        m_cpu &#x3D; cpu;        m_vc &#x3D; vc;        m_mem &#x3D; mem;    &#125;    &#x2F;&#x2F;提供工作的函数    void work()    &#123;        &#x2F;&#x2F;让零件工作起来，调用接口        m_cpu-&gt;calculate();        m_vc-&gt;display();        m_mem-&gt;storage();    &#125;    &#x2F;&#x2F;提供析构函数 释放3个电脑零件    ~Computer()    &#123;        &#x2F;&#x2F;释放CPU零件        if (m_cpu !&#x3D; NULL)        &#123;            delete m_cpu;            m_cpu &#x3D; NULL;        &#125;        &#x2F;&#x2F;释放显卡零件        if (m_vc !&#x3D; NULL)        &#123;            delete m_vc;            m_vc &#x3D; NULL;        &#125;        &#x2F;&#x2F;释放内存条零件        if (m_mem !&#x3D; NULL)        &#123;            delete m_mem;            m_mem &#x3D; NULL;        &#125;    &#125;private:    CPU * m_cpu; &#x2F;&#x2F;CPU的零件指针    VideoCard * m_vc; &#x2F;&#x2F;显卡零件指针    Memory * m_mem; &#x2F;&#x2F;内存条零件指针&#125;;&#x2F;&#x2F;具体厂商&#x2F;&#x2F;Intel厂商class IntelCPU :public CPU&#123;public:    virtual void calculate()    &#123;        cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;    &#125;&#125;;class IntelVideoCard :public VideoCard&#123;public:    virtual void display()    &#123;        cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;    &#125;&#125;;class IntelMemory :public Memory&#123;public:    virtual void storage()    &#123;        cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;    &#125;&#125;;&#x2F;&#x2F;Lenovo厂商class LenovoCPU :public CPU&#123;public:    virtual void calculate()    &#123;        cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;    &#125;&#125;;class LenovoVideoCard :public VideoCard&#123;public:    virtual void display()    &#123;        cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;    &#125;&#125;;class LenovoMemory :public Memory&#123;public:    virtual void storage()    &#123;        cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;    &#125;&#125;;void test01()&#123;    &#x2F;&#x2F;第一台电脑零件    CPU * intelCpu &#x3D; new IntelCPU;    VideoCard * intelCard &#x3D; new IntelVideoCard;    Memory * intelMem &#x3D; new IntelMemory;    cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;    &#x2F;&#x2F;创建第一台电脑    Computer * computer1 &#x3D; new Computer(intelCpu, intelCard, intelMem);    computer1-&gt;work();    delete computer1;    cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;    &#x2F;&#x2F;第二台电脑组装    Computer * computer2 &#x3D; new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;    computer2-&gt;work();    delete computer2;    cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;    &#x2F;&#x2F;第三台电脑组装    Computer * computer3 &#x3D; new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;    computer3-&gt;work();    delete computer3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程-函数提高</title>
      <link href="/c-c/c-he-xin-bian-cheng-han-shu-ti-gao/"/>
      <url>/c-c/c-he-xin-bian-cheng-han-shu-ti-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型 函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b &#x3D; 10, int c &#x3D; 10) &#123;    return a + b + c;&#125;&#x2F;&#x2F;1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值&#x2F;&#x2F;2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a &#x3D; 10, int b &#x3D; 10);int func2(int a, int b) &#123;    return a + b;&#125;int main() &#123;    cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;    cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(100) &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数占位参数 ，占位参数也可以有默认参数void func(int a, int) &#123;    cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;&#125;int main() &#123;    func(10,10); &#x2F;&#x2F;占位参数必须填补    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><h4 id="函数重载概述"><a href="#函数重载概述" class="headerlink" title="函数重载概述"></a>函数重载概述</h4><p><strong>作用：</strong> 函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong> 函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载需要函数都在同一个作用域下void func()&#123;    cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;&#125;void func(int a)&#123;    cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a)&#123;    cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;&#125;void func(int a ,double b)&#123;    cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a ,int b)&#123;    cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;函数返回值不可以作为函数重载条件&#x2F;&#x2F;int func(double a, int b)&#x2F;&#x2F;&#123;&#x2F;&#x2F;    cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;int main() &#123;    func();    func(10);    func(3.14);    func(10,3.14);    func(3.14 , 10);    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数重载注意事项"><a href="#函数重载注意事项" class="headerlink" title="函数重载注意事项"></a>函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载注意事项&#x2F;&#x2F;1、引用作为重载条件void func(int &amp;a)&#123;    cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;void func(const int &amp;a)&#123;    cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;2、函数重载碰到函数默认参数void func2(int a, int b &#x3D; 10)&#123;    cout &lt;&lt; &quot;func2(int a, int b &#x3D; 10) 调用&quot; &lt;&lt; endl;&#125;void func2(int a)&#123;    cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;&#125;int main() &#123;    int a &#x3D; 10;    func(a); &#x2F;&#x2F;调用无const    func(10);&#x2F;&#x2F;调用有const    &#x2F;&#x2F;func2(10); &#x2F;&#x2F;碰到默认参数产生歧义，需要避免    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程-引用</title>
      <link href="/c-c/c-he-xin-bian-cheng-yin-yong/"/>
      <url>/c-c/c-he-xin-bian-cheng-yin-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="引用的基本使用"><a href="#引用的基本使用" class="headerlink" title="引用的基本使用"></a>引用的基本使用</h3><p><strong>作用：</strong> 给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;    int a &#x3D; 10;    int &amp;b &#x3D; a;    cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;    b &#x3D; 100;    cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用注意事项"><a href="#引用注意事项" class="headerlink" title="引用注意事项"></a>引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;    int a &#x3D; 10;    int b &#x3D; 20;    &#x2F;&#x2F;int &amp;c; &#x2F;&#x2F;错误，引用必须初始化    int &amp;c &#x3D; a; &#x2F;&#x2F;一旦初始化后，就不可以更改    c &#x3D; b; &#x2F;&#x2F;这是赋值操作，不是更改引用    cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h3><p><strong>作用：</strong> 函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong> 可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1. 值传递void mySwap01(int a, int b) &#123;    int temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;&#x2F;&#x2F;2. 地址传递void mySwap02(int* a, int* b) &#123;    int temp &#x3D; *a;    *a &#x3D; *b;    *b &#x3D; temp;&#125;&#x2F;&#x2F;3. 引用传递void mySwap03(int&amp; a, int&amp; b) &#123;    int temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;int main() &#123;    int a &#x3D; 10;    int b &#x3D; 20;    mySwap01(a, b);    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;    mySwap02(&amp;a, &amp;b);    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;    mySwap03(a, b);    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;返回局部变量引用int&amp; test01() &#123;    int a &#x3D; 10; &#x2F;&#x2F;局部变量    return a;&#125;&#x2F;&#x2F;返回静态变量引用int&amp; test02() &#123;    static int a &#x3D; 20;    return a;&#125;int main() &#123;    &#x2F;&#x2F;不能返回局部变量的引用    int&amp; ref &#x3D; test01();    cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;    cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;    &#x2F;&#x2F;如果函数做左值，那么必须返回引用    int&amp; ref2 &#x3D; test02();    cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;    cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;    test02() &#x3D; 1000;    cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;    cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;发现是引用，转换为 int* const ref &#x3D; &amp;a;void func(int&amp; ref)&#123;    ref &#x3D; 100; &#x2F;&#x2F; ref是引用，转换为*ref &#x3D; 100&#125;int main()&#123;    int a &#x3D; 10;    &#x2F;&#x2F;自动转换为 int* const ref &#x3D; &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改    int&amp; ref &#x3D; a;     ref &#x3D; 20; &#x2F;&#x2F;内部发现ref是引用，自动帮我们转换为: *ref &#x3D; 20;    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;    func(a);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p><strong>作用：</strong> 常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加<strong>const修饰形参</strong>，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) &#123;    &#x2F;&#x2F;v +&#x3D; 10;    cout &lt;&lt; v &lt;&lt; endl;&#125;int main() &#123;    &#x2F;&#x2F;int&amp; ref &#x3D; 10;  引用本身需要一个合法的内存空间，因此这行错误    &#x2F;&#x2F;加入const就可以了，编译器优化代码，int temp &#x3D; 10; const int&amp; ref &#x3D; temp;    const int&amp; ref &#x3D; 10;    &#x2F;&#x2F;ref &#x3D; 100;  &#x2F;&#x2F;加入const后不可以修改变量    cout &lt;&lt; ref &lt;&lt; endl;    &#x2F;&#x2F;函数中利用常量引用防止误操作修改实参    int a &#x3D; 10;    showValue(a);    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程-内存分区模型</title>
      <link href="/c-c/c-he-xin-bian-cheng-nei-cun-fen-qu-mo-xing/"/>
      <url>/c-c/c-he-xin-bian-cheng-nei-cun-fen-qu-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h3><p>在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​ <strong>代码区：</strong></p><p>​ 存放 CPU 执行的机器指令</p><p>​ 代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​ 代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​ <strong>全局区：</strong></p><p>​ 全局变量和静态变量存放在此.</p><p>​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​ &#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;.</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;全局变量int g_a &#x3D; 10;int g_b &#x3D; 10;&#x2F;&#x2F;全局常量const int c_g_a &#x3D; 10;const int c_g_b &#x3D; 10;int main() &#123;    &#x2F;&#x2F;局部变量    int a &#x3D; 10;    int b &#x3D; 10;    &#x2F;&#x2F;打印地址    cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;    cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;    cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;    cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;    &#x2F;&#x2F;静态变量    static int s_a &#x3D; 10;    static int s_b &#x3D; 10;    cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;    cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;    cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;    cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;    const int c_l_a &#x3D; 10;    const int c_l_b &#x3D; 10;    cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;    cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量 和 字符串常量</li></ul><h3 id="程序运行后"><a href="#程序运行后" class="headerlink" title="程序运行后"></a>程序运行后</h3><p>​ <strong>栈区：</strong></p><p>​ 由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func()&#123;    int a &#x3D; 10;    return &amp;a;&#125;int main() &#123;    int *p &#x3D; func();    cout &lt;&lt; *p &lt;&lt; endl;    cout &lt;&lt; *p &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​ <strong>堆区：</strong></p><p>​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​ 在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int* func()&#123;    int* a &#x3D; new int(10);    return a;&#125;int main() &#123;    int *p &#x3D; func();    cout &lt;&lt; *p &lt;&lt; endl;    cout &lt;&lt; *p &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><p>​ C++中利用<strong>new</strong>操作符在堆区开辟数据</p><p>​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <strong>delete</strong></p><p>​ 语法：<code> new 数据类型</code></p><p>​ 利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int* func()&#123;    int* a &#x3D; new int(10);    return a;&#125;int main() &#123;    int *p &#x3D; func();    cout &lt;&lt; *p &lt;&lt; endl;    cout &lt;&lt; *p &lt;&lt; endl;    &#x2F;&#x2F;利用delete释放堆区数据    delete p;    &#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;报错，释放的空间不可访问    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;堆区开辟数组int main() &#123;    int* arr &#x3D; new int[10];    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        arr[i] &#x3D; i + 100;    &#125;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        cout &lt;&lt; arr[i] &lt;&lt; endl;    &#125;    &#x2F;&#x2F;释放数组 delete 后加 []    delete[] arr;    system(&quot;pause&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言文件操作</title>
      <link href="/c-c/c-yu-yan-wen-jian-cao-zuo/"/>
      <url>/c-c/c-yu-yan-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="磁盘文件和设备文件"><a href="#磁盘文件和设备文件" class="headerlink" title="磁盘文件和设备文件"></a>磁盘文件和设备文件</h4><h5 id="磁盘文件"><a href="#磁盘文件" class="headerlink" title="磁盘文件"></a>磁盘文件</h5><p>指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存。</p><h5 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h5><p>在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写。</p><h4 id="磁盘文件的分类"><a href="#磁盘文件的分类" class="headerlink" title="磁盘文件的分类"></a>磁盘文件的分类</h4><p>计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储。</p><p>从用户或者操作系统使用的角度（逻辑上）把文件分为：<br><img src="/images/2024060310131101.png" alt="2024060310131101"></p><ul><li>文本文件：基于字符编码的文件  </li><li>二进制文件：基于值编码的文件</li></ul><h4 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h4><h5 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h5><ul><li>基于字符编码，常见编码有ASCII、UNICODE等</li><li>一般可以使用文本编辑器直接打开</li><li>数5678的以ASCII存储形式(ASCII码)为：<br>00110101 00110110 00110111 00111000</li></ul><h5 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h5><ul><li>基于值编码,自己根据具体应用,指定某个值是什么意思</li><li>把内存中的数据按其在内存中的存储形式原样输出到磁盘上</li><li>数5678的存储形式(二进制码)为：<br>00010110 00101110</li></ul><h3 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h3><h4 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h4><p>在C语言中用一个指针变量指向一个文件，这个指针称为文件指针。 </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct&#123;    short           level;  &#x2F;&#x2F;缓冲区&quot;满&quot;或者&quot;空&quot;的程度     unsigned        flags;  &#x2F;&#x2F;文件状态标志     char            fd;     &#x2F;&#x2F;文件描述符    unsigned char   hold;   &#x2F;&#x2F;如无缓冲区不读取字符    short           bsize;  &#x2F;&#x2F;缓冲区的大小    unsigned char   *buffer;&#x2F;&#x2F;数据缓冲区的位置     unsigned        ar;     &#x2F;&#x2F;指针，当前的指向     unsigned        istemp; &#x2F;&#x2F;临时文件，指示器    short           token;  &#x2F;&#x2F;用于有效性的检查 &#125;FILE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2024060310131102.png" alt="2024060310131102"><br>C语言中有三个特殊的文件指针由系统默认打开，<strong>用户无需定义即可直接使用</strong>:</p><ul><li><strong>stdin</strong>:标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据。</li><li><strong>stdout</strong>:标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端。</li><li><strong>stderr</strong>:标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端。</li></ul><h4 id="文件的打开"><a href="#文件的打开" class="headerlink" title="文件的打开"></a>文件的打开</h4><p>任何文件使用之前必须打开：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*FILE * fopen(const char * filename, const char * mode);功能：打开文件参数：    filename：需要打开的文件名，根据需要加上路径    mode：打开文件的模式设置返回值：    成功：文件指针    失败：NULL*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个参数的几种形式:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">FILE *f &#x3D; NULL;&#x2F;&#x2F;相对路径：&#x2F;&#x2F;打开当前目录test文件：源文件(源程序)所在目录FILE *f &#x3D; fopen(&quot;test.txt&quot;, &quot;r&quot;);    &#x2F;&#x2F;打开当前目录(test)下test.txt文件f &#x3D; fopen(&quot;.&#x2F;test&#x2F;test.txt&quot;, &quot;r&quot;);    &#x2F;&#x2F;打开当前目录上一级目录（相对当前目录）test.txt文件f &#x3D; fopen(&quot;..&#x2F;test.txt&quot;, &quot;r&quot;);&#x2F;&#x2F;绝对路径：&#x2F;&#x2F;打开C盘test目录下一个叫test.txt文件f &#x3D; fopen(&quot;c:&#x2F;test&#x2F;test.txt&quot;,&quot;r&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个参数的几种形式:</p><table><thead><tr><th>打开模式</th><th>含义</th></tr></thead><tbody><tr><td>r或rb</td><td>以只读方式打开一个文本文件（不创建文件，若文件不存在则报错）</td></tr><tr><td>w或wb</td><td>以写方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td></tr><tr><td>a或ab</td><td>以追加方式打开文件，在末尾添加内容，若文件不存在则创建文件</td></tr><tr><td>r+或rb+</td><td>以可读、可写的方式打开文件(不创建新文件)</td></tr><tr><td>w+或wb+</td><td>以可读、可写的方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td></tr><tr><td>a+或ab+</td><td>以添加方式打开文件，打开文件并在末尾更改文件,若文件不存在则创建文件</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li><li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li><li>在Windows平台下，以“文本”方式打开文件，不加b：<ul><li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li><li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入</li><li><strong>以”二进制”方式打开文件，则读\n写都不会进行这样的转换</strong></li></ul></li><li>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main(void)&#123;    FILE *fp &#x3D; NULL;    &#x2F;&#x2F; &quot;\\&quot;这样的路径形式，只能在windows使用    &#x2F;&#x2F; &quot;&#x2F;&quot;这样的路径形式，windows和linux平台下都可用，建议使用这种    &#x2F;&#x2F; 路径可以是相对路径，也可是绝对路径    fp &#x3D; fopen(&quot;..&#x2F;test&quot;, &quot;w&quot;);    &#x2F;&#x2F;fp &#x3D; fopen(&quot;..\\test&quot;, &quot;w&quot;);    if (fp &#x3D;&#x3D; NULL) &#x2F;&#x2F;返回空，说明打开失败    &#123;        &#x2F;&#x2F;perror()是标准出错打印函数，能打印调用库函数出错原因        perror(&quot;open&quot;);        return -1;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件的关闭"><a href="#文件的关闭" class="headerlink" title="文件的关闭"></a>文件的关闭</h4><p>任何文件在使用后应该关闭：</p><ul><li>打开的文件会占用内存资源，如果总是打开不关闭，会消耗很多内存</li><li>一个进程同时打开的文件数是有限制的，超过最大同时打开文件数，再次调用fopen打开文件会失败</li><li>如果没有明确的调用fclose关闭打开的文件，那么程序在退出的时候，操作系统会统一关闭。</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fclose(FILE * stream);功能：关闭先前fopen()打开的文件。此动作让缓冲区的数据写入文件中，并释放系统所提供的文件资源。参数：    stream：文件指针返回值：    成功：0    失败：-1*&#x2F;int main(void)&#123;    FILE * fp &#x3D; NULL;    fp &#x3D; fopen(&quot;abc.txt&quot;, &quot;r&quot;);    fclose(fp);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件的顺序读写"><a href="#文件的顺序读写" class="headerlink" title="文件的顺序读写"></a>文件的顺序读写</h3><h4 id="按字符读写文件"><a href="#按字符读写文件" class="headerlink" title="按字符读写文件"></a>按字符读写文件</h4><h5 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fputc(int ch, FILE * stream);功能：将ch转换为unsigned char后写入stream指定的文件中参数：    ch：需要写入文件的字符    stream：文件指针返回值：    成功：成功写入文件的字符    失败：返回-1*&#x2F;int main()&#123;    FILE * fp &#x3D; NULL;    fp &#x3D; fopen(&quot;abc.txt&quot;, &quot;w&quot;);    char buf[] &#x3D; &quot;this is a test for fputc&quot;;    int i &#x3D; 0;    int n &#x3D; strlen(buf);    for (i &#x3D; 0; i &lt; n; i++)    &#123;        &#x2F;&#x2F;往文件fp写入字符buf[i]        int ch &#x3D; fputc(buf[i], fp);        printf(&quot;ch &#x3D; %c\n&quot;, ch);    &#125;    fclose(fp);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="文件结尾"><a href="#文件结尾" class="headerlink" title="文件结尾"></a>文件结尾</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define EOF (-1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，<strong>这种以EOF作为文件结束标志的文件，必须是文本文件</strong>。在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志。</p><p>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。<strong>feof函数既可用以判断二进制文件又可用以判断文本文件</strong>。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int feof(FILE * stream);功能：检测是否读取到了文件结尾。判断的是最后一次“读操作的内容”，不是当前位置内容(上一个内容)。参数：    stream：文件指针返回值：    非0值：已经到文件结尾    0：没有到文件结尾*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fgetc(FILE * stream);功能：从stream指定的文件中读取一个字符参数：    stream：文件指针返回值：    成功：返回读取到的字符    失败：-1*&#x2F;int main()&#123;    FILE * fp &#x3D; NULL;    fp &#x3D; fopen(&quot;abc.txt&quot;, &quot;r&quot;);    char ch;    #if 0    while ((ch &#x3D; fgetc(fp)) !&#x3D; EOF)    &#123;        printf(&quot;%c&quot;, ch);    &#125;    printf(&quot;\n&quot;);    #endif    while (!feof(fp)) &#x2F;&#x2F;文件没有结束，则执行循环    &#123;        ch &#x3D; fgetc(fp);        printf(&quot;%c&quot;, ch);    &#125;    printf(&quot;\n&quot;);    fclose(fp);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按行读写文件"><a href="#按行读写文件" class="headerlink" title="按行读写文件"></a>按行读写文件</h4><h5 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fputs(const char * str, FILE * stream);功能：将str所指定的字符串写入到stream指定的文件中，字符串结束符 &#39;\0&#39;  不写入文件。 参数：    str：字符串    stream：文件指针返回值：6    成功：0    失败：-1*&#x2F;int main()&#123;    FILE * fp &#x3D; NULL;    fp &#x3D; fopen(&quot;abc.txt&quot;, &quot;w&quot;);    char *buf[] &#x3D; &#123; &quot;123456\n&quot;, &quot;bbbbbbbbbb\n&quot;, &quot;ccccccccccc\n&quot; &#125;;    int i &#x3D; 0;    int n &#x3D; 3;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        int len &#x3D; fputs(buf[i], fp);        printf(&quot;len &#x3D; %d\n&quot;, len);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*char * fgets(char * str, int size, FILE * stream);功能：从stream指定的文件内读入字符，保存到str所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 &#39;\0&#39; 作为字符串结束。参数：    str：字符串    size：指定最大读取字符串的长度（size - 1）    stream：文件指针返回值：    成功：成功读取的字符串    读到文件尾或出错： NULL*&#x2F;int main()&#123;    FILE * fp &#x3D; NULL;    fp &#x3D; fopen(&quot;abc.txt&quot;, &quot;r&quot;);    char buf[100] &#x3D; 0;    while (!feof(fp)) &#x2F;&#x2F;文件没有结束    &#123;        memset(buf, 0, sizeof(buf));        char *p &#x3D; fgets(buf, sizeof(buf), fp);        if (p !&#x3D; NULL)        &#123;            printf(&quot;buf &#x3D; %s&quot;, buf);        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化文件"><a href="#格式化文件" class="headerlink" title="格式化文件"></a>格式化文件</h4><h5 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fprintf(FILE * stream, const char * format, ...);功能：根据参数format字符串来转换并格式化数据，然后将结果输出到stream指定的文件中，指定出现字符串结束符 &#39;\0&#39;  为止。参数：    stream：已经打开的文件    format：字符串格式，用法和printf()一样返回值：    成功：实际写入文件的字符个数    失败：-1*&#x2F;fprintf(fp, &quot;%d %d %d\n&quot;, 1, 2, 3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fscanf(FILE * stream, const char * format, ...);功能：从stream指定的文件读取字符串，并根据参数format字符串来转换并格式化数据。参数：    stream：已经打开的文件    format：字符串格式，用法和scanf()一样返回值：    成功：参数数目，成功转换的值的个数    失败： - 1*&#x2F;int a &#x3D; 0;int b &#x3D; 0;int c &#x3D; 0;fscanf(fp, &quot;%d %d %d\n&quot;, &amp;a, &amp;b, &amp;c);printf(&quot;a &#x3D; %d, b &#x3D; %d, c &#x3D; %d\n&quot;, a, b, c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按块读写文件"><a href="#按块读写文件" class="headerlink" title="按块读写文件"></a>按块读写文件</h4><h5 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);功能：以数据块的方式给文件写入内容参数：    ptr：准备写入文件数据的地址    size： size_t 为 unsigned int类型，此参数指定写入文件内容的块数据大小    nmemb：写入文件的块数，写入文件数据总大小为：size * nmemb    stream：已经打开的文件指针返回值：    成功：实际成功写入文件数据的块数目，此值和 nmemb 相等    失败：0*&#x2F;typedef struct Stu&#123;    char name[50];    int id;&#125;Stu;Stu s[3];int i &#x3D; 0;for (i &#x3D; 0; i &lt; 3; i++)&#123;    sprintf(s[i].name, &quot;stu%d%d%d&quot;, i, i, i);    s[i].id &#x3D; i + 1;&#125;int ret &#x3D; fwrite(s, sizeof(Stu), 3, fp);printf(&quot;ret &#x3D; %d\n&quot;, ret);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);功能：以数据块的方式从文件中读取内容参数：    ptr：存放读取出来数据的内存空间    size： size_t 为 unsigned int类型，此参数指定读取文件内容的块数据大小    nmemb：读取文件的块数，读取文件数据总大小为：size * nmemb    stream：已经打开的文件指针返回值：    成功：实际成功读取到内容的块数，如果此值比nmemb小，但大于0，说明读到文件的结尾。    失败：0*&#x2F;typedef struct Stu&#123;    char name[50];    int id;&#125;Stu;Stu s[3];int ret &#x3D; fread(s, sizeof(Stu), 3, fp);printf(&quot;ret &#x3D; %d\n&quot;, ret);int i &#x3D; 0;for (i &#x3D; 0; i &lt; 3; i++)&#123;    printf(&quot;s &#x3D; %s, %d\n&quot;, s[i].name, s[i].id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h3><h4 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fseek(FILE *stream, long offset, int whence);功能：移动文件流（文件光标）的读写位置。参数：    stream：已经打开的文件指针    offset：根据whence来移动的位移数（偏移量），可以是正数，也可以负数，如果正数，则相对于whence往右移动，如果是负数，则相对于whence往左移动。如果向前移动的字节数超过了文件开头则出错返回，如果向后移动的字节数超过了文件末尾，再次写入时将增大文件尺寸。    whence：其取值如下：        SEEK_SET：从文件开头移动offset个字节        SEEK_CUR：从当前位置移动offset个字节        SEEK_END：从文件末尾移动offset个字节返回值：    成功：0    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*long ftell(FILE *stream);功能：获取文件流（文件光标）的读写位置。参数：    stream：已经打开的文件指针返回值：    成功：当前文件流（文件光标）的读写位置    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*void rewind(FILE *stream);功能：把文件流（文件光标）的读写位置移动到文件开头。参数：    stream：已经打开的文件指针返回值：    无返回值*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct Stu&#123;    char name[50];    int id;&#125;Stu;&#x2F;&#x2F;假如已经往文件写入3个结构体&#x2F;&#x2F;fwrite(s, sizeof(Stu), 3, fp);Stu s[3];Stu tmp; int ret &#x3D; 0;&#x2F;&#x2F;文件光标读写位置从开头往右移动2个结构体的位置fseek(fp, 2 * sizeof(Stu), SEEK_SET);&#x2F;&#x2F;读第3个结构体ret &#x3D; fread(&amp;tmp, sizeof(Stu), 1, fp);if (ret &#x3D;&#x3D; 1)&#123;    printf(&quot;[tmp]%s, %d\n&quot;, tmp.name, tmp.id);&#125;&#x2F;&#x2F;把文件光标移动到文件开头&#x2F;&#x2F;fseek(fp, 0, SEEK_SET);rewind(fp);ret &#x3D; fread(s, sizeof(Stu), 3, fp);printf(&quot;ret &#x3D; %d\n&quot;, ret);int i &#x3D; 0;for (i &#x3D; 0; i &lt; 3; i++)&#123;    printf(&quot;s &#x3D;&#x3D;&#x3D; %s, %d\n&quot;, s[i].name, s[i].id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Windows和Linux文本文件区别"><a href="#Windows和Linux文本文件区别" class="headerlink" title="Windows和Linux文本文件区别"></a>Windows和Linux文本文件区别</h3><ul><li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li><li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li><li>在Windows平台下，以“文本”方式打开文件，不加b：<ul><li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li><li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入</li><li><strong>以”二进制”方式打开文件，则读\写都不会进行这样的转换</strong></li></ul></li><li>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li></ul><p>判断文本文件是Linux格式还是Windows格式:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int main(int argc, char **args)&#123;    if (argc &lt; 2)        return 0;    FILE *p &#x3D; fopen(args[1], &quot;rb&quot;);    if (!p)        return 0;    char a[1024] &#x3D; &#123; 0 &#125;;    fgets(a, sizeof(a), p);    int len &#x3D; 0;    while (a[len])    &#123;        if (a[len] &#x3D;&#x3D; &#39;\n&#39;)        &#123;            if (a[len - 1] &#x3D;&#x3D; &#39;\r&#39;)            &#123;                printf(&quot;windows file\n&quot;);            &#125;            else            &#123;                printf(&quot;linux file\n&quot;);            &#125;        &#125;        len++;    &#125;    fclose(p);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取文件状态"><a href="#获取文件状态" class="headerlink" title="获取文件状态"></a>获取文件状态</h3><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*#include &lt;sys&#x2F;types.h&gt;#include &lt;sys&#x2F;stat.h&gt;int stat(const char *path, struct stat *buf);功能：获取文件状态信息参数：    path：文件名    buf：保存文件信息的结构体返回值：    成功：0    失败-1*&#x2F;struct stat &#123;    dev_t         st_dev;         &#x2F;&#x2F;文件的设备编号    ino_t         st_ino;          &#x2F;&#x2F;节点    mode_t        st_mode;   &#x2F;&#x2F;文件的类型和存取的权限    nlink_t       st_nlink;     &#x2F;&#x2F;连到该文件的硬连接数目，刚建立的文件值为1    uid_t         st_uid;         &#x2F;&#x2F;用户ID    gid_t         st_gid;         &#x2F;&#x2F;组ID    dev_t         st_rdev;      &#x2F;&#x2F;(设备类型)若此文件为设备文件，则为其设备编号    off_t         st_size;        &#x2F;&#x2F;文件字节数(文件大小)    unsigned long st_blksize;   &#x2F;&#x2F;块大小(文件系统的I&#x2F;O 缓冲区大小)    unsigned long st_blocks;    &#x2F;&#x2F;块数    time_t        st_atime;     &#x2F;&#x2F;最后一次访问时间    time_t        st_mtime;    &#x2F;&#x2F;最后一次修改时间    time_t        st_ctime;     &#x2F;&#x2F;最后一次改变时间(指属性)&#125;;#include &lt;sys&#x2F;types.h&gt;#include &lt;sys&#x2F;stat.h&gt;#include &lt;stdio.h&gt;int main(int argc, char **args)&#123;    if (argc &lt; 2)        return 0;    struct stat st &#x3D; &#123; 0 &#125;;    stat(args[1], &amp;st);    int size &#x3D; st.st_size;&#x2F;&#x2F;得到结构体中的成员变量    printf(&quot;%d\n&quot;, size);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除文件、重命名文件名"><a href="#删除文件、重命名文件名" class="headerlink" title="删除文件、重命名文件名"></a>删除文件、重命名文件名</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int remove(const char *pathname);功能：删除文件参数：    pathname：文件名返回值：    成功：0    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int rename(const char *oldpath, const char *newpath);功能：把oldpath的文件名改为newpath参数：    oldpath：旧文件名    newpath：新文件名返回值：    成功：0    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h3><p>ANSI C标准采用“缓冲文件系统”处理数据文件。</p><p>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</p><p>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。</p><h4 id="磁盘文件的存取"><a href="#磁盘文件的存取" class="headerlink" title="磁盘文件的存取"></a>磁盘文件的存取</h4><p><img src="/images/2024060310131103.png" alt="2024060310131103"></p><ul><li>磁盘文件，一般保存在硬盘、U盘等掉电不丢失的磁盘设备中，在需要时调入内存</li><li>在内存中对文件进行编辑处理后，保存到磁盘中</li><li>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率</li></ul><h4 id="更新缓存区"><a href="#更新缓存区" class="headerlink" title="更新缓存区"></a>更新缓存区</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fflush(FILE *stream);功能：更新缓冲区，让缓冲区的数据立马写到文件中。参数：    stream：文件指针返回值：    成功：0    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复合类型</title>
      <link href="/c-c/c-yu-yan-fu-he-lei-xing/"/>
      <url>/c-c/c-yu-yan-fu-he-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="复合类型-自定义类型"><a href="#复合类型-自定义类型" class="headerlink" title="复合类型(自定义类型)"></a>复合类型(自定义类型)</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>数组：描述一组具有相同类型数据的有序集合，用于处理大量相同类型的数据运算。</p><p>有时我们需要将不同类型的数据组合成一个有机的整体，如：一个学生有学号&#x2F;姓名&#x2F;性别&#x2F;年龄&#x2F;地址等属性。显然单独定义以上变量比较繁琐，数据不便于管理。</p><p>Ｃ语言中给出了另一种构造数据类型——结构体。<br><img src="/images/2024060210121101.png" alt="2024060210121101"></p><h4 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h4><p>定义结构体变量的方式：</p><ul><li>先声明结构体类型再定义变量名</li><li>在声明类型的同时定义变量</li><li>直接定义结构体类型变量（无类型名）</li></ul><p><img src="/images/2024060210131102.png" alt="2024060210131102"></p><p>结构体类型和结构体变量关系：</p><ul><li>结构体类型：指定了一个结构体类型，它相当于一个模型，但其中并无具体数据，系统对之也不分配实际内存单元。</li><li>结构体变量：系统根据结构体类型（内部成员状况）为之分配空间。</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;&#x2F;&#x2F;先定义类型，再定义变量（常用）struct stu s1 &#x3D; &#123; &quot;mike&quot;, 18 &#125;;&#x2F;&#x2F;定义类型同时定义变量struct stu2&#123;    char name[50];    int age;&#125;s2 &#x3D; &#123; &quot;lily&quot;, 22 &#125;;struct&#123;    char name[50];    int age;&#125;s3 &#x3D; &#123; &quot;yuri&quot;, 25 &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体成员的使用"><a href="#结构体成员的使用" class="headerlink" title="结构体成员的使用"></a>结构体成员的使用</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1;    &#x2F;&#x2F;如果是普通变量，通过点运算符操作结构体成员    strcpy(s1.name, &quot;abc&quot;);    s1.age &#x3D; 18;    printf(&quot;s1.name &#x3D; %s, s1.age &#x3D; %d\n&quot;, s1.name, s1.age);    &#x2F;&#x2F;如果是指针变量，通过-&gt;操作结构体成员    strcpy((&amp;s1)-&gt;name, &quot;test&quot;);    (&amp;s1)-&gt;age &#x3D; 22;    printf(&quot;(&amp;s1)-&gt;name &#x3D; %s, (&amp;s1)-&gt;age &#x3D; %d\n&quot;, (&amp;s1)-&gt;name, (&amp;s1)-&gt;age);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;&#x2F;统计学生成绩struct stu&#123;int num;char name[20];char sex;float score;&#125;;int main()&#123;    &#x2F;&#x2F;定义一个含有5个元素的结构体数组并将其初始化    struct stu boy[5] &#x3D; &#123;        &#123; 101, &quot;Li ping&quot;, &#39;M&#39;, 45 &#125;,            &#123; 102, &quot;Zhang ping&quot;, &#39;M&#39;, 62.5 &#125;,        &#123; 103, &quot;He fang&quot;, &#39;F&#39;, 92.5 &#125;,        &#123; 104, &quot;Cheng ling&quot;, &#39;F&#39;, 87 &#125;,        &#123; 105, &quot;Wang ming&quot;, &#39;M&#39;, 58 &#125;&#125;;    int i &#x3D; 0;    int c &#x3D; 0;    float ave, s &#x3D; 0;    for (i &#x3D; 0; i &lt; 5; i++)    &#123;        s +&#x3D; boy[i].score;  &#x2F;&#x2F;计算总分        if (boy[i].score &lt; 60)        &#123;            c +&#x3D; 1; &#x2F;&#x2F;统计不及格人的分数        &#125;    &#125;    printf(&quot;s&#x3D;%f\n&quot;, s);&#x2F;&#x2F;打印总分数    ave &#x3D; s &#x2F; 5;    &#x2F;&#x2F;计算平均分数    printf(&quot;average&#x3D;%f\ncount&#x3D;%d\n\n&quot;, ave, c); &#x2F;&#x2F;打印平均分与不及格人数    for (i &#x3D; 0; i &lt; 5; i++)    &#123;        printf(&quot; name&#x3D;%s,  score&#x3D;%f\n&quot;, boy[i].name, boy[i].score);           &#x2F;&#x2F; printf(&quot; name&#x3D;%s,  score&#x3D;%f\n&quot;, (boy+i)-&gt;name, (boy+i)-&gt;score);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体套结构体"><a href="#结构体套结构体" class="headerlink" title="结构体套结构体"></a>结构体套结构体</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;struct person&#123;    char name[20];    char sex;&#125;;struct stu&#123;    int id;    struct person info;&#125;;int main()&#123;    struct stu s[2] &#x3D; &#123; 1, &quot;lily&quot;, &#39;F&#39;, 2, &quot;yuri&quot;, &#39;M&#39; &#125;;    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; 2; i++)    &#123;        printf(&quot;id &#x3D; %d\tinfo.name&#x3D;%s\tinfo.sex&#x3D;%c\n&quot;, s[i].id, s[i].info.name, s[i].info.sex);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体赋值"><a href="#结构体赋值" class="headerlink" title="结构体赋值"></a>结构体赋值</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1;    &#x2F;&#x2F;如果是普通变量，通过点运算符操作结构体成员    strcpy(s1.name, &quot;abc&quot;);    s1.age &#x3D; 18;    printf(&quot;s1.name &#x3D; %s, s1.age &#x3D; %d\n&quot;, s1.name, s1.age);    &#x2F;&#x2F;相同类型的两个结构体变量，可以相互赋值    &#x2F;&#x2F;把s1成员变量的值拷贝给s2成员变量的内存    &#x2F;&#x2F;s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量    struct stu s2 &#x3D; s1;    mcpy(&amp;s2, &amp;s1, sizeof(s1));    printf(&quot;s2.name &#x3D; %s, s2.age &#x3D; %d\n&quot;, s2.name, s2.age);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体和指针"><a href="#结构体和指针" class="headerlink" title="结构体和指针"></a>结构体和指针</h4><h5 id="指向普通结构体变量的指针"><a href="#指向普通结构体变量的指针" class="headerlink" title="指向普通结构体变量的指针"></a>指向普通结构体变量的指针</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1 &#x3D; &#123; &quot;lily&quot;, 18 &#125;;    &#x2F;&#x2F;如果是指针变量，通过-&gt;操作结构体成员    struct stu *p &#x3D; &amp;s1;    printf(&quot;p-&gt;name &#x3D; %s, p-&gt;age&#x3D;%d\n&quot;, p-&gt;name, p-&gt;age);    printf(&quot;(*p).name &#x3D; %s, (*p).age&#x3D;%d\n&quot;,  (*p).name,  (*p).age);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="堆区结构体变量"><a href="#堆区结构体变量" class="headerlink" title="堆区结构体变量"></a>堆区结构体变量</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu *p &#x3D; NULL;    p &#x3D; (struct stu *)malloc(sizeof(struct  stu));    &#x2F;&#x2F;如果是指针变量，通过-&gt;操作结构体成员    strcpy(p-&gt;name, &quot;test&quot;);    p-&gt;age &#x3D; 22;    printf(&quot;p-&gt;name &#x3D; %s, p-&gt;age&#x3D;%d\n&quot;, p-&gt;name, p-&gt;age);    printf(&quot;(*p).name &#x3D; %s, (*p).age&#x3D;%d\n&quot;, (*p).name,  (*p).age);    free(p);    p &#x3D; NULL;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体套一级指针"><a href="#结构体套一级指针" class="headerlink" title="结构体套一级指针"></a>结构体套一级指针</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char *name; &#x2F;&#x2F;一级指针    int age;&#125;;int main()&#123;    struct stu *p &#x3D; NULL;    p &#x3D; (struct stu *)malloc(sizeof(struct  stu));    p-&gt;name &#x3D; malloc(strlen(&quot;test&quot;) + 1);    strcpy(p-&gt;name, &quot;test&quot;);    p-&gt;age &#x3D; 22;    printf(&quot;p-&gt;name &#x3D; %s, p-&gt;age&#x3D;%d\n&quot;, p-&gt;name, p-&gt;age);    printf(&quot;(*p).name &#x3D; %s, (*p).age&#x3D;%d\n&quot;, (*p).name, (*p).age);    if (p-&gt;name !&#x3D; NULL)    &#123;        free(p-&gt;name);        p-&gt;name &#x3D; NULL;    &#125;    if (p !&#x3D; NULL)    &#123;        free(p);        p &#x3D; NULL;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h4><h5 id="结构体普通变量做函数参数"><a href="#结构体普通变量做函数参数" class="headerlink" title="结构体普通变量做函数参数"></a>结构体普通变量做函数参数</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include &lt;string.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;&#x2F;&#x2F;函数参数为结构体普通变量void set_stu(struct stu tmp)&#123;    strcpy(tmp.name, &quot;mike&quot;);    tmp.age &#x3D; 18;    printf(&quot;tmp.name &#x3D; %s, tmp.age &#x3D; %d\n&quot;, tmp.name, tmp.age);&#125;int main()&#123;    struct stu s &#x3D; &#123; 0 &#125;;    set_stu(s); &#x2F;&#x2F;值传递    printf(&quot;s.name &#x3D; %s, s.age &#x3D; %d\n&quot;, s.name, s.age);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体指针变量做函数参数"><a href="#结构体指针变量做函数参数" class="headerlink" title="结构体指针变量做函数参数"></a>结构体指针变量做函数参数</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include &lt;string.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;&#x2F;&#x2F;函数参数为结构体指针变量void set_stu_pro(struct stu *tmp)&#123;    strcpy(tmp-&gt;name, &quot;mike&quot;);    tmp-&gt;age &#x3D; 18;&#125;int main()&#123;    struct stu s &#x3D; &#123; 0 &#125;;    set_stu_pro(&amp;s); &#x2F;&#x2F;地址传递    printf(&quot;s.name &#x3D; %s, s.age &#x3D; %d\n&quot;, s.name, s.age);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体数组名做函数参数"><a href="#结构体数组名做函数参数" class="headerlink" title="结构体数组名做函数参数"></a>结构体数组名做函数参数</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;&#x2F;&#x2F;void set_stu_pro(struct stu tmp[100], int n)&#x2F;&#x2F;void set_stu_pro(struct stu tmp[], int n)void set_stu_pro(struct stu *tmp, int n)&#123;    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        sprintf(tmp-&gt;name, &quot;name%d%d%d&quot;, i, i, i);        tmp-&gt;age &#x3D; 20 + i;        tmp++;    &#125;&#125;int main()&#123;    struct stu s[3] &#x3D; &#123; 0 &#125;;    int i &#x3D; 0;    int n &#x3D; sizeof(s) &#x2F; sizeof(s[0]);    set_stu_pro(s, n); &#x2F;&#x2F;数组名传递    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%s, %d\n&quot;, s[i].name, s[i].age);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="const修饰结构体指针形参变量"><a href="#const修饰结构体指针形参变量" class="headerlink" title="const修饰结构体指针形参变量"></a>const修饰结构体指针形参变量</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;void fun1(struct stu * const p)&#123;    &#x2F;&#x2F;p &#x3D; NULL; &#x2F;&#x2F;err    p-&gt;age &#x3D; 10; &#x2F;&#x2F;ok&#125;&#x2F;&#x2F;void fun2(struct stu const*  p)void fun2(const struct stu *  p)&#123;    p &#x3D; NULL; &#x2F;&#x2F;ok    &#x2F;&#x2F;p-&gt;age &#x3D; 10; &#x2F;&#x2F;err&#125;void fun3(const struct stu * const p)&#123;    &#x2F;&#x2F;p &#x3D; NULL; &#x2F;&#x2F;err    &#x2F;&#x2F;p-&gt;age &#x3D; 10; &#x2F;&#x2F;err&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="共用体-联合体"><a href="#共用体-联合体" class="headerlink" title="共用体(联合体)"></a>共用体(联合体)</h3><ul><li>联合union是一个能在同一个存储空间存储不同类型数据的类型</li><li>联合体所占的内存长度等于其最长成员的长度倍数，也有叫做共用体</li><li>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用</li><li>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖</li><li>共用体变量的地址和它的各成员的地址都是同一地址</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;&#x2F;共用体也叫联合体 union Test&#123;    unsigned char a;    unsigned int b;    unsigned short c;&#125;;int main()&#123;    &#x2F;&#x2F;定义共用体变量    union Test tmp;    &#x2F;&#x2F;1、所有成员的首地址是一样的    printf(&quot;%p, %p, %p\n&quot;, &amp;(tmp.a), &amp;(tmp.b), &amp;(tmp.c));    &#x2F;&#x2F;2、共用体大小为最大成员类型的大小    printf(&quot;%lu\n&quot;, sizeof(union Test));    &#x2F;&#x2F;3、一个成员赋值，会影响另外的成员    &#x2F;&#x2F;左边是高位，右边是低位    &#x2F;&#x2F;低位放低地址，高位放高地址    tmp.b &#x3D; 0x44332211;    printf(&quot;%x\n&quot;, tmp.a); &#x2F;&#x2F;11    printf(&quot;%x\n&quot;, tmp.c); &#x2F;&#x2F;2211    tmp.a &#x3D; 0x00;    printf(&quot;short: %x\n&quot;, tmp.c); &#x2F;&#x2F;2200    printf(&quot;int: %x\n&quot;, tmp.b); &#x2F;&#x2F;44332200    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</p><p>枚举类型定义：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">enum 枚举名&#123;    枚举值表&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在枚举值表中应列出所有可用值，也称为枚举元素</li><li>枚举值是常量，不能在程序中用赋值语句再对它赋值</li><li>举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;enum weekday&#123;    sun &#x3D; 2, mon, tue, wed, thu, fri, sat&#125; ;enum bool&#123;    flase, true&#125;;int main()&#123;    enum weekday a, b, c;    a &#x3D; sun;    b &#x3D; mon;    c &#x3D; tue;    printf(&quot;%d,%d,%d\n&quot;, a, b, c);    enum bool flag;    flag &#x3D; true;    if (flag &#x3D;&#x3D; 1)    &#123;        printf(&quot;flag为真\n&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，<strong>不能创建新类型</strong>。</p><ul><li>与#define不同，typedef仅限于数据类型，而不是能是表达式或具体的值</li><li>#define发生在预处理，typedef发生在编译阶段</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;typedef int INT;typedef char BYTE;typedef BYTE T_BYTE;typedef unsigned char UBYTE;typedef struct type&#123;    UBYTE a;    INT b;    T_BYTE c;&#125;TYPE, *PTYPE;int main()&#123;    TYPE t;    t.a &#x3D; 254;    t.b &#x3D; 10;    t.c &#x3D; &#39;c&#39;;    PTYPE p &#x3D; &amp;t;    printf(&quot;%u, %d, %c\n&quot;, p-&gt;a, p-&gt;b, p-&gt;c);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言内存管理</title>
      <link href="/c-c/c-yu-yan-nei-cun-guan-li/"/>
      <url>/c-c/c-yu-yan-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>C语言变量的作用域分为：</p><ul><li>代码块作用域(代码块是{}之间的一段代码)</li><li>函数作用域</li><li>文件作用域</li></ul><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>局部变量也叫auto自动变量(auto可写可不写)，一般情况下代码块{}内部定义的变量都是自动变量，它有如下特点：</p><ul><li>在一个函数内定义，只在函数范围内有效</li><li>在复合语句中定义，只在复合语句中有效</li><li><strong>随着函数调用的结束或复合语句的结束局部变量的声明声明周期也结束</strong></li><li>如果没有赋初值，内容为随机</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;void test()&#123;    &#x2F;&#x2F;auto写不写是一样的    &#x2F;&#x2F;auto只能出现在&#123;&#125;内部    auto int b &#x3D; 10; &#125;int main(void)&#123;    &#x2F;&#x2F;b &#x3D; 100; &#x2F;&#x2F;err， 在main作用域中没有b    if (1)    &#123;        &#x2F;&#x2F;在复合语句中定义，只在复合语句中有效        int a &#x3D; 10;        printf(&quot;a &#x3D; %d\n&quot;, a);    &#125;    &#x2F;&#x2F;a &#x3D; 10; &#x2F;&#x2F;err离开if()的复合语句，a已经不存在            return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态-static-局部变量"><a href="#静态-static-局部变量" class="headerlink" title="静态(static)局部变量"></a>静态(static)局部变量</h4><ul><li>static局部变量的作用域也是在定义的函数内有效</li><li>static局部变量的生命周期和程序运行周期一样，同时staitc局部变量的值<strong>只初始化一次，但可以赋值多次</strong></li><li>static局部变量若未赋以初值，则由系统自动赋值：数值型变量自动赋初值0，字符型变量赋空字符</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;void fun1()&#123;    int i &#x3D; 0;    i++;    printf(&quot;i &#x3D; %d\n&quot;, i);&#125;void fun2()&#123;    &#x2F;&#x2F;静态局部变量，没有赋值，系统赋值为0，而且只会初始化一次    static int a;    a++;    printf(&quot;a &#x3D; %d\n&quot;, a);&#125;int main(void)&#123;    fun1();    fun1();    fun2();    fun2();            return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul><li>在函数外定义，可被本文件及其它文件中的函数所共用，若其它文件中的函数调用此变量,须用extern声明</li><li>全局变量的生命周期和程序运行周期一样</li><li>不同文件的全局变量不可重名</li></ul><h4 id="静态-static-全局变量"><a href="#静态-static-全局变量" class="headerlink" title="静态(static)全局变量"></a>静态(static)全局变量</h4><ul><li>在函数外定义,作用范围被限制在所定义的文件中</li><li>不同文件静态全局变量可以重名,但作用域不冲突</li><li>static全局变量的生命周期和程序运行周期一样，同时staitc全局变量的值只初始化一次</li></ul><h4 id="extern全局变量声明"><a href="#extern全局变量声明" class="headerlink" title="extern全局变量声明"></a>extern全局变量声明</h4><p>extern int a;声明一个变量，这个全局变量在别的文件中已经定义了，这里只是声明，而不是定义。</p><h4 id="全局函数和静态函数"><a href="#全局函数和静态函数" class="headerlink" title="全局函数和静态函数"></a>全局函数和静态函数</h4><p>在C语言中函数默认都是全局的，使用关键字static可以将函数声明为静态，函数定义为static就意味着这个函数只能在定义这个函数的文件中使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用。</p><p>对于不同文件中的staitc函数名字可以相同。</p><p><img src="/images/2024060110121101.png" alt="2024060110121101"></p><ul><li>允许在不同的函数中使用相同的变量名，它们代表不同的对象，分配不同的单元，互不干扰。</li><li>同一源文件中,允许全局变量和局部变量同名，在局部变量的作用域内，全局变量不起作用。</li><li>所有的函数默认都是全局的，意味着所有的函数都不能重名，但如果是staitc函数，那么作用域是文件级的，所以不同的文件static函数名是可以相同的。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th align="left">类型</th><th align="center">作用域</th><th align="right">生命周期</th></tr></thead><tbody><tr><td align="left">auto变量</td><td align="center">一对{}内</td><td align="right">当前函数</td></tr><tr><td align="left">static局部变量</td><td align="center">一对{}内</td><td align="right">整个程序运行期</td></tr><tr><td align="left">extern变量</td><td align="center">整个程序</td><td align="right">整个程序运行期</td></tr><tr><td align="left">static全局变量</td><td align="center">当前文件</td><td align="right">整个程序运行期</td></tr><tr><td align="left">extern函数</td><td align="center">整个程序</td><td align="right">整个程序运行期</td></tr><tr><td align="left">static函数</td><td align="center">当前文件</td><td align="right">整个程序运行期</td></tr><tr><td align="left">register变量</td><td align="center">一对{}内</td><td align="right">当前函数</td></tr><tr><td align="left">全局变量</td><td align="center">整个程序</td><td align="right">整个程序运行期</td></tr></tbody></table><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><h4 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h4><p>C代码经过预处理、编译、汇编、链接4步后生成一个可执行程序。<br>在 Windows 下，程序是一个普通的可执行文件，以下列出一个二进制可执行文件的基本情况：<br><img src="/images/2024060110121102.png" alt="2024060110121102"></p><p>通过上图可以得知，在没有运行程序前，<strong>也就是说程序没有加载到内存前</strong>，可执行程序内部已经分好3段信息，分别为<strong>代码区（text）</strong>、<strong>数据区（data）</strong>和<strong>未初始化数据区（bss）</strong>3 个部分（有些人直接把data和bss合起来叫做静态区或全局区）。</p><h5 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h5><p>存放 CPU 执行的机器指令。通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。<strong>代码区通常是只读的</strong>，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。</p><h5 id="全局初始化数据区-静态数据区（data段）"><a href="#全局初始化数据区-静态数据区（data段）" class="headerlink" title="全局初始化数据区&#x2F;静态数据区（data段）"></a>全局初始化数据区&#x2F;静态数据区（data段）</h5><p>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。</p><h5 id="未初始化数据区（又叫-bss-区）"><a href="#未初始化数据区（又叫-bss-区）" class="headerlink" title="未初始化数据区（又叫 bss 区）"></a>未初始化数据区（又叫 bss 区）</h5><p>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）。</p><p>程序在加载到内存前，<strong>代码区和全局区(data和bss)的大小就是固定的</strong>，程序运行期间不能改变。然后，运行可执行程序，系统把程序加载到内存，<strong>除了根据可执行程序的信息分出代码区（text）、数据区（data）和未初始化数据区（bss）之外，还额外增加了栈区、堆区</strong>。<br><img src="/images/2024060110121103.png" alt="2024060110121103"></p><h5 id="代码区（text-segment）"><a href="#代码区（text-segment）" class="headerlink" title="代码区（text segment）"></a>代码区（text segment）</h5><p>加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</p><h5 id="未初始化数据区（BSS）"><a href="#未初始化数据区（BSS）" class="headerlink" title="未初始化数据区（BSS）"></a>未初始化数据区（BSS）</h5><p>加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</p><h5 id="全局初始化数据区-静态数据区（data-segment）"><a href="#全局初始化数据区-静态数据区（data-segment）" class="headerlink" title="全局初始化数据区&#x2F;静态数据区（data segment）"></a>全局初始化数据区&#x2F;静态数据区（data segment）</h5><p>加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</p><h5 id="栈区（stack）"><a href="#栈区（stack）" class="headerlink" title="栈区（stack）"></a>栈区（stack）</h5><p>栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</p><h5 id="堆区（heap）"><a href="#堆区（heap）" class="headerlink" title="堆区（heap）"></a>堆区（heap）</h5><p>堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p><h4 id="存储类型总结"><a href="#存储类型总结" class="headerlink" title="存储类型总结"></a>存储类型总结</h4><table><thead><tr><th align="left">类型</th><th align="center">作用域</th><th align="right">生命周期</th><th align="right">存储位置</th></tr></thead><tbody><tr><td align="left">auto变量</td><td align="center">一对{}内</td><td align="right">当前函数</td><td align="right">栈区</td></tr><tr><td align="left">static局部变量</td><td align="center">一对{}内</td><td align="right">整个程序运行期</td><td align="right">初始化在data段，未初始化在BSS段</td></tr><tr><td align="left">extern变量</td><td align="center">整个程序</td><td align="right">整个程序运行期</td><td align="right">初始化在data段，未初始化在BSS段</td></tr><tr><td align="left">static全局变量</td><td align="center">当前文件</td><td align="right">整个程序运行期</td><td align="right">初始化在data段，未初始化在BSS段</td></tr><tr><td align="left">extern函数</td><td align="center">整个程序</td><td align="right">整个程序运行期</td><td align="right">代码区</td></tr><tr><td align="left">static函数</td><td align="center">当前文件</td><td align="right">整个程序运行期</td><td align="right">代码区</td></tr><tr><td align="left">register变量</td><td align="center">一对{}内</td><td align="right">当前函数</td><td align="right">运行时存储在CPU寄存器</td></tr><tr><td align="left">字符串常量</td><td align="center">当前文件</td><td align="right">整个程序运行期</td><td align="right">data段</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int e;static int f;int g &#x3D; 10;static int h &#x3D; 10;int main()&#123;    int a;    int b &#x3D; 10;    static int c;    static int d &#x3D; 10;    char *i &#x3D; &quot;test&quot;;    char *k &#x3D; NULL;    printf(&quot;&amp;a\t %p\t &#x2F;&#x2F;局部未初始化变量\n&quot;, &amp;a);    printf(&quot;&amp;b\t %p\t &#x2F;&#x2F;局部初始化变量\n&quot;, &amp;b);    printf(&quot;&amp;c\t %p\t &#x2F;&#x2F;静态局部未初始化变量\n&quot;, &amp;c);    printf(&quot;&amp;d\t %p\t &#x2F;&#x2F;静态局部初始化变量\n&quot;, &amp;d);    printf(&quot;&amp;e\t %p\t &#x2F;&#x2F;全局未初始化变量\n&quot;, &amp;e);    printf(&quot;&amp;f\t %p\t &#x2F;&#x2F;全局静态未初始化变量\n&quot;, &amp;f);    printf(&quot;&amp;g\t %p\t &#x2F;&#x2F;全局初始化变量\n&quot;, &amp;g);    printf(&quot;&amp;h\t %p\t &#x2F;&#x2F;全局静态初始化变量\n&quot;, &amp;h);    printf(&quot;i\t %p\t &#x2F;&#x2F;只读数据(文字常量区)\n&quot;, i);    k &#x3D; (char *)malloc(10);    printf(&quot;k\t %p\t &#x2F;&#x2F;动态分配的内存\n&quot;, k);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存操作函数"><a href="#内存操作函数" class="headerlink" title="内存操作函数"></a>内存操作函数</h4><h5 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*void *memset(void *s, int c, size_t n);功能：将s的内存区域的前n个字节以参数c填入参数：    s：需要操作内存s的首地址    c：填充的字符，c虽然参数为int，但必须是unsigned char , 范围为0~255    n：指定需要设置的大小返回值：s的首地址*&#x2F;int main(void)&#123;    int a[10];    memset(a, 0, sizeof(a));    memset(a, 97, sizeof(a));    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; 10; i++)    &#123;        printf(&quot;%c\n&quot;, a[i]);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*void *memcpy(void *dest, const void *src, size_t n);功能：拷贝src所指的内存内容的前n个字节到dest所值的内存地址上。参数：    dest：目的内存首地址    src：源内存首地址，注意：dest和src所指的内存空间不可重叠，可能会导致程序报错    n：需要拷贝的字节数返回值：dest的首地址*&#x2F;int main(void)&#123;    int a[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;    int b[10];            memcpy(b, a, sizeof(a));    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; 10; i++)    &#123;        printf(&quot;%d, &quot;, b[i]);    &#125;    printf(&quot;\n&quot;);    &#x2F;&#x2F;memcpy(&amp;a[3], a, 5 * sizeof(int)); &#x2F;&#x2F;err, 内存重叠    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h5><p>memmove()功能用法和memcpy()一样，区别在于：dest和src所指的内存空间重叠时，memmove()仍然能处理，不过执行效率比memcpy()低些。</p><h5 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp"></a>memcmp</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*int memcmp(const void *s1, const void *s2, size_t n);功能：比较s1和s2所指向内存区域的前n个字节参数：    s1：内存首地址1    s2：内存首地址2    n：需比较的前n个字节返回值：    相等：&#x3D;0    大于：&gt;0    小于：&lt;0*&#x2F;int main(void)&#123;    int a[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;    int b[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;    int flag &#x3D; memcmp(a, b, sizeof(a));    printf(&quot;flag &#x3D; %d\n&quot;, flag);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆区内存分配和释放"><a href="#堆区内存分配和释放" class="headerlink" title="堆区内存分配和释放"></a>堆区内存分配和释放</h4><h5 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*#include &lt;stdlib.h&gt;void *malloc(size_t size);功能：在内存的动态存储区(堆区)中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用memset初始化。参数：    size：需要分配内存大小(单位：字节)返回值：成功：分配空间的起始地址失败：NULL*&#x2F;#include &lt;stdlib.h&gt; #include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    int count, *array, n;    printf(&quot;请输入要申请数组的个数:\n&quot;);    scanf(&quot;%d&quot;, &amp;n);    array &#x3D; (int *)malloc(n * sizeof (int));    if (array &#x3D;&#x3D; NULL)    &#123;        printf(&quot;申请空间失败!\n&quot;);        return -1;    &#125;    &#x2F;&#x2F;将申请到空间清0    memset(array, 0, sizeof(int)*n);    for (count &#x3D; 0; count &lt; n; count++) &#x2F;*给数组赋值*&#x2F;        array[count] &#x3D; count;    for (count &#x3D; 0; count &lt; n; count++) &#x2F;*打印数组元素*&#x2F;        printf(&quot;%2d&quot;, array[count]);    free(array);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="free"><a href="#free" class="headerlink" title="free"></a>free</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;&#x2F;*void free(void *ptr);功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。参数：ptr：需要释放空间的首地址，被释放区应是由malloc函数所分配的区域。返回值：无*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存分区代码分析"><a href="#内存分区代码分析" class="headerlink" title="内存分区代码分析"></a>内存分区代码分析</h3><h4 id="返回栈区地址"><a href="#返回栈区地址" class="headerlink" title="返回栈区地址"></a>返回栈区地址</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int *fun()&#123;    int a &#x3D; 10;    return &amp;a;&#x2F;&#x2F;函数调用完毕，a释放&#125;int main(int argc, char *argv[])&#123;    int *p &#x3D; NULL;    p &#x3D; fun();    *p &#x3D; 100; &#x2F;&#x2F;操作野指针指向的内存,err    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回data区地址"><a href="#返回data区地址" class="headerlink" title="返回data区地址"></a>返回data区地址</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int *fun()&#123;    static int a &#x3D; 10;    return &amp;a; &#x2F;&#x2F;函数调用完毕，a不释放&#125;int main(int argc, char *argv[])&#123;    int *p &#x3D; NULL;    p &#x3D; fun();    *p &#x3D; 100; &#x2F;&#x2F;ok    printf(&quot;*p &#x3D; %d\n&quot;, *p);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="值传递1"><a href="#值传递1" class="headerlink" title="值传递1"></a>值传递1</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void fun(int *tmp)&#123;    tmp &#x3D; (int *)malloc(sizeof(int));    *tmp &#x3D; 100;&#125;int main(int argc, char *argv[])&#123;    int *p &#x3D; NULL;    fun(p); &#x2F;&#x2F;值传递，形参修改不会影响实参    printf(&quot;*p &#x3D; %d\n&quot;, *p);&#x2F;&#x2F;err，操作空指针指向的内存    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="值传递2"><a href="#值传递2" class="headerlink" title="值传递2"></a>值传递2</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void fun(int *tmp)&#123;    *tmp &#x3D; 100;&#125;int main(int argc, char *argv[])&#123;    int *p &#x3D; NULL;    p &#x3D; (int *)malloc(sizeof(int));    fun(p); &#x2F;&#x2F;值传递    printf(&quot;*p &#x3D; %d\n&quot;, *p); &#x2F;&#x2F;ok，*p为100    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回堆区地址"><a href="#返回堆区地址" class="headerlink" title="返回堆区地址"></a>返回堆区地址</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int *fun()&#123;    int *tmp &#x3D; NULL;    tmp &#x3D; (int *)malloc(sizeof(int));    *tmp &#x3D; 100;    return tmp;&#x2F;&#x2F;返回堆区地址，函数调用完毕，不释放&#125;int main(int argc, char *argv[])&#123;    int *p &#x3D; NULL;    p &#x3D; fun();    printf(&quot;*p &#x3D; %d\n&quot;, *p);&#x2F;&#x2F;ok    &#x2F;&#x2F;堆区空间，使用完毕，手动释放    if (p !&#x3D; NULL)    &#123;        free(p);        p &#x3D; NULL;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置C++环境</title>
      <link href="/tools/vscode-pei-zhi-c-huan-jing/"/>
      <url>/tools/vscode-pei-zhi-c-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><h4 id="下载安装MinGW"><a href="#下载安装MinGW" class="headerlink" title="下载安装MinGW"></a>下载安装MinGW</h4><p><a href="https://sourceforge.net/projects/mingw">MinGW</a></p><p><img src="/images/2024052913321101.png" alt="2024052913321101"></p><p>点击continue会下载文件，继续点击continue会弹出一个窗体,选中红色框中的base和gc++（mark for installation）</p><p><img src="/images/2024052913321102.png" alt="2024052913321102"></p><p>选中installation，选择ApplyChanges，最后点击Apply，等待下载完成即可。<br><img src="/images/2024052913321103.png" alt="2024052913321103"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在环境变量中设置MinGW的安装目录<br><img src="/images/2024052913321104.png" alt="2024052913321104"></p><p>验证MinGW是否安装成功<br><img src="/images/2024052913321105.png" alt="2024052913321105"></p><h3 id="安装VSCode插件"><a href="#安装VSCode插件" class="headerlink" title="安装VSCode插件"></a>安装VSCode插件</h3><p><a href="https://code.visualstudio.com/Download">VS Code</a></p><p>安装C&#x2F;C++和C&#x2F;C++ Extension Pack两个插件。其中<strong>C&#x2F;C++ Extension Pack</strong>包含图中的：C&#x2F;C++ Themes，CMake，CMake Tools 3个插件，如果没有，单独搜索安装。<br><img src="/images/2024052913321106.png" alt="2024052913321106"></p><h3 id="验证环境是否成功"><a href="#验证环境是否成功" class="headerlink" title="验证环境是否成功"></a>验证环境是否成功</h3><h4 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h4><p>用VSCode打开新建的文件夹,再新建**.vscode文件夹**，然后再该文件夹下新建3个json文件,g++和gdb根据自己的安装路径去修改。</p><h4 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h4><ul><li>c_cpp_properties.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Win32"</span><span class="token punctuation">,</span>          <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$&#123;workspaceFolder&#125;/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"_DEBUG"</span><span class="token punctuation">,</span> <span class="token string">"UNICODE"</span><span class="token punctuation">,</span> <span class="token string">"_UNICODE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"windowsSdkVersion"</span><span class="token operator">:</span> <span class="token string">"10.0.17134.0"</span><span class="token punctuation">,</span>          <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"D:\\MinGW\\bin\\g++.exe"</span><span class="token punctuation">,</span>   <span class="token comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>          <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c11"</span><span class="token punctuation">,</span>          <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span><span class="token punctuation">,</span>          <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"$&#123;default&#125;"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>launch.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"g++.exe build and debug active file"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"D:\\MinGW\\bin\\gdb.exe"</span><span class="token punctuation">,</span>        <span class="token comment">/*修改成自己bin目录下的gdb.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"task g++"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tasks.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>        <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"task g++"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"D:\\MinGW\\bin\\g++.exe"</span><span class="token punctuation">,</span>   <span class="token comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-g"</span><span class="token punctuation">,</span>            <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>            <span class="token string">"-o"</span><span class="token punctuation">,</span>            <span class="token string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span>            <span class="token string">"-I"</span><span class="token punctuation">,</span>            <span class="token string">"E:\\C++\\VSCode\\test"</span><span class="token punctuation">,</span>      <span class="token comment">/*修改成自己放c/c++项目的文件夹，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token string">"-std=c++17"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"D:\\MinGW\\bin"</span> <span class="token comment">/*修改成自己bin目录，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"problemMatcher"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token string">"$gcc"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建cpp文件"><a href="#新建cpp文件" class="headerlink" title="新建cpp文件"></a>新建cpp文件</h4><p><img src="/images/2024052913321107.png" alt="2024052913321107"></p><p>按F5可以执行证明配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言指针</title>
      <link href="/c-c/c-yu-yan-zhi-zhen/"/>
      <url>/c-c/c-yu-yan-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h4><ol><li>将内存抽象成一个很大的一维字符数组。</li><li>编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）。</li><li>这个内存编号我们称之为内存地址。内存中的每一个数据都会分配相应的地址：</li></ol><ul><li>char:占一个字节分配一个地址</li><li>int: 占四个字节分配四个地址</li><li>float、struct、函数、数组等</li></ul><h4 id="指针和指针变量"><a href="#指针和指针变量" class="headerlink" title="指针和指针变量"></a>指针和指针变量</h4><ol><li><strong>内存区的每一个字节都有一个编号，这就是“地址”。</strong></li><li>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</li><li>指针的实质就是内存“地址”。指针就是地址，地址就是指针。</li><li><strong>指针是内存单元的编号，指针变量是存放地址的变量。</strong></li><li>通常我们叙述时会把指针变量简称为指针，实际他们含义并不一样。</li></ol><h3 id="指针基础知识"><a href="#指针基础知识" class="headerlink" title="指针基础知识"></a>指针基础知识</h3><h4 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h4><ol><li>指针也是一种数据类型，指针变量也是一种变量</li><li>指针变量指向谁，就把谁的地址赋值给指针变量</li><li>“*”操作符操作的是指针变量指向的内存空间</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a &#x3D; 0;    char b &#x3D; 100;    printf(&quot;%p, %p\n&quot;, &amp;a, &amp;b); &#x2F;&#x2F;打印a, b的地址    &#x2F;&#x2F;int *代表是一种数据类型，int*指针类型，p才是变量名    &#x2F;&#x2F;定义了一个指针类型的变量，可以指向一个int类型变量的地址    int *p;    p &#x3D; &amp;a;&#x2F;&#x2F;将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号    printf(&quot;%d\n&quot;, *p);&#x2F;&#x2F;p指向了a的地址，*p就是a的值    char *p1 &#x3D; &amp;b;    printf(&quot;%c\n&quot;, *p1);&#x2F;&#x2F;*p1指向了b的地址，*p1就是b的值    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：&amp;可以取得一个变量在内存中的地址。但是，<strong>不能取寄存器变量</strong>，因为寄存器变量不在内存里，而在CPU里面，所以是没有地址的。</p><h4 id="指针间接修改变量的值"><a href="#指针间接修改变量的值" class="headerlink" title="指针间接修改变量的值"></a>指针间接修改变量的值</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 0;int b &#x3D; 11;int *p &#x3D; &amp;a;*p &#x3D; 100;printf(&quot;a &#x3D; %d, *p &#x3D; %d\n&quot;, a, *p);p &#x3D; &amp;b;*p &#x3D; 22;printf(&quot;b &#x3D; %d, *p &#x3D; %d\n&quot;, b, *p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针大小"><a href="#指针大小" class="headerlink" title="指针大小"></a>指针大小</h4><ul><li><strong>使用sizeof()测量指针的大小，得到的总是：4或8</strong></li><li>sizeof()测的是指针变量指向存储地址的大小</li><li>在32位平台，所有的指针（地址）都是32位(4字节)</li><li>在64位平台，所有的指针（地址）都是64位(8字节)</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">int *p1;int **p2;char *p3;char **p4;printf(&quot;sizeof(p1) &#x3D; %d\n&quot;, sizeof(p1));printf(&quot;sizeof(p2) &#x3D; %d\n&quot;, sizeof(p2));printf(&quot;sizeof(p3) &#x3D; %d\n&quot;, sizeof(p3));printf(&quot;sizeof(p4) &#x3D; %d\n&quot;, sizeof(p4));printf(&quot;sizeof(double *) &#x3D; %d\n&quot;, sizeof(double *));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="野指针和空指针"><a href="#野指针和空指针" class="headerlink" title="野指针和空指针"></a>野指针和空指针</h4><p>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，<strong>任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针</strong>，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，<strong>野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 100;int *p;p &#x3D; a; &#x2F;&#x2F;把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义p &#x3D; 0x12345678; &#x2F;&#x2F;给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义*p &#x3D; 1000;  &#x2F;&#x2F;操作野指针指向未知区域，内存出问题，err<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int *p &#x3D; NULL;&#x2F;&#x2F;NULL是一个值为0的宏常量：#define NULL    ((void *)0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="万能指针void"><a href="#万能指针void" class="headerlink" title="万能指针void*"></a>万能指针void*</h4><p>void* 指针可以指向任意变量的内存空间：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; NULL;int a &#x3D; 10;p &#x3D; (void *)&amp;a; &#x2F;&#x2F;指向变量时，最好转换为void *&#x2F;&#x2F;使用指针变量指向的内存时，转换为int **( (int *)p ) &#x3D; 11;printf(&quot;a &#x3D; %d\n&quot;, a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="const修饰指针变量"><a href="#const修饰指针变量" class="headerlink" title="const修饰指针变量"></a>const修饰指针变量</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 100;int b &#x3D; 200;&#x2F;&#x2F;常量指针：指向常量的指针&#x2F;&#x2F;修饰*，指针指向内存区域不能修改，指针指向可以变const int * p1 &#x3D; &amp;a; &#x2F;&#x2F;等价于int const *p1 &#x3D; &amp;a;&#x2F;&#x2F;*p1 &#x3D; 111; &#x2F;&#x2F;errp1 &#x3D; &amp;b; &#x2F;&#x2F;ok&#x2F;&#x2F;指针常量&#x2F;&#x2F;修饰p2，指针指向不能变，指针指向的内存可以修改int * const p2 &#x3D; &amp;a;&#x2F;&#x2F;p2 &#x3D; &amp;b; &#x2F;&#x2F;err*p2 &#x3D; 222; &#x2F;&#x2F;ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在编辑程序时，指针作为函数参数，如果不想修改指针对应内存空间的值，需要使用const修饰指针数据类型。</strong></p><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><p>数组名字是数组的首元素地址，但它是一个常量：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;printf(&quot;a &#x3D; %p\n&quot;, a);printf(&quot;&amp;a[0] &#x3D; %p\n&quot;, &amp;a[0]);&#x2F;&#x2F;a &#x3D; 10; &#x2F;&#x2F;err, 数组名只是常量，不能修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针操作数组元素"><a href="#指针操作数组元素" class="headerlink" title="指针操作数组元素"></a>指针操作数组元素</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int  main()&#123;    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int i &#x3D; 0;    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);            for (i &#x3D; 0; i &lt; n; i++)    &#123;        &#x2F;&#x2F;printf(&quot;%d, &quot;, a[i]);        printf(&quot;%d, &quot;, *(a+i));    &#125;    printf(&quot;\n&quot;);    int *p &#x3D; a; &#x2F;&#x2F;定义一个指针变量保存a的地址    for (i &#x3D; 0; i &lt; n; i++)    &#123;        p[i] &#x3D; 2 * i;    &#125;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, *(p + i));    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针加减运算"><a href="#指针加减运算" class="headerlink" title="指针加减运算"></a>指针加减运算</h4><h5 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h5><ul><li><strong>指针计算不是简单的整数相加</strong></li><li>如果是一个int *，+1的结果是增加一个int的大小</li><li>如果是一个char *，+1的结果是增加一个char大小</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a;    int *p &#x3D; &amp;a;    printf(&quot;%d\n&quot;, p);    p +&#x3D; 2;&#x2F;&#x2F;移动了2个int    printf(&quot;%d\n&quot;, p);    char b &#x3D; 0;    char *p1 &#x3D; &amp;b;    printf(&quot;%d\n&quot;, p1);    p1 +&#x3D; 2;&#x2F;&#x2F;移动了2个char    printf(&quot;%d\n&quot;, p1);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过改变指针指向操作数组元素：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int i &#x3D; 0;    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);    int *p &#x3D; a;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, *p);        p++;    &#125;    printf(&quot;\n&quot;);            return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int i &#x3D; 0;    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);    int *p &#x3D; a+n-1;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, *p);        p--;    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int *p2 &#x3D; &amp;a[2]; &#x2F;&#x2F;第2个元素地址    int *p1 &#x3D; &amp;a[1]; &#x2F;&#x2F;第1个元素地址    printf(&quot;p1 &#x3D; %p, p2 &#x3D; %p\n&quot;, p1, p2);    int n1 &#x3D; p2 - p1; &#x2F;&#x2F;n1 &#x3D; 1    int n2 &#x3D; (int)p2 - (int)p1; &#x2F;&#x2F;n2 &#x3D; 4    printf(&quot;n1 &#x3D; %d, n2 &#x3D; %d\n&quot;, n1, n2);            return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h5><p>指针数组，它是数组，数组的每个元素都是指针类型。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;指针数组    int *p[3];    int a &#x3D; 1;    int b &#x3D; 2;    int c &#x3D; 3;    int i &#x3D; 0;    p[0] &#x3D; &amp;a;    p[1] &#x3D; &amp;b;    p[2] &#x3D; &amp;c;    for (i &#x3D; 0; i &lt; sizeof(p) &#x2F; sizeof(p[0]); i++ )    &#123;        printf(&quot;%d, &quot;, *(p[i]));    &#125;    printf(&quot;\n&quot;);            return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h4><ul><li>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。</li><li>二级指针就是指向一个一级指针变量地址的指针。</li><li>三级指针基本用不着，但考试会考。</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 10;int *p &#x3D; &amp;a; &#x2F;&#x2F;一级指针*p &#x3D; 100; &#x2F;&#x2F;*p就是aint **q &#x3D; &amp;p;&#x2F;&#x2F;*q就是p&#x2F;&#x2F;**q就是aint ***t &#x3D; &amp;q;&#x2F;&#x2F;*t就是q&#x2F;&#x2F;**t就是p&#x2F;&#x2F;***t就是a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h3><h4 id="函数形参改变实参的值"><a href="#函数形参改变实参的值" class="headerlink" title="函数形参改变实参的值"></a>函数形参改变实参的值</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;void swap1(int x, int y)&#123;    int tmp;    tmp &#x3D; x;    x &#x3D; y;    y &#x3D; tmp;    printf(&quot;x &#x3D; %d, y &#x3D; %d\n&quot;, x, y);&#125;void swap2(int *x, int *y)&#123;    int tmp;    tmp &#x3D; *x;    *x &#x3D; *y;    *y &#x3D; tmp;&#125;int main()&#123;    int a &#x3D; 3;    int b &#x3D; 5;    swap1(a, b); &#x2F;&#x2F;值传递    printf(&quot;a &#x3D; %d, b &#x3D; %d\n&quot;, a, b);    a &#x3D; 3;    b &#x3D; 5;    swap2(&amp;a, &amp;b); &#x2F;&#x2F;地址传递    printf(&quot;a2 &#x3D; %d, b2 &#x3D; %d\n&quot;, a, b);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h4><p>数组名做函数参数，函数的形参会退化为指针：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;void printArrary(int *a, int n)&#123;    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);&#125;int main()&#123;    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);    &#x2F;&#x2F;数组名做函数参数    printArrary(a, n);     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针做为函数的返回值"><a href="#指针做为函数的返回值" class="headerlink" title="指针做为函数的返回值"></a>指针做为函数的返回值</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int a &#x3D; 10;int *getA()&#123;    return &amp;a;&#125;int main()&#123;    *( getA() ) &#x3D; 111;    printf(&quot;a &#x3D; %d\n&quot;, a);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针和字符串"><a href="#指针和字符串" class="headerlink" title="指针和字符串"></a>指针和字符串</h3><h4 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char str[] &#x3D; &quot;hello world&quot;;    char *p &#x3D; str;    *p &#x3D; &#39;m&#39;;    p++;    *p &#x3D; &#39;i&#39;;    printf(&quot;%s\n&quot;, str);    p &#x3D; &quot;mike jiang&quot;;    printf(&quot;%s\n&quot;, p);    char *q &#x3D; &quot;test&quot;;    printf(&quot;%s\n&quot;, q);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符指针做函数参数"><a href="#字符指针做函数参数" class="headerlink" title="字符指针做函数参数"></a>字符指针做函数参数</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;void mystrcat(char *dest, const char *src)&#123;    int len1 &#x3D; 0;    int len2 &#x3D; 0;    while (dest[len1])    &#123;        len1++;    &#125;    while (src[len2])    &#123;        len2++;    &#125;    int i;    for (i &#x3D; 0; i &lt; len2; i++)    &#123;        dest[len1 + i] &#x3D; src[i];    &#125;&#125;int main()&#123;    char dst[100] &#x3D; &quot;hello mike&quot;;    char src[] &#x3D; &quot;123456&quot;;            mystrcat(dst, src);    printf(&quot;dst &#x3D; %s\n&quot;, dst);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="const修饰的指针变量"><a href="#const修饰的指针变量" class="headerlink" title="const修饰的指针变量"></a>const修饰的指针变量</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123;    &#x2F;&#x2F;const修饰一个变量为只读    const int a &#x3D; 10;    &#x2F;&#x2F;a &#x3D; 100; &#x2F;&#x2F;err    &#x2F;&#x2F;指针变量， 指针指向的内存， 2个不同概念    char buf[] &#x3D; &quot;aklgjdlsgjlkds&quot;;    &#x2F;&#x2F;从左往右看，跳过类型，看修饰哪个字符    &#x2F;&#x2F;如果是*， 说明指针指向的内存不能改变    &#x2F;&#x2F;如果是指针变量，说明指针的指向不能改变，指针的值不能修改    const char *p &#x3D; buf;    &#x2F;&#x2F; 等价于上面 char const *p1 &#x3D; buf;    &#x2F;&#x2F;p[1] &#x3D; &#39;2&#39;; &#x2F;&#x2F;err    p &#x3D; &quot;agdlsjaglkdsajgl&quot;; &#x2F;&#x2F;ok    char * const p2 &#x3D; buf;    p2[1] &#x3D; &#39;3&#39;;    &#x2F;&#x2F;p2 &#x3D; &quot;salkjgldsjaglk&quot;; &#x2F;&#x2F;err    &#x2F;&#x2F;p3为只读，指向不能变，指向的内存也不能变    const char * const p3 &#x3D; buf;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针数组做为main函数的形参"><a href="#指针数组做为main函数的形参" class="headerlink" title="指针数组做为main函数的形参"></a>指针数组做为main函数的形参</h4><p>int main(int argc, char *argv[])</p><ul><li>main函数是操作系统调用的，第一个参数标明argc数组的成员数量，argv数组的每个成员都是char *类型</li><li>argv是命令行参数的字符串数组</li><li>argc代表命令行参数的数量，程序名字本身算一个参数</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;&#x2F;argc: 传参数的个数（包含可执行程序）&#x2F;&#x2F;argv：指针数组，指向输入的参数int main(int argc, char *argv[])&#123;    &#x2F;&#x2F;指针数组，它是数组，每个元素都是指针    char *a[] &#x3D; &#123; &quot;aaaaaaa&quot;, &quot;bbbbbbbbbb&quot;, &quot;ccccccc&quot; &#125;;    int i &#x3D; 0;    printf(&quot;argc &#x3D; %d\n&quot;, argc);    for (i &#x3D; 0; i &lt; argc; i++)    &#123;        printf(&quot;%s\n&quot;, argv[i]);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="项目开发常用字符串应用模型"><a href="#项目开发常用字符串应用模型" class="headerlink" title="项目开发常用字符串应用模型"></a>项目开发常用字符串应用模型</h4><h5 id="strstr中的while和do-while模型"><a href="#strstr中的while和do-while模型" class="headerlink" title="strstr中的while和do-while模型"></a>strstr中的while和do-while模型</h5><p>利用strstr标准库函数找出一个字符串中substr出现的个数。</p><ul><li>while模型</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main(void)&#123;    char *p &#x3D; &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;    int n &#x3D; 0;    while ((p &#x3D; strstr(p, &quot;abcd&quot;)) !&#x3D; NULL)    &#123;        &#x2F;&#x2F;能进来，肯定有匹配的子串        &#x2F;&#x2F;重新设置起点位置        p &#x3D; p + strlen(&quot;abcd&quot;);        n++;        if (*p &#x3D;&#x3D; 0) &#x2F;&#x2F;如果到结束符        &#123;            break;        &#125;    &#125;    printf(&quot;n &#x3D; %d\n&quot;, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>do-while模型</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123;    char *p &#x3D; &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;    int n &#x3D; 0;    do    &#123;        p &#x3D; strstr(p, &quot;abcd&quot;);        if (p !&#x3D; NULL)        &#123;            n++; &#x2F;&#x2F;累计个数            &#x2F;&#x2F;重新设置查找的起点            p &#x3D; p + strlen(&quot;abcd&quot;);                &#125;        else &#x2F;&#x2F;如果没有匹配的字符串，跳出循环        &#123;            break;        &#125;    &#125; while (*p !&#x3D; 0); &#x2F;&#x2F;如果没有到结尾    printf(&quot;n &#x3D; %d\n&quot;, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="两头堵模型"><a href="#两头堵模型" class="headerlink" title="两头堵模型"></a>两头堵模型</h5><p>求非空字符串元素的个数：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;ctype.h&gt;int fun(char *p, int *n)&#123;    if (p &#x3D;&#x3D; NULL || n &#x3D;&#x3D; NULL)    &#123;        return -1;    &#125;    int begin &#x3D; 0;    int end &#x3D; strlen(p) - 1;    &#x2F;&#x2F;从左边开始    &#x2F;&#x2F;如果当前字符为空，而且没有结束    while (p[begin] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[begin] !&#x3D; 0)    &#123;        begin++; &#x2F;&#x2F;位置从右移动一位    &#125;    &#x2F;&#x2F;从右往左移动    while (p[end] &#x3D;&#x3D; &#39; &#39; &amp;&amp; end &gt; 0)    &#123;        end--; &#x2F;&#x2F;往左移动    &#125;    if (end &#x3D;&#x3D; 0)    &#123;        return -2;    &#125;    &#x2F;&#x2F;非空元素个数    *n &#x3D; end - begin + 1;    return 0;&#125;int main(void)&#123;    char *p &#x3D; &quot;      abcddsgadsgefg      &quot;;    int ret &#x3D; 0;    int n &#x3D; 0;    ret &#x3D; fun(p, &amp;n);    if (ret !&#x3D; 0)    &#123;        return ret;    &#125;    printf(&quot;非空字符串元素个数：%d\n&quot;, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符串反转模型-逆置"><a href="#字符串反转模型-逆置" class="headerlink" title="字符串反转模型(逆置)"></a>字符串反转模型(逆置)</h5><p><img src="/images/2024052913321108.png" alt="2024052913321108"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int inverse(char *p)&#123;    if (p &#x3D;&#x3D; NULL)    &#123;        return -1;    &#125;    char *str &#x3D; p;    int begin &#x3D; 0;    int end &#x3D; strlen(str) - 1;    char tmp;    while (begin &lt; end)    &#123;        &#x2F;&#x2F;交换元素        tmp &#x3D; str[begin];        str[begin] &#x3D; str[end];        str[end] &#x3D; tmp;        begin++;  &#x2F;&#x2F;往右移动位置        end--;      &#x2F;&#x2F;往左移动位置    &#125;    return 0;&#125;int main(void)&#123;    &#x2F;&#x2F;char *str &#x3D; &quot;abcdefg&quot;; &#x2F;&#x2F;文件常量区，内容不允许修改    char str[] &#x3D; &quot;abcdef&quot;;    int ret &#x3D; inverse(str);    if (ret !&#x3D; 0)    &#123;        return ret;    &#125;    printf(&quot;str &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; %s\n&quot;, str);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><h5 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h5><p>注意：如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strcpy(char *dest, const char *src);功能：把src所指向的字符串复制到dest所指向的空间中，&#39;\0&#39;也会拷贝过去参数：    dest：目的字符串首地址    src：源字符首地址返回值：    成功：返回dest字符串的首地址    失败：NULL*&#x2F;int main(void)&#123;    char dest[20] &#x3D; &quot;123456789&quot;;    char src[] &#x3D; &quot;hello world&quot;;    strcpy(dest, src);    printf(&quot;%s\n&quot;, dest);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strncpy(char *dest, const char *src, size_t n);功能：把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含&#39;\0&#39;。参数：    dest：目的字符串首地址    src：源字符首地址    n：指定需要拷贝字符串个数返回值：    成功：返回dest字符串的首地址    失败：NULL*&#x2F;int main(void)&#123;    char dest[20] ;    char src[] &#x3D; &quot;hello world&quot;;    strncpy(dest, src, 5);    printf(&quot;%s\n&quot;, dest);    dest[5] &#x3D; &#39;\0&#39;;    printf(&quot;%s\n&quot;, dest);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strcat(char *dest, const char *src);功能：将src字符串连接到dest的尾部，‘\0’也会追加过去参数：    dest：目的字符串首地址    src：源字符首地址返回值：    成功：返回dest字符串的首地址    失败：NULL*&#x2F;int main(void)&#123;    char str[20] &#x3D; &quot;123&quot;;    char *src &#x3D; &quot;hello world&quot;;    printf(&quot;%s\n&quot;, strcat(str, src));    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strncat(char *dest, const char *src, size_t n);功能：将src字符串前n个字符连接到dest的尾部，‘\0’也会追加过去参数：    dest：目的字符串首地址    src：源字符首地址    n：指定需要追加字符串个数返回值：    成功：返回dest字符串的首地址    失败：NULL*&#x2F;int main(void)&#123;    char str[20] &#x3D; &quot;123&quot;;    char *src &#x3D; &quot;hello world&quot;;    printf(&quot;%s\n&quot;, strncat(str, src, 5));    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*int strcmp(const char *s1, const char *s2);功能：比较 s1 和 s2 的大小，比较的是字符ASCII码大小。参数：    s1：字符串1首地址    s2：字符串2首地址返回值：    相等：0    大于：&gt;0 在不同操作系统strcmp结果会不同   返回ASCII差值    小于：&lt;0*&#x2F;int main(void)&#123;    char *str1 &#x3D; &quot;hello world&quot;;    char *str2 &#x3D; &quot;hello mike&quot;;    if (strcmp(str1, str2) &#x3D;&#x3D; 0)    &#123;        printf(&quot;str1&#x3D;&#x3D;str2\n&quot;);    &#125;    else if (strcmp(str1, str2) &gt; 0)    &#123;        printf(&quot;str1&gt;str2\n&quot;);    &#125;    else    &#123;        printf(&quot;str1&lt;str2\n&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*int strncmp(const char *s1, const char *s2, size_t n);功能：比较 s1 和 s2 前n个字符的大小，比较的是字符ASCII码大小。参数：    s1：字符串1首地址    s2：字符串2首地址    n：指定比较字符串的数量返回值：    相等：0    大于： &gt; 0    小于： &lt; 0*&#x2F;int main(void)&#123;    char *str1 &#x3D; &quot;hello world&quot;;    char *str2 &#x3D; &quot;hello mike&quot;;    if (strncmp(str1, str2, 5) &#x3D;&#x3D; 0)    &#123;        printf(&quot;str1&#x3D;&#x3D;str2\n&quot;);    &#125;    else if (strcmp(str1, &quot;hello world&quot;) &gt; 0)    &#123;        printf(&quot;str1&gt;str2\n&quot;);    &#125;    else    &#123;        printf(&quot;str1&lt;str2\n&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int sprintf(char *str, const char *format, ...);功能：根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 &#39;\0&#39;  为止。参数：    str：字符串首地址    format：字符串格式，用法和printf()一样返回值：    成功：实际格式化的字符个数    失败： - 1*&#x2F;int main(void)&#123;    char dst[100] &#x3D; &#123; 0 &#125;;    int a &#x3D; 10;    char src[] &#x3D; &quot;hello world&quot;;    printf(&quot;a &#x3D; %d, src &#x3D; %s&quot;, a, src);    printf(&quot;\n&quot;);    int len &#x3D; sprintf(dst, &quot;a &#x3D; %d, src &#x3D; %s&quot;, a, src);    printf(&quot;dst &#x3D; \&quot; %s\&quot;\n&quot;, dst);    printf(&quot;len &#x3D; %d\n&quot;, len);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int sscanf(const char *str, const char *format, ...);功能：从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。参数：    str：指定的字符串首地址    format：字符串格式，用法和scanf()一样返回值：    成功：参数数目，成功转换的值的个数    失败： - 1*&#x2F;int main(void)&#123;    char src[] &#x3D; &quot;a&#x3D;10, b&#x3D;20&quot;;    int a;    int b;    sscanf(src, &quot;a&#x3D;%d,  b&#x3D;%d&quot;, &amp;a, &amp;b);    printf(&quot;a:%d, b:%d\n&quot;, a, b);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strchr"><a href="#strchr" class="headerlink" title="strchr"></a>strchr</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strchr(const char *s, int c);功能：在字符串s中查找字母c出现的位置参数：    s：字符串首地址    c：匹配字母(字符)返回值：    成功：返回第一次出现的c地址    失败：NULL*&#x2F;int main(void)&#123;    char src[] &#x3D; &quot;ddda123abcd&quot;;    char *p &#x3D; strchr(src, &#39;a&#39;);    printf(&quot;p &#x3D; %s\n&quot;, p);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strstr(const char *haystack, const char *needle);功能：在字符串haystack中查找字符串needle出现的位置参数：    haystack：源字符串首地址    needle：匹配字符串首地址返回值：    成功：返回第一次出现的needle地址    失败：NULL*&#x2F;int main(void)&#123;    char src[] &#x3D; &quot;ddddabcd123abcd333abcd&quot;;    char *p &#x3D; strstr(src, &quot;abcd&quot;);    printf(&quot;p &#x3D; %s\n&quot;, p);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h5><ul><li>在第一次调用时：strtok()必需给予参数s字符串</li><li>往后的调用则将参数s设置成NULL，每次调用成功则返回指向被分割出片段的指针</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*char *strtok(char *str, const char *delim);功能：来将字符串分割成一个个片段。当strtok()在参数s的字符串中发现参数delim中包含的分割字符时, 则会将该字符改为\0 字符，当连续出现多个时只替换第一个为\0。参数：    str：指向欲分割的字符串    delim：为分割字符串中包含的所有字符返回值：    成功：分割后字符串首地址    失败：NULL*&#x2F;int main(void)&#123;    char a[100] &#x3D; &quot;adc*fvcv*ebcy*hghbdfg*casdert&quot;;    char *s &#x3D; strtok(a, &quot;*&quot;);&#x2F;&#x2F;将&quot;*&quot;分割的子串取出    while (s !&#x3D; NULL)    &#123;        printf(&quot;%s\n&quot;, s);        s &#x3D; strtok(NULL, &quot;*&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h5><p>类似的函数有：</p><ul><li>atof()：把一个小数形式的字符串转化为一个浮点数。</li><li>atol()：将一个字符串转化为long类型</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;&#x2F;*int atoi(const char *nptr);功能：atoi()会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符(&#39;\0&#39;)才结束转换，并将结果返回返回值。参数：    nptr：待转换的字符串返回值：成功转换后整数*&#x2F;int main(void)&#123;    char str1[] &#x3D; &quot;-10&quot;;    int num1 &#x3D; atoi(str1);    printf(&quot;num1 &#x3D; %d\n&quot;, num1);    char str2[] &#x3D; &quot;0.123&quot;;    double num2 &#x3D; atof(str2);    printf(&quot;num2 &#x3D; %lf\n&quot;, num2);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数组和字符串</title>
      <link href="/c-c/c-yu-yan-shu-zu-he-zi-fu-chuan/"/>
      <url>/c-c/c-yu-yan-shu-zu-he-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在程序设计中，为了方便处理数据把具有相同类型的若干变量按有序形式组织起来——称为数组。</p><p>数组就是在内存中连续的相同类型的变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。</p><p>数组属于构造数据类型：</p><ol><li>一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型。</li><li>按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别。</li></ol><p>通常情况下，数组元素下标的个数也称为维数，根据维数的不同，可将数组分为一维数组、二维数组、三维数组、四维数组等。通常情况下，我们将二维及以上的数组称为多维数组。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="一维数组的定义和使用"><a href="#一维数组的定义和使用" class="headerlink" title="一维数组的定义和使用"></a>一维数组的定义和使用</h4><ol><li>数组名字符合标识符的书写规定(数字、英文字母、下划线)</li><li><strong>数组名不能与其它变量名相同，同一作用域内是唯一的</strong></li><li>方括号[]中常量表达式表示数组元素的个数</li><li><strong>定义数组时[]内最好是常量，使用数组时[]内即可是常量，也可以是变量</strong></li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[10];&#x2F;&#x2F;定义了一个数组，名字叫a，有10个成员，每个成员都是int类型    &#x2F;&#x2F;a[0]…… a[9]，没有a[10]    &#x2F;&#x2F;没有a这个变量，a是数组的名字，但不是变量名，它是常量    a[0] &#x3D; 0;    &#x2F;&#x2F;……    a[9] &#x3D; 9;    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; 10; i++)    &#123;    a[i] &#x3D; i; &#x2F;&#x2F;给数组赋值    &#125;    &#x2F;&#x2F;遍历数组，并输出每个成员的值    for (i &#x3D; 0; i &lt; 10; i++)    &#123;    printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h4><p>在定义数组的同时进行赋值，称为初始化。全局数组若不初始化，编译器将其初始化为零。局部数组若不初始化，内容为随机值。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;&#x2F;&#x2F;定义一个数组，同时初始化所有成员变量int a[10] &#x3D; &#123; 1, 2, 3 &#125;;&#x2F;&#x2F;初始化前三个成员，后面所有元素都设置为0int a[10] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;所有的成员都设置为0 &#x2F;&#x2F;[]中不定义元素个数，定义时必须初始化int a[] &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;&#x2F;&#x2F;定义了一个数组，有5个成员<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><p><strong>数组名是一个地址的常量，代表数组中首元素的地址。</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;&#x2F;&#x2F;定义一个数组，同时初始化所有成员变量    printf(&quot;a &#x3D; %p\n&quot;, a);    printf(&quot;&amp;a[0] &#x3D; %p\n&quot;, &amp;a[0]);    int n &#x3D; sizeof(a); &#x2F;&#x2F;数组占用内存的大小，10个int类型，10 * 4  &#x3D; 40    int n0 &#x3D; sizeof(a[0]);&#x2F;&#x2F;数组第0个元素占用内存大小，第0个元素为int，4    int i &#x3D; 0;    for (i &#x3D; 0; i &lt; sizeof(a) &#x2F; sizeof(a[0]); i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="一维数组的最值"><a href="#一维数组的最值" class="headerlink" title="一维数组的最值"></a>一维数组的最值</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123;  1, -2, 3,- 4, 5, -6, 7, -8, -9, 10 &#125;;&#x2F;&#x2F;定义一个数组，同时初始化所有成员变量    int i &#x3D; 0;    int max &#x3D; a[0];    for (i &#x3D; 1; i &lt; sizeof(a) &#x2F; sizeof(a[0]); i++)    &#123;        if (a[i] &gt; max)        &#123;            max &#x3D; a[i];        &#125;    &#125;    printf(&quot;数组中最大值为：%d\n&quot;, max);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="一维数组的逆置"><a href="#一维数组的逆置" class="headerlink" title="一维数组的逆置"></a>一维数组的逆置</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123;  1, -2, 3,- 4, 5, -6, 7, -8, -9, 10 &#125;;&#x2F;&#x2F;定义一个数组，同时初始化所有成员变量    int i &#x3D; 0;    int j &#x3D; sizeof(a) &#x2F; sizeof(a[0]) -1;    int tmp;    while (i &lt; j)    &#123;        tmp &#x3D; a[i];        a[i] &#x3D; a[j];        a[j] &#x3D; tmp;        i++;        j--;    &#125;    for (i &#x3D; 0; i &lt; sizeof(a) &#x2F; sizeof(a[0]); i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="冒泡法排序"><a href="#冒泡法排序" class="headerlink" title="冒泡法排序"></a>冒泡法排序</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a[] &#x3D; &#123;  1, -2, 3,- 4, 5, -6, 7, -8, -9, 10 &#125;;&#x2F;&#x2F;定义一个数组，同时初始化所有成员变量    int i &#x3D; 0;    int j &#x3D; 0;    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);    int tmp;    &#x2F;&#x2F;1、流程    &#x2F;&#x2F;2、试数    for (i &#x3D; 0; i &lt; n-1; i++)    &#123;        for (j &#x3D; 0; j &lt; n - i -1 ; j++)&#x2F;&#x2F;内循环的目的是比较相邻的元素，把大的放到后面        &#123;            if (a[j]  &gt; a[j + 1])            &#123;                tmp &#x3D; a[j];                a[j] &#x3D; a[j+1];                a[j+1] &#x3D; tmp;            &#125;        &#125;    &#125;    for (i &#x3D; 0; i &lt; n; i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组的定义和使用"><a href="#二维数组的定义和使用" class="headerlink" title="二维数组的定义和使用"></a>二维数组的定义和使用</h4><p>二维数组定义的一般形式是：<br><strong>类型说明符 数组名[常量表达式1][常量表达式2]</strong></p><p>其中常量表达式1表示第一维下标的长度，常量表达式2 表示第二维下标的长度。</p><p>int a[3][4];</p><p><img src="/images/2024052115283301.png" alt="2024052115283301"></p><ol><li>命名规则同一维数组</li><li>定义了一个三行四列的数组，数组名为a其元素类型为整型，该数组的元素个数为3×4个，即：二维数组a是按行进行存放的，先存放a[0]行，再存放a[1]行、a[2]行，并且每行有四个元素，也是依次存放的。</li><li>二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标。</li><li>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，<strong>也就是说内存中只有一维数组</strong>，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;定义了一个二维数组，名字叫a    &#x2F;&#x2F;由3个一维数组组成，这个一维数组是int [4]    &#x2F;&#x2F;这3个一维数组的数组名分别为a[0],a[1],a[2]    int a[3][4];    a[0][0] &#x3D; 0;    &#x2F;&#x2F;……    a[2][3] &#x3D; 12;    &#x2F;&#x2F;给数组每个元素赋值    int i &#x3D; 0;    int j &#x3D; 0;    int num &#x3D; 0;    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        for (j &#x3D; 0; j &lt; 4; j++)        &#123;            a[i][j] &#x3D; num++;        &#125;    &#125;    &#x2F;&#x2F;遍历数组，并输出每个成员的值    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        for (j &#x3D; 0; j &lt; 4; j++)        &#123;            printf(&quot;%d, &quot;, a[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;分段赋值 int a[3][4] &#x3D; &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;int a[3][4] &#x3D; &#123;     &#123; 1, 2, 3, 4 &#125;,    &#123; 5, 6, 7, 8, &#125;,    &#123; 9, 10, 11, 12 &#125;&#125;;&#x2F;&#x2F;连续赋值int a[3][4] &#x3D; &#123; 1, 2, 3, 4 , 5, 6, 7, 8, 9, 10, 11, 12  &#125;;&#x2F;&#x2F;可以只给部分元素赋初值，未初始化则为0int a[3][4] &#x3D; &#123; 1, 2, 3, 4  &#125;;&#x2F;&#x2F;所有的成员都设置为0int a[3][4] &#x3D; &#123;0&#125;;&#x2F;&#x2F;[]中不定义元素个数，定义时必须初始化int a[][4] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二维数组名"><a href="#二维数组名" class="headerlink" title="二维数组名"></a>二维数组名</h4><p><strong>数组名是一个地址的常量，代表数组中首元素的地址。</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;定义了一个二维数组，名字叫a    &#x2F;&#x2F;二维数组是本质上还是一维数组，此一维数组有3个元素    个元素又是一个一维数组int[4]    int a[3][4] &#x3D; &#123; 1, 2, 3, 4 , 5, 6, 7, 8, 9, 10, 11, 12  &#125;;    &#x2F;&#x2F;数组名为数组首元素地址，二维数组的第0个元素为一维数组    &#x2F;&#x2F;第0个一维数组的数组名为a[0]    printf(&quot;a &#x3D; %p\n&quot;, a);    printf(&quot;a[0] &#x3D; %p\n&quot;, a[0]);            &#x2F;&#x2F;测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4    &#x2F;&#x2F;sizeof(a) &#x3D; 3 * 4 * 4 &#x3D; 48    printf(&quot;sizeof(a) &#x3D; %d\n&quot;, sizeof(a));    &#x2F;&#x2F;测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4&#x3D;16    printf(&quot;sizeof(a[0]) &#x3D; %d\n&quot;, sizeof(a[0]) );    &#x2F;&#x2F;测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节    printf(&quot;sizeof(a[0][0]) &#x3D; %d\n&quot;, sizeof(a[0][0]));    &#x2F;&#x2F;求二维数组行数    printf(&quot;i &#x3D; %d\n&quot;, sizeof(a) &#x2F; sizeof(a[0]));    &#x2F;&#x2F; 求二维数组列数    printf(&quot;j &#x3D; %d\n&quot;, sizeof(a[0]) &#x2F; sizeof(a[0][0]));    &#x2F;&#x2F;求二维数组行*列总数    printf(&quot;n &#x3D; %d\n&quot;, sizeof(a) &#x2F; sizeof(a[0][0]));    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二维数组例子"><a href="#二维数组例子" class="headerlink" title="二维数组例子"></a>二维数组例子</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;二维数组：  五行、三列    &#x2F;&#x2F;行代表人：  老大到老五    &#x2F;&#x2F;列代表科目：语、数、外    float a[5][3] &#x3D; &#123; &#123; 80, 75, 56 &#125;, &#123; 59, 65, 71 &#125;, &#123; 59, 63, 70 &#125;, &#123; 85, 45, 90 &#125;, &#123; 76, 77, 45 &#125; &#125;;    int i, j, person_low[3] &#x3D; &#123; 0 &#125;;    float s &#x3D; 0, lesson_aver[3] &#x3D; &#123; 0 &#125;;    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        for (j &#x3D; 0; j &lt; 5; j++)        &#123;            s &#x3D; s + a[j][i];            if (a[j][i] &lt; 60)            &#123;                person_low[i]++;            &#125;        &#125;        lesson_aver[i] &#x3D; s &#x2F; 5;        s &#x3D; 0;    &#125;    printf(&quot;各科的平均成绩:\n&quot;);    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        printf(&quot;%.2f\n&quot;, lesson_aver[i]);    &#125;            printf(&quot;各科不及格的人数:\n&quot;);    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        printf(&quot;%d\n&quot;, person_low[i]);    &#125;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组的定义与二维数组类似，其语法格式具体如下：<br>数组类型修饰符 数组名 [n1][n2]…[nn];</p><p>int a[3][4][5];</p><p>定义了一个三维数组，数组的名字是a，数组的长度为3，每个数组的元素又是一个二维数组，这个二维数组的长度是4，并且这个二维数组中的每个元素又是一个一维数组，这个一维数组的长度是5，元素类型是int。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;int a[3][4][5] ;&#x2F;&#x2F;定义了一个三维数组，有3个二维数组int[4][5]    int a[3][4][5] &#x3D; &#123; &#123; &#123; 1, 2, 3, 4, 5 &#125;, &#123; 6, 7, 8, 9, 10 &#125;, &#123; 0 &#125;, &#123; 0 &#125; &#125;, &#123; &#123; 0 &#125;, &#123; 0 &#125;, &#123; 0 &#125;, &#123;    0 &#125; &#125;, &#123; &#123; 0 &#125;, &#123; 0 &#125;, &#123; 0 &#125;, &#123; 0 &#125; &#125; &#125;;    int i, j, k;    for (i &#x3D; 0; i &lt; 3; i++)    &#123;        for (j &#x3D; 0; j &lt; 4; j++)        &#123;            for (k &#x3D; 0; k &lt; 5; k++)            &#123;                &#x2F;&#x2F;添加访问元素代码                printf(&quot;%d, &quot;, a[i][j][k]);            &#125;            printf(&quot;\n&quot;);        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h3><h4 id="字符串与字符数组区别"><a href="#字符串与字符数组区别" class="headerlink" title="字符串与字符数组区别"></a>字符串与字符数组区别</h4><ol><li>C语言中没有字符串这种数据类型，可以通过char的数组来替代；</li><li>字符串一定是一个char的数组，但char的数组未必是字符串；</li><li><strong>数字0(和字符‘\0’等价)结尾的char数组就是一个字符串</strong>，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以<strong>字符串是一种特殊的char的数组</strong>。</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char c1[] &#x3D; &#123; &#39;c&#39;, &#39; &#39;, &#39;p&#39;, &#39;r&#39;, &#39;o&#39;, &#39;g&#39; &#125;; &#x2F;&#x2F;普通字符数组    printf(&quot;c1 &#x3D; %s\n&quot;, c1); &#x2F;&#x2F;乱码，因为没有’\0’结束符    &#x2F;&#x2F;以‘\0’(‘\0’就是数字0)结尾的字符数组是字符串    char c2[] &#x3D; &#123; &#39;c&#39;, &#39; &#39;, &#39;p&#39;, &#39;r&#39;, &#39;o&#39;, &#39;g&#39;, &#39;\0&#39;&#125;;     printf(&quot;c2 &#x3D; %s\n&quot;, c2);    &#x2F;&#x2F;字符串处理以‘\0’(数字0)作为结束符，后面的&#39;h&#39;, &#39;l&#39;, &#39;l&#39;, &#39;e&#39;, &#39;o&#39;不会输出    char c3[] &#x3D; &#123; &#39;c&#39;, &#39; &#39;, &#39;p&#39;, &#39;r&#39;, &#39;o&#39;, &#39;g&#39;, &#39;\0&#39;, &#39;h&#39;, &#39;l&#39;, &#39;l&#39;, &#39;e&#39;, &#39;o&#39;, &#39;\0&#39;&#125;;    printf(&quot;c3 &#x3D; %s\n&quot;, c3);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串的初始化"><a href="#字符串的初始化" class="headerlink" title="字符串的初始化"></a>字符串的初始化</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;&#x2F; C语言没有字符串类型，通过字符数组模拟&#x2F;&#x2F; C语言字符串，以字符‘\0’, 数字0int main()&#123;    &#x2F;&#x2F;不指定长度, 没有0结束符，有多少个元素就有多长    char buf[] &#x3D; &#123; &#39;a&#39;, &#39;b&#39;, &#39;c&#39; &#125;;    printf(&quot;buf &#x3D; %s\n&quot;, buf);  &#x2F;&#x2F;乱码    &#x2F;&#x2F;指定长度，后面没有赋值的元素，自动补0    char buf2[100] &#x3D; &#123; &#39;a&#39;, &#39;b&#39;, &#39;c&#39; &#125;;    char buf[1000]&#x3D;&#123;“hello”&#125;;    printf(&quot;buf2 &#x3D; %s\n&quot;, buf2);    &#x2F;&#x2F;所有元素赋值为0    char buf3[100] &#x3D; &#123; 0 &#125;;    &#x2F;&#x2F;char buf4[2] &#x3D; &#123; &#39;1&#39;, &#39;2&#39;, &#39;3&#39; &#125;;&#x2F;&#x2F;数组越界    char buf5[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, &#39;0&#39;, &#39;7&#39; &#125;;    printf(&quot;buf5 &#x3D; %s\n&quot;, buf5);    char buf6[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, 0, &#39;7&#39; &#125;;    printf(&quot;buf6 &#x3D; %s\n&quot;, buf6);    char buf7[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, &#39;\0&#39;, &#39;7&#39; &#125;;    printf(&quot;buf7 &#x3D; %s\n&quot;, buf7);    &#x2F;&#x2F;使用字符串初始化，编译器自动在后面补0，常用    char buf8[] &#x3D; &quot;agjdslgjlsdjg&quot;;    &#x2F;&#x2F;&#39;\0&#39;后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符    &#x2F;&#x2F;&#39;\ddd&#39;八进制字义字符，&#39;\xdd&#39;十六进制转移字符    &#x2F;&#x2F; \012相当于\n    char str[] &#x3D; &quot;\012abc&quot;;    printf(&quot;str &#x3D;&#x3D; %s\n&quot;, str);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串的输入输出"><a href="#字符串的输入输出" class="headerlink" title="字符串的输入输出"></a>字符串的输入输出</h4><p>由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char str[100];        printf(&quot;input string1 : \n&quot;);    scanf(&quot;%s&quot;, str);&#x2F;&#x2F;scanf(“%s”,str)默认以空格分隔    printf(&quot;output:%s\n&quot;, str);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*char *gets(char *s);功能：从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止。参数：    s：字符串首地址返回值：    成功：读入的字符串    失败：NULL*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gets(str)与scanf(“%s”,str)的区别：</p><ol><li>gets(str)允许输入的字符串含有空格</li><li>scanf(“%s”,str)不允许含有空格</li></ol><p>注意：由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界(缓冲区溢出)的情况。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char str[100];printf(&quot;请输入str: &quot;);gets(str);printf(&quot;str &#x3D; %s\n&quot;, str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*char *fgets(char *s, int size, FILE *stream);功能：从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 &#39;\0&#39; 作为字符串结束。参数：    s：字符串    size：指定最大读取字符串的长度（size - 1）    stream：文件指针，如果读键盘输入的字符串，固定写为stdin返回值：    成功：成功读取的字符串    读到文件尾或出错： NULL*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fgets()在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过scanf和gets输入一个字符串的时候，不包含结尾的“\n”，但通过fgets结尾多了“\n”。fgets()函数是安全的，不存在缓冲区溢出的问题。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char str[100];printf(&quot;请输入str: &quot;);fgets(str, sizeof(str), stdin);printf(&quot;str &#x3D; \&quot;%s\&quot;\n&quot;, str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int puts(const char *s);功能：标准设备输出s字符串，在输出完成后自动输出一个&#39;\n&#39;。参数：    s：字符串首地址返回值：    成功：非负数    失败：-1*&#x2F;int main()&#123;    printf(&quot;hello world&quot;);    puts(&quot;hello world&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;&#x2F;*int fputs(const char * str, FILE * stream);功能：将str所指定的字符串写入到stream指定的文件中， 字符串结束符 &#39;\0&#39;  不写入文件。参数：    str：字符串    stream：文件指针，如果把字符串输出到屏幕，固定写为stdout返回值：    成功：0    失败：-1*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fputs()是puts()的文件操作版本，但fputs()不会自动输出一个’\n’。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;hello world&quot;);puts(&quot;hello world&quot;);fputs(&quot;hello world&quot;, stdout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;string.h&gt;&#x2F;*size_t strlen(const char *s);功能：计算指定指定字符串s的长度，不包含字符串结束符‘\0’参数：    s：字符串首地址返回值：    字符串s的长度，size_t为unsigned int类型*&#x2F;int main(void)&#123;    char str[] &#x3D; &quot;abc\0defg&quot;;    int n &#x3D; strlen(str);    printf(&quot;n &#x3D; %d\n&quot;, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串追加"><a href="#字符串追加" class="headerlink" title="字符串追加"></a>字符串追加</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char str1[] &#x3D; &quot;abcdef&quot;;    char str2[] &#x3D; &quot;123456&quot;;    char dst[100];    int i &#x3D; 0;    while (str1[i] !&#x3D; 0)    &#123;        dst[i] &#x3D; str1[i];        i++;    &#125;    int j &#x3D; 0;    while (str2[j] !&#x3D; 0)    &#123;        dst[i + j] &#x3D; str2[j];        j++;    &#125;    dst[i + j] &#x3D; 0; &#x2F;&#x2F;字符串结束符    printf(&quot;dst &#x3D; %s\n&quot;, dst);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言运算符与表达式</title>
      <link href="/c-c/c-yu-yan-yun-suan-fu-yu-biao-da-shi/"/>
      <url>/c-c/c-yu-yan-yun-suan-fu-yu-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h3><h4 id="常用运算符分类"><a href="#常用运算符分类" class="headerlink" title="常用运算符分类"></a>常用运算符分类</h4><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr><tr><td>位运算符</td><td>用于处理数据的位运算</td></tr><tr><td>sizeof运算符</td><td>用于求字节数长度</td></tr></tbody></table><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+1</td><td>1</td></tr><tr><td>-</td><td>负号</td><td>-1</td><td>-1</td></tr><tr><td>+</td><td>加</td><td>1+1</td><td>2</td></tr><tr><td>-</td><td>减</td><td>3-1</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*2</td><td>6</td></tr><tr><td>&#x2F;</td><td>除</td><td>5&#x2F;1</td><td>5</td></tr><tr><td>%</td><td>取余(取模)</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前自增</td><td>a&#x3D;2;b&#x3D;++a</td><td>a&#x3D;3;b&#x3D;3</td></tr><tr><td>++</td><td>后自增</td><td>a&#x3D;2;b&#x3D;a++</td><td>a&#x3D;3;b&#x3D;2</td></tr><tr><td>–</td><td>前自减</td><td>a&#x3D;2;b&#x3D;–a</td><td>a&#x3D;1;b&#x3D;1</td></tr><tr><td>–</td><td>后自减</td><td>a&#x3D;2;b&#x3D;a–</td><td>a&#x3D;1;b&#x3D;2</td></tr></tbody></table><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>C 语言的比较运算中， “真”用数字“1”来表示， “假”用数字“0”来表示。</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>1&#x3D;&#x3D;2</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>1!&#x3D;2</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>1&lt;2</td><td>1</td></tr><tr><td>&gt;</td><td>大于</td><td>1&gt;2</td><td>0</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>1&lt;&#x3D;2</td><td>1</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>1&gt;&#x3D;2</td><td>0</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a&amp;&amp;b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a||b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><table>    <tr>        <td>优先级</td>        <td>运算符</td>        <td>名称或含义</td>        <td>使用形式</td>        <td>结合方向</td>        <td>说明</td>    </tr>    <tr>        <td rowspan="4">1</td>        <td>[]</td>        <td>数组下标</td>        <td>数组名[常量表达式]</td>        <td rowspan="4">左到右</td>        <td rowspan="4">-</td>    </tr>    <tr>        <td>()</td>        <td>名称或含义</td>        <td>(表达式）/函数名(形参表)</td>    </tr>    <tr>        <td>.</td>        <td>名称或含义</td>        <td>对象.成员名</td>    </tr>    <tr>        <td>-></td>        <td>名称或含义</td>        <td>对象指针->成员名</td>    </tr>    <tr>        <td rowspan="9">2</td>        <td>-</td>        <td>负号运算符</td>        <td>-表达式</td>        <td rowspan="9">右到左</td>        <td rowspan="7">单目运算符</td>    </tr>    <tr>        <td>~</td>        <td>按位取反运算符</td>        <td>~表达式</td>    </tr>     <tr>        <td>++</td>        <td>自增运算符</td>        <td>++变量名/变量名++</td>    </tr>     <tr>        <td>--</td>        <td>自减运算符</td>        <td>--变量名/变量名--</td>    </tr>     <tr>        <td>*</td>        <td>取值运算符</td>        <td>*指针变量</td>    </tr>     <tr>        <td>&</td>        <td>取地址运算符</td>        <td>&变量名</td>    </tr>     <tr>        <td>!</td>        <td>逻辑非运算符</td>        <td>!表达式</td>    </tr>     <tr>        <td>(类型)</td>        <td>强制类型转换</td>        <td>(数据类型)表达式</td>        <td rowspan="2">-</td>    </tr>     <tr>        <td>sizeof</td>        <td>长度运算符</td>        <td>sizeof(表达式)</td>    </tr>     <tr>        <td rowspan="3">3</td>        <td>/</td>        <td>除</td>        <td>表达式/表达式</td>        <td rowspan="3">左到右</td>        <td rowspan="3">双目运算符</td>    </tr>     <tr>        <td>*</td>        <td>乘</td>        <td>表达式*表达式</td>    </tr>    <tr>        <td>%</td>        <td>余数(取模)</td>        <td>整型表达式%整型表达式</td>    </tr>     <tr>        <td rowspan="2">4</td>        <td>+</td>        <td>加</td>        <td>表达式+表达式</td>        <td rowspan="2">左到右</td>        <td rowspan="2">双目运算符</td>    </tr>     <tr>        <td>-</td>        <td>减</td>        <td>表达式-表达式</td>    </tr>    <tr>        <td rowspan="2">5</td>        <td><<</td>        <td>左移</td>        <td> 变量<< 表达式</td>        <td rowspan="2">左到右</td>        <td rowspan="2">双目运算符</td>    </tr>     <tr>        <td>>></td>        <td>右移</td>        <td>变量>>表达式</td>    </tr>    <tr>        <td rowspan="4">6</td>        <td>></td>        <td>大于</td>        <td> 表达式>表达式</td>        <td rowspan="4">左到右</td>        <td rowspan="4">双目运算符</td>    </tr>    <tr>        <td>>=</td>        <td>大于等于</td>        <td>表达式>=表达式</td>    </tr>    <tr>        <td><</td>        <td>小于</td>        <td>表达式< 表达式</td>    </tr>    <tr>        <td><=</td>        <td>小于等于</td>        <td>表达式<=表达式</td>    </tr>    <tr>        <td rowspan="2">7</td>        <td>==</td>        <td>等于</td>        <td> 表达式==表达式</td>        <td rowspan="2">左到右</td>        <td rowspan="2">双目运算符</td>    </tr>     <tr>        <td>!=</td>        <td>不等于</td>        <td>表达式!=表达式</td>    </tr>    <tr>        <td>8</td>        <td>&</td>        <td>按位与</td>        <td>表达式&表达式</td>        <td>左到右</td>        <td>双目运算符</td>    </tr>    <tr>        <td>9</td>        <td>^</td>        <td>按位异或</td>        <td>表达式^表达式</td>        <td>左到右</td>        <td>双目运算符</td>    </tr>    <tr>        <td>10</td>        <td>|</td>        <td>按位或</td>        <td>表达式|表达式</td>        <td>左到右</td>        <td>双目运算符</td>    </tr>    <tr>        <td>11</td>        <td>&&</td>        <td>逻辑与</td>        <td>表达式&&表达式</td>        <td>左到右</td>        <td>双目运算符</td>    </tr>    <tr>        <td>12</td>        <td>||</td>        <td>逻辑或</td>        <td>表达式||表达式</td>        <td>左到右</td>        <td>双目运算符</td>    </tr>    <tr>        <td>13</td>        <td>?:</td>        <td>条件运算符</td>        <td>表达式1?表达式2: 表达式3</td>        <td>右到左</td>        <td>三目运算符</td>    </tr>    <tr>        <td rowspan="11">14</td>        <td>=</td>        <td>赋值运算符</td>        <td>变量=表达式</td>        <td rowspan="11">右到左</td>        <td rowspan="11">-</td>    </tr>    <tr>        <td>/=</td>        <td>除后赋值</td>        <td>变量/=表达式</td>    </tr>     <tr>        <td>*=</td>        <td>乘后赋值</td>        <td>变量*=表达式</td>    </tr>     <tr>        <td>%=</td>        <td>取模后赋值</td>        <td>变量%=表达式</td>    </tr>     <tr>        <td>+=</td>        <td>加后赋值</td>        <td>变量+=表达式</td>    </tr>     <tr>        <td>-=</td>        <td>减后赋值</td>        <td>变量-=表达式</td>    </tr>     <tr>        <td><<=</td>        <td>左移后赋值</td>        <td>变量<<=表达式</td>    </tr>    <tr>        <td>>>=</td>        <td>右移后赋值</td>        <td>变量>>=表达式</td>    </tr>     <tr>        <td>&=</td>        <td>按位与后赋值</td>        <td>变量&=表达式</td>    </tr>    <tr>        <td>^=</td>        <td>按位异或后赋值</td>        <td>变量^=表达式</td>    </tr>     <tr>        <td>|=</td>        <td>按位或后赋值</td>        <td>变量|=表达式</td>    </tr>    <tr>        <td>15</td>        <td>,</td>        <td>逗号运算符</td>        <td>表达式,表达式,…</td>        <td>左到右</td>        <td>-</td>    </tr></table><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>数据有不同的类型，不同类型数据之间进行混合运算时必然涉及到类型的转换问题。</p><ol><li>**自动转换(隐式转换)**：遵循一定的规则,由编译系统自动完成。</li><li><strong>强制类型转换</strong>：把表达式的运算结果强制转换成所需的数据类型。</li></ol><p>类型转换的原则：占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</p><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int num &#x3D; 5;    printf(&quot;s1&#x3D;%d\n&quot;, num &#x2F; 2);    printf(&quot;s2&#x3D;%lf\n&quot;, num &#x2F; 2.0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h5><p>强制类型转换指的是使用强制类型转换运算符，将一个变量或表达式转化成所需的类型，其基本语法格式如下所示：</p><p>(类型说明符) (表达式)</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    float x &#x3D; 0;    int i &#x3D; 0;    x &#x3D; 3.6f;    i &#x3D; x;&#x2F;&#x2F;x为实型, i为整型，直接赋值会有    警告    i &#x3D; (int)x;&#x2F;&#x2F;使用强制类型转换    printf(&quot;x&#x3D;%f, i&#x3D;%d\n&quot;, x, i);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言概述</title>
      <link href="/c-c/c-yu-yan-gai-shu/"/>
      <url>/c-c/c-yu-yan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h2><h3 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h3><p>C代码编译成可执行文件需经过4步</p><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>检查语法，将预处理后文件编译生成汇编文件</p><h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><p>将汇编文件生成目标文件(二进制文件)</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</p><h3 id="gcc编译过程"><a href="#gcc编译过程" class="headerlink" title="gcc编译过程"></a>gcc编译过程</h3><p>例如编译hello.c文件</p><h4 id="分步编译"><a href="#分步编译" class="headerlink" title="分步编译"></a>分步编译</h4><p>预处理：gcc -E hello.c -o hello.i<br>编  译：gcc -S hello.i -o hello.s<br>汇  编：gcc -c hello.s -o hello.o<br>链  接：gcc    hello.o -o hello</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-E</td><td>只进行预处理</td></tr><tr><td>-S(大写)</td><td>只进行预处理和编译</td></tr><tr><td>-c(小写)</td><td>只进行预处理、编译和汇编</td></tr><tr><td>-o file</td><td>指定生成的输出文件名为file</td></tr></tbody></table><table><thead><tr><th>文件后缀</th><th>含义</th></tr></thead><tbody><tr><td>.c</td><td>c语言文件</td></tr><tr><td>.i</td><td>预处理后的c语言文件</td></tr><tr><td>.s</td><td>编译后的汇编文件</td></tr><tr><td>.o</td><td>编译后的目标文件</td></tr></tbody></table><h4 id="一步编译"><a href="#一步编译" class="headerlink" title="一步编译"></a>一步编译</h4><p>gcc hello.c -o hello<br>还是经过上面的预处理、编译、汇编和连接过程</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><h5 id="数据类型关键字"><a href="#数据类型关键字" class="headerlink" title="数据类型关键字"></a>数据类型关键字</h5><p>char、short、int、long、float、double<br>unsigned、signed、struct、union、enum、void</p><h5 id="控制语句关键字"><a href="#控制语句关键字" class="headerlink" title="控制语句关键字"></a>控制语句关键字</h5><p>if、else、switch、case、default、for<br>do、while、break、continue、goto、return</p><h5 id="存储类关键字"><a href="#存储类关键字" class="headerlink" title="存储类关键字"></a>存储类关键字</h5><p>auto、extern、register、static、const</p><h5 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h5><p>sizeof、typedef、volatie</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>数据类型的作用：编译器预算对象(变量)分配内存空间大小<br><img src="/images/2024051713593301.png" alt="2024051713593301"></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ol><li>在程序运行过程中，其值不能被改变的量</li><li>常量一般出现在表达式或赋值语句中</li></ol><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>整型常量</td><td>100，200，-100，,</td></tr><tr><td>实型常量</td><td>3.1415，0.125，-3.314</td></tr><tr><td>字符型常量</td><td>‘a’，’b’，’1’，’\n’</td></tr><tr><td>字符串常量</td><td>“a”，”ad”，”123456”</td></tr></tbody></table><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li>在程序运行过程中，其值可以改变</li><li>变量在使用前必须先定义，定义变量前必须有对应的数据类型</li></ol><h5 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h5><ol><li>不能是关键字</li><li>只能由字母、数字、下划线组成</li><li>首字母必须是字母或下划线</li><li>字母区分大小写</li></ol><h5 id="变量特点"><a href="#变量特点" class="headerlink" title="变量特点"></a>变量特点</h5><ol><li>变量在编译时为其分配相应的内存空间</li><li>可以通过其名字和地址访问相应的内存</li></ol><h5 id="声明和定义的区别"><a href="#声明和定义的区别" class="headerlink" title="声明和定义的区别"></a>声明和定义的区别</h5><ol><li>声明变量不需要建立存储空空间。例如：extern int a</li><li>定义变量需要建立存储空间。 例如：int b<br>从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义</li><li>int b它既是声明，同时也是定义</li><li>对于extern b来讲它只是声明不是定义<br>一般情况下，把建立存储空间的声明称为”定义”，而把不需要建立存储空间的声明称为”声明”</li></ol><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th>打印格式</th><th>含义</th></tr></thead><tbody><tr><td>%d</td><td>输出一个<strong>有符号</strong>的10进制int类型</td></tr><tr><td>%o</td><td>输出8进制的int类型</td></tr><tr><td>%x</td><td>输出16进制的int类型，字母以小写输出</td></tr><tr><td>%X</td><td>输出16进制的int类型，字母以大写输出</td></tr><tr><td>%u</td><td>输出一个10进制的<strong>无符号</strong>数</td></tr></tbody></table><h4 id="整型变量的定义和输出"><a href="#整型变量的定义和输出" class="headerlink" title="整型变量的定义和输出"></a>整型变量的定义和输出</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a &#x3D; 123;    &#x2F;&#x2F;定义变量a，以10进制方式赋值为123    int b &#x3D; 0567;   &#x2F;&#x2F;定义变量b，以8进制方式赋值为0567    int c &#x3D; 0xabc;  &#x2F;&#x2F;定义变量c，以16进制方式赋值为0xabc    printf(&quot;a &#x3D; %d\n&quot;, a);    printf(&quot;8进制：b &#x3D; %o\n&quot;, b);    printf(&quot;10进制：b &#x3D; %d\n&quot;, b);    printf(&quot;16进制：c &#x3D; %x\n&quot;, c);    printf(&quot;16进制：c &#x3D; %X\n&quot;, c);    printf(&quot;10进制：c &#x3D; %d\n&quot;, c);        unsigned int d &#x3D; 0xffffffff; &#x2F;&#x2F;定义无符号int变量d，以16进制方式赋值    printf(&quot;有符号方式打印：d &#x3D; %d\n&quot;, d);    printf(&quot;无符号方式打印：d &#x3D; %u\n&quot;, d);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整型变量的输入"><a href="#整型变量的输入" class="headerlink" title="整型变量的输入"></a>整型变量的输入</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a;    printf(&quot;请输入a的值：&quot;);    &#x2F;&#x2F;不要加“\n”    scanf(&quot;%d&quot;, &amp;a);    printf(&quot;a &#x3D; %d\n&quot;, a); &#x2F;&#x2F;打印a的值    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="short、int、long、long-long"><a href="#short、int、long、long-long" class="headerlink" title="short、int、long、long long"></a>short、int、long、long long</h4><table><thead><tr><th>数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td></tr><tr><td>int(整型)</td><td>4字节</td></tr><tr><td>long(长整型)</td><td>windows为4字节，linux为4字节(32bit),8字节(64bit)</td></tr><tr><td>long long(长长整型)</td><td>8字节</td></tr></tbody></table><ol><li>需要注意的是，整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型。</li><li>当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</li></ol><table><thead><tr><th>整型常量</th><th>所需类型</th></tr></thead><tbody><tr><td>10</td><td>代表int类型</td></tr><tr><td>10l，10L</td><td>代表long类型</td></tr><tr><td>10ll，10LL</td><td>代表long类型</td></tr><tr><td>10u，10U</td><td>代表unsigned int类型</td></tr><tr><td>10ul,10UL</td><td>代表unsigned long类型</td></tr><tr><td>10ull,10ULL</td><td>代表unsigned long long类型</td></tr></tbody></table><table><thead><tr><th>打印格式</th><th>含义</th></tr></thead><tbody><tr><td>%hd</td><td>输出short类型</td></tr><tr><td>%d</td><td>输出int类型</td></tr><tr><td>%ld</td><td>输出long类型</td></tr><tr><td>%lld</td><td>输出long long类型</td></tr><tr><td>%hu</td><td>输出unsigned short类型</td></tr><tr><td>%u</td><td>输出unsigned int类型</td></tr><tr><td>%lu</td><td>输出unsigned long类型</td></tr><tr><td>%llu</td><td>输出unsigned long long类型</td></tr></tbody></table><h4 id="有符号数和无符号数区别"><a href="#有符号数和无符号数区别" class="headerlink" title="有符号数和无符号数区别"></a>有符号数和无符号数区别</h4><h5 id="有符号数"><a href="#有符号数" class="headerlink" title="有符号数"></a>有符号数</h5><p>有符号数最高位为符号位，0代表正数，1代表负数</p><h5 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h5><p>无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</p><h5 id="有符号和无符号整型取值范围"><a href="#有符号和无符号整型取值范围" class="headerlink" title="有符号和无符号整型取值范围"></a>有符号和无符号整型取值范围</h5><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short</td><td>2字节</td><td>-32768到32767(-2ⁿ~2ⁿ-1 n&#x3D;15)</td></tr><tr><td>int</td><td>4字节</td><td>-2147483648到2147483647(-2ⁿ~2ⁿ-1 n&#x3D;31)</td></tr><tr><td>long</td><td>4字节</td><td>-2147483648到2147483647(-2ⁿ~2ⁿ-1 n&#x3D;31)</td></tr><tr><td>unsigned short</td><td>2字节</td><td>0到65535(2ⁿ-1 n&#x3D;16)</td></tr><tr><td>unsigned int</td><td>4字节</td><td>0到4294967295(2ⁿ-1 n&#x3D;32)</td></tr><tr><td>unsigned long</td><td>4字节</td><td>0到4294967295(2ⁿ-1 n&#x3D;32)</td></tr></tbody></table><h3 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h3><ol><li>sizeof不是函数，所以不需要引入任何头文件，用于计算一个数据类型的大小，单位是字节</li><li>sizeof的返回值为size_t</li><li>size_t类型在32bit操作系统下是unsigned int,是一个无符号整数</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a;    int b &#x3D; sizeof(a);&#x2F;&#x2F;sizeof得到指定值占用内存的大小，单位：字节    printf(&quot;b &#x3D; %d\n&quot;, b);    size_t c &#x3D; sizeof(a);    printf(&quot;c &#x3D; %u\n&quot;, c);&#x2F;&#x2F;用无符号数的方式输出c的值    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><h4 id="字符变量的定义和输出"><a href="#字符变量的定义和输出" class="headerlink" title="字符变量的定义和输出"></a>字符变量的定义和输出</h4><p>字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节。在给字符型变量赋值时，需要用一对英文半角格式的单引号(‘ ‘)把字符括起来。</p><p>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。char的本质就是一个1字节大小的整型。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char ch &#x3D; &#39;a&#39;;    printf(&quot;sizeof(ch) &#x3D; %u\n&quot;, sizeof(ch));    printf(&quot;ch[%%c] &#x3D; %c\n&quot;, ch); &#x2F;&#x2F;打印字符    printf(&quot;ch[%%d] &#x3D; %d\n&quot;, ch); &#x2F;&#x2F;打印‘a’ ASCII的值    char A &#x3D; &#39;A&#39;;    char a &#x3D; &#39;a&#39;;    printf(&quot;a &#x3D; %d\n&quot;, a);&#x2F;&#x2F;97    printf(&quot;A &#x3D; %d\n&quot;, A);&#x2F;&#x2F;65    printf(&quot;A &#x3D; %c\n&quot;, &#39;a&#39; - 32); &#x2F;&#x2F;小写a转大写A    printf(&quot;a &#x3D; %c\n&quot;, &#39;A&#39; + 32); &#x2F;&#x2F;大写A转小写a    ch &#x3D; &#39; &#39;;    printf(&quot;空字符：%d\n&quot;, ch); &#x2F;&#x2F;空字符ASCII的值为32    printf(&quot;A &#x3D; %c\n&quot;, &#39;a&#39; - &#39; &#39;); &#x2F;&#x2F;小写a转大写A    printf(&quot;a &#x3D; %c\n&quot;, &#39;A&#39; + &#39; &#39;); &#x2F;&#x2F;大写A转小写a    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符变量输入"><a href="#字符变量输入" class="headerlink" title="字符变量输入"></a>字符变量输入</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char ch;    printf(&quot;请输入ch的值：&quot;);    &#x2F;&#x2F;不要加“\n”    scanf(&quot;%c&quot;, &amp;ch);    printf(&quot;ch &#x3D; %c\n&quot;, ch); &#x2F;&#x2F;打印ch的字符    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ASCII对照表"><a href="#ASCII对照表" class="headerlink" title="ASCII对照表"></a>ASCII对照表</h4><p><a href="https://www.w3school.com.cn/charsets/ref_html_ascii.asp">ASCII表</a></p><p>ASCII码大致由以下两部分组成</p><ol><li>ASCII非打印控制字符：ASCII表上的数字0-31分配给了控制字符，用于控制像打印机等一些外围设备</li><li>ASCII打印字符，数字32-126分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</li></ol><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值(十进制)</th></tr></thead><tbody><tr><td><strong>\a</strong></td><td>警报</td><td>007</td></tr><tr><td><strong>\b</strong></td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td><strong>\f</strong></td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td><strong>\r</strong></td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td><strong>\v</strong></td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜线字符”&quot;</td><td>092</td></tr><tr><td>\’</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>注意：加粗字体标注的为不可打印字符。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    printf(&quot;abc&quot;);    printf(&quot;\refg\n&quot;); &#x2F;&#x2F;\r切换到句首， \n为换行键    printf(&quot;abc&quot;);    printf(&quot;\befg\n&quot;);&#x2F;&#x2F;\b为退格键， \n为换行键    printf(&quot;%d\n&quot;, &#39;\123&#39;);&#x2F;&#x2F; &#39;\123&#39;为8进制转义字符，0123对应10进制数为 83    printf(&quot;%d\n&quot;, &#39;\x23&#39;);&#x2F;&#x2F; &#39;\x23&#39;为16进制转义字符，0x23对应10进制数为35    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实型-浮点型"><a href="#实型-浮点型" class="headerlink" title="实型(浮点型)"></a>实型(浮点型)</h3><p>实型变量也可以称为浮点型变量，浮点型变量是用来存储小数数值的。在C语言中， 浮点型变量分为两种： 单精度浮点数(float)、 双精度浮点数(double)， 但是double型变量所表示的浮点数比 float 型变量更精确。</p><p>由于浮点型变量是由有限的存储单元组成的，因此只能提供有限的有效数字。在有效位以外的数字将被舍去，这样可能会产生一些误差。</p><p>不以f结尾的常量是double类型，以f结尾的常量(如3.14f)是float类型。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    &#x2F;&#x2F;传统方式赋值    float a &#x3D; 3.14f; &#x2F;&#x2F;或3.14F    double b &#x3D; 3.14;    printf(&quot;a &#x3D; %f\n&quot;, a);    printf(&quot;b &#x3D; %lf\n&quot;, b);    &#x2F;&#x2F;科学法赋值    a &#x3D; 3.2e3f; &#x2F;&#x2F;3.2*1000 &#x3D; 3200，e可以写E    printf(&quot;a1 &#x3D; %f\n&quot;, a);    a &#x3D; 100e-3f; &#x2F;&#x2F;100*0.001 &#x3D; 0.1    printf(&quot;a2 &#x3D; %f\n&quot;, a);    a &#x3D; 3.1415926f;    printf(&quot;a3 &#x3D; %f\n&quot;, a); &#x2F;&#x2F;结果为3.141593    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p><p>当前的计算机系统使用的基本上是二进制系统，数据在计算机中主要是以补码的形式存储的。</p><p><strong>十进制转化二进制的方法</strong>：用十进制数除以2，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果。</p><p><strong>十进制的小数转换成二进制</strong>：小数部分和2相乘，取整数，不足1取0，每次相乘都是小数部分，顺序看取整后的数就是转化后的结果。</p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制。</p><p>八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中。</p><p><strong>十进制转化八进制的方法</strong>：<br>用十进制数除以8，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果。</p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9，A-F对应10-15。</p><p>十六进制的数和二进制数可以按位对应（十六进制一位对应二进制四位），因此常应用在计算机语言中。</p><p><strong>十进制转化十六进制的方法</strong>：<br>用十进制数除以16，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果。</p><p><a href="/other/jin-zhi-zhuan-huan/">进制转换</a></p><h4 id="C语言如何表示相应进制数"><a href="#C语言如何表示相应进制数" class="headerlink" title="C语言如何表示相应进制数"></a>C语言如何表示相应进制数</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>十进制</td><td>以正常数字1-9开头，如123</td></tr><tr><td>八进制</td><td>以数字0开头，如0123</td></tr><tr><td>十六进制</td><td>以0x开头，如0x123</td></tr><tr><td>二进制</td><td>C语言不能直接书写二进制数</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a &#x3D; 123;&#x2F;&#x2F;十进制方式赋值    int b &#x3D; 0123;&#x2F;&#x2F;八进制方式赋值， 以数字0开头    int c &#x3D; 0xABC;&#x2F;&#x2F;十六进制方式赋值    &#x2F;&#x2F;如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x    printf(&quot;十进制：%d\n&quot;,a );    printf(&quot;八进制：%o\n&quot;, b);&#x2F;&#x2F;%o,为字母o,不是数字    printf(&quot;十六进制：%x\n&quot;, c);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算机内存数值存储方式"><a href="#计算机内存数值存储方式" class="headerlink" title="计算机内存数值存储方式"></a>计算机内存数值存储方式</h3><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>一个数的原码(原始的二进制码)有如下特点：</p><ol><li>最高位做为符号位，0表示正,为1表示负</li><li>其它数值部分就是数值本身绝对值的二进制数</li><li>负数的原码是在其绝对值的基础上，最高位变为1</li></ol><p>下面数值以1字节的大小描述：</p><table><thead><tr><th>十进制数</th><th>原码</th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1000 1111</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td></tr></tbody></table><p>原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算。</p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><ol><li>对于正数，反码与原码相同</li><li>对于负数，符号位不变，其它部分取反(1变0,0变1)</li></ol><table><thead><tr><th>十进制数</th><th>反码</th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1111 0000</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1111 1111</td></tr></tbody></table><p>反码运算也不方便，通常用来作为求补码的中间过渡。</p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p><strong>在计算机系统中，数值一律用补码来存储。</strong></p><p>补码特点：</p><ol><li>对于正数，原码、反码、补码相同</li><li>对于负数，其补码为它的反码加1</li><li>补码符号位不动，其他位求反，最后整个数加1，得到原码</li></ol><table><thead><tr><th>十进制数</th><th>补码</th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1111 0001</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>0000 0000</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int  a &#x3D; -15;    printf(&quot;%x\n&quot;, a);    &#x2F;&#x2F;结果为 fffffff1    &#x2F;&#x2F;fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001    &#x2F;&#x2F;符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110    &#x2F;&#x2F;上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="补码的意义"><a href="#补码的意义" class="headerlink" title="补码的意义"></a>补码的意义</h4><p>示例1：用8位二进制数分别表示+0和-0</p><table><thead><tr><th>十进制数</th><th>原码</th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td></tr></tbody></table><table><thead><tr><th>十进制数</th><th>反码</th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1111 1111</td></tr></tbody></table><p>不管以原码方式存储，还是以反码方式存储，0也有两种表示形式。为什么同样一个0有两种不同的表示方法呢？</p><p>但是如果以补码方式存储，补码统一了零的编码：</p><table><thead><tr><th>十进制数</th><th>补码</th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>10000 0000 由于只用8位描述，最高位1丢弃，变为0000 0000</td></tr></tbody></table><p>示例2：计算9-6的结果<br>以原码方式相加：</p><table><thead><tr><th>十进制数</th><th>原码</th></tr></thead><tbody><tr><td>9</td><td>0000 1001</td></tr><tr><td>-6</td><td>1000 0110</td></tr></tbody></table><p><img src="/images/2024051713593303.png#pic_left" alt="2024051713593303"></p><p>结果-15,不正确</p><p> 以补码方式相加</p><table><thead><tr><th>十进制数</th><th>补码</th></tr></thead><tbody><tr><td>9</td><td>0000 1001</td></tr><tr><td>-6</td><td>1111 1010</td></tr></tbody></table><p><img src="/images/2024051713593304.png#pic_left" alt="2024051713593304"></p><p>最高位的1溢出,剩余8位二进制表示的是3，正确。</p><p><strong>在计算机系统中，数值一律用补码来存储</strong>，主要原因是：</p><ol><li>统一了零的编码</li><li>将符号位和其它位统一处理</li><li>将减法运算转变为加法运算</li><li>两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</li></ol><h4 id="数值溢出"><a href="#数值溢出" class="headerlink" title="数值溢出"></a>数值溢出</h4><p>当超过一个数据类型能够存放最大的范围时，数值会溢出。</p><p>有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失。</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128到127(-2ⁿ~2ⁿ-1 n&#x3D;7)</td></tr><tr><td>unsinged char</td><td>1字节</td><td>0到255(0~2ⁿ-1 n&#x3D;8)</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char ch;        &#x2F;&#x2F;符号位溢出会导致数的正负发生改变    ch &#x3D; 0x7f + 2; &#x2F;&#x2F;127+2    printf(&quot;%d\n&quot;, ch);    &#x2F;&#x2F;     0111 1111    &#x2F;&#x2F;+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127        &#x2F;&#x2F;最高位的溢出会导致最高位丢失    unsigned char ch2;    ch2 &#x3D; 0xff+1; &#x2F;&#x2F;255+1    printf(&quot;%u\n&quot;, ch2);    &#x2F;&#x2F;     1111 1111    &#x2F;&#x2F;+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0        ch2 &#x3D; 0xff + 2; &#x2F;&#x2F;255+1    printf(&quot;%u\n&quot;, ch2);    &#x2F;&#x2F;     1111 1111    &#x2F;&#x2F;+1后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型限定符"><a href="#类型限定符" class="headerlink" title="类型限定符"></a>类型限定符</h3><table><thead><tr><th>限定符</th><th>含义</th></tr></thead><tbody><tr><td>extern</td><td>声明一个变量，extern声明的变量没有建立存储空间。extern int a;&#x2F;&#x2F;变量在定义的时候创建存储空间</td></tr><tr><td>const</td><td>定义一个常量，常量的值不能修改。const int a &#x3D; 10;</td></tr><tr><td>Volatile</td><td>防止编译器优化代码</td></tr><tr><td>register</td><td>定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</td></tr></tbody></table><h3 id="字符串格式化输出和输入"><a href="#字符串格式化输出和输入" class="headerlink" title="字符串格式化输出和输入"></a>字符串格式化输出和输入</h3><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><ol><li>字符串是内存中一段连续的char空间，以’\0’(数字0)结尾。</li><li>字符串常量是由双引号括起来的字符序列，如“china”、“C program”，“$12.5”等都是合法的字符串常量。</li></ol><p><img src="/images/2024051713593302.png" alt="2024051713593302"><br>字符串常量和字符常量的不同:<br>每个字符串的结尾，编译器会自动的添加一个结束标志位’\0’，即 “a” 包含两个字符’a’和’\0’。</p><h4 id="printf和putchar函数"><a href="#printf和putchar函数" class="headerlink" title="printf和putchar函数"></a>printf和putchar函数</h4><p>printf是输出一个字符串，putchar输出一个char。</p><table><thead><tr><th>打印格式</th><th>对应数据类型</th><th>含义</th></tr></thead><tbody><tr><td>%d</td><td>int</td><td>接受整数值并将它表示为有符号的十进制整数</td></tr><tr><td>%hd</td><td>short int</td><td>短整数</td></tr><tr><td>%hu</td><td>unsigned short</td><td>无符号短整数</td></tr><tr><td>%o</td><td>unsigned int</td><td>无符号8进制整数</td></tr><tr><td>%u</td><td>unsigned int</td><td>无符号10进制整数</td></tr><tr><td>%x,%X</td><td>unsigned int</td><td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td></tr><tr><td>%f</td><td>float</td><td>单精度浮点数</td></tr><tr><td>%lf</td><td>double</td><td>双精度浮点数</td></tr><tr><td>%e,%E</td><td>double</td><td>科学计数法表示的数，此处”e”的大小写代表在输出时用的”e”的大小写</td></tr><tr><td>%c</td><td>char</td><td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td></tr><tr><td>%s</td><td>char *</td><td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td></tr><tr><td>%p</td><td>void *</td><td>以16进制形式输出指针</td></tr><tr><td>%%</td><td>%</td><td>输出一个百分号</td></tr></tbody></table><p>printf附加格式</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>字母l</td><td>附加在d,u,x,o前面，表示长整数</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>m(代表一个整数)</td><td>数据最小宽度</td></tr><tr><td>数字0</td><td>将输出的前面补上0直到占满指定列宽为止不可以搭配使用-</td></tr><tr><td>m,n(代表一个整数)</td><td>m指域宽，即对应的输出项在输出设备上所占的字符数。n指精度，用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n&#x3D;6位。</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    int a &#x3D; 100;    printf(&quot;a &#x3D; %d\n&quot;, a);&#x2F;&#x2F;格式化输出一个字符串    printf(&quot;%p\n&quot;, &amp;a);&#x2F;&#x2F;输出变量a在内存中的地址编号    printf(&quot;%%d\n&quot;);    char c &#x3D; &#39;a&#39;;    putchar(c);&#x2F;&#x2F;putchar只有一个参数，就是要输出的char    long a2 &#x3D; 100;    printf(&quot;%ld, %lx, %lo\n&quot;, a2, a2, a2);    long long a3 &#x3D; 1000;    printf(&quot;%lld, %llx, %llo\n&quot;, a3, a3, a3);    int abc &#x3D; 10;    printf(&quot;abc &#x3D; &#39;%6d&#39;\n&quot;, abc);    printf(&quot;abc &#x3D; &#39;%-6d&#39;\n&quot;, abc);    printf(&quot;abc &#x3D; &#39;%06d&#39;\n&quot;, abc);    printf(&quot;abc &#x3D; &#39;%-06d&#39;\n&quot;, abc);    double d &#x3D; 12.3;    printf(&quot;d &#x3D; \&#39; %-10.3lf \&#39;\n&quot;, d);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="scanf和getchar函数"><a href="#scanf和getchar函数" class="headerlink" title="scanf和getchar函数"></a>scanf和getchar函数</h4><ol><li>getchar是从标准输入设备读取一个char。</li><li>scanf通过%转义的方式可以得到用户通过标准输入设备输入的数据。</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char ch1;    char ch2;    char ch3;    int a;    int b;    printf(&quot;请输入ch1的字符：&quot;);    ch1 &#x3D; getchar();    printf(&quot;ch1 &#x3D; %c\n&quot;, ch1);    getchar(); &#x2F;&#x2F;测试此处getchar()的作用    printf(&quot;请输入ch2的字符：&quot;);    ch2 &#x3D; getchar();    printf(&quot;\&#39;ch2 &#x3D; %ctest\&#39;\n&quot;, ch2);    getchar(); &#x2F;&#x2F;测试此处getchar()的作用    printf(&quot;请输入ch3的字符：&quot;);    scanf(&quot;%c&quot;, &amp;ch3);&#x2F;&#x2F;这里第二个参数一定是变量的地址，而不是变量名    printf(&quot;ch3 &#x3D; %c\n&quot;, ch3);    printf(&quot;请输入a的值：&quot;);    scanf(&quot;%d&quot;, &amp;a);    printf(&quot;a &#x3D; %d\n&quot;, a);    printf(&quot;请输入b的值：&quot;);    scanf(&quot;%d&quot;, &amp;b);    printf(&quot;b &#x3D; %d\n&quot;, b);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git标签</title>
      <link href="/tools/git-biao-qian/"/>
      <url>/tools/git-biao-qian/</url>
      
        <content type="html"><![CDATA[<h3 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-l</span> 或者 <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> 版本 <span class="token parameter variable">-m</span> <span class="token string">'备注'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建轻量标签"><a href="#创建轻量标签" class="headerlink" title="创建轻量标签"></a>创建轻量标签</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag 版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="推送标签到服务器"><a href="#推送标签到服务器" class="headerlink" title="推送标签到服务器"></a>推送标签到服务器</h3><h4 id="推送所有"><a href="#推送所有" class="headerlink" title="推送所有"></a>推送所有</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推送指定版本"><a href="#推送指定版本" class="headerlink" title="推送指定版本"></a>推送指定版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin 版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推送多个指定版本"><a href="#推送多个指定版本" class="headerlink" title="推送多个指定版本"></a>推送多个指定版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin 版本1 版本2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><h4 id="删除指定版本"><a href="#删除指定版本" class="headerlink" title="删除指定版本"></a>删除指定版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只删除本地标签</span><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除后推送到服务器端"><a href="#删除后推送到服务器端" class="headerlink" title="删除后推送到服务器端"></a>删除后推送到服务器端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> :refs/tags/<span class="token operator">&lt;</span>tagname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="直接删除服务器端"><a href="#直接删除服务器端" class="headerlink" title="直接删除服务器端"></a>直接删除服务器端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML textarea内容换行</title>
      <link href="/html/html-textarea-nei-rong-huan-xing/"/>
      <url>/html/html-textarea-nei-rong-huan-xing/</url>
      
        <content type="html"><![CDATA[<p>HTML中textarea多行文本框中内容换行<br>直接写<strong>\r\n</strong>不可以，需要将其替换为对应的ASCII&amp;#13;&amp;#10;</p><p>参考<a href="https://tool.oschina.net/commons?type=4">ASCII</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装docker</title>
      <link href="/tools/linux-an-zhuang-docker/"/>
      <url>/tools/linux-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="之前安装过需要卸载docker"><a href="#之前安装过需要卸载docker" class="headerlink" title="之前安装过需要卸载docker"></a>之前安装过需要卸载docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非root用户需要加sudo</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span class="token comment"># 官方源不能访问可以添加国内源</span><span class="token comment">#阿里</span><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment">#清华</span><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 安装docker</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> docker-ce<span class="token comment"># 更新包索引</span>yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#非root用户需要再命令前加sudo</span><span class="token comment">#启动docker</span>systemctl start <span class="token function">docker</span><span class="token comment">#开机启动docker</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 重启docker服务</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span class="token comment">#查看docker版本</span><span class="token function">docker</span> <span class="token parameter variable">-v</span> <span class="token comment"># 查看docker安装的镜像</span><span class="token function">docker</span> images <span class="token comment"># 删除镜像</span><span class="token function">docker</span> rmi 镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置镜像加速"><a href="#设置镜像加速" class="headerlink" title="设置镜像加速"></a>设置镜像加速</h4><p><a href="/tools/linux-ti-huan-ruan-jian-yuan/">镜像加速</a>可参考之前的文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token comment"># 其他加速地址</span>https://jbw52uwf.mirror.aliyuncs.comhttps://2r0ei25n.mirror.aliyuncs.com<span class="token comment">#输入后再输入EOF回车</span><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'</span><span class="token punctuation">&#123;</span>    <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://82m9ar63.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 或者 个人部署DockerHub的代理</span><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'</span><span class="token punctuation">&#123;</span>    <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://docker.fxxk.dedyn.io"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署DockerHub代理设置<br><img src="/images/2024080810270306.png" alt="2024080810270305"></p><p>参考文档<a href="https://docs.docker.com/engine/install/centos/">docker</a><br><a href="https://docker-doc.readthedocs.io/">docker文档</a><br><a href="https://www.163.com/dy/article/J6BL6CDR05314EKW.html">部署的代理</a><br><a href="https://github.com/DaoCloud/public-image-mirror">加速</a><br><a href="https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.57e31b116Xa3r1">阿里配置docker-ce源</a><br><a href="https://blog.csdn.net/weixin_40308963/article/details/104713604">docker常用操作</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery修改css样式</title>
      <link href="/html-css/jquery-xiu-gai-css-yang-shi/"/>
      <url>/html-css/jquery-xiu-gai-css-yang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="修改标签属性"><a href="#修改标签属性" class="headerlink" title="修改标签属性"></a>修改标签属性</h3><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">$(&#39;选择器&#39;).attr(&#39;style&#39;,&#39;属性：属性值&#39;)$(&#39;#div&#39;).attr(&#39;style&#39;,&#39;color:read;font-size:12px&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：此方式不管修改还是增加都会覆盖之前的样式</p><h3 id="修改标签className"><a href="#修改标签className" class="headerlink" title="修改标签className"></a>修改标签className</h3><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&#x2F;*添加CSS类*&#x2F;$(&#39;选择器&#39;).addClass(&#39;类名&#39;)&#x2F;*删除CSS类*&#x2F;$(&#39;选择器&#39;).removeClass(&#39;类名&#39;)&#x2F;*添加或删除CSS类，如果CSS类存在则删除，不存在则增加*&#x2F;$(&#39;选择器&#39;).toggleClass(&#39;类名&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改CSS样式"><a href="#修改CSS样式" class="headerlink" title="修改CSS样式"></a>修改CSS样式</h3><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&#x2F;*修改一个样式属性*&#x2F;$(&#39;选择器&#39;).css(&#39;属性&#39;:&#39;属性值&#39;);$(&#39;#div&#39;).css(&#39;color&#39;:&#39;red&#39;);&#x2F;*修改一个或多个样式属性，[]表示可省略*&#x2F;$(&#39;选择器&#39;).css(&#39;属性&#39;:&#39;属性值&#39;,[&#39;属性&#39;:&#39;属性值&#39;]);$(&#39;#div&#39;).css(&#123;&#39;color&#39;:&#39;red&#39;,&#39;font-size&#39;:&#39;12px&#39;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改样式表内容"><a href="#修改样式表内容" class="headerlink" title="修改样式表内容"></a>修改样式表内容</h3><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">$(&#39;选择器&#39;).css(&#39;cssText&#39;,&#39;属性:属性值&#39;);$(&#39;#div&#39;).css(&#39;cssText&#39;,&#39;color:red&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以修改样式表中的样式，有时通过直接修改css样式时无法在其属性值后面添加“</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alist美化</title>
      <link href="/other/alist-mei-hua/"/>
      <url>/other/alist-mei-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="Alist美化"><a href="#Alist美化" class="headerlink" title="Alist美化"></a>Alist美化</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;zh-CN&quot; translate&#x3D;&quot;no&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;    &lt;!--引入字体，全局字体使用--&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;npm.elemecdn.com&#x2F;lxgw-wenkai-webfont@1.1.0&#x2F;lxgwwenkai-regular.css&quot; &#x2F;&gt;    &lt;!-- Alist原标签logo --&gt;    &lt;link rel&#x3D;&quot;apple-touch-icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;jsd.nn.ci&#x2F;gh&#x2F;alist-org&#x2F;logo@main&#x2F;logo.png&quot;&gt;    &lt;!-- 小雅标签logo --&gt;    &lt;link rel&#x3D;&quot;shortcut icon&quot; type&#x3D;&quot;image&#x2F;ico&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.wallpaperswide.com&#x2F;templates&#x2F;custom&#x2F;ds&#x2F;ds.1.png&quot;&gt;    &lt;!-- Alist原标签写法：&#x2F;assets&#x2F;logo.svg --&gt;    &lt;style&gt;        &#x2F;* 全局字体 *&#x2F;        *&#123;font-family:LXGW WenKai&#125;        *&#123;font-weight:bold&#125;        body &#123;font-family: LXGW WenKai;&#125;                &#x2F;* 去除通知栏 右上角 X *&#x2F;        .notify-render .hope-close-button&#123;            display: none;        &#125;        &#x2F;* 去掉右上角搜索框 *&#x2F;        .hope-c-PJLV-ikEIIxw-css &#123;                display: none !important;        &#125;        &#x2F;* 白天背景图 *&#x2F;        .hope-ui-light&#123;        #background-image: url(&quot;http:&#x2F;&#x2F;pic.rmb.bdstatic.com&#x2F;bjh&#x2F;7569b014a1abafd5481298763300ae1d.png&quot;) !important;        background-image: url(&quot;https:&#x2F;&#x2F;file.51pptmoban.com&#x2F;d&#x2F;file&#x2F;2014&#x2F;05&#x2F;13&#x2F;d12562dabc94ff6130521134133b5d3d.jpg&quot;) !important;        #background-image: url(&quot;https:&#x2F;&#x2F;file.51pptmoban.com&#x2F;d&#x2F;file&#x2F;2016&#x2F;03&#x2F;06&#x2F;7e7669863ef47688dea007943a121091.jpg&quot;) !important;        #background-image: url(&quot;https:&#x2F;&#x2F;file.51pptmoban.com&#x2F;d&#x2F;file&#x2F;2014&#x2F;05&#x2F;11&#x2F;1547fb25e896da6fd1b8792e1435b0cc.jpg&quot;) !important;        #background-image: url(&quot;https:&#x2F;&#x2F;img.ixintu.com&#x2F;download&#x2F;jpg&#x2F;201909&#x2F;cc9d3c127de1d004a45188a2896c725e.jpg!con&quot;) !important;        background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center;        #background-color: rgb(230,230,250,0.6)!important;        backdrop-filter: blur(10px)!important;        #background-color: rgb(176,196,222,0.5)!important;        &#125;        &#x2F;* 夜间背景图 *&#x2F;        .hope-ui-dark &#123;            background-image: url(&quot;http:&#x2F;&#x2F;pic.rmb.bdstatic.com&#x2F;bjh&#x2F;ebe942a9de49856f389c65f25a338335.png&quot;) !important;            &#x2F;* backdrop-filter: blur(10px)!important; *&#x2F;            background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center;        &#125;        &#x2F;*渐变背景CSS*&#x2F;        #canvas-basic &#123;            position: fixed;            display: block;            width: 100%;            height: 100%;            top: 0;            right: 0;            bottom: 0;            left: 0;            z-index: -999;        &#125;        &#x2F;* 主列表透明,0.2控制透明度 *&#x2F;        .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css &#123;        background-color: rgba(135,206,250,0.2) !important;        backdrop-filter: blur(10px)!important;        &#125;        &#x2F;* 主列表夜间模式透明，70%控制透明度 *&#x2F;        .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css&#123;        background-color:rgb(0 0 0 &#x2F; 70%) !important;        &#125;        &#x2F;* readme透明 *&#x2F;        .hope-c-PJLV.hope-c-PJLV-ikSuVsl-css&#123;        background-color: rgba(70,130,180, 0.4) !important;        #backdrop-filter: blur(10px)!important;        &#125;        &#x2F;* 顶部右上角切换按钮透明 *&#x2F;        .hope-c-ivMHWx-hZistB-cv.hope-icon-button&#123;        background-color: rgba(255, 255, 255, 0.3) !important;        &#125;        &#x2F;* 右下角侧边栏按钮透明 *&#x2F;        .hope-c-PJLV-ijgzmFG-css&#123;        background-color: rgba(255, 255, 255, 0.5) !important;        &#125;        &#x2F;* 白天模式代码块透明 *&#x2F;        .hope-ui-light pre&#123;            background-color: rgba(255, 255, 255, 0.1) !important;        &#125;        &#x2F;* 夜间模式代码块透明 *&#x2F;        .hope-ui-dark pre &#123;            background-color: rgba(255, 255, 255, 0) !important;        &#125;        &#x2F;* Mardown区域透明 *&#x2F;        .markdown-body &#123;        background-color: rgba(255, 255, 255, 0) !important;        &#125;        &#x2F;* 去掉底部Powered by Alist *&#x2F;        .footer span,.footer a:nth-of-type(1)&#123;        display:none;        &#125;&#x2F;*主页背景样式*&#x2F;.hope-c-PJLV-idaeksS-css&#123;background:rgb(0 0 0 &#x2F; 0.0001);&#125;&#x2F;*顶部背景样式*&#x2F;.hope-c-PJLV-ikaMhsQ-css&#123;background:rgb(0 0 0 &#x2F; 0.0001);&#125;    &lt;&#x2F;style&gt;    &lt;style&gt;        &#x2F;* 去掉底部管理 *&#x2F;        .footer span,.footer a:nth-of-type(2)&#123;        display:none;        &#125;        &#x2F;* 去掉底部 *&#x2F;        .footer &#123;        display: none !important;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;!--如果要写自定义内容建议都加到这个延迟加载的范围内--&gt;    &lt;div id&#x3D;&quot;customize&quot; style&#x3D;&quot;display: none;&quot;&gt;&lt;!-- 播放器 --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;myhkw.cn&#x2F;player&#x2F;js&#x2F;jquery.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;myhkw.cn&#x2F;api&#x2F;player&#x2F;165761088297&quot; id&#x3D;&quot;myhk&quot; key&#x3D;&quot;165761088297&quot; m&#x3D;&quot;1&quot;&gt;&lt;&#x2F;script&gt;&lt;!--底部备案信息--&gt;&lt;span style&#x3D;&quot;margin:0 auto;display: flex;justify-content: center; align-items:center;&quot;&gt;&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;http:&#x2F;&#x2F;ww.beian.gov.cn&#x2F;portal&#x2F;registerSystemInfo?recordcode&#x3D;xxxxxxxxx&#39; style&#x3D;&quot;display:inline-block;text-decoration:none;height:20px;line-height:20px;&quot; &gt;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;www.beian.gov.cn&#x2F;img&#x2F;ghs.png&quot; style&#x3D;&quot;float:left;&quot;&gt;&lt;p style&#x3D;&quot;float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px; &quot;&gt;备案号：1232432&lt;&#x2F;a&gt;&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;&#x2F;@manage&quot; style&#x3D;&quot;display:inline-block;text-decoration:none;height:20px;line-height:20px;&quot;&gt;&lt;p style&#x3D;&quot;float:left;height:20px;line-height:20px;margin: 10px 0px 0px 5px; &quot; &gt;管理&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;    &lt;!--延迟加载范围到这里结束--&gt;    &lt;&#x2F;div&gt;    &lt;!--延迟加载配套使用JS--&gt;    &lt;script&gt;        let interval &#x3D; setInterval(() &#x3D;&gt; &#123;            if (document.querySelector(&quot;.footer&quot;)) &#123;                document.querySelector(&quot;#customize&quot;).style.display &#x3D; &quot;&quot;;                clearInterval(interval);            &#125;        &#125;, 200);    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接复制到自定义内容中就可以了。</p><h3 id="Alist图标和网盘搜集"><a href="#Alist图标和网盘搜集" class="headerlink" title="Alist图标和网盘搜集"></a>Alist图标和网盘搜集</h3><h4 id="图标设计网站"><a href="#图标设计网站" class="headerlink" title="图标设计网站"></a>图标设计网站</h4><p><a href="https://zhuanlan.zhihu.com/p/676573090">知乎</a><br><a href="https://www.uugai.com/">uugai</a></p><h4 id="Alist分享盘"><a href="#Alist分享盘" class="headerlink" title="Alist分享盘"></a>Alist分享盘</h4><p><a href="https://alist.xiaoya.pro/">小雅</a><br><a href="https://alist.pengs.top/">pengs</a><br><a href="https://pan.iffyoo.cn/">iffyoo</a><br><a href="http://alist.nomono.top/">nomono</a><br><a href="https://learning.chiang.icu/">chiang</a><br><a href="https://drive.xenosp.cn/">xenosp</a><br><a href="https://video.lu0625.top/">video</a></p><h4 id="软件分享网站"><a href="#软件分享网站" class="headerlink" title="软件分享网站"></a>软件分享网站</h4><p><a href="https://mpyit.com/catvod.html">殁漂遥</a><br><a href="https://www.nianxinxz.com/">念心小站</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github访问不了</title>
      <link href="/other/github-fang-wen-bu-liao/"/>
      <url>/other/github-fang-wen-bu-liao/</url>
      
        <content type="html"><![CDATA[<h3 id="修改windows的host文件"><a href="#修改windows的host文件" class="headerlink" title="修改windows的host文件"></a>修改windows的host文件</h3><ol><li>在<a href="https://tool.chinaz.com/dns/">站长工具</a>中找出合适的dns地址</li><li>在windows中修改host文件<br><img src="/images/2024040110351002.png" alt="2024040110351002"></li></ol><h3 id="github520"><a href="#github520" class="headerlink" title="github520"></a>github520</h3><p><a href="https://github.com/521xueweihan/GitHub520">github520</a>中会每天更新host文件，可以下载后更新本地的host<br><img src="/images/2024040110351003.png" alt="2024040110351003"></p><p>参考 <a href="https://zhuanlan.zhihu.com/p/667649956">访问Github工具</a></p><h3 id="git修改密码更新凭证"><a href="#git修改密码更新凭证" class="headerlink" title="git修改密码更新凭证"></a>git修改密码更新凭证</h3><p>git账户修改密码后TortoiseGit需要Windows控制面板中修改凭证</p><p><img src="/images/2024060409311509.png" alt="2024060409311509"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用技巧总结</title>
      <link href="/tools/excel-shi-yong-ji-qiao-zong-jie/"/>
      <url>/tools/excel-shi-yong-ji-qiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="Excel多行折叠"><a href="#Excel多行折叠" class="headerlink" title="Excel多行折叠"></a>Excel多行折叠</h4><p>折叠：选中折叠的行或者列同时按下shift+alt+方向键→<br>取消折叠：选中需要取消折叠的行或者列同时按下shift+alt+方向键←</p><h4 id="Excel拼接字符串"><a href="#Excel拼接字符串" class="headerlink" title="Excel拼接字符串"></a>Excel拼接字符串</h4><p>连接字符串使用&amp;</p><h4 id="固定值"><a href="#固定值" class="headerlink" title="固定值"></a>固定值</h4><p>拼接字符串需要固定值，例如(A1的值&#x3D;C1的值)中间的等号一直保持不变，将等号放在B1中，拼接字符的时候再其他单元格输入&#x3D;A1&amp;$B$1&amp;C1,$B$1就是B1然后按F4键<br><img src="/images/2024040109391201.gif" alt="2024040109391201"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alist配置aria2下载</title>
      <link href="/other/alist-pei-zhi-aria2-xia-zai/"/>
      <url>/other/alist-pei-zhi-aria2-xia-zai/</url>
      
        <content type="html"><![CDATA[<h3 id="下载aria2"><a href="#下载aria2" class="headerlink" title="下载aria2"></a>下载aria2</h3><p><a href="https://github.com/aria2/aria2/releases">aria2</a></p><h3 id="下载AriaNg"><a href="#下载AriaNg" class="headerlink" title="下载AriaNg"></a>下载AriaNg</h3><p><a href="https://github.com/mayswind/AriaNg/releases">AriaNg</a></p><p><a href="https://github.com/mayswind/AriaNg-Native/releases">AriaNg-Native</a></p><h3 id="aria2设置"><a href="#aria2设置" class="headerlink" title="aria2设置"></a>aria2设置</h3><p>新建aria2.conf、aria2.log、aria2.session文件</p><p>启动脚本</p><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">Set ws &#x3D; Wscript.CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;D:\alist\aria2\aria2c.exe --conf-path&#x3D;aria2.conf&quot;,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置好配置文件就可以直接运行vbs脚本</p><h3 id="aria2配置文件"><a href="#aria2配置文件" class="headerlink" title="aria2配置文件"></a>aria2配置文件</h3><pre class="line-numbers language-CONF" data-language="CONF"><code class="language-CONF">## &#39;#&#39;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 #### 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  #### 文件保存相关 ### 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir&#x3D;D:\alist\aria2\Downloadlog&#x3D;D:\alist\aria2\aria2.log# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M#disk-cache&#x3D;32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3&#x2F;4建议trunc, MAC 下需要注释此项#file-allocation&#x3D;none# 断点续传continue&#x3D;true## 下载连接相关 ### 最大同时下载任务数, 运行时可修改, 默认:5#max-concurrent-downloads&#x3D;5# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server&#x3D;5# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size&#x3D;10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size&#x3D;10M# 单个任务最大线程数, 添加时可指定, 默认:5#split&#x3D;5# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit&#x3D;0# 单个任务下载速度限制, 默认:0#max-download-limit&#x3D;0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit&#x3D;0# 单个任务上传速度限制, 默认:0#max-upload-limit&#x3D;0# 禁用IPv6, 默认:false#disable-ipv6&#x3D;true# 连接超时时间, 默认:60#timeout&#x3D;60# 最大重试次数, 设置为0表示不限制重试次数, 默认:5#max-tries&#x3D;5# 设置重试等待的秒数, 默认:0#retry-wait&#x3D;0## 进度保存相关 ### 从会话文件中读取下载任务input-file&#x3D;D:\alist\aria2\aria2.session# 在Aria2退出时保存&#96;错误&#x2F;未完成&#96;的下载任务到会话文件save-session&#x3D;D:\alist\aria2\aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0#save-session-interval&#x3D;60## RPC相关设置 ### 启用RPC, 默认:falseenable-rpc&#x3D;true# 允许所有来源, 默认:falserpc-allow-origin-all&#x3D;true# 允许非外部访问, 默认:falserpc-listen-all&#x3D;true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll&#x3D;select# RPC监听端口, 端口被占用时可以修改, 默认:6800#rpc-listen-port&#x3D;6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret&#x3D;&lt;TOKEN&gt;# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user&#x3D;&lt;USER&gt;# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd&#x3D;&lt;PASSWD&gt;# 是否启用 RPC 服务的 SSL&#x2F;TLS 加密,# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接#rpc-secure&#x3D;true# 在 RPC 服务中启用 SSL&#x2F;TLS 加密时的证书文件,# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥#rpc-certificate&#x3D;&#x2F;path&#x2F;to&#x2F;certificate.pem# 在 RPC 服务中启用 SSL&#x2F;TLS 加密时的私钥文件#rpc-private-key&#x3D;&#x2F;path&#x2F;to&#x2F;certificate.key## BT&#x2F;PT下载相关 ### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent&#x3D;true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port&#x3D;51413# 单个种子最大连接数, 默认:55#bt-max-peers&#x3D;55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht&#x3D;false# 打开IPv6 DHT功能, PT需要禁用#enable-dht6&#x3D;false# DHT网络监听端口, 默认:6881-6999#dht-listen-port&#x3D;6881-6999# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd&#x3D;false# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange&#x3D;false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit&#x3D;50K# 客户端伪装, PT需要peer-id-prefix&#x3D;-TR2770-user-agent&#x3D;Transmission&#x2F;2.77peer-agent&#x3D;Transmission&#x2F;2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio&#x3D;0# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save&#x3D;false# BT校验相关, 默认:true#bt-hash-check-seed&#x3D;true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified&#x3D;true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alist挂载网盘</title>
      <link href="/other/alist-gua-zai-wang-pan/"/>
      <url>/other/alist-gua-zai-wang-pan/</url>
      
        <content type="html"><![CDATA[<h3 id="Alist挂载本地存储"><a href="#Alist挂载本地存储" class="headerlink" title="Alist挂载本地存储"></a>Alist挂载本地存储</h3><p><a href="https://alist.nn.ci/zh/guide/drivers/local.html">本地挂载</a></p><p><img src="/images/2024030810111206.png" alt="2024030810111206"></p><h3 id="Alist挂载阿里分享内容"><a href="#Alist挂载阿里分享内容" class="headerlink" title="Alist挂载阿里分享内容"></a>Alist挂载阿里分享内容</h3><p><a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">获取阿里云盘token地址</a></p><p><img src="/images/2024030810111207.png" alt="2024030810111207"></p><p>阿里云盘的分享者id是s后面的一串字符<br>文件夹id是folder后面的一串字符</p><h3 id="本地播放器通过webdav播放"><a href="#本地播放器通过webdav播放" class="headerlink" title="本地播放器通过webdav播放"></a>本地播放器通过webdav播放</h3><p><img src="/images/2024031409431201.png" alt="2024031409431201"></p><h3 id="alist搜索和挂载"><a href="#alist搜索和挂载" class="headerlink" title="alist搜索和挂载"></a>alist搜索和挂载</h3><p>在<a href="https://www.zoomeye.org/">www.zoomeye.org</a>上可以搜索别人分享的挂载,将地址填在链接中</p><p><img src="/images/2024032715311201.png" alt="2024032715311201"><br><img src="/images/2024032715311202.png" alt="2024032715311202"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alist使用</title>
      <link href="/other/alist-shi-yong/"/>
      <url>/other/alist-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="alist官网"><a href="#alist官网" class="headerlink" title="alist官网"></a>alist官网</h3><p><a href="https://alist.nn.ci/zh/">alist</a></p><h3 id="alist下载地址"><a href="#alist下载地址" class="headerlink" title="alist下载地址"></a>alist下载地址</h3><p><a href="https://github.com/alist-org/alist/releases">github</a></p><p>根据系统下载对应的版本</p><h3 id="运行alist"><a href="#运行alist" class="headerlink" title="运行alist"></a>运行alist</h3><h4 id="在dos窗口运行alist-exe"><a href="#在dos窗口运行alist-exe" class="headerlink" title="在dos窗口运行alist.exe"></a>在dos窗口运行alist.exe</h4><h5 id="alist命令"><a href="#alist命令" class="headerlink" title="alist命令"></a>alist命令</h5><p><img src="/images/2024030810111201.png" alt="2024030810111201.png"></p><ol><li>alist.exe server<br>第一次运行会显示admin的初始密码<br><img src="/images/2024030810111202.png" alt="2024030810111202.png"></li><li>alist.exe admin<br>获取和保存admin的密码</li><li>使用脚本无窗口开机启动<br>在alist.exe所在的目录新建一个vbs文件输入</li></ol><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">Set ws &#x3D; CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;cmd &#x2F;c .\alist.exe server&quot;,vbhide<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建快捷方式，在上面的vbs上右键，发送快捷方式到桌面<br>在运行中输入<strong>shell:startup</strong> 将上面的vbs文件快捷方式拖入到windows启动文件夹<br><img src="/images/2024030810111203.gif" alt="2024030810111203"></p><h4 id="登录alist"><a href="#登录alist" class="headerlink" title="登录alist"></a>登录alist</h4><p>在浏览器中输入localhost:5244<br><img src="/images/2024030810111204.png" alt="2024030810111204"><br>点击管理可以修改amdin的密码<br><img src="/images/2024030810111205.png" alt="2024030810111205"></p><h4 id="启动和停止脚本"><a href="#启动和停止脚本" class="headerlink" title="启动和停止脚本"></a>启动和停止脚本</h4><p>启动</p><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">Dim wsSet ws &#x3D; Wscript.CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;alist.exe server&quot;,vbhideWscript.quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>停止</p><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">Dim wsSet ws &#x3D; Wscript.CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;taskkill &#x2F;f &#x2F;im alist.exe&quot;,0Wscript.quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java解析xml文件</title>
      <link href="/java/java-jie-xi-xml-wen-jian/"/>
      <url>/java/java-jie-xi-xml-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="引入dom4j"><a href="#引入dom4j" class="headerlink" title="引入dom4j"></a>引入dom4j</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/dom4j/dom4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析xml文件"><a href="#解析xml文件" class="headerlink" title="解析xml文件"></a>解析xml文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1801001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>王尼玛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Age</span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gender</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Gender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1801002<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>赵铁柱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Age</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gender</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Gender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1801003<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>李小花<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gender</span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Gender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void parseXmlFile(String filePath) throws DocumentException, SAXException &#123;    SAXReader reader &#x3D; new SAXReader();    reader.setFeature(&quot;http:&#x2F;&#x2F;apache.org&#x2F;xml&#x2F;features&#x2F;disallow-doctype-decl&quot;, true);     File file &#x3D; new File(filePath);    Document dc &#x3D; reader.read(file);    &#x2F;&#x2F;获取xml个元素    Element element &#x3D; dc.getRootElement();    @SuppressWarnings(&quot;unchecked&quot;)    List&lt;Element&gt; students &#x3D; element.elements();    System.out.println(&quot;元素个数：&quot;+students.size());    for (Element e : students) &#123;        System.out.printlin(e.elementText(&quot;Name&quot;));        System.out.printlin(e.elementText(&quot;Age&quot;));        System.out.printlin(e.elementText(&quot;Gender&quot;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt项目报错0308010C</title>
      <link href="/web/nuxt-xiang-mu-bao-cuo-0308010c/"/>
      <url>/web/nuxt-xiang-mu-bao-cuo-0308010c/</url>
      
        <content type="html"><![CDATA[<p>升级Node.js到V18版本后运行项目报错，修改package.json文件<br><img src="/images/2024012910490501.png" alt="2024012910490501.png"></p><p>在dev中增加,如果不行，可以在build中也增加</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改前</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"nuxt"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"nuxt build"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nuxt start"</span><span class="token punctuation">,</span>    <span class="token property">"generate"</span><span class="token operator">:</span> <span class="token string">"nuxt generate"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ext .js,.vue --ignore-path .gitignore ."</span><span class="token punctuation">,</span>    <span class="token property">"precommit"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; nuxt"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"nuxt build"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nuxt start"</span><span class="token punctuation">,</span>    <span class="token property">"generate"</span><span class="token operator">:</span> <span class="token string">"nuxt generate"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ext .js,.vue --ignore-path .gitignore ."</span><span class="token punctuation">,</span>    <span class="token property">"precommit"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS-通知</title>
      <link href="/phone/harmonyos-tong-zhi/"/>
      <url>/phone/harmonyos-tong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><h3 id="基础通知"><a href="#基础通知" class="headerlink" title="基础通知"></a>基础通知</h3><p>应用可以通过通知接口发送通知消息，提醒用户关注应用中的变化。用户可以在通知栏查看和操作通知内容。</p><ul><li>导入notification模块</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import notificationManager from &#39;@ohos.notificationManager&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>发布通知</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;构建通知请求let request:notificationManager.NotificationRequest&#x3D;&#123;    id:1,    content:&#123;&#x2F;&#x2F;通知内容&#125;&#125;&#x2F;&#x2F;1、NOTIFICATION_CONTENT_BASIC_TEXT通知内容content:&#123;    contentType:notificationManager.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,    normal:&#123;        title:&#39;通知标题&#39;,        text:&#39;通知内容详情&#39;,        additionalText:&#39;通知附加内容&#39;    &#125;&#125;&#x2F;&#x2F;2、NOTIFICATION_CONTENT_BASIC_TEXT通知内容content:&#123;    contentType:notificationManager.ContentType.NOTIFICATION_CONTENT_LONG_TEXT,    longText:&#123;        title:&#39;通知标题&#39;,        text:&#39;通知内容详情&#39;,        additionalText:&#39;通知附加内容&#39;,        longText:&#39;通知中的长文本&#39;,        briefText:&#39;通知概要和总结&#39;,        expandedTitle:&#39;通知展开时的标题&#39;    &#125;&#125;&#x2F;&#x2F;3、NOTIFICATION_CONTENT_MULTILINE通知内容content:&#123;    contentType:notificationManager.ContentType.NOTIFICATION_CONTENT_MULTILINE,    multiline:&#123;        title:&#39;通知标题&#39;,        text:&#39;通知内容详情&#39;,        additionalText:&#39;通知附加内容&#39;,        briefText:&#39;通知概要和总结&#39;,        longTitle:&#39;展开时的标题，有多行&#39;,        lines:[            &#39;第一行&#39;,            &#39;第二行&#39;,            &#39;第三行&#39;        ]    &#125;&#125;&#x2F;&#x2F;4、NOTIFICATION_CONTENT_PICTURE通知内容content:&#123;    contentType:notificationManager.ContentType.NOTIFICATION_CONTENT_PICTURE,    picture:&#123;        title:&#39;通知标题&#39;,        text:&#39;通知内容详情&#39;,        additionalText:&#39;通知附加内容&#39;,        briefText:&#39;通知概要和总结&#39;,        expandedTitle:&#39;展开后的标题&#39;,        picture:this.pixel    &#125;&#125;&#x2F;&#x2F;发布通知notificationManager.publish(request).then(()&#x3D;&gt;&#123;console.log(&#39;发送成功&#39;)&#125;).catch(rea&#x3D;&gt;&#123;    console.log(&#39;发送失败，失败原因：&#39;,JSON.stringify(rea))&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取消通知</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;取消指定id的通知notificationManager.cancel(1)&#x2F;&#x2F;取消当前应用所有通知notificationManager.cancelAll()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进度条通知"><a href="#进度条通知" class="headerlink" title="进度条通知"></a>进度条通知</h3><p>进度条通知会展示一个动态的进度条，主要用于文件下载、场任务处理的进度显示。</p><ul><li>判断当前系统是否支持进度条模板</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">this.isSupport &#x3D; await notificationManager.isSupportTemplate(&#39;downloadTemplate&#39;)if(!this.isSupport)&#123;    return&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义通知请求</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;通知模板let noTemplate &#x3D;&#123;    name:&#39;downloadTemplate&#39;, &#x2F;&#x2F;模板名称，必须是downloadTemplate    data:&#123;        progressValue:this.progressValue, &#x2F;&#x2F;进度条当前进度        progressMaxValue:100 &#x2F;&#x2F;进度条最大值    &#125;&#125;&#x2F;&#x2F;通知请求let request: notificationManager.NotificationRequest&#x3D;&#123;    id:100,    template:noTemplate,    content:&#123;        contentType:notificationManager.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,        normal:&#123;        title:this.filename+&#39;: &#39;+this.state,        text:&#39;&#39;,        additionalText:&#96;$&#123;this.progressValue&#125;%&#96;    &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通知意图"><a href="#通知意图" class="headerlink" title="通知意图"></a>通知意图</h3><p>我们可以给通知或者其中的按钮设置行为意图(Want),从而实现拉起应用组件或者发布公共事件等能力。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;定义意图行为信息let wantInfo&#x3D;&#123;    wants:[&#123;         deviceId:&#39;&#39;, &#x2F;&#x2F;为空指当前设备         bundleName:&#39;com.zj.demo&#39;, &#x2F;&#x2F;在appScope中的app.json5中         abilityName:&#39;EntryAbility&#39;,         action:&#39;&#39;,         entities:[]    &#125;],    operationType:wantAgent.OperationType.START_ABILITY,    requestCode:0,    wantAgentFlags:[wantAgent.WantAgentFlag.CONSTANT_FLAG]&#125;&#x2F;&#x2F;创建wangAgent实例this.wantAgentInstance &#x3D; await wantAgent.getWantAgent(wantInfo)&#x2F;&#x2F;通知请求let request:notificationManager.NotificationRequest&#x3D;&#123;    id:110,    template:template,    wantAgent:this.wantAgentInstance, &#x2F;&#x2F;设置通知意图    content:&#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS数据持久化</title>
      <link href="/phone/harmonyos-shu-ju-chi-jiu-hua/"/>
      <url>/phone/harmonyos-shu-ju-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="用户首选项"><a href="#用户首选项" class="headerlink" title="用户首选项"></a>用户首选项</h3><p>用户首选项(Preference)为应用提供key-value键值型的数据处理能力，支持应用持久化轻量级数据。</p><ol><li>导入首选项模块</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import dataPreference from &#39;@ohos.data.preferences&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>获取首选项实例，读取指定文件</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">dataPreference.getPreferences(this.context,&#39;Preference实例名称&#39;).then(preference&#x3D;&gt;&#123;    &#x2F;&#x2F;成功&#125;).catch(reason&#x3D;&gt;&#123;    &#x2F;&#x2F;失败&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>数据操作</li></ol><ul><li>key为string类型，要求非空且长度不超过80字节</li><li>value可以是stirng、number、boolean级以上类型的数组，大小不超过8192字节</li><li>数据量建议不超过一万条</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;写入数据，如果已经存在则会覆盖，可利用has()判断是否存在preference.put(&#39;key&#39;,val).then(()&#x3D;&gt;&#123;preference.flush()&#125;) &#x2F;&#x2F;刷到磁盘.catch(reason&#x3D;&gt;&#123;&#125;) &#x2F;&#x2F;异常&#x2F;&#x2F;删除preference.delete(&#39;key&#39;).then(()&#x3D;&gt;&#123;&#125;) .catch(reason&#x3D;&gt;&#123;&#125;) &#x2F;&#x2F;异常&#x2F;&#x2F;查询preference.get(&#39;key&#39;,&#39;defaultValue&#39;).then(value&#x3D;&gt;&#123;&#125;) .catch(reason&#x3D;&gt;&#123;&#125;) &#x2F;&#x2F;异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>关系型数据库(RDB)是基于SQLite组件提供的本地数据库，用于管理应用中的结构化数据库，例如：记账本、备忘录。</p><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><ul><li>导入关系型数据库模块</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import relationalStore from &#39;@ohos.data.relationalStore&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>初始化数据库表</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;1.rdb配置const config &#x3D;&#123;    name:&#39;application.db&#39;, &#x2F;&#x2F;数据库文件名    securityLevel: relationalStore.SecurityLevel.S1 &#x2F;&#x2F;数据库安全级别&#125;&#x2F;&#x2F;2.初始化表SQLconst sql&#x3D; &#96;CREATE TABLE IF NOT EXISTS TASK(    ID INTEGER PRIMARY KEY,    NAME TEXT NOT NULL,    AGE INTEGER)&#96;&#x2F;&#x2F;3.获取rdbrelationalStore.getRdbStore(this.context,config,(err,rdbStore)&#x3D;&gt;&#123;    &#x2F;&#x2F;4.执行sql，获取的所有增删改查都是使用rdbStore对象    rdbStore.executeSql(sql)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><ul><li>新增数据</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;准备数据let person &#x3D;&#123;&#39;id&#39;:1,&#39;name&#39;:&#39;zhangsan&#39;,&#39;age&#39;:20&#125;&#x2F;&#x2F;插入数据this.rdbStore.insert(&#39;tableName&#39;,person)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除数据</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;查询条件let predicates &#x3D; new relationalStore.RebPredicates(&#39;tableName&#39;)predicates.equalTo(&#39;id&#39;,id)&#x2F;&#x2F;执行删除this.rdbStore.delete(predicates)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改数据</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;更新数据let person &#x3D;&#123;&#39;age&#39;:25&#125;&#x2F;&#x2F;查询条件，RdbPredicates就是条件的谓词let predicates &#x3D; new relationalStore.RebPredicates(&#39;tableName&#39;)predicates.equalTo(&#39;id&#39;,id)&#x2F;&#x2F;执行更新this.rdbStore.update(person,predicates)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询数据</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;查询条件let predicates &#x3D; new relationalStore.RebPredicates(&#39;tableName&#39;)&#x2F;&#x2F;执行查询let result &#x3D; await this.rdbStore.query(predicates,[&#39;id&#39;,&#39;name&#39;,&#39;age&#39;])&#x2F;&#x2F;解析结果&#x2F;&#x2F;1.准备数组保存结果let persons:any[]&#x3D;[]&#x2F;&#x2F;2、循环遍历结果集，判断结果是否遍历到最后一行while(!result.isAtLastRow)&#123;    &#x2F;&#x2F;指针移动到下一行数据    result.goToNexRow()    &#x2F;&#x2F;根据字段名称获取字段index，从而获取字段值    let id &#x3D; result.getLong(result.getColumnIndex(&#39;id&#39;))    let name &#x3D; result.getString(result.getColumnIndex(&#39;name&#39;))    persons.push(&#123;id,name&#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS网络请求</title>
      <link href="/phone/harmonyos-wang-luo-qing-qiu/"/>
      <url>/phone/harmonyos-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h3 id="Http数据请求"><a href="#Http数据请求" class="headerlink" title="Http数据请求"></a>Http数据请求</h3><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/net-mgmt-overview-0000001478341009-V2">概述</a></p><ol><li>导入http模块</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import http from &#39;@ohos.net.http&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用http模块发送请求，处理响应</li></ol><p><img src="/images/2024011709190301.png" alt="2024011709190301.png"></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;1. 创建一个http请求对象，不可复用let httpRequest &#x3D; http.createHttp()&#x2F;&#x2F;2.发起网络请求httpRequest.request(&#39;url&#39;, &#x2F;&#x2F;请求url地址&#123;&#x2F;&#x2F;请求选项HttpRequestOptions    method:http.RequestMethod.GET,    extraData:&#123;&#39;param1&#39;:&#39;value1&#39;&#125; &#x2F;&#x2F;k1&#x3D;v1&amp;k2&#x3D;v2&#125;)&#x2F;&#x2F;promise:存放未来会完成的结果&#x2F;&#x2F;3.处理响应结果.then((resp:http.HttpResponse)&#x3D;&gt;&#123;    if(resp.responseCode&#x3D;&#x3D;&#x3D;200)&#123;        &#x2F;&#x2F;请求成功    &#125;&#125;).catch((err:Error)&#x3D;&gt;&#123;    &#x2F;&#x2F;请求失败&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/js-apis-http-0000001478061929-V2">参考官方文档</a></p><h3 id="第三方库axios"><a href="#第三方库axios" class="headerlink" title="第三方库axios"></a>第三方库axios</h3><p><a href="https://ohpm.openharmony.cn/">第三方仓库地址</a></p><h4 id="下载安装ohpm"><a href="#下载安装ohpm" class="headerlink" title="下载安装ohpm"></a>下载安装ohpm</h4><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/ide-command-line-ohpm-0000001490235312-V2">安装说明</a></p><ol><li><a href="https://developer.harmonyos.com/cn/develop/deveco-studio#download_cli">下载ohpm工具包</a></li><li>解压工具包，执行初始化命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># window环境</span>init.bat<span class="token comment"># Linux或mac环境</span>./init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将ohpm配置到环境变量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># window环境，直接在我的电脑配置</span><span class="token comment"># Linux或Mac环境，其中OHPM的路径请替换为ohpm的安装路径</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">OHPM_HOME</span><span class="token operator">=</span>/xx/ohpm<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;OHPM_HOME&#125;</span>/bin:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下载安装axios"><a href="#下载安装axios" class="headerlink" title="下载安装axios"></a>下载安装axios</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ohpm <span class="token function">install</span> @ohos/axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开放网络权限</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"module"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"entry"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"entry"</span><span class="token punctuation">,</span>  <span class="token comment">//网络权限配置</span>  <span class="token property">"requestPermissions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ohos.permission.INTERNET"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h4><ol><li>导入axios</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios form <span class="token string">'@ohos/axios'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>发送请求并处理响应</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'param1'</span><span class="token operator">:</span><span class="token string">'value1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'param1'</span><span class="token operator">:</span><span class="token string">'value1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token operator">!==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//查询失败</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询成功</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//查询异常  </span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS-Stage模型</title>
      <link href="/phone/harmonyos-stage-mo-xing/"/>
      <url>/phone/harmonyos-stage-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="Stage模型"><a href="#Stage模型" class="headerlink" title="Stage模型"></a>Stage模型</h3><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/stage-model-development-overview-0000001427744552-V2">Stage模型概述</a></p><ul><li>AblityStage:应用组件的“舞台”</li><li>UIAbility:包含UI界面的应用组件，是系统调度的基本单元</li><li>WindowStage：组件内窗口的“舞台”</li><li>Window：用来绘制UI页面的窗口<br><img src="/images/2024011214190301.png" alt="2024011214190301.png"></li></ul><h3 id="Stage模型应用配置文件"><a href="#Stage模型应用配置文件" class="headerlink" title="Stage模型应用配置文件"></a>Stage模型应用配置文件</h3><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/application-component-configuration-stage-0000001478340869-V2">配置文件</a></p><h4 id="AppScore下的app-json5配置"><a href="#AppScore下的app-json5配置" class="headerlink" title="AppScore下的app.json5配置"></a>AppScore下的app.json5配置</h4><p>该配置文件是全局配置</p><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">&#123;  &quot;app&quot;: &#123;    &quot;bundleName&quot;: &quot;com.zj.demo&quot;, &#x2F;&#x2F;唯一标识    &quot;vendor&quot;: &quot;example&quot;,    &quot;versionCode&quot;: 1000000, &#x2F;&#x2F;版本    &quot;versionName&quot;: &quot;1.0.0&quot;, &#x2F;&#x2F;版本    &quot;icon&quot;: &quot;$media:app_icon&quot;, &#x2F;&#x2F;应用图标    &quot;label&quot;: &quot;$string:app_name&quot; &#x2F;&#x2F;应用描述  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="entry目录下的module-json5"><a href="#entry目录下的module-json5" class="headerlink" title="entry目录下的module.json5"></a>entry目录下的module.json5</h4><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">&#123;  &quot;module&quot;: &#123;    &quot;name&quot;: &quot;entry&quot;, &#x2F;&#x2F;当前模块名称    &quot;type&quot;: &quot;entry&quot;, &#x2F;&#x2F;当前模块类型，类型可分两大类：Ability和Library；Ability分为entry和feature，Library分为Shared    &quot;description&quot;: &quot;$string:module_desc&quot;, &#x2F;&#x2F;当前模块的描述    &quot;mainElement&quot;: &quot;EntryAbility&quot;, &#x2F;&#x2F;当前模块的入口    &quot;deviceTypes&quot;: [ &#x2F;&#x2F;支持设备类型      &quot;phone&quot;,      &quot;tablet&quot;    ],    &#x2F;&#x2F;网络权限配置    &quot;requestPermissions&quot;: [      &#123;        &quot;name&quot;: &quot;ohos.permission.INTERNET&quot;      &#125;    ],    &quot;deliveryWithInstall&quot;: true, &#x2F;&#x2F;当前模块类型如果是feature，设置为true表示该模块要跟随一起安装    &quot;installationFree&quot;: false,    &quot;pages&quot;: &quot;$profile:main_pages&quot;, &#x2F;&#x2F;包含页面    &quot;abilities&quot;: [       &#123;        &quot;name&quot;: &quot;EntryAbility&quot;,        &quot;srcEntry&quot;: &quot;.&#x2F;ets&#x2F;entryability&#x2F;EntryAbility.ts&quot;,        &quot;description&quot;: &quot;$string:EntryAbility_desc&quot;,        &quot;icon&quot;: &quot;$media:icon&quot;, &#x2F;&#x2F;当前应用桌面的图标        &quot;label&quot;: &quot;$string:EntryAbility_label&quot;, &#x2F;&#x2F;当前应用桌面的描述        &quot;startWindowIcon&quot;: &quot;$media:icon&quot;,        &quot;startWindowBackground&quot;: &quot;$color:start_window_background&quot;,        &quot;exported&quot;: true,        &quot;skills&quot;: [          &#123;            &quot;entities&quot;: [              &quot;entity.system.home&quot;            ],            &quot;actions&quot;: [              &quot;action.system.home&quot;            ]          &#125;        ]      &#125;    ]  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="UIAbility生命周期"><a href="#UIAbility生命周期" class="headerlink" title="UIAbility生命周期"></a>UIAbility生命周期</h3><p><img src="/images/2024011214190302.png" alt="2024011214190302.png"></p><h3 id="页面及组件的生命周期"><a href="#页面及组件的生命周期" class="headerlink" title="页面及组件的生命周期"></a>页面及组件的生命周期</h3><p><img src="/images/2024011214190303.png" alt="2024011214190303.png"></p><p>页面生命周期的钩子只能在带有@Entry装饰的页面使用，组件生命周期钩子可以在任何页面使用</p><h3 id="UIAbility的启动模式"><a href="#UIAbility的启动模式" class="headerlink" title="UIAbility的启动模式"></a>UIAbility的启动模式</h3><h4 id="Singleton启动模式"><a href="#Singleton启动模式" class="headerlink" title="Singleton启动模式"></a>Singleton启动模式</h4><p>每一个UIAbility只存在唯一实例，是默认启动模式。任务列表中只会存在一个相同的UIAbility</p><h4 id="standard和multion启动模式"><a href="#standard和multion启动模式" class="headerlink" title="standard和multion启动模式"></a>standard和multion启动模式</h4><p>每次启动UIAbility都会创建一个新的实例。<br>区别：multion再次启动会将前一个实例销毁，任务列表中始终只有一个UIAbility；<br>而standard再次启动不会销毁前一个实例，在任务列表中可能存在一个或多个相同的UIAbility</p><h4 id="specified启动模式"><a href="#specified启动模式" class="headerlink" title="specified启动模式"></a>specified启动模式</h4><p>每个UIAbility实例可以设置key标识，启动UIAbility时，需要指定key，存在key相同实例直接被拉起，不存在则创建新实例</p><p>specified启动模式步骤</p><h5 id="当前UIAbility调用startAbility方法拉起目标UIAbility"><a href="#当前UIAbility调用startAbility方法拉起目标UIAbility" class="headerlink" title="当前UIAbility调用startAbility方法拉起目标UIAbility"></a>当前UIAbility调用startAbility方法拉起目标UIAbility</h5><ol><li>获取上下文</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">context &#x3D; getContext(this) as common.UIAbilityContext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>指定要跳转的UIAbility的信息</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let want: Want&#x3D;&#123;  deviceId:&#39;&#39;, &#x2F;&#x2F;为空指当前设备  bundleName:&#39;com.zj.demo&#39;, &#x2F;&#x2F;在appScope中的app.json5中  moduleName:&#39;entry&#39;, &#x2F;&#x2F;在当前项目的module.json5中  abilityName:&#39;DocumentAbility&#39;,  parameters:&#123;    &#x2F;&#x2F;getInstanceKey:自定方法，生成目标UIAbility的实例    instanceKey:&#39;idx_&#39;+this.index++  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>尝试拉起目标UIAbility实例</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">this.context.startAbility(want)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="在AbilityStage的生命周期回调中为目标UIAbility实例生成key"><a href="#在AbilityStage的生命周期回调中为目标UIAbility实例生成key" class="headerlink" title="在AbilityStage的生命周期回调中为目标UIAbility实例生成key"></a>在AbilityStage的生命周期回调中为目标UIAbility实例生成key</h5><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import AbilityStage from &#39;@ohos.app.ability.AbilityStage&#39;;import Want from &#39;@ohos.app.ability.Want&#39;;export default class MyAbilityStage extends  AbilityStage&#123;  onAcceptWant(want:Want):string&#123;    if(want.abilityName&#x3D;&#x3D;&#x3D;&#39;DocumentAbility&#39;)&#123;      return &#96;DocAbilityInstace_$&#123;want.parameters.instanceKey&#125;&#96;    &#125;    return &#39;&#39;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在module-json5配置文件中，通过srcEntry参数指定AbilityStage路径"><a href="#在module-json5配置文件中，通过srcEntry参数指定AbilityStage路径" class="headerlink" title="在module.json5配置文件中，通过srcEntry参数指定AbilityStage路径"></a>在module.json5配置文件中，通过srcEntry参数指定AbilityStage路径</h5><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">&#123;  &quot;module&quot;: &#123;    &quot;name&quot;: &quot;entry&quot;,    &quot;type&quot;: &quot;entry&quot;,    &quot;srcEntry&quot;: &#39;.&#x2F;ets&#x2F;myabilitystage&#x2F;MyAbilityStage.ts&#39;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS-ArkUI-动画</title>
      <link href="/phone/harmonyos-arkui-dong-hua/"/>
      <url>/phone/harmonyos-arkui-dong-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h4><p>属性动画是通过设置组件的animation属性来给组件添加动画，当组件的with、height、Opacity、backgrouColor、scale、rotate、translate等属性变更时，可以实现渐变过渡效果。<br><strong>animation需要放在所有样式属性之后，否则动画效果不会生效</strong></p><h4 id="显示动画"><a href="#显示动画" class="headerlink" title="显示动画"></a>显示动画</h4><p>显示动画是通过全局animateTo函数来修改组件爱你属性，实现属性变化时的渐变过渡效果</p><h4 id="组件转场动画"><a href="#组件转场动画" class="headerlink" title="组件转场动画"></a>组件转场动画</h4><p>组件转场动画是在组件插入或移除时的过渡动画，通过组件的transition属性来配置</p>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS-ArkUI-页面路由</title>
      <link href="/phone/harmonyos-arkui-ye-mian-lu-you/"/>
      <url>/phone/harmonyos-arkui-ye-mian-lu-you/</url>
      
        <content type="html"><![CDATA[<h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><p>页面路由是指在应用程序中实现不同页面之间的跳转和数据传递</p><p>访问的页面都是放入页面栈中，页面栈的最大容量上面为32个页面，使用router。clear()可以清空页面栈，释放内存</p><h3 id="页面路由跳转方式"><a href="#页面路由跳转方式" class="headerlink" title="页面路由跳转方式"></a>页面路由跳转方式</h3><h4 id="router-pushUrl"><a href="#router-pushUrl" class="headerlink" title="router.pushUrl()"></a>router.pushUrl()</h4><p>目标页不会替换当前页，而是压入页面栈，因此可以使用router.back()返回当前页</p><h4 id="router-replaceUrl"><a href="#router-replaceUrl" class="headerlink" title="router.replaceUrl()"></a>router.replaceUrl()</h4><p>目标页替换当前页，当前页会被销毁并释放资源，无法返回当前页</p><h3 id="页面路由的实例模式"><a href="#页面路由的实例模式" class="headerlink" title="页面路由的实例模式"></a>页面路由的实例模式</h3><h4 id="Standard-标准实例模式"><a href="#Standard-标准实例模式" class="headerlink" title="Standard 标准实例模式"></a>Standard 标准实例模式</h4><p>标准实例模式，每次跳转都会新建一个目标页并压入栈顶。默认就是该模式</p><h4 id="Single-单实例模式"><a href="#Single-单实例模式" class="headerlink" title="Single 单实例模式"></a>Single 单实例模式</h4><p>单实例模式，如果目标页面已经在栈中，则离栈顶最近的同Url会被移动到栈顶并重新加载</p><h3 id="页面路由使用"><a href="#页面路由使用" class="headerlink" title="页面路由使用"></a>页面路由使用</h3><ul><li>导入Router模块</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import router from &#39;@ohos.router&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>router实现跳转</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">router.pushUrl(&#123;    url:&#39;pages&#x2F;ImagePage&#39;,    parames:&#123;id:1&#125;&#125;,router.RouterMode.Single,err&#x3D;&gt;&#123;   &#x2F;**     * 100001:内部错误，可能是渲染失败     * 100002：路由地址错误     * 100003：路由栈中页面超过32     *&#x2F;    if(err)&#123;        console.log(&#39;error&#39;)    &#125;     &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>日志中出现“The uri of router is not exist”</p><p>需要看项目中的resources&#x2F;base&#x2F;profile目录下的main_pages.json文件中写入文件的路径没有，在编辑器中新建Page页面的时候会自动加入页面到该文件中</p>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS-ArkUI-状态管理</title>
      <link href="/phone/harmonyos-arkui-zhuang-tai-guan-li/"/>
      <url>/phone/harmonyos-arkui-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><h3 id="状态-State"><a href="#状态-State" class="headerlink" title="状态(State)"></a>状态(State)</h3><p>指驱动视图更新的数据(被装饰器标记的变量)</p><h3 id="试图-View"><a href="#试图-View" class="headerlink" title="试图(View)"></a>试图(View)</h3><p>基于UI描述渲染得到的用户界面</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h4 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h4><ul><li>@State装饰器标记的变量必须初始化，不能为空值</li><li>@State支持Object、class、string、number、boolen、enum类型以及这些类型的数组，数组只有在添加、删除和重新赋值才会更新UI，更新数组中的对象属性无法更新视图</li><li>嵌套类型以及数组中的对象属性无法触发视图更新</li></ul><h4 id="Prop和-Link"><a href="#Prop和-Link" class="headerlink" title="@Prop和@Link"></a>@Prop和@Link</h4><table><thead><tr><th></th><th>@Prop</th><th>@Link</th></tr></thead><tbody><tr><td>同步类型</td><td>单向同步</td><td>双向同步</td></tr><tr><td>允许装饰变量类型</td><td>只支持string、number、boolean、enum类型，父组件对象类型，子组件是父组件对象中的属性可以，不可以是数组、any</td><td>父子类型一致：string、number、boolean、enum、object、class以及它们的数组，数组元素增、删、替换会引起刷新，嵌套类型以及数组中的对象属性无法触发视图更新</td></tr><tr><td>初始化方式</td><td>不允许子组件初始化</td><td>父组件传递，禁止子组件初始化</td></tr></tbody></table><h4 id="Provide和-Consume"><a href="#Provide和-Consume" class="headerlink" title="@Provide和@Consume"></a>@Provide和@Consume</h4><p>和@Link用法比较相似，可以跨组件传值，不用传递参数</p><h4 id="Observed和-ObjectLink"><a href="#Observed和-ObjectLink" class="headerlink" title="@Observed和@ObjectLink"></a>@Observed和@ObjectLink</h4><p>@Observed和@ObjectLink装饰器是用于在涉及嵌套对象或数组元素为对象的场景中惊醒双向数据同步</p><ul><li>在嵌套的对象上加@Observed</li><li>在需要改变的属性上加@ObjectLink,一般需要封装自定组件</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">@Componentexport struct TaskItem&#123;  @ObjectLink t:Tasks  onTaskChange:()&#x3D;&gt;void  build()&#123;    Row()&#123;      if(this.t.finished)&#123;        Text(this.t.name)          .fontSize(20)          .finishTask()      &#125;else&#123;        Text(this.t.name)          .fontSize(20)      &#125;      Checkbox()        .select(this.t.finished)        .onChange(v&#x3D;&gt;&#123;          this.t.finished&#x3D;v          &#x2F;&#x2F;this.HandTaskChange()          this.onTaskChange()        &#125;)    &#125;    .taskCard()    .justifyContent(FlexAlign.SpaceBetween)  &#125;&#125;&#x2F;&#x2F;调用；将子组件中方法需要的对象传过去 TaskItem(&#123;t:t,onTaskChange:this.HandTaskChange.bind(this)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS简介</title>
      <link href="/phone/harmonyos-jian-jie/"/>
      <url>/phone/harmonyos-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>struct 在ArkTs中表示自定义组件:可复用的UI单元<br>装饰器：用来装饰类结构、方法、变量，例如(@Entry、@Component、@State)<br>@Entry 标记当前组件是入口组件<br>@Component 标记自定义组件<br>@State 标记该变量是状态变量，值变化是会触发UI刷新<br>build UI描述：其内部以声明式方式描述UI结构</p><h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3><p>例如：Row、Colunm</p><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><p>例如：Text、Image、TextInput、Slider</p><h3 id="List复杂容器"><a href="#List复杂容器" class="headerlink" title="List复杂容器"></a>List复杂容器</h3><p>List是容器，ListItem不是容器，List中必须包含ListItem<br>ListItem中只能有一个根组件<br>layoutWeight:布局的时，当一个组件固定告诉，将layoutWeight<br>设置为1时，表示其余高度都分配给另一个组件</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">@Entry@Componentstruct Index &#123;  @State message: string &#x3D; &#39;Hello World&#39;  build() &#123;    Row() &#123;      Column(&#123;space:20&#125;) &#123;        Text(this.message)          .fontSize(60)          .fontWeight(FontWeight.Bold)          .fontColor(&#39;#36B&#39;)          .onClick(()&#x3D;&gt;&#123;            this.message&#x3D;&quot;点击了我&quot;;          &#125;)                Image($rawfile(&#39;iconraw.png&#39;))          .width(300)            .interpolation(ImageInterpolation.High)        Text(&quot;用户名&quot;)          .lineHeight(20)          .fontSize(20)      &#125;      .width(&#39;100%&#39;)    &#125;    .height(&#39;100%&#39;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>语法：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">@Componentexport struct Header()&#123;  private title: ResourceStr  build()&#123;    Text(this.title)        .fontSize(30)        .fontWeight(FontWeight.Bold)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;导入import &#123;Header&#125; from &#39;文件名路径&#39;@Entry@Componentstruct Index()&#123;  build()&#123;    Header(&#123;title:&#39;列表&#39;&#125;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Styles-公共样式"><a href="#Styles-公共样式" class="headerlink" title="@Styles 公共样式"></a>@Styles 公共样式</h3><h4 id="全局公共样式函数-写在struct之外"><a href="#全局公共样式函数-写在struct之外" class="headerlink" title="全局公共样式函数(写在struct之外)"></a>全局公共样式函数(写在struct之外)</h4><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;全局公共函数只能是所有组件都用的函数，组件特有的属性不可以@Styles function galobalStyle()&#123;  .width(&#39;100%&#39;)  .height(&#39;100%&#39;)  .padding(20)&#125;&#x2F;&#x2F;继承模式，只能写在全局，支持组件特有的属性@Extend(Text) function galobalStyle()&#123;  .fontColor(&#39;#CCC&#39;)  .fontSize(18)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部公共样式函数-写在struct之内"><a href="#局部公共样式函数-写在struct之内" class="headerlink" title="局部公共样式函数(写在struct之内)"></a>局部公共样式函数(写在struct之内)</h4><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;局部公共函数不用加function关键字@Styles partStyle()&#123;  .width(&#39;100%&#39;)  .height(&#39;100%&#39;)  .padding(20)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Builder-自定义构建函数"><a href="#Builder-自定义构建函数" class="headerlink" title="@Builder 自定义构建函数"></a>@Builder 自定义构建函数</h3><h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;全局自定义构建函数@Builder function FunName(参数)&#123;  &#x2F;&#x2F;代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h4><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;局部自定义构建函数@Builder FunName(参数)&#123;  &#x2F;&#x2F;代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>全局调用直接写方法名：列入 FunName(参数)<br>局部调用需加this：例如：this.FunName(参数)</p>]]></content>
      
      
      <categories>
          
          <category> Phone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetCore总结</title>
      <link href="/netcore/netcore-zong-jie/"/>
      <url>/netcore/netcore-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="ASPNetCore项目中新建类库"><a href="#ASPNetCore项目中新建类库" class="headerlink" title="ASPNetCore项目中新建类库"></a>ASPNetCore项目中新建类库</h2><p>在类库项目中不能直接使用WebApplicationBuilder、IApplicationBuilder、IWebHostEnvironment等类，也不能通过Nuget安装,使用这些类又必须引用<strong>Microsoft.AspNetCore</strong>，解决方法如下<br>在.csproj文件的Project节点下增加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameworkReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.AspNetCore.App<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetCore错误总结</title>
      <link href="/netcore/netcore-cuo-wu-zong-jie/"/>
      <url>/netcore/netcore-cuo-wu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Object-reference-not-set-to-an-instance-of-an-object"><a href="#Object-reference-not-set-to-an-instance-of-an-object" class="headerlink" title="Object reference not set to an instance of an object"></a>Object reference not set to an instance of an object</h2><p><img src="/images/2023121913253301.png" alt="2023121913253301.png"></p><p>可以使用include方法将所需信息关联查询出来</p><p><img src="/images/2023121913253302.png" alt="2023121913253302.png"></p><h2 id="提示服务生命周期不一致报错"><a href="#提示服务生命周期不一致报错" class="headerlink" title="提示服务生命周期不一致报错"></a>提示服务生命周期不一致报错</h2><p>在对应的类中添加</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private readonly IServiceScopeFactory serviceScopeFactory;public UserAccessResultEventHandler(IServiceScopeFactory serviceScopeFactory)&#123;    this.serviceScopeFactory &#x3D; serviceScopeFactory;&#125;public async Task Handle()&#123;    var scope &#x3D; serviceScopeFactory.CreateAsyncScope();    IUserRepository userRepository &#x3D; scope.ServiceProvider.GetRequiredService&lt;IUserRepository&gt;();    UserDbContext userDbContext &#x3D; scope.ServiceProvider.GetRequiredService&lt;UserDbContext&gt;();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Program.cs中需要注入对应的服务</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">builder.Services.AddScoped&lt;IUserRepository, UserRepository&gt;();builder.Services.AddDbContext&lt;UserDbContext&gt;(op &#x3D;&gt; &#123;    op.UseMySql(&quot;conn&quot;, new MySqlServerVersion(&quot;5.0.6&quot;));&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Core领域驱动概念</title>
      <link href="/netcore/net-core-ling-yu-qu-dong-gai-nian/"/>
      <url>/netcore/net-core-ling-yu-qu-dong-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="DDD简介"><a href="#DDD简介" class="headerlink" title="DDD简介"></a>DDD简介</h2><h3 id="DDD是-Domain-Driven-Design-的缩写，称为领域驱动设计。它是为了解决划分业务边界的问题-是一种架构模式-也是一种划分业务领域范围的方法论。"><a href="#DDD是-Domain-Driven-Design-的缩写，称为领域驱动设计。它是为了解决划分业务边界的问题-是一种架构模式-也是一种划分业务领域范围的方法论。" class="headerlink" title="DDD是 Domain-Driven Design 的缩写，称为领域驱动设计。它是为了解决划分业务边界的问题,是一种架构模式,也是一种划分业务领域范围的方法论。"></a>DDD是 Domain-Driven Design 的缩写，称为领域驱动设计。它是为了解决划分业务边界的问题,是一种架构模式,也是一种划分业务领域范围的方法论。</h3><h2 id="DDD概念"><a href="#DDD概念" class="headerlink" title="DDD概念"></a>DDD概念</h2><h3 id="领域"><a href="#领域" class="headerlink" title="领域"></a>领域</h3><p>一个组织做的事情</p><h4 id="领域划分"><a href="#领域划分" class="headerlink" title="领域划分"></a>领域划分</h4><h5 id="核心域"><a href="#核心域" class="headerlink" title="核心域"></a>核心域</h5><p>解决项目的核心问题，和组织业务紧密相关。</p><h5 id="支撑域"><a href="#支撑域" class="headerlink" title="支撑域"></a>支撑域</h5><p>解决项目的非核心问题，则具有组织特性，但不具有通用性。</p><h5 id="通用域"><a href="#通用域" class="headerlink" title="通用域"></a>通用域</h5><p>解决通用问题，没有组织特性。</p><h3 id="通用语言和界限上下文"><a href="#通用语言和界限上下文" class="headerlink" title="通用语言和界限上下文"></a>通用语言和界限上下文</h3><h4 id="通用语言"><a href="#通用语言" class="headerlink" title="通用语言"></a>通用语言</h4><p>一个拥有确切含义的、没有二义性的语言。</p><h4 id="界限上下文"><a href="#界限上下文" class="headerlink" title="界限上下文"></a>界限上下文</h4><p>通用语言离不开特定的语义环境，只有确定了通用语言所在的边界，才能没有歧义的描述一个业务对象。</p><h3 id="实体和值对象"><a href="#实体和值对象" class="headerlink" title="实体和值对象"></a>实体和值对象</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><ol><li>“标识符”用来唯一定位一个对象，在数据库中我们一般用表的主键来实现“标识符”。主键和标识符的思考角度不同。</li><li>实体：拥有唯一的标识符，标识符的值不会改变，而对象的其他状态则会经历各种变化。标识符用来跟踪对象状态变化，一个实体的对象无论怎样变化，我们都能通过标识符定位这个对象。</li><li>实体一般的表现形式就是EF Core中的实体类。</li></ol><h4 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h4><ol><li>值对象：没有标识符的对象，也有多个属性，依附于某个实体对象而存在。比如“商家”的地理位置、衣服的RGB颜色。</li><li>定义为值对象和普通属性的区别：体现整体关系。</li></ol><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><ol><li>目的：高内聚，低耦合。有关系的实体紧密协作，而关系很弱的实体被隔离。</li><li>把关系紧密的实体放到一个聚合中，每个聚合中有一个实体作为聚合根（Aggregate Root），所有对于聚合内对象的访问都通过聚合根来进行，外部对象只能持有对聚合根的引用。</li><li>聚合根不仅仅是实体，还是所在聚合的管理者。</li></ol><h3 id="领域服务和应用服务"><a href="#领域服务和应用服务" class="headerlink" title="领域服务和应用服务"></a>领域服务和应用服务</h3><h4 id="领域服务-Domain-Service"><a href="#领域服务-Domain-Service" class="headerlink" title="领域服务(Domain Service)"></a>领域服务(Domain Service)</h4><p>聚合内的业务逻辑需要编写领域服务</p><h4 id="应用服务-Application-Service"><a href="#应用服务-Application-Service" class="headerlink" title="应用服务(Application Service)"></a>应用服务(Application Service)</h4><p>跨聚合写作和聚合与外部系统的协作逻辑编写应用服务</p><h4 id="领域服务和应用服务的职责划分"><a href="#领域服务和应用服务的职责划分" class="headerlink" title="领域服务和应用服务的职责划分"></a>领域服务和应用服务的职责划分</h4><ol><li>领域模型与外部系统不会发生直接交互，即领域服务不会涉及数据库操作。</li><li>业务逻辑放入领域服务，而与外部系统的交互由应用服务来负责。</li><li>领域服务不是必须的，在一些简单的业务处理中（比如增删改查）是没有领域知识（也就是业务逻辑）的，这种情况下应用服务可以完成所有操作，不需要引入领域服务。这样可以避免过度设计。</li></ol><h4 id="仓储-Repository-和工作单元-Unit-Of-Work"><a href="#仓储-Repository-和工作单元-Unit-Of-Work" class="headerlink" title="仓储(Repository)和工作单元(Unit Of Work)"></a>仓储(Repository)和工作单元(Unit Of Work)</h4><ol><li>仓储负责按照要求从数据库中读取数据以及把领域服务修改的数据保存回数据库。</li><li>聚合内的数据操作是关系非常紧密的，我们要保证事务的强一致性，而聚合间的协作是关系不紧密的，因此我们只要保证事务的最终一致性即可。</li><li>聚合内的若干相关联的操作组成一个“工作单元”，这些工作单元要么全部成功，要么全部失败。</li></ol><h3 id="领域事件-Domain-Events-和集成事件-Integration-Events"><a href="#领域事件-Domain-Events-和集成事件-Integration-Events" class="headerlink" title="领域事件(Domain Events)和集成事件(Integration Events)"></a>领域事件(Domain Events)和集成事件(Integration Events)</h3><h4 id="领域事件"><a href="#领域事件" class="headerlink" title="领域事件"></a>领域事件</h4><p>在同一个微服务内的聚合之间的事件传递。使用进程内的通信机制完成。</p><h4 id="集成事件"><a href="#集成事件" class="headerlink" title="集成事件"></a>集成事件</h4><p>跨微服务的事件传递。使用事件总线（EventBus）实现。</p><h3 id="贫血模型和充血模型"><a href="#贫血模型和充血模型" class="headerlink" title="贫血模型和充血模型"></a>贫血模型和充血模型</h3><h4 id="贫血模型"><a href="#贫血模型" class="headerlink" title="贫血模型"></a>贫血模型</h4><p>一个类中只有属性或者成员变量，没有方法。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Person&#123;public string Name &#123; get; set; &#125;public string Password &#123; get; set; &#125;public int Age &#123; get; set; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="充血模型"><a href="#充血模型" class="headerlink" title="充血模型"></a>充血模型</h4><p>一个类中既有属性、成员变量，也有方法。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">class User&#123;public string Name &#123; get; init; &#125;        public int Age &#123; get; private set; &#125;private string? password;public User(string name)&#123;this.Name &#x3D; name;this.Age &#x3D;18;&#125;public void ChangePassword(string newValue)&#123;if(newValue.Length&lt;6)&#123;throw new Exception(&quot;密码太短&quot;);&#125;this.password &#x3D;Hash(newValue);&#125;    public void AddAge(int age)&#123;this.Age +&#x3D; age;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core 迁移数据库问题</title>
      <link href="/netcore/net-core-qian-yi-shu-ju-ku-wen-ti/"/>
      <url>/netcore/net-core-qian-yi-shu-ju-ku-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="NetCore项目中分层容易出现下图中的错误"><a href="#NetCore项目中分层容易出现下图中的错误" class="headerlink" title="NetCore项目中分层容易出现下图中的错误"></a>NetCore项目中分层容易出现下图中的错误</h3><p><img src="/images/2023112011201301.png" alt="2023112011201301.png"></p><h3 id="这种问题最直接就是新建一个类，继承IDesignTimeDbContextFactory"><a href="#这种问题最直接就是新建一个类，继承IDesignTimeDbContextFactory" class="headerlink" title="这种问题最直接就是新建一个类，继承IDesignTimeDbContextFactory"></a>这种问题最直接就是新建一个类，继承IDesignTimeDbContextFactory</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class DbContextDesignFactory : IDesignTimeDbContextFactory&lt;MyDbContext&gt;&#123;    public MyDbContext CreateDbContext(string[] args)    &#123;        DbContextOptionsBuilder&lt;MyDbContext&gt; builder &#x3D;new DbContextOptionsBuilder&lt;MyDbContext&gt;();        MySqlServerVersion mysqlVersion &#x3D; new MySqlServerVersion(&quot;5.7.0&quot;);        string mysqlCon &#x3D; &quot;server&#x3D;localhost;database&#x3D;demo;uid&#x3D;test;pwd&#x3D;123456&quot;;        builder.UseMySql(mysqlCon, mysqlVersion);        return new MyDbContext(builder.Options);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行add-migration和update-database即可<br>详细参考哔哩哔哩的视频 <a href="https://www.bilibili.com/video/BV1pK41137He?p=132">分层项目中EF Core的用法</a></p><h3 id="使用identity框架注意"><a href="#使用identity框架注意" class="headerlink" title="使用identity框架注意"></a>使用identity框架注意</h3><p>继承IdentityDbContext时，需要使用泛型</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class MyDbContext : IdentityDbContext&lt;MyUser, MyRole, long&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在DbContext中如果使用自定义config配置需要重写OnModelCreating方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class MyDbContext : IdentityDbContext&lt;MyUser, MyRole, long&gt;&#123;    public MyDbContext(DbContextOptions options) : base(options)    &#123;    &#125;    &#x2F;&#x2F;要想自定表名属性等生效，必须重写该方法    protected override void OnModelCreating(ModelBuilder builder)    &#123;        base.OnModelCreating(builder);        builder.ApplyConfigurationsFromAssembly(this.GetType().Assembly);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细参考视频<a href="https://www.bilibili.com/video/BV1pK41137He?p=144">ASP.NET Core标识框架1</a></p>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux gdb调试core文件</title>
      <link href="/computer/linux-gdb-diao-shi-core-wen-jian/"/>
      <url>/computer/linux-gdb-diao-shi-core-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb ./hellogdb ./testhe init 000001 000001.out 000001.log <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>hello和testhe指可执行文件<br>testhe 之后都是参数</p><p>b 类名::方法名   设置断点<br>r  运行程序<br>n 下一步<br>q  退出</p><h2 id="gdb调试core文件"><a href="#gdb调试core文件" class="headerlink" title="gdb调试core文件"></a>gdb调试core文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb hello corefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hello指可执行文件<br>corefile 指core文件名</p><p>bt： 查看崩溃的地方<br>print 变量名： 可以查看变量值<br>info registers：查看寄存器的值<br>set 变量名&#x3D;值： 修改变量值</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinScp 保存的密码解密</title>
      <link href="/tools/winscp-bao-cun-de-mi-ma-jie-mi/"/>
      <url>/tools/winscp-bao-cun-de-mi-ma-jie-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="WinSCP工具解密"><a href="#WinSCP工具解密" class="headerlink" title="WinSCP工具解密"></a>WinSCP工具解密</h2><p>网上查找恢复WinSCP工具的密码，有的说需要找到WinScp.ini文件在安装目录中没找到,找到WinSCP工具的设置，发现默认密码保存在注册表</p><p><img src="/images/2023110714211301.png" alt="2023110714211301.png"></p><h2 id="winscppwd工具解密"><a href="#winscppwd工具解密" class="headerlink" title="winscppwd工具解密"></a>winscppwd工具解密</h2><p>工具 <a href="https://github.com/anoopengineer/winscppasswd/releases/tag/1.0">winscppwd</a></p><ol><li><p>注册表恢复方式<br>winscppasswd.exe ip 账号 注册表中加密串<br><img src="/images/2023110714211302.png" alt="2023110714211302.png"></p></li><li><p>ini文件恢复方式<br>使用ini方式需要编译一下源代码，ini文件可以导出配置，工具-&gt;导出&#x2F;备份配置<br>winscppasswd.exe ini文件</p></li></ol><p>参考 <a href="https://www.zhihu.com/tardis/bd/art/502455530?source_id=1001">https://www.zhihu.com/tardis/bd/art/502455530?source_id=1001</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10蓝屏不自动重启</title>
      <link href="/computer/win10-lan-ping-bu-zi-dong-chong-qi/"/>
      <url>/computer/win10-lan-ping-bu-zi-dong-chong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="高级系统重设置自动重启"><a href="#高级系统重设置自动重启" class="headerlink" title="高级系统重设置自动重启"></a>高级系统重设置自动重启</h2><p><img src="/images/2023110113501301.png" alt="2023110113501301.png"></p><h2 id="使用命令设置自动重启"><a href="#使用命令设置自动重启" class="headerlink" title="使用命令设置自动重启"></a>使用命令设置自动重启</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wmic RecoverOS <span class="token builtin class-name">set</span> AutoReboot <span class="token operator">=</span> True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023110113501302.png" alt="2023110113501302.png"></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11系统优化</title>
      <link href="/computer/win11-xi-tong-you-hua/"/>
      <url>/computer/win11-xi-tong-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="任务栏右键任务管理器"><a href="#任务栏右键任务管理器" class="headerlink" title="任务栏右键任务管理器"></a>任务栏右键任务管理器</h2><ol><li>通过regedit进入注册表</li><li>进入注册表新建一个DWORD值命名为UndockingDisabled，更改值为1<br><img src="/images/2023103113241101.png" alt="2023103113241101.png"></li></ol><h2 id="优化文件资源管理器"><a href="#优化文件资源管理器" class="headerlink" title="优化文件资源管理器"></a>优化文件资源管理器</h2><ol><li>通过gpedit.msc进入组策略计算机配置-&gt;管理模块-&gt;Windows组件-&gt;文件资源管理器</li><li>双击右侧快速访问，将默认的未配置修改为已禁用</li></ol><h2 id="切换旧版右键菜单"><a href="#切换旧版右键菜单" class="headerlink" title="切换旧版右键菜单"></a>切换旧版右键菜单</h2><ol><li>切换</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">reg <span class="token function">add</span> <span class="token string">"HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32"</span> /f /ve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>恢复win11右键菜单</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">reg delete <span class="token string">"HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;"</span> /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>重启Windows资源管理器生效</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">taskkill /f /im explorer.exestart explorer.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最好不要kill资源管理器，会导致点击开始菜单无反应</p><h2 id="任务栏居左"><a href="#任务栏居左" class="headerlink" title="任务栏居左"></a>任务栏居左</h2><p>设置中找到个性化，找到任务栏行为中任务栏对齐方式选择居左</p><h2 id="关闭推荐"><a href="#关闭推荐" class="headerlink" title="关闭推荐"></a>关闭推荐</h2><p>设置中找到个性化中的开始，将显示最近添加的应用关闭</p><h2 id="剪贴板历史记录"><a href="#剪贴板历史记录" class="headerlink" title="剪贴板历史记录"></a>剪贴板历史记录</h2><p>win+v打开剪贴板，点击启用</p><h2 id="win11系统更新一直卡在正在更新中"><a href="#win11系统更新一直卡在正在更新中" class="headerlink" title="win11系统更新一直卡在正在更新中"></a>win11系统更新一直卡在正在更新中</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dism.exe /Online/Cleanup-image/Scanhealthdism.exe /Online/Cleanup-image/Restorehealth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window忘记密码</title>
      <link href="/computer/window-wang-ji-mi-ma/"/>
      <url>/computer/window-wang-ji-mi-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="利用winpe中密码修改工具修改"><a href="#利用winpe中密码修改工具修改" class="headerlink" title="利用winpe中密码修改工具修改"></a>利用winpe中密码修改工具修改</h3><h3 id="带命令的安装模式下修改"><a href="#带命令的安装模式下修改" class="headerlink" title="带命令的安装模式下修改"></a>带命令的安装模式下修改</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建用户</span>net user zhangsan <span class="token number">123456</span> /add<span class="token comment">#设置用户组</span>net localgroup administrators zhangsan /add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录zhangsan账户，然后重置被锁定用户密码</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++获取当前系统日期</title>
      <link href="/c-c/c-huo-qu-dang-qian-xi-tong-ri-qi/"/>
      <url>/c-c/c-huo-qu-dang-qian-xi-tong-ri-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifdef _WIN32#include&lt;windows.h&gt;#else#include&lt;sys&#x2F;time.h&gt;#endif#include&lt;stdlib.h&gt;&#x2F;&#x2F;mode D(YYMMDD) T(HHMMSS)char* GetSysTime(char mode)&#123;    char f_date[7];    char t_yy[3],t_mm[3],t_dd[3];    time_t now;    tm* timeInfo;    time(&amp;now);    timeInfo &#x3D; localtime(&amp;now);    if(mode&#x3D;&#x3D;&#39;T&#39;)&#123;        sprintf(t_yy,&quot;%02d&quot;,timeInfo-&gt;tm_hour);        sprintf(t_mm,&quot;%02d&quot;,timeInfo-&gt;tm_min);        sprintf(t_dd,&quot;%02d&quot;,timeInfo-&gt;tm_sec);        strncpy(f_date,t_yy,2);        strncpy(f_date+2,t_mm,2);        strncpy(f_date+4,t_dd,2);        f_date[6]&#x3D;&#39;\0&#39;;    &#125;else&#123;        sprintf(t_yy,&quot;%02d&quot;,(timeInfo-&gt;tm_year+1900));        sprintf(t_mm,&quot;%02d&quot;,(timeInfo-&gt;tm_mon+1));        sprintf(t_dd,&quot;%02d&quot;,timeInfo-&gt;tm_mday);        strncpy(f_date,t_yy,2);        strncpy(f_date+2,t_mm,2);        strncpy(f_date+4,t_dd,2);        f_date[6]&#x3D;&#39;\0&#39;;    &#125;    return(f_date);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ifconfig命令</title>
      <link href="/computer/linux-ifconfig-ming-ling/"/>
      <url>/computer/linux-ifconfig-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="ifconfig命令提示找不到"><a href="#ifconfig命令提示找不到" class="headerlink" title="ifconfig命令提示找不到"></a>ifconfig命令提示找不到</h3><p><img src="/images/2023102511141301.png" alt="2023102511141301.png"></p><h3 id="切换root用户"><a href="#切换root用户" class="headerlink" title="切换root用户"></a>切换root用户</h3><p>可以使用exit退出切到root用户，或者使用sudo</p><h3 id="安装-ifconfig"><a href="#安装-ifconfig" class="headerlink" title="安装 ifconfig"></a>安装 ifconfig</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102511141302.png" alt="2023102511141302.png"></p><h3 id="查找-ifconfig"><a href="#查找-ifconfig" class="headerlink" title="查找 ifconfig"></a>查找 ifconfig</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search <span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102511141303.png" alt="2023102511141303.png"></p><h3 id="安装-net-tools-x86-64"><a href="#安装-net-tools-x86-64" class="headerlink" title="安装 net-tools.x86_64"></a>安装 net-tools.x86_64</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> net-tools.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux awk命令</title>
      <link href="/computer/linux-awk-ming-ling/"/>
      <url>/computer/linux-awk-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="awk-语法"><a href="#awk-语法" class="headerlink" title="awk 语法"></a>awk 语法</h2><p>awk    option      pattern[action]  file<br>      awk可选参数   模式     动作     文件&#x2F;数据<br>action 指动作，awk擅长文本格式化，并且能输出格式化后的结果，因此最常见的动作就是print和printf</p><h2 id="awk-处理文本内容模式"><a href="#awk-处理文本内容模式" class="headerlink" title="awk 处理文本内容模式"></a>awk 处理文本内容模式</h2><ol><li>awk默认以空格为分隔符，并且多个空格也识别为一个空格</li><li>awk按行处理文件，一行处理完毕后，在处理下一行</li><li>awk可以根据用户只当你哥的分隔去处理数据，没有指定则默认空格</li></ol><h3 id="awk-内置变量"><a href="#awk-内置变量" class="headerlink" title="awk 内置变量"></a>awk 内置变量</h3><table><thead><tr><th>内置变量</th><th>说明</th></tr></thead><tbody><tr><td>$n</td><td>指定分隔符后，当前的第n个列所在的字段</td></tr><tr><td>$0</td><td>完整的一行记录</td></tr><tr><td>FS</td><td>输入字段分隔符，默认是空格</td></tr><tr><td>OFS</td><td>输出字段分隔符，默认是空格</td></tr><tr><td>RS</td><td>输入记录分隔符，指定输入时的换行符</td></tr><tr><td>ORS</td><td>输出记录分隔符，输出时用指定符号替换换行符</td></tr><tr><td>NF(Number of fields)</td><td>字段分隔后，当前一共多少个字段</td></tr><tr><td>NR(Number of records)</td><td>当前记录数，行号</td></tr><tr><td>FNR</td><td>各文件分别计数的行号</td></tr><tr><td>FILENAME</td><td>当前文件名</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>数组，命令行所给的各个参数</td></tr></tbody></table><p>数据<br><img src="/images/2023102510151001.png" alt="2023102510151001.png"></p><ol><li>输出指定列内容，比如第三列</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151002.png" alt="2023102510151002.png"><br>2. 输出多列内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;print $1,$3&#125;'</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151003.png" alt="2023102510151003.png"><br>3. 查看指定行内容，比如第二行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'NR==3 &#123;print $0&#125;'</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151004.png" alt="2023102510151004.png"><br>4. 输出从第n行到m行，并显示行号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'NR==1,NR==3 &#123;print NR,$0&#125;'</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151005.png" alt="2023102510151005.png"><br>5. 自定义输出内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;print "第一列" $1,"第三列" $3&#125;'</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151006.png" alt="2023102510151006.png"></p><h3 id="awk-参数"><a href="#awk-参数" class="headerlink" title="awk 参数"></a>awk 参数</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-F</td><td>指定分隔字段符</td></tr><tr><td>-v</td><td>定义或修改一个awk内部变量</td></tr><tr><td>-f</td><td>从脚本文件中读取awk命令</td></tr></tbody></table><p>数据和之前test一样，只是将空格替换为#</p><ol><li>指定分隔符显示内容</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'#'</span> <span class="token string">'&#123;print $1&#125;'</span> test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151008.png" alt="2023102510151008.png"><br>2. 显示文件第一列，倒数第一、二列的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'#'</span> <span class="token string">'&#123;print $1,$NF,$(NF-1)&#125;'</span> test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151009.png" alt="2023102510151009.png"><br>3. 取出本机ip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> enp0s3 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR==2 &#123;print $2&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151010.png" alt="2023102510151010.png"><br><img src="/images/2023102510151011.png" alt="2023102510151011.png"><br>4. 取出文件的第一列和最后一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'#'</span> <span class="token string">'&#123;print $1,$NF&#125;'</span> test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OFS输出分隔符"><a href="#OFS输出分隔符" class="headerlink" title="OFS输出分隔符"></a>OFS输出分隔符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'#'</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">OFS</span><span class="token operator">=</span><span class="token string">' *** '</span> <span class="token string">'&#123;print  $1,$NF&#125;'</span> test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023102510151007.png" alt="2023102510151007.png"></p><p>参考 <a href="https://www.php.cn/faq/500600.html">https://www.php.cn/faq/500600.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统配置</title>
      <link href="/computer/linux-xi-tong-pei-zhi/"/>
      <url>/computer/linux-xi-tong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="vim-显示行号"><a href="#vim-显示行号" class="headerlink" title="vim 显示行号"></a>vim 显示行号</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/vimrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令，在最后加上如下图的set nu<br><img src="/images/2023102509521101.png" alt="2023102509521101.png"></p><h2 id="配置PATH路径"><a href="#配置PATH路径" class="headerlink" title="配置PATH路径"></a>配置PATH路径</h2><ul><li><code>/etc/profile （适用于所有用户）</code></li><li><code>~/.bashrc （适用于当前用户）</code></li><li><code>/etc/bashrc （适用于所有用户）</code></li></ul><p>修改配置文件后使用命令使生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHON3</span><span class="token operator">=</span>/usr/local/python3<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;PYTHON3&#125;</span>/bin<span class="token comment">#保存配置后,使配置生效</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Vector 排序</title>
      <link href="/c-c/c-vector-pai-xu/"/>
      <url>/c-c/c-vector-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="vector排序"><a href="#vector排序" class="headerlink" title="vector排序"></a>vector排序</h2><h3 id="排序元素为整数"><a href="#排序元素为整数" class="headerlink" title="排序元素为整数"></a>排序元素为整数</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printVector(const vector&lt;int&gt;&amp; v) &#123;for (vector&lt;int&gt;::const_iterator i &#x3D; v.begin(); i!&#x3D;v.end(); i++)&#123;cout &lt;&lt; (*i) &lt;&lt; &quot;\t&quot;;&#125;cout &lt;&lt; endl;&#125;int main()&#123;    &#x2F;&#x2F;默认构造vector&lt;int&gt; v;for (int i &#x3D; 0; i &lt; 10; i++)&#123;v.push_back(i);&#125;    cout &lt;&lt; &quot;-----------------排序----------------------&quot; &lt;&lt; endl;sort(v.begin(),v.end());printVector(v);cout &lt;&lt; &quot;-----------------降序排序----------------------&quot; &lt;&lt; endl;sort(v.begin(), v.end(), greater&lt;int&gt;());printVector(v);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序元素为对象"><a href="#排序元素为对象" class="headerlink" title="排序元素为对象"></a>排序元素为对象</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Students &#123;string name;int score;string date;&#125;;void printVectorStu(const vector&lt;Students&gt;&amp; v) &#123;for (vector&lt;Students&gt;::const_iterator i &#x3D; v.begin(); i !&#x3D; v.end(); i++)&#123;cout &lt;&lt; (*i).name &lt;&lt; &quot;\t&quot; &lt;&lt;(*i).score &lt;&lt; &quot;\t&quot; &lt;&lt;(*i).date &lt;&lt; &quot;\t&quot;;cout &lt;&lt; endl;&#125;cout &lt;&lt; endl;&#125;&#x2F;&#x2F;日期降序bool compareDate(Students&amp; s1, Students&amp; s2) &#123;return s1.date &gt; s2.date;&#125;&#x2F;&#x2F;分数升序bool compareScore(Students&amp; s1, Students&amp; s2) &#123;return s1.score &lt;&#x3D; s2.score;&#125;int main()&#123;    vector&lt;Students&gt; students &#x3D; &#123;&#123;&quot;zhangsan&quot;,44,&quot;20230903&quot;&#125;,&#123;&quot;lishi&quot;,55,&quot;20231018&quot;&#125;,&#123;&quot;wangwu&quot;,36,&quot;20230707&quot;&#125;,&#123;&quot;zhaoliu&quot;,21,&quot;20231109&quot;&#125;,&#123;&quot;angel&quot;,66,&quot;20230520&quot;&#125;&#125;;std::sort(students.begin(), students.end(), compareDate);printVectorStu(students);sort(students.begin(), students.end(), compareScore);printVectorStu(students);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/images/2023102410591301.png" alt="2023102410591301.png"><br>排序元素为对象出现上图错误，需要在.h中在比较方法(compareScore)中申明函数为静态(static)</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 更换主题</title>
      <link href="/tools/hexo-geng-huan-zhu-ti/"/>
      <url>/tools/hexo-geng-huan-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>修改博客文件夹根目录下的_config.yml中theme的值为主体名称,以主题<a href="https://github.com/blinkfox/hexo-theme-matery.git">hexo-theme-matery</a>为例</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="新建tags页"><a href="#新建tags页" class="headerlink" title="新建tags页"></a>新建tags页</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在新建的index.md中粘贴以下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的categories、about、contract和friends都只要修改对应的名称即可</p><h3 id="新建404页面"><a href="#新建404页面" class="headerlink" title="新建404页面"></a>新建404页面</h3><p>在博客目录中的source下新建404.md文件，输入以下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---title: 404date: 2018-09-30 17:25:30type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在博客根目录中的_config.yml文件中新增以下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在博客根目录中的_config.yml文件中新增以下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h3><p>修改根目录下的language的值为zh-CN</p><p>修改url的值 <a href="https://yourname.github.io/">https://yourname.github.io</a></p><p>修改permalink中的<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动机顶盒刷机</title>
      <link href="/other/yi-dong-ji-ding-he-shua-ji/"/>
      <url>/other/yi-dong-ji-ding-he-shua-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="刷机步骤"><a href="#刷机步骤" class="headerlink" title="刷机步骤"></a>刷机步骤</h2><ol><li><p>把刷机的MstarUpgrade.bin放到U盘根目录中，开机时频繁点按遥控器音量+，如果刷机不需要第二部，如果卡开机，关机第二步。</p></li><li><p>断电重命名MstarUpgrade.bin为MstarUpgrade_ANP.bin放到U盘根目录中，开机时频繁点按遥控器音量+，自动重启升级刷机。</p></li></ol><p>注意：<br><strong>U盘格式必须是fat32</strong></p><p>参考<br>链接: <a href="https://pan.baidu.com/s/1DIDjqA9xZ3_ZNDNlZDErMQ">https://pan.baidu.com/s/1DIDjqA9xZ3_ZNDNlZDErMQ</a> 提取码： 6axf<br>备用链接：<a href="https://wwt.lanzoux.com/b021zvjkj">https://wwt.lanzoux.com/b021zvjkj</a>  提取码：6l1n<br>固件路径：A《当贝桌面纯净完美版–固件大全》（固件种类更多一些）&gt;5《烽火(HG)盒子固件合集》&gt;《HG680-MC／HG680-MY》通刷</p><p><strong>刷机网站</strong><br><a href="https://histb.com/">https://histb.com</a><br>神雕大佬官网:<a href="https://www.ecoo.top/">https://www.ecoo.top</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hiredis连接redis</title>
      <link href="/c-c/hiredis-lian-jie-redis/"/>
      <url>/c-c/hiredis-lian-jie-redis/</url>
      
        <content type="html"><![CDATA[<p><a href="/tools/linux-an-zhuang-redis/">linxu上安装redis</a>参考之前的文章</p><p>hiredis是一个非常全面的C语言版redis接口库，支持所有命令、管道与脚本。</p><p>使用C语言客户端(hiredis)连接Redis，需要先安装编译环境以及hiredis，以CentOS为例，介绍C客户端环境搭建</p><h2 id="安装gcc、make和hiredis"><a href="#安装gcc、make和hiredis" class="headerlink" title="安装gcc、make和hiredis"></a>安装gcc、make和hiredis</h2><ol><li>安装gcc和make</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装<a href="https://github.com/redis/hiredis/archive/master.zip">hiredis</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/redis/hiredis/archive/master.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令下载不了可以直接下载下来然后上传的linux上</p><p>编译<br>进入hiredis解压后的目录后编译安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行上面命令后<br>hiredis.h文件默认在 &#x2F;usr&#x2F;local&#x2F;include&#x2F;hiredis&#x2F;中<br>libhiredis.so.1.2.1-dev文件默认在 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;中</p><h2 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h2><p>新建testRedis.c文件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;&#x2F;usr&#x2F;local&#x2F;include&#x2F;hiredis&#x2F;hiredis.h&gt;int main(int argc, char **argv) &#123;     unsigned int j;     redisContext *conn;     redisReply *reply;     if (argc &lt; 3) &#123;             printf(&quot;Usage: example &#123;instance_ip_address&#125; 6379 &#123;password&#125;\n&quot;);             exit(0);     &#125;     const char *hostname &#x3D; argv[1];     const int port &#x3D; atoi(argv[2]);     const char *password &#x3D; argv[3];     struct timeval timeout &#x3D; &#123; 1, 500000 &#125;; &#x2F;&#x2F; 1.5 seconds     conn &#x3D; redisConnectWithTimeout(hostname, port, timeout);     if (conn &#x3D;&#x3D; NULL || conn-&gt;err) &#123;if (conn) &#123;             printf(&quot;Connection error: %s\n&quot;, conn-&gt;errstr);             redisFree(conn);&#125; else &#123;             printf(&quot;Connection error: can&#39;t allocate redis context\n&quot;);&#125;        exit(1);     &#125;     &#x2F;* AUTH 使用密码认证，不认证下面操作无法继续*&#x2F;      reply &#x3D; redisCommand(conn, &quot;AUTH %s&quot;, password);     printf(&quot;AUTH: %s\n&quot;, reply-&gt;str);     freeReplyObject(reply); &#x2F;&#x2F;释放执行redisCommand返回replay的结果所占内存      &#x2F;* Set *&#x2F;     reply &#x3D; redisCommand(conn,&quot;SET %s %s&quot;, &quot;welcome&quot;, &quot;Hello, DCS for Redis!&quot;);     printf(&quot;SET: %s\n&quot;, reply-&gt;str);     freeReplyObject(reply);         &#x2F;* Get *&#x2F;     reply &#x3D; redisCommand(conn,&quot;GET welcome&quot;);     printf(&quot;GET welcome: %s\n&quot;, reply-&gt;str);     freeReplyObject(reply);          &#x2F;* Disconnects and frees the context *&#x2F;     if(conn!&#x3D;NULL)&#123;        redisFree(conn);     &#125;     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出后执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc testRedis.c <span class="token parameter variable">-o</span> testRedis <span class="token parameter variable">-L</span> /usr/local/lib <span class="token parameter variable">-lhiredis</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2023101713300301.png" alt="2023101713300301.png"></p><p>然后执行命令测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./testRedis <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果如下图则成功<br><img src="/images/2023101713300302.png" alt="2023101713300302.png"><br>否则需要新建目录迁移文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/lib/hiredis<span class="token function">cp</span> /usr/local/lib/libhiredis.so.1.2.1-dev /usr/lib/hiredis/<span class="token function">mkdir</span> /usr/include/hiredis<span class="token function">cp</span> /usr/local/include/hiredis/hiredis.h /usr/include/hiredis/<span class="token builtin class-name">echo</span> <span class="token string">'/usr/local/lib'</span> <span class="token operator">>></span>/etc/ld.so.confldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://zhuanlan.zhihu.com/p/75281231">https://zhuanlan.zhihu.com/p/75281231</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TVBox设置源及修改</title>
      <link href="/other/tvbox-she-zhi-yuan-ji-xiu-gai/"/>
      <url>/other/tvbox-she-zhi-yuan-ji-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h3 id="修改TVBox背景及内置源"><a href="#修改TVBox背景及内置源" class="headerlink" title="修改TVBox背景及内置源"></a>修改TVBox背景及内置源</h3><ol><li>下载<a href="https://mt2.cn/download/">MT管理器</a></li><li>使用MT管理器查看TVBox安装包</li><li>使用dex编辑器++查看classex.dex<br><img src="/images/2023101314181201.png" alt="2023101314181201.png"><br><img src="/images/2023101314181202.png" alt="2023101314181202.png"><br>找到<strong>HomeActivity</strong>下方的<strong>api_url</strong><br><img src="/images/2023101314181203.png" alt="2023101314181203.png"><br><img src="/images/2023101314181204.png" alt="2023101314181204.png"><br>点击返回，然后保存并退出，勾选自动签名,并点击确定<br><img src="/images/2023101314181205.png" alt="2023101314181205.png"><br>同样在查找内容中搜索自定义<br><img src="/images/2023101314181206.png" alt="2023101314181206.png"></li><li>替换背景图，将背景图修改为W_.png然后替换<br><img src="/images/2023101314181207.png" alt="2023101314181207.png"></li><li>返回到apk文件夹点击功能，apk共存<br><img src="/images/2023101314181208.png" alt="2023101314181208.png"></li><li>修改apk中的AndroidMainfest.xml中的版本号</li><li>xml搜索修改文字<br><img src="/images/2023101314181209.png" alt="2023101314181209.png"></li></ol><h3 id="TVBox配置本地源"><a href="#TVBox配置本地源" class="headerlink" title="TVBox配置本地源"></a>TVBox配置本地源</h3><h4 id="使用TVBox助手下载源到本地"><a href="#使用TVBox助手下载源到本地" class="headerlink" title="使用TVBox助手下载源到本地"></a>使用TVBox助手下载源到本地</h4><h4 id="在TVBox配置本地地址"><a href="#在TVBox配置本地地址" class="headerlink" title="在TVBox配置本地地址"></a>在TVBox配置本地地址</h4><p>clan:&#x2F;&#x2F;localhost&#x2F;下载本地文件的路径到json目录级就可以了<br><img src="/images/2023112011201302.png" alt="2023112011201302.png"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/tools/hexo-da-jian-bo-ke/"/>
      <url>/tools/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><h3 id="2、安装nodejs"><a href="#2、安装nodejs" class="headerlink" title="2、安装nodejs"></a>2、安装nodejs</h3><h3 id="3、安装hexo-安装完成可以使用hexo-v命令查看是否安装成功"><a href="#3、安装hexo-安装完成可以使用hexo-v命令查看是否安装成功" class="headerlink" title="3、安装hexo,安装完成可以使用hexo -v命令查看是否安装成功"></a>3、安装hexo,安装完成可以使用hexo -v命令查看是否安装成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、进入blogs文件夹"><a href="#2、进入blogs文件夹" class="headerlink" title="2、进入blogs文件夹"></a>2、进入blogs文件夹</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>blogs文件夹下有<br>    node_modules: 依赖包<br>    public：存放生成的页面<br>    scaffolds：生成文章的一些模板<br>    source：用来存放你的文章<br>    themes：主题**<br>    _config.yml: 博客的配置文件**<br>注意：1初始化和2进入文件夹可以合并为一步，直接新建好blogs文件夹，然后入文件夹，直接执行命令 hexo init即可</p><h4 id="3、运行服务-可以浏览网站了"><a href="#3、运行服务-可以浏览网站了" class="headerlink" title="3、运行服务,可以浏览网站了"></a>3、运行服务,可以浏览网站了</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、GitHub创建仓库（仓库名-youname-github-io）"><a href="#4、GitHub创建仓库（仓库名-youname-github-io）" class="headerlink" title="4、GitHub创建仓库（仓库名 youname.github.io）"></a>4、GitHub创建仓库（仓库名 youname.github.io）</h3><h3 id="5、生成ssh添加到GitHub"><a href="#5、生成ssh添加到GitHub" class="headerlink" title="5、生成ssh添加到GitHub"></a>5、生成ssh添加到GitHub</h3><p>a、在gitbash中配置名称和邮箱<br>   git config –global user.name “youname”<br>   git config –global user.email “youremail”<br>b、检查是否配置成功<br>   git config user.name<br>   git config user.email<br>c、创建ssh，一直回车<br>   ssh-keygen -t rsa -C “youemail”<br>d、进入github的setting找到ssh and gpg keys<br>   新建sshkey 将id_rsa.pub中的内容复制到keys中<br>e、在gitbash中验证是否成功<br>   ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>    &#x2F;&#x2F;直接执行该命令</p><h3 id="6、将hexo部署到github"><a href="#6、将hexo部署到github" class="headerlink" title="6、将hexo部署到github"></a>6、将hexo部署到github</h3><p>a、修改_config.yml文件<br>   deploy:<br>    type: git<br>    repo: <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a>:yourgitHubName&#x2F;yourgitHubName.github.io.git<br>    branch: main  根据自己的分支名修改<br>b、安装deploy-git<br>    npm install hexo-deployer-git –save<br>c、执行命令<br>   hexo clean      清除之前生成的内容<br>   hexo generate   生成静态内容，缩写 hexo g<br>   hexo deploy     部署 缩写 hexo d</p><h3 id="7、新建分类、标签、关于"><a href="#7、新建分类、标签、关于" class="headerlink" title="7、新建分类、标签、关于"></a>7、新建分类、标签、关于</h3><p>a、分类<br>   hexo new page categories  –在source文件夹下回新建一个<br>                               categories文件夹<br>                               其中有一个index.md,在date之后加上type:’categories’<br>b、标签<br>    hexo new page tags      –在source文件夹下回新建一个tags文件夹<br>                               其中有一个index.md,在date之后加上type:’tags’<br>c、关于<br>    hexo new page about     –在source文件夹下回新建一个about文件夹<br>                               其中有一个index.md</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net core 浏览器缓存设置</title>
      <link href="/netcore/net-core-liu-lan-qi-huan-cun-she-zhi/"/>
      <url>/netcore/net-core-liu-lan-qi-huan-cun-she-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器缓存设置"><a href="#浏览器缓存设置" class="headerlink" title="浏览器缓存设置"></a>浏览器缓存设置</h2><p>   [ResponseCache(Duration &#x3D;20)]  将ResponseCache特性设置在接口方法上就可以了，Duration中的时间是以秒为单位</p><h2 id="服务端缓存设置"><a href="#服务端缓存设置" class="headerlink" title="服务端缓存设置"></a>服务端缓存设置</h2><ol><li>将app.UseResponseCaching()方法放在app.MapControllers()方法之前</li><li>如果使用了app.UseCors()方法，要确保app.UseCors()在app.UseResponseCaching()之前</li></ol>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作命令</title>
      <link href="/computer/linux-cao-zuo-ming-ling/"/>
      <url>/computer/linux-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="ls-命令：用于显示指定目录下的内容"><a href="#ls-命令：用于显示指定目录下的内容" class="headerlink" title="ls 命令：用于显示指定目录下的内容"></a>ls 命令：用于显示指定目录下的内容</h3><p>-a 所有文件及目录(.开头的隐藏文件也列出)</p><p>-l  除文件名外，会将文件类型、权限，所有者、文件大小等信息列出，注意 ls -l 等价于 ll</p><p>ll -h 标识以人性化方式显示内容</p><p>ll *  *通配符标识任意字符，？标识有且只有一个字符</p><h3 id="cd-change-directory-命令"><a href="#cd-change-directory-命令" class="headerlink" title="cd (change directory) 命令"></a>cd (change directory) 命令</h3><p>~ 表示home目录</p><p>. 表示当前目录</p><p>.. 标识当前目录的上一级目录</p><p>&#x2F; 根目录</p><h3 id="创建、删除"><a href="#创建、删除" class="headerlink" title="创建、删除"></a>创建、删除</h3><p>mkdir (make directory) :创建目录</p><p>-p 确保父目录名称存在，不存在则创建</p><p>touch：创建一个空文件，无内容</p><p>ex: touch – –abc 创建一个–abc的文件</p><p>rm (remove) :用于删除一个文件或目录</p><p>-f 强制删除，无需用户确认</p><p>-r 将目录及下面文件和目录递归删除</p><p>ex: rm – –abc（rm .&#x2F; –abc） 删除一个–abc的文件</p><h3 id="复制、移动"><a href="#复制、移动" class="headerlink" title="复制、移动"></a>复制、移动</h3><p>cp (copy file):用于复制文件或目录</p><p>-r 源文件是一个目录文件，则将该目录下的所有子目录和文件全部复制</p><p>mv (move file):用于文件或目录改名、或将文件或目录移入其它位置    </p><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><ol><li><p>cat (concatenate): 用于连接文件并打印到标准输出设备上如console控制台上。适合小文件内容查看</p></li><li><p>more：类似cat，不过会以一页一页的形式展示，更方便使用者阅读，翻页结束自动退出，适合大文件查看，按space键翻下一页，按b往回（back）上一页   more &#x2F;etc&#x2F;profile</p></li><li><p>tail ：用于查看文件结尾部分的内容</p></li></ol><p>-n 用于显示行数，默认为10，即显示10行内容</p><p>-f  用于实时显示文件动态追加的内容，会把文件里最尾部的内容显示在屏幕上，并且不断刷新，只要有文件更新，就可以查看到最新的文件内容。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="管道命令：-将前一个命令执行的结果作为内容交给下一个命令处理。可以形成多级管道操作"><a href="#管道命令：-将前一个命令执行的结果作为内容交给下一个命令处理。可以形成多级管道操作" class="headerlink" title="| 管道命令： 将前一个命令执行的结果作为内容交给下一个命令处理。可以形成多级管道操作"></a>| 管道命令： 将前一个命令执行的结果作为内容交给下一个命令处理。可以形成多级管道操作</h4><p>命令1|命令2 可以将命令1的结果通过命令2做进一步操作</p><p>ps -ef | grep sshd</p><p>echo 命令：用于内容的输出，将内容输出到console控制台上</p><h4 id="输出重定向-覆盖-命令"><a href="#输出重定向-覆盖-命令" class="headerlink" title="&gt; 输出重定向(覆盖)命令"></a>&gt; 输出重定向(覆盖)命令</h4><p>command &gt; file 执行command然后将输出的内容存入file，file内已经存在的内容将被新内容覆盖替代</p><h4 id="输出重定向-追加-命令"><a href="#输出重定向-追加-命令" class="headerlink" title="&gt;&gt; 输出重定向(追加)命令"></a>&gt;&gt; 输出重定向(追加)命令</h4><p>command &gt;&gt; file 执行command 然后将输出的内容存入file，新内容追加在文件末尾</p><h3 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h3><h4 id="打包、解包"><a href="#打包、解包" class="headerlink" title="打包、解包"></a>打包、解包</h4><p>tar (tape archive):常用于备份文件。是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件</p><p>-c 或 –create 建立新的备份文件</p><p>-x 或–extract 或–get 从备份文件中还原文件</p><p>-v 或–verbose 显示指令执行过程</p><p>-f&lt;备份文件&gt;或–file&#x3D;&lt;备份文件&gt; 指定备份文件</p><p>打包 tar -cvf 包名.tar 文件或目录(1.txt 2.txt)</p><p>解包 tar -xvf 包名.tar 或 tar -xvf 包名.tar -C 指定解压目录</p><h4 id="打包压缩，解包解压缩"><a href="#打包压缩，解包解压缩" class="headerlink" title="打包压缩，解包解压缩"></a>打包压缩，解包解压缩</h4><p>在打包备份或解包的过程中，可以通过指定压缩算法，对打包的文件进行压缩，解压的时候也需要指定对应的算法</p><p>-z 或 –gzip 或 –ungzip 通过gzip指令处理备份文件</p><p>重要搭配：tar -zxvf xxxx.tar.gz</p><h3 id="时间、日期、内存，磁盘使用率、进程查看"><a href="#时间、日期、内存，磁盘使用率、进程查看" class="headerlink" title="时间、日期、内存，磁盘使用率、进程查看"></a>时间、日期、内存，磁盘使用率、进程查看</h3><p>date：用来显示或者设定系统日期与时间，可以设置显示格式，格式是 +后接标记 (date +”%Y-%m-%d %H:%M:%s”)</p><p>cal(calendar): 用于显示当前或者指定日期的公历</p><p>free：用于显示内存状态，会显示内存使用情况，包括实体内存、虚拟交换文件内存、共享内存区段、以及系统核心使用的缓冲区</p><p>free -h</p><p>df(disk free): 用于显示目前在linux系统上的文件系统磁盘使用情况</p><p>df -h</p><p>ps(process status): 用于显示当前进程的状态，类似windows的任务管理器</p><p>du -sh: 统计文件夹大小</p><p>ps -ef | grep 进程名</p><p>kill -9 pid(进程id) 杀进程</p><p>ps -ef | grep 进程名  | grep -v grep | awk ‘{print $2}’ | xargs -i kill -9 {}    kill所有进程名的进程</p><p>jps：jdk自带命令，专门用于查看本机运行java进程情况</p><p>lscpu: 查看cpu信息</p><p>cat &#x2F;proc&#x2F;cpuinfo cpuinfo文件包含了有关每个可用CPU的详细信息</p><p>vmstat：(虚拟内存统计)允许用户监视系统资源使用情况，包括CPU利用率。</p><p>vmstat 1 #每秒更新一次</p><p>mpstat：(多处理器统计)提供了一个全面的多核cpu利用率报告。</p><p>mpstat -P ALL 5 # 每5秒更新所有逻辑核心</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#新语法</title>
      <link href="/c-winform/csharp-xin-yu-fa/"/>
      <url>/c-winform/csharp-xin-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="顶级语句-C-9-0开始"><a href="#顶级语句-C-9-0开始" class="headerlink" title="顶级语句(C#9.0开始)"></a>顶级语句(C#9.0开始)</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more informationConsole.WriteLine(&quot;Hello, World!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>一个项目中只能有一个顶级文件</li><li>顶级语句可以使用await语法，也可以申明静态方法</li><li>可以直接在Program写语句，不用写Main方法</li></ol><p>参考：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/top-level-statements">顶级语句</a></p><h2 id="全局Using指令-C-10-0开始"><a href="#全局Using指令-C-10-0开始" class="headerlink" title="全局Using指令(C#10.0开始)"></a>全局Using指令(C#10.0开始)</h2><ol><li>在using namespace前面加上global，该命名空间会应用到整个项目，注意不是整个解决方案，不用重复using</li><li>通常会单独新建一个C#文件来放全局的global using namespace</li><li>csproj文件中启用ImplicitUsings，编译器会自动隐式增加对于System、System.Linq等常用命名空间的引用，不同类型的项目引用的命名空间不一样；<br>如果将ImplicitUsings设置为disable<br><img src="/images/2023091111271701.png" alt="2023091111271701.png"></li></ol><p>参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/top-level-templates#global-using-directives">全局Using</a></p><h2 id="Using声明（C-8-0开始）"><a href="#Using声明（C-8-0开始）" class="headerlink" title="Using声明（C#8.0开始）"></a>Using声明（C#8.0开始）</h2><ol><li>在实现了IDisposable&#x2F;IasyncDisposable接口类型的变量申明前加using，当代码执行离开变量作用域，对象就会被释放。</li></ol><p>参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/statements/using">Using声明</a></p><h2 id="文件范围的命名空间声明-C-10-0开始"><a href="#文件范围的命名空间声明-C-10-0开始" class="headerlink" title="文件范围的命名空间声明(C#10.0开始)"></a>文件范围的命名空间声明(C#10.0开始)</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">namespace MyNamespace;public class Dog&#123;   public long Id&#123;get;set;&#125;   public string Name&#123;get;set;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-10#file-scoped-namespace-declaration">文件范围的命名空间声明</a></p><h2 id="可为-null-的引用类型-C-8-0开始"><a href="#可为-null-的引用类型-C-8-0开始" class="headerlink" title="可为 null 的引用类型(C#8.0开始)"></a>可为 null 的引用类型(C#8.0开始)</h2><ol><li>设置一个属性类型可为空使用？，想要去除编译器警告使用！</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">string? nullable；string name;Console.WriterLine(name!.toLower())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/nullable-reference-types">可为 null 的引用类型</a></p><h2 id="record类型-C-9-0开始"><a href="#record类型-C-9-0开始" class="headerlink" title="record类型(C#9.0开始)"></a>record类型(C#9.0开始)</h2><ol><li>record类型，编译器会自动生成Equal和GetHashcode等方法</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Person&#123;       public Person(int id,string name)&#123;       this.Id&#x3D;id;       this.Name&#x3D; name;   &#125;      public int Id &#123;get;init;&#125;   public string Name&#123;get;init&#125;    &#125; Person p1 &#x3D;new Person(1,&quot;zhangsan&quot;);Person p2 &#x3D;new Person(1,&quot;zhangsan&quot;);Console.WriteLine(p1.ToString()); &#x2F;&#x2F;打印出类名Console.WriteLine(p1&#x3D;&#x3D;p2)； &#x2F;&#x2F;FalseConsole.WriteLine(p1.Equal(p2))； &#x2F;&#x2F;False&#x2F;&#x2F;&#x3D;&#x3D;和Equal比较的是判断两个变量是否指向同一个对象&#x2F;&#x2F;Record类型public record Person(int Id,string Name,int Age);Person p3 &#x3D;new Person(1,&quot;zhangsan&quot;);Person p4 &#x3D;new Person(1,&quot;zhangsan&quot;);Person p5 &#x3D;new Person(1,&quot;lishi&quot;);Console.WriteLine(p3.ToString()); &#x2F;&#x2F;类中的属性数据Console.WriteLine(p3&#x3D;&#x3D;p4)； &#x2F;&#x2F;TrueConsole.WriteLine(p3&#x3D;&#x3D;p5)； &#x2F;&#x2F;False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-9">record类型</a></p><p>参考： <a href="https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/top-level-templates#global-using-directives">https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/top-level-templates#global-using-directives</a></p><p>　　　<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/top-level-statements">https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/top-level-statements</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++读取调用接口返回的json数据</title>
      <link href="/c-c/c-du-qu-diao-yong-jie-kou-fan-hui-de-json-shu-ju/"/>
      <url>/c-c/c-du-qu-diao-yong-jie-kou-fan-hui-de-json-shu-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;boost&#x2F;property_tree&#x2F;ptree.hpp&gt;#include &lt;boost&#x2F;property_tree&#x2F;json_parser.hpp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取json数据方法，http请求中的chunked传输数据会返回数据的长度，在最后一个chunked中其头部长度定为0"><a href="#读取json数据方法，http请求中的chunked传输数据会返回数据的长度，在最后一个chunked中其头部长度定为0" class="headerlink" title="读取json数据方法，http请求中的chunked传输数据会返回数据的长度，在最后一个chunked中其头部长度定为0"></a>读取json数据方法，http请求中的chunked传输数据会返回数据的长度，在最后一个chunked中其头部长度定为0</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;读取json文件&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:25&#125;template&lt;class T&gt;void readJson(const string&amp; data, T&amp; t) &#123;    if (strcmp(data.c_str(), &quot;&quot;) !&#x3D; 0) &#123;        std::size_t start &#x3D; data.find_first_of(&quot;&#123;&quot;);        std::size_t end &#x3D; data.find_last_of(&quot;&#125;&quot;);        string res &#x3D; data.substr(start, end - start + 1);        std::stringstream ss(res);        boost::property_tree::ptree pt;        boost::property_tree::json_parser::read_json(ss, pt);        t &#x3D; pt.get&lt;T&gt;(&quot;name&quot;);        std::cout &lt;&lt; &quot;result:&quot; &lt;&lt; t &lt;&lt; std::endl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void postCustom(const string&amp; url, const string&amp; token) &#123;    boost::asio::io_service io;    HttpBoost c(io);    c.post(url, token);    io.run();    string p&#x3D;0;    readJson(c.getResponse(),p);    std::cout &lt;&lt; c.getResponse() &lt;&lt; std::endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 参考 <a href="https://www.jianshu.com/p/acb76b784230">https://www.jianshu.com/p/acb76b784230</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFCore 连接MySQL数据库查询数据提示This MySqlConnection is already in use</title>
      <link href="/mysql-sql-oracle/efcore-lian-jie-mysql-shu-ju-ku-cha-xun-shu-ju-ti-shi-this-mysqlconnection-is-already-in-use/"/>
      <url>/mysql-sql-oracle/efcore-lian-jie-mysql-shu-ju-ku-cha-xun-shu-ju-ti-shi-this-mysqlconnection-is-already-in-use/</url>
      
        <content type="html"><![CDATA[<p>EFCore 连接数据查询数据提示”This MySqlConnection is already in use”代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using (MyDBContext db &#x3D;new MyDBContext())&#123;        Order order&#x3D; db.Orders.Single(o &#x3D;&gt; o.Id&#x3D;&#x3D;2);        printChildren(1, db, order);&#125;static void printChildren(int depLevel,MyDBContext ctx,Order ou)&#123;    var children &#x3D; ctx.Orders.Where(o &#x3D;&gt; o.Parent &#x3D;&#x3D; ou);    foreach (var child in children)    &#123;        Console.WriteLine(new String(&#39;\t&#39;, depLevel) + child.Name);        &#x2F;&#x2F;递归        printChildren(depLevel + 1, ctx, child);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2023083109101001.png" alt="2023083109101001.png"><br>代码中的var children &#x3D; ctx.Orders.Where(o &#x3D;&gt; o.Parent &#x3D;&#x3D; ou)只是将代码转换为SQL语句，返回的结果为IQueryable类型集合，不会立即执行SQL语句，</p><p>这时候再去递归查询会提示连接已经被使用，只有碰到终结方法(ToList、ToArray、MAX、Min、Count等)才会立即执行sql语句。</p><p>将代码改为var children &#x3D; ctx.Orders.Where(o &#x3D;&gt; o.Parent &#x3D;&#x3D; ou).ToList()才会执行sql语句返回类型是IEnumerable类型集合是将数据加载到本地内存中</p><p>判断终结和非终结方法</p><p>一般返回IQueryable类型的是非终结方法(Select、Skip、Take、Where等)；反之是终结方法</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proc c++连接oracle</title>
      <link href="/c-c/proc-c-lian-jie-oracle/"/>
      <url>/c-c/proc-c-lian-jie-oracle/</url>
      
        <content type="html"><![CDATA[<p>环境：oracle11g、vs2022</p><ol><li>编写pc文件</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">EXEC SQL BEGIN DECLARE SECTION;struct datatable&#123;    int id;    char name[30];&#125; data;EXEC SQL END DECLARE SECTION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;#define SQLCA_STORAGE_CLASS extern  &#x2F;&#x2F;增加该行报错EXEC SQL INCLUDE connect_oracle.h;#include &lt;sqlca.h&gt;#include &lt;iostream&gt;using namespace std;EXEC SQL BEGIN DECLARE SECTION;   char* pid &#x3D;&quot;scott&#x2F;tiger@orcl&quot;;   int ids;EXEC SQL END DECLARE SECTION;int connectdb()&#123;    EXEC SQL CONNECT :pid;    if(sqlca.sqlcode!&#x3D;0)&#123;        cout&lt;&lt; &quot;connect err &quot;&lt;&lt;sqlca.sqlcode&lt;&lt;endl;        return sqlca.sqlcode;;    &#125;    cout&lt;&lt; &quot;connect ok&quot;&lt;&lt;endl;    return sqlca.sqlcode;;&#125;int selectData(datatable&amp; data)&#123;    EXEC SQL     SELECT * INTO :data FROM TEST where id&#x3D;1;    return sqlca.sqlcode;&#125;int insertData(datatable&amp; data)&#123;    exec sql      insert into test(id,name) values (:data.id,:data.name);    if(sqlca.sqlcode!&#x3D;0)&#123;        cout&lt;&lt; &quot;insert err &quot;&lt;&lt;sqlca.sqlcode&lt;&lt;endl;        return sqlca.sqlcode;;    &#125;    exec sql commit;    return sqlca.sqlcode;&#125;int updateData(datatable&amp; data)&#123;    exec sql      update test set name&#x3D;:data.name where id&#x3D;:data.id;    if(sqlca.sqlcode!&#x3D;0)&#123;        cout&lt;&lt; &quot;update err &quot;&lt;&lt;sqlca.sqlcode&lt;&lt;endl;        return sqlca.sqlcode;;    &#125;    exec sql commit;    return sqlca.sqlcode;&#125;int deleteData(int id)&#123;    ids &#x3D;id;    exec sql     delete from test where id&#x3D;:ids;    if(sqlca.sqlcode!&#x3D;0)&#123;        cout&lt;&lt; &quot;delete err &quot;&lt;&lt;sqlca.sqlcode&lt;&lt;endl;        return sqlca.sqlcode;;    &#125;    exec sql commit;    return sqlca.sqlcode;&#125;void disconnect()&#123;    EXEC SQL COMMIT RELEASE;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编译pc文件<br>在dos中执行 proc code&#x3D;cpp .&#x2F;connect_oracle.pc</li><li>在vs新建工程，添加新增的cpp文件</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define SQLCA_STORAGE_CLASS extern#include &lt;iostream&gt;#include &lt;sqlca.h&gt;using namespace std;struct datatable&#123;    int id;    char name[30];&#125;;extern int connectdb();extern int selectData(datatable&amp; data);extern int insertData(datatable&amp; data);extern int updateData(datatable&amp; data);extern int deleteData(int id);extern void disconnect();int main() &#123;    connectdb();    datatable da;    selectData(da);    datatable insertdata;    insertdata.id &#x3D; 2;    strcpy(insertdata.name, &quot;bbb&quot;);    insertData(insertdata);    strcpy(insertdata.name, &quot;ccc&quot;);    updateData(insertdata);    deleteData(2);    disconnect();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/other/jin-zhi-zhuan-huan/"/>
      <url>/other/jin-zhi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023060116271701.png" alt="2023060116271701.png"></p><h2 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h2><p><strong>二进制数</strong>： 10010</p><ol><li><p>转换为8进制 是3位一组（2³&#x3D;8），不足三位前面补0，转换8进制后结果：22<br>010 010<br>421 421<br>二进制位的0不用看，所以转为8进制是22</p></li><li><p>转16进制 是4位一组（2ⁿ4&#x3D;16），不足前面补0，转换16进制后结果：12，反之16转二进制这是12可以拆分为1和2,1前面不足补充0则为0001，2位0010，二进制结果为10010</p></li></ol><p>0001 0010<br>8421 8421<br>和转8进制一样只看2进制上1对应的数字，结果为12</p><ol start="3"><li>二进制转10进制，反之10进制转二进制就是分解18&#x3D;16+2，所以二进制结果10010</li></ol><p>0×2º+1×2¹+0×2²+0×2³+1×2ⁿ4&#x3D;18</p><h2 id="十进制转换"><a href="#十进制转换" class="headerlink" title="十进制转换"></a>十进制转换</h2><ol><li>转2进制，例如25转二进制<br>二进制结果从下往上：11001，11001转10进制则是从个位数开2的n次(n从0开始) 1×2º+0×2¹+0×2²+1×2³+1×2ⁿ4&#x3D;25<br><img src="/images/2023060116271702.png" alt="2023060116271702.png"></li><li>十进制转8进制，结果是31，反过来转换1×8º+3×8¹&#x3D;25<br><img src="/images/2023060116271703.png" alt="2023060116271703.png"></li><li>十进制转换16进制，结果是19，反过来转换 9×16º+1×16¹&#x3D;25<br><img src="/images/2023060116271704.png" alt="2023060116271704.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proc c++ vs设置</title>
      <link href="/c-c/proc-c-vs-she-zhi/"/>
      <url>/c-c/proc-c-vs-she-zhi/</url>
      
        <content type="html"><![CDATA[<ol><li>在pc文件上右键，项类型中选择自定生成工具，点击应用才能看见自定义生成工具<br><img src="/images/2023053113280801.png" alt="2023053113280801.png"></li><li>命令行和输出中中配置，proc是oracle的执行程序在（client_1\BIN）目录下<br><img src="/images/2023053113280802.png" alt="2023053113280802.png"><br><img src="/images/2023053113280803.png" alt="2023053113280803.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boost编译</title>
      <link href="/c-c/boost-bian-yi/"/>
      <url>/c-c/boost-bian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>VS2022社区版<br><a href="https://jfrog-prod-usw2-shared-oregon-main.s3.amazonaws.com/aol-boostorg/filestore/eb/ebe3ae43e9bab987aa2c56bf158968676b56f0a0?X-Artifactory-username=anonymous&X-Artifactory-repoType=local&X-Artifactory-repositoryKey=main&X-Artifactory-packageType=generic&X-Artifactory-artifactPath=release/1.82.0/source/boost_1_82_0.zip&X-Artifactory-projectKey=default&x-jf-traceId=dfb4a8183a8df825&response-content-disposition=attachment;filename=%22boost_1_82_0.zip%22&response-content-type=application/zip&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFwaCXVzLXdlc3QtMiJHMEUCIQCsP5pWAI1qKcWMSaSdiukkap13MnFqnXi4RHslZyrsxwIgKboWg/2JzdDCBgV/q0SjDoIodMc7bqeAAAjzuKAU/eQqhgUIVRAAGgwxNTIxNTMwNjIxNDEiDCpvUXvmMpyCkE7M7CrjBBqXsYP/zVAjU3gojx3itHfwqOsrdIPoxxLpIFMiu42mWAeHpLUL+nPBYh0XJk2I5bRxz6HsRE8Rc+beXOR9ag2Xp9MQepAcvnsjxCl9b5l5x7xD8SlOPSU/pP5aKo6bHi6ooqrSuX95EuwQCA0HRGA7beyskyKUrL9Sb9yn44c9mApo4NaLKVC9NV7Lwu9JSu80IxNewrXHmIHXHPsbG4U2dYDS0GnV/5lOL8wjDuRkgTrq72sJ5JVyFGy4xVZ8ZedKyZkH3R757emrDNlV7GHtT+9OK3IK2QDOSxEeluxC/XcvbD4JrQvWd+/7nqz+um3UfJ97OkvTUIRh7DLg9FMSQ8VHPf2o1WhAhKUMJWv+vdXYhVZjIXYIBeunRL7nIE4BKO7BAp9KmLOMxq6BF6oCHgSAT4IikidxCNwcJ8PcSGXHbdi+5U/YGoDef8RyWazcW4NxerUZ+Wu40HOVwICre11hc1yaCKF/lzeoDmfWZwP9C1KiBlh4JTs1YZ9QHHeu/sqgcGUXopg6l/Q0j7GkU+vKdrmy7f7KbRF8qSfnfNWKzOp0vhSnVehFP97uv3jNA1urUm8VNMC2K/dU4+j/WxWEZawAUt82zQdLewiVQjg6rhywG2NEPwjp8rzeYPz3ytby6U6wmJhGQtrUxkCjeayNZxDpqddsUHe2hLfE9PMzduz4EqN9jph32O50OnaZErjNEwLs5jIp1Cd4I9UC0iRMlazbg2BL6r0KZnTPCI8Z7aODBrWp3XrmFGndKbhvj+cLZq6OP307i8aHYAOksrRjEEK+x0neQz1E1L5qckt9MMer+KEGOpoBHck6TsiUZ1bpV02gof/oixKzr5NP1ozI4hkemDir1jEU6uOMNVob3Zbh1Ue1BjOTiDbonsp8sSB1WAjr9dpa6v8O67qSBQ9UH4UEv5Dt/F6O9AsRNV87rDQ/DX/+6AM/wwwuqe/KfwBNYIIpHwSI1C22oaqKqS3ddn2721xdz7NQxOxkxAhYCdX+v7eRV3FRRsAZTrzlA7ubqA==&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230418T041938Z&X-Amz-SignedHeaders=host&X-Amz-Expires=30&X-Amz-Credential=ASIASG3IHPL67TAA7E5P/20230418/us-west-2/s3/aws4_request&X-Amz-Signature=1145b5ecb90e39f010ced908a4c07eb74bf47cef0bdae9b13f483cb6492c01e4">boost1.82.0</a></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li>打开dos窗口，进入boost所在目录<br><img src="/images/2023041813370101.png" alt="2023041813370101.png"></li><li>boost_1_82_0目录下回生成b2.exe文件，直接双击运行会生成bin.v2和stage文件夹<br><img src="/images/2023041813370102.png" alt="2023041813370102.png"></li></ol><h2 id="vs配置boost"><a href="#vs配置boost" class="headerlink" title="vs配置boost"></a>vs配置boost</h2><p><img src="/images/2023041813370103.png" alt="2023041813370103.png"><br><img src="/images/2023041813370104.png" alt="2023041813370104.png"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与Spring Cloud对应关系</title>
      <link href="/java/springboot-yu-spring-cloud-dui-ying-guan-xi/"/>
      <url>/java/springboot-yu-spring-cloud-dui-ying-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>springBoot与spring cloud 版本对应关系<br><a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E#%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB">对应关系截图</a></p><p><img src="/images/2024071613531201.png" alt="20240716135301"></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/556412488">https://zhuanlan.zhihu.com/p/556412488</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL免安装oracle客户端链接oracle数据库</title>
      <link href="/tools/plsql-mian-an-zhuang-oracle-ke-hu-duan-lian-jie-oracle-shu-ju-ku/"/>
      <url>/tools/plsql-mian-an-zhuang-oracle-ke-hu-duan-lian-jie-oracle-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<ol><li>在<a href="https://www.oracle.com/cn/database/technologies/instant-client/downloads.html">oracle官网</a>下载相应的客户端</li><li>配置plsql的oracle_home和oci的路径<br><img src="/images/2023032113350501.png" alt="2023032113350501.png"></li><li>配置环境变量ORACLE_HOME和TNS_ADMIN<br><img src="/images/2023032113350502.png" alt="2023032113350502.png"><br><img src="/images/2023032113350503.png" alt="2023032113350503.png"><br>将ora文件放到network&#x2F;admin的目录中<br><img src="/images/2023032113350504.png" alt="2023032113350504.png"></li><li>重启plsql即可</li><li>常见错误<br>初始化报错，缺少visual studio 2013组件<br><img src="/images/2023032113350505.png" alt="2023032113350505.png"><br>解决办法下载vcredist然后安装<br><a href="https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170">https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑设置总结</title>
      <link href="/computer/dian-nao-she-zhi-zong-jie/"/>
      <url>/computer/dian-nao-she-zhi-zong-jie/</url>
      
        <content type="html"><![CDATA[<ol><li><p>电脑命令总结<br>任务计划 taskschd.msc<br>组件服务 dcomcnfg<br>设备管理器 devmgmt.msc<br>服务 services.msc<br>系统配置 msconfig<br>计算机管理 compmgmt.msc<br>程序管理 appwiz.cpl</p></li><li><p>win10打开ie自动跳转edge浏览器<br>win+Q键搜索<strong>internet选项</strong>，选中<strong>高级</strong>，把勾选“<strong>启用第三方浏览器扩展</strong>”去掉就不会自动跳转<br><img src="/images/2023031511000101.png" alt="2023031511000101.png"><br><img src="/images/2023031511000102.png" alt="2023031511000102.png"></p></li><li><p>window设置开机自动登陆</p><ol><li>win+R输入regedit进入注册表，HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\PasswordLess\Device，找到下面的DevicePasswordLessBuildVersion修改值为0</li><li>win+R输入netplwiz确定，去掉红色框中的对钩，点击应用会弹出窗口让输入开机密码，输入后确定，然后重启电脑就可以。<br><img src="/images/2023031511000103.png" alt="2023031511000103.png"></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装redis</title>
      <link href="/tools/linux-an-zhuang-redis/"/>
      <url>/tools/linux-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p> 先去<a href="https://redis.io/download/">官网</a>下载redis的压缩包<br><img src="/images/2023030917301301.png" alt="2023030917301301.png"></p><h3 id="redis是基于C语言编写的，需要安装gcc依赖"><a href="#redis是基于C语言编写的，需要安装gcc依赖" class="headerlink" title="redis是基于C语言编写的，需要安装gcc依赖"></a>redis是基于C语言编写的，需要安装gcc依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc tcl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译redis"><a href="#编译redis" class="headerlink" title="编译redis"></a>编译redis</h3><h4 id="在linux新建目录将redis解压"><a href="#在linux新建目录将redis解压" class="headerlink" title="在linux新建目录将redis解压"></a>在linux新建目录将redis解压</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建目录</span><span class="token function">mkdir</span> /soft/redis<span class="token comment">#解压redis</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis.x.x.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入解压后的目录</span><span class="token comment">#这样默认会安装到 /usr/local/bin中</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># prefix指定安装目录</span><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/redis <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2023030917301302.png" alt="2023030917301302.png"></p><h4 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h4><p>redis-cli：是 redis 提供的命令行客户端<br>.&#x2F;redis-cli<br>redis-server：是 redis 的服务端启动脚本<br>.&#x2F;redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<br>redis-sentinel：是 redis 的哨兵启动脚本</p><h4 id="新建启动redis脚本文件"><a href="#新建启动redis脚本文件" class="headerlink" title="新建启动redis脚本文件"></a>新建启动redis脚本文件</h4><p>新建start-redis.sh文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#set redis home</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">REDIS_HOME</span><span class="token operator">=</span>/usr/local<span class="token variable">$REDIS_HOME</span>/bin/redis-server <span class="token variable">$REDIS_HOME</span>/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋予文件执行权限(chmod a+x start-redis.sh)，直接 .&#x2F;start-redis.sh &amp;运行<br>redis.conf可以根据实际的目录去修改</p><h3 id="连接redis问题"><a href="#连接redis问题" class="headerlink" title="连接redis问题"></a>连接redis问题</h3><h4 id="查看linux防火墙状态，开启则关闭防火墙"><a href="#查看linux防火墙状态，开启则关闭防火墙" class="headerlink" title="查看linux防火墙状态，开启则关闭防火墙"></a>查看linux防火墙状态，开启则关闭防火墙</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看状态</span><span class="token function">service</span> firewalld status<span class="token comment">#关闭防火墙</span><span class="token function">service</span> firewalld stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注释掉redis配置"><a href="#注释掉redis配置" class="headerlink" title="注释掉redis配置"></a>注释掉redis配置</h4><p><img src="/images/2023030917301303.png" alt="2023030917301303.png"></p><h4 id="出现下图错误，需要修改配置protected-mode为no"><a href="#出现下图错误，需要修改配置protected-mode为no" class="headerlink" title="出现下图错误，需要修改配置protected-mode为no"></a>出现下图错误，需要修改配置protected-mode为no</h4><p><img src="/images/2023030917301304.png" alt="2023030917301304.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Virtual ssh无法连接</title>
      <link href="/tools/oracle-virtual-ssh-wu-fa-lian-jie/"/>
      <url>/tools/oracle-virtual-ssh-wu-fa-lian-jie/</url>
      
        <content type="html"><![CDATA[<ol><li>虚拟机网路设置为nat（网络地址转换）<br><img src="/images/2023030917110101.png" alt="2023030917110101.png"></li><li>设置端口转发<br><img src="/images/2023030917110102.png" alt="2023030917110102.png"></li><li>连接linux<br><img src="/images/2023030917110103.png" alt="2023030917110103.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 获取maven项目出现问题汇总</title>
      <link href="/tools/eclipse-huo-qu-maven-xiang-mu-chu-xian-wen-ti-hui-zong/"/>
      <url>/tools/eclipse-huo-qu-maven-xiang-mu-chu-xian-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<h3 id="errors-occurred-during-the-build，可以试试加上下图的配置，路径根据自己jdk安装路径去修改eclipse-ini文件"><a href="#errors-occurred-during-the-build，可以试试加上下图的配置，路径根据自己jdk安装路径去修改eclipse-ini文件" class="headerlink" title="errors occurred during the build，可以试试加上下图的配置，路径根据自己jdk安装路径去修改eclipse.ini文件"></a>errors occurred during the build，可以试试加上下图的配置，路径根据自己jdk安装路径去修改eclipse.ini文件</h3><p><img src="/images/2023030209021201.png" alt="2023030209021201.png"></p><h3 id="Maven编译是提示tools-jar-not-found"><a href="#Maven编译是提示tools-jar-not-found" class="headerlink" title="Maven编译是提示tools.jar not found"></a>Maven编译是提示tools.jar not found</h3><p>设置java的jre目录在jdk<br><img src="/images/2024030109111201.png" alt="2024030109111201.png"></p><h3 id="maven编译项目报错"><a href="#maven编译项目报错" class="headerlink" title="maven编译项目报错"></a>maven编译项目报错</h3><p>Eclipse使用maven编译项目提示 <code>Dmaven.multiModuleProjectDirectory system property is not set</code></p><ol><li>找到设置的环境变量名称(MAVEN_HOME)</li><li>在eclipse中指定maven路径<br><img src="/images/2024060610031509.png" alt="2024060610031509"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse设置背景色等</title>
      <link href="/tools/eclipse-she-zhi-bei-jing-se-deng/"/>
      <url>/tools/eclipse-she-zhi-bei-jing-se-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="设置背景色"><a href="#设置背景色" class="headerlink" title="设置背景色"></a>设置背景色</h2><ol><li>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors</li><li>选择Background color选择自定义颜色<br><img src="/images/2023022216501501.png" alt="2023022216501501.png"></li></ol><h2 id="设置编码格式General-Workspace"><a href="#设置编码格式General-Workspace" class="headerlink" title="设置编码格式General-&gt;Workspace"></a>设置编码格式General-&gt;Workspace</h2><p><img src="/images/2023022216501502.png" alt="2023022216501502.png"></p><h2 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h2><p><img src="/images/2023022216501503.png" alt="2023022216501503.png"></p><h2 id="设置maven"><a href="#设置maven" class="headerlink" title="设置maven"></a>设置maven</h2><p><img src="/images/2023022216501504.png" alt="2023022216501504.png"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>maven</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--></span><span class="token comment">&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they're all using the same Maven |                 installation). It's normally provided in |                 $&#123;maven.conf&#125;/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: $&#123;user.home&#125;/.m2/repository  &lt;localRepository>/path/to/local/repo&lt;/localRepository>  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\Java\mavenRepository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode>true&lt;/interactiveMode>  --></span>  <span class="token comment">&lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline>false&lt;/offline>  --></span>  <span class="token comment">&lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup>com.your.plugins&lt;/pluginGroup>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy>      &lt;id>optional&lt;/id>      &lt;active>true&lt;/active>      &lt;protocol>http&lt;/protocol>      &lt;username>proxyuser&lt;/username>      &lt;password>proxypass&lt;/password>      &lt;host>proxy.host.net&lt;/host>      &lt;port>80&lt;/port>      &lt;nonProxyHosts>local.net|some.host.com&lt;/nonProxyHosts>    &lt;/proxy>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the 'id' attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server>      &lt;id>deploymentRepo&lt;/id>      &lt;username>repouser&lt;/username>      &lt;password>repopwd&lt;/password>    &lt;/server>    --></span>    <span class="token comment">&lt;!-- Another sample, using keys to authenticate.    &lt;server>      &lt;id>siteServer&lt;/id>      &lt;privateKey>/path/to/private/key&lt;/privateKey>      &lt;passphrase>optional; leave empty if not used.&lt;/passphrase>    &lt;/server>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- mirror     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror>      &lt;id>mirrorId&lt;/id>      &lt;mirrorOf>repositoryId&lt;/mirrorOf>      &lt;name>Human Readable Name for this Mirror.&lt;/name>      &lt;url>http://my.repository.com/repo/path&lt;/url>    &lt;/mirror>     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus_aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;mirror>        &lt;id>alimaven&lt;/id>      &lt;mirrorOf>central&lt;/mirrorOf>      &lt;name>aliyun maven&lt;/name>      &lt;url>http://maven.aliyun.com/nexus/content/groups/public&lt;/url>    &lt;/mirror>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- profile     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/>     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id's for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile>      &lt;id>jdk-1.4&lt;/id>      &lt;activation>        &lt;jdk>1.4&lt;/jdk>      &lt;/activation>      &lt;repositories>        &lt;repository>          &lt;id>jdk14&lt;/id>          &lt;name>Repository for JDK 1.4 builds&lt;/name>          &lt;url>http://www.myhost.com/maven/jdk14&lt;/url>          &lt;layout>default&lt;/layout>          &lt;snapshotPolicy>always&lt;/snapshotPolicy>        &lt;/repository>      &lt;/repositories>    &lt;/profile>    --></span>    <span class="token comment">&lt;!--     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin>     |   &lt;groupId>org.myco.myplugins&lt;/groupId>     |   &lt;artifactId>myplugin&lt;/artifactId>     |     |   &lt;configuration>     |     &lt;tomcatLocation>$&#123;tomcatPath&#125;&lt;/tomcatLocation>     |   &lt;/configuration>     | &lt;/plugin>     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to     |       anything, you could just leave off the &lt;value/> inside the activation-property.     |    &lt;profile>      &lt;id>env-dev&lt;/id>      &lt;activation>        &lt;property>          &lt;name>target-env&lt;/name>          &lt;value>dev&lt;/value>        &lt;/property>      &lt;/activation>      &lt;properties>        &lt;tomcatPath>/path/to/tomcat/instance&lt;/tomcatPath>      &lt;/properties>    &lt;/profile>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles>    &lt;activeProfile>alwaysActiveProfile&lt;/activeProfile>    &lt;activeProfile>anotherAlwaysActiveProfile&lt;/activeProfile>  &lt;/activeProfiles>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端配置操作</title>
      <link href="/tools/qian-duan-pei-zhi-cao-zuo/"/>
      <url>/tools/qian-duan-pei-zhi-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ol><li>npm项目初始化操作<br><img src="/images/2023020816411101.png" alt="2023020816411101.png"></li></ol><p>npm init 项目初始化后会生成package.json文件，类似于java中的pom.xml文件</p><p>#按照提示输入相关信息，如果是用默认值则直接回车即可。</p><p>#name: 项目名称</p><p>#version: 项目版本号</p><p>#description: 项目描述</p><p>#keywords: {Array}关键词，便于用户搜索到我们的项目</p><p>npm init -y 直接初始化项目，不用一步一步确定</p><ol start="2"><li>npm下载js依赖<br><img src="/images/2023020816411102.png" alt="2023020816411102.png"><ol><li>npm install 依赖名称 例如：（npm install jquery）</li><li>npm install 指定依赖版本  （npm install <a href="mailto:&#x6a;&#113;&#117;&#x65;&#x72;&#x79;&#x40;&#x32;&#46;&#49;&#46;&#120;">&#x6a;&#113;&#117;&#x65;&#x72;&#x79;&#x40;&#x32;&#46;&#49;&#46;&#120;</a>）</li></ol></li></ol><p>下载npm依赖之前最好修改下npm镜像地址<br>npm官方的管理包都是从<a href="http://npmjs.com/">http://npmjs.com</a>下载，这个网站国内访问速度慢，推荐使用淘宝的npm镜像<a href="http://npm.taobao.org/">http://npm.taobao.org</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment">#查看npm配置信息</span><span class="token function">npm</span> config list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>npm install 命令使用</p><ol><li>npm 全局安装<br>全局安装的目录在 用户目录\AppData\Roaming\npm\node_modules<br>npm intall -g webpack</li><li>其他命令</li><li>根据package.json文件下载依赖<br>使用命令 npm install<br>npm安装webpack出现如下图问题<br><img src="/images/2023020816411103.png" alt="2023020816411103.png"><br>发现在之前安装的hadoop中有yarn.cmd文件发生冲突，将改文件改名或者删除都可以<br><img src="/images/2023020816411104.png" alt="2023020816411104.png"></li></ol><h2 id="Bable安装"><a href="#Bable安装" class="headerlink" title="Bable安装"></a>Bable安装</h2><ol><li>安装命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> babel-cli<span class="token comment">#查看是否安装成功</span>babel <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>初始化项目</li></ol><p>npm init -y<br>3. 创建文件，编写es6代码</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 定义数据let input &#x3D; [1, 2, 3]&#x2F;&#x2F; 将数组的每个元素 乘10input &#x3D; input.map(item &#x3D;&gt; item * 10)console.log(input)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>配置文件.babelrc</li></ol><p>配置文件是 .babelrc,放在项目的根目录，配置转码规则</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>安装转码器<br>npm install –save-dev babel-preset-es2015</li><li>转码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 转码结果写入一个文件</span><span class="token function">mkdir</span> dist<span class="token comment"># --out-file 或 -o 参数指定输出文件</span>babel src/test.js --out-file dist/test.js<span class="token comment"># 或者简写</span>babel src/test.js <span class="token parameter variable">-o</span> dist/test.js<span class="token comment"># 整个目录转码</span><span class="token function">mkdir</span> dist<span class="token comment"># --out-dir 或 -d 参数指定输出目录</span>babel src --out-dir dist<span class="token comment"># 或者简写</span>babel src <span class="token parameter variable">-d</span> dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><ol><li>全局安装<br>npm install -g webpack webpack-cli</li><li>查看安装后的版本<br>webpack -v</li><li>初始化项目<br>npm init -y</li><li>写入后代码<br>创建add.js</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">exports.add &#x3D; function (a, b) &#123;    return a + b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建main.js</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const opr&#x3D; require(&#39;.&#x2F;add&#39;);  &#x2F;&#x2F;引入add.jscommon.info( opr.add(10, 2));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>配置文件 webpack.config.js</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const path &#x3D; require(&quot;path&quot;); &#x2F;&#x2F;Node.js内置模块module.exports &#x3D; &#123;    entry: &#39;.&#x2F;src&#x2F;main.js&#39;, &#x2F;&#x2F;配置入口文件    output: &#123;        path: path.resolve(__dirname, &#39;.&#x2F;dist&#39;), &#x2F;&#x2F;输出路径，__dirname：当前文件所在路径        filename: &#39;example.js&#39; &#x2F;&#x2F;输出文件    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>执行编译命令<br>webpack   #带有警告<br>webpack –mode&#x3D;development # 无警告<br>mode 有development 和 production</li><li>css打包配置文件，在webpack.config.js中增加</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span> /\.css$/<span class="token punctuation">,</span> <span class="token comment">//打包规则引用到css结尾的文件上</span>                use<span class="token operator">:</span><span class="token punctuation">[</span>'style-loader'<span class="token punctuation">,</span>'css-loader'<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>安装css加载工具，打包方法与js相同</li></ol><p>npm install –save-dev style-loader css-loader</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 终端中运行执行js文件</title>
      <link href="/tools/vscode-zhong-duan-zhong-yun-xing-zhi-xing-js-wen-jian/"/>
      <url>/tools/vscode-zhong-duan-zhong-yun-xing-zhi-xing-js-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>问题汇总</p><p>在vscode中执行node -v没有反应或者执行js文件出现下图错误<br><img src="/images/2023020815380801.png" alt="2023020815380801.png"><br>解决办法：</p><ol><li>先关闭vscode，找到vscode的执行文件，在兼容性中勾上以管理员身份运行此程序，该问题win10出现比较多<br><img src="/images/2023020815380802.png" alt="2023020815380802.png"></li><li>如果上面操作之后，还没有出现版本号<ol><li>确定nodejs是否安装成功</li><li>使用cmd能看到版本号，确定成功了，重启下电脑</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 抽取vue的代码片段</title>
      <link href="/tools/vscode-chou-qu-vue-de-dai-ma-pian-duan/"/>
      <url>/tools/vscode-chou-qu-vue-de-dai-ma-pian-duan/</url>
      
        <content type="html"><![CDATA[<p>在vscode中文件——&gt;首选项——&gt;用户片段，输入名字按去确定，输入代码片段</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&#123;    &quot;vue htm&quot;: &#123;        &quot;scope&quot;: &quot;html&quot;,        &quot;prefix&quot;: &quot;vuehtml&quot;,        &quot;body&quot;: [            &quot;&lt;!DOCTYPE html&gt;&quot;,            &quot;&lt;html lang&#x3D;\&quot;en\&quot;&gt;&quot;,            &quot;&quot;,            &quot;&lt;head&gt;&quot;,            &quot;    &lt;meta charset&#x3D;\&quot;UTF-8\&quot;&gt;&quot;,            &quot;    &lt;meta name&#x3D;\&quot;viewport\&quot; content&#x3D;\&quot;width&#x3D;device-width, initial-scale&#x3D;1.0\&quot;&gt;&quot;,            &quot;    &lt;meta http-equiv&#x3D;\&quot;X-UA-Compatible\&quot; content&#x3D;\&quot;ie&#x3D;edge\&quot;&gt;&quot;,            &quot;    &lt;title&gt;Document&lt;&#x2F;title&gt;&quot;,            &quot;&lt;&#x2F;head&gt;&quot;,            &quot;    &lt;script type&#x3D;\&quot;text&#x2F;javascript\&quot; src&#x3D;\&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue@2.6.14&#x2F;dist&#x2F;vue.min.js\&quot;&gt;&lt;&#x2F;script&gt;&quot;,            &quot;&quot;,            &quot;&lt;body&gt;&quot;,            &quot;    &lt;div id&#x3D;\&quot;app\&quot;&gt;&quot;,            &quot;&quot;,            &quot;    &lt;&#x2F;div&gt;&quot;,            &quot;    &lt;script&gt;&quot;,            &quot;        new Vue(&#123;&quot;,            &quot;            el: &#39;#app&#39;,&quot;,            &quot;            data: &#123;&quot;,            &quot;                $1&quot;,            &quot;            &#125;&quot;,            &quot;        &#125;)&quot;,            &quot;    &lt;&#x2F;script&gt;&quot;,            &quot;&lt;&#x2F;body&gt;&quot;,            &quot;&quot;,            &quot;&lt;&#x2F;html&gt;&quot;,        ],        &quot;description&quot;: &quot;my vue template in html&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus 报MP_OPTLOCK_VERSION_ORIGINAL not found. Available parameters are错误</title>
      <link href="/java/mybatisplus-bao-mp-optlock-version-original-not-found.available-parameters-are-cuo-wu/"/>
      <url>/java/mybatisplus-bao-mp-optlock-version-original-not-found.available-parameters-are-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>配置mybatisplus乐观锁的过程</p><ol><li>在数据库表中添加version字段类型int<br><img src="/images/2023010415551501.png" alt="2023010415551501.png"></li><li>在实体类中增加version属性，属性上增加@Version注解<br><img src="/images/2023010415551502.png" alt="2023010415551502.png"></li><li>配置乐观锁插件<br>提示Parameter ‘MP_OPTLOCK_VERSION_ORIGINAL’ not found. Available parameters are [param1, et]是因为mybatisplus版本的原因， 新的版本这样配置相当于没有生效，老本的是OptimisticLockerInterceptor已经过时了</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Configurationpublic class MyBatisConfig &#123;    &#x2F;&#x2F;乐观锁插件    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor()&#123;        MybatisPlusInterceptor interceptor &#x3D;new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());        return interceptor;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2023010415551503.png" alt="2023010415551503.png"></p><p>参考：<a href="https://baomidou.com/pages/0d93c0/#_1-%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6">https://baomidou.com/pages/0d93c0/#_1-%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6</a></p><p><img src="/images/2023010415551504.png" alt="2023010415551504.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中安装elasticsarch 等镜像</title>
      <link href="/tools/docker-zhong-an-zhuang-elasticsarch-deng-jing-xiang/"/>
      <url>/tools/docker-zhong-an-zhuang-elasticsarch-deng-jing-xiang/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在<a href="https://hub.docker.com/">dockerhub</a>中查找镜像</p></li><li><p>查看镜像下的说明，如下图标识成功</p><ol><li>安装elasticsearch<br>运行命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> myes01 <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms256m -Xmx256m"</span> <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> elasticsearch:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> ES_JAVA_OPTS&#x3D;”-Xms256m -Xmx256m”表示限制初始化内存占用大小<br> –name 容器启动后的名称<br> -d     后台运行<br> -p ip1：ip2 映射端口号 ip1 主机端口 ip2 docker容器内部端口。<br> 注意：<br> 启动失败可以设置max_map_count、nofile<br> vi &#x2F;etc&#x2F;security&#x2F;limits.conf<br> #新增如下内容在limits.conf文件中<br> * soft nofile 200000<br> * hard nofile 200000</p><p> vi &#x2F;etc&#x2F;sysctl.conf<br> 添加参数:新增如下内容在sysctl.conf文件中，当前用户拥有的内存权限大小<br> vm.max_map_count&#x3D;262144<br> 重启生效:让系统控制权限配置生效<br> sysctl -p<br> 或者 sysctl -w vm.max_map_count&#x3D;262144 之后 sysctl -p<br> <img src="/images/2022122610551501.png" alt="2022122610551501.png"><br>2. 安装mysql<br>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql01 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-d</span> mysql:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在docker中启动mysql后执行命令可以登录mysql数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mysql 是docker容器中的name具体根据自定的name输入</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>安装rabbitmq，选择带management的有管理界面<br><img src="/images/2022122610551502.png" alt="2022122610551502.png"><br>运行命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">--name</span> myrabbitmq rabbitmq:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>端口15672是访问管理界面的端口号，地址是 ip：15672</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins安装和自动化部署</title>
      <link href="/tools/jenkins-an-zhuang-he-zi-dong-hua-bu-shu/"/>
      <url>/tools/jenkins-an-zhuang-he-zi-dong-hua-bu-shu/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Jenkins安装机器安装要求可以参考官网 <a href="https://www.jenkins.io/">https://www.jenkins.io</a><br><img src="/images/2022110714041401.png" alt="2022110714041401.png"></p></li><li><p>下载jenkins的war包上传到linux上部署<br><img src="/images/2022110714041402.png" alt="2022110714041402.png"></p></li><li><p>安装jdk、git、maven</p><ol><li>安装jdk<br>搜索可以的jdk包并安装</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> jdkyum <span class="token function">install</span> java-1.8.0-openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>安装git</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>在maven官网下载的安装包<br>解压maven包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> maven包名 <span class="token function">mv</span> 解压maven包名 /usr/local/maven 使用 /usr/local/maven/bin/mvn 验证是否成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/images/2022110714041403.png" alt="2022110714041403.png"><br> 然后在Global Tool configuration配置maven<br> <img src="/images/2022110714041404.png" alt="2022110714041404.png"></p></li><li><p>使用ip+8080访问jenkins<br>访问不了，可以查看防火墙是否开启，关闭防火墙</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status firewalldsystemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>新建Item并配置<br><img src="/images/2022110714041405.png" alt="2022110714041405.png"><br>jenkins构建编译出现下图报错需要安装java jdk<br><img src="/images/2022110714041406.png" alt="2022110714041406.png"></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> java-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装publisher over ssh插件后在Configure System配置测试服务器，测试服务器需要安装jdk<br><img src="/images/2022110714041407.png" alt="2022110714041407.png"><br>在项目构建完成后设置传送到测试服务器并启动<br><img src="/images/2022110714041407.png" alt="2022110714041408.png"><br>jenkins发布后传输到测试服务器并自动运行程序，清理之前的程序<br><img src="/images/2022110714041409.png" alt="2022110714041409.png"><br> shell脚本</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除数据文件</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> first<span class="token assign-left variable">appname</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token comment">#输入的参数</span><span class="token builtin class-name">echo</span> <span class="token string">"arg:<span class="token variable">$appname</span>"</span><span class="token comment">#获取正在运行jar包的pid</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> $appname <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'java -jar'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;printf $2&#125;'</span><span class="token variable">`</span></span><span class="token comment">#输出pid</span><span class="token builtin class-name">echo</span> <span class="token variable">$pid</span><span class="token comment">#判断pid是否为空，为空则不处理，不为空则kill</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$pid</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">then</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> not started"</span>                <span class="token builtin class-name">exit</span> <span class="token number">0</span>        <span class="token keyword">else</span>                <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$pid</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> is stopping ..."</span><span class="token keyword">fi</span><span class="token assign-left variable">checkpid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-w</span> $pid <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$checkpid</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">then</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appanme</span> pid: <span class="token variable">$pid</span> kill fail"</span>        <span class="token keyword">else</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> pid: <span class="token variable">$pid</span> is killed"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： <strong>shell脚本中定义变量时，&#x3D;周围不能存在空格，否则会报错</strong></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 创建dblink</title>
      <link href="/mysql-sql-oracle/oracle-chuang-jian-dblink/"/>
      <url>/mysql-sql-oracle/oracle-chuang-jian-dblink/</url>
      
        <content type="html"><![CDATA[<ol><li>检查该用户是否拥有创建dblink权限</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from user_sys_privs a where a.privilege like upper(&#39;%DATABASE LINK%&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2022102810501501.png" alt="2022102810501501.png"></p><ol start="2"><li>用户没有dblink权限，则需要赋权限</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">grant public database link to username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>创建dblink，dblink_name可以随便写</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE database link dblink_name CONNECT TO userName IDENTIFIED BY password USING &#39;(DESCRIPTION&#x3D;    (ADDRESS_LIST&#x3D;         (ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;ip地址)(PORT&#x3D;1521))     )     (CONNECT_DATA&#x3D;         (SERVICE_NAME&#x3D;数据库实例名)     )  )&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>不需要dblink可以删除</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">drop public database link dblink_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接问题总结</title>
      <link href="/mysql-sql-oracle/mysql-lian-jie-wen-ti-zong-jie/"/>
      <url>/mysql-sql-oracle/mysql-lian-jie-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>使用DBeaver连接mysql数据提示public key retrieval is not allowed<br>修改DBeaver的驱动属性中的allowPublicKeyRetrieval<br><img src="/images/2022102413211101.png" alt="2022102413211101.png"></p></li><li><p>Access denied for user ‘root‘@’10.0.2.2’ (using password: YES)<br>该问题是没有开通权限导致的</p></li></ul><ol><li>登录mysql数据库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输入命令之后再输入密码</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>开通权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全部开放 password 替换为密码</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'password'</span> WITH GRANT OPTION<span class="token punctuation">;</span><span class="token comment"># 指定ip开放</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'192.168.2.10'</span> IDENTIFIED BY <span class="token string">'password'</span> WITH GRANT OPTION<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>刷新权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>重启mysql</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net stop mysqlnet start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.</li></ul><ul><li>修改mysql配置(vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf)</li></ul><p>修改bind-address为0.0.0.0<br><img src="/images/2024092910080101.png" alt="2024092910080101"></p><ul><li>查看本文上面的开通权限</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接提示 public key retrieval is not allowed</title>
      <link href="/mysql-sql-oracle/mysql-lian-jie-ti-shi-public-key-retrieval-is-not-allowed/"/>
      <url>/mysql-sql-oracle/mysql-lian-jie-ti-shi-public-key-retrieval-is-not-allowed/</url>
      
        <content type="html"><![CDATA[<p>使用DBeaver连接mysql数据提示public key retrieval is not allowed<br>修改DBeaver的驱动属性中的allowPublicKeyRetrieval<br><img src="/images/2022102413211101.png" alt="2022102413211101.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse 安装sts插件</title>
      <link href="/java/eclipse-an-zhuang-sts-cha-jian/"/>
      <url>/java/eclipse-an-zhuang-sts-cha-jian/</url>
      
        <content type="html"><![CDATA[<ol><li>在线安装<br><img src="/images/2022101114531301.png" alt="2022101114531301.png"><br><a href="http://download.springsource.com/release/TOOLS/update/e4.16/">http://download.springsource.com/release/TOOLS/update/e4.16/</a><ol><li>查看eclise版本，把对应的版本修改下</li><li>点击help-install new software，输入name和url，勾选要安装的选项，记得取消自动更新选项<br><img src="/images/2022101114531302.png" alt="2022101114531302.png"></li></ol></li><li>离线安装<br><a href="https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3">sts</a><br>和在线安装差不多，选择对应的版本安装</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10安装环回适配器</title>
      <link href="/computer/win10-an-zhuang-huan-hui-gua-pei-qi/"/>
      <url>/computer/win10-an-zhuang-huan-hui-gua-pei-qi/</url>
      
        <content type="html"><![CDATA[<ol><li><p>以管理员方式运行dos窗口</p></li><li><p>输入hdwwiz命令回车<br><img src="/images/2022100914100101.png" alt="2022100914100101.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle统计表空间语句</title>
      <link href="/mysql-sql-oracle/oracle-tong-ji-biao-kong-jian-yu-ju/"/>
      <url>/mysql-sql-oracle/oracle-tong-ji-biao-kong-jian-yu-ju/</url>
      
        <content type="html"><![CDATA[<ol><li>统计单个表所占空间<br>使用dba_segments或user_segments都可以</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">   select segment_name,round(sum(BYTES)&#x2F;1024&#x2F;1024&#x2F;1024,2) GB  from user_segmentswhere partition_name like &#39;DWB_PSUSCPN%&#39;group by segment_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查看oracle空间</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT a.tablespace_name 表空间名,round(a.bytes&#x2F;1024&#x2F;1024&#x2F;1024,2) 总空间,round(b.bytes&#x2F;1024&#x2F;1024&#x2F;1024,2) 使用空间,round(c.bytes&#x2F;1024&#x2F;1024&#x2F;1024,2) 空闲空间,d.maxbytes 最大空间,round((b.bytes * 100) &#x2F; a.bytes,2) &quot;% USED &quot;,round((c.bytes * 100) &#x2F; a.bytes,2) &quot;% FREE &quot;FROM sys.sm$ts_avail a, sys.sm$ts_used b, sys.sm$ts_free c,(SELECT tablespace_name,round(SUM(maxbytes) &#x2F; 1024 &#x2F; 1024 &#x2F; 1024, 2) maxbytes FROM dba_data_files GROUP BY tablespace_name) dWHERE a.tablespace_name &#x3D; b.tablespace_nameAND a.tablespace_name &#x3D; c.tablespace_nameAND a.tablespace_name &#x3D; d.tablespace_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截取指定错误信息长度</title>
      <link href="/java/jie-qu-zhi-ding-cuo-wu-xin-xi-chang-du/"/>
      <url>/java/jie-qu-zhi-ding-cuo-wu-xin-xi-chang-du/</url>
      
        <content type="html"><![CDATA[<p>截取指定长度错误信息</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;** * 截取消息长度 *  * @param errorMsg 消息 * @param interceptLength 截取长度 * @return String *&#x2F;private String getMessage(String errorMsg, int interceptLength) &#123;    if (StringUtils.isBlank(errorMsg)) &#123;        return &quot;&quot;;    &#125;    int minLength &#x3D; Math.min(interceptLength, errorMsg.getBytes(StandardCharsets.UTF_8).length);    int byteLength &#x3D; 0;    String subStr &#x3D; &quot;&quot;;    do &#123;        subStr &#x3D; errorMsg.substring(0, minLength--);        byteLength &#x3D; subStr.getBytes(StandardCharsets.UTF_8).length;    &#125; while (byteLength &gt; interceptLength);    return subStr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11离线安装netframework3</title>
      <link href="/tools/win11-chi-xian-an-zhuang-netframework3/"/>
      <url>/tools/win11-chi-xian-an-zhuang-netframework3/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://pan.baidu.com/s/1eAM8YGcTH3SMoDiV3L-2ww?pwd=p4dw">下载cab包</a></li><li>以管理员方式运行dos，dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:netfx3 &#x2F;Source:D:\sources\sxs (D:\sources\sxs这里根据自己电脑情况建立文件夹)</li><li>在设置-&gt;应用中打开可勾选功能<br><img src="/images/2022072014590901.png" alt="2022072014590901.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TortoiseGit切换分支提示pull requires the selected local branch to be the current branch</title>
      <link href="/tools/tortoisegit-qie-huan-fen-zhi-ti-shi-pull-requires-the-selected-local-branch-to-be-the-current-branch/"/>
      <url>/tools/tortoisegit-qie-huan-fen-zhi-ti-shi-pull-requires-the-selected-local-branch-to-be-the-current-branch/</url>
      
        <content type="html"><![CDATA[<p>切换分支提示pull requires the selected local branch to be the current branch<br><img src="/images/2022072014471701.png" alt="2022072014471701.png"><br>解决办法，安装高版本的TortoiseGit就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis QueryWrapper 简单用法</title>
      <link href="/java/mybatis-querywrapper-jian-dan-yong-fa/"/>
      <url>/java/mybatis-querywrapper-jian-dan-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>sql 语句</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from data_log where status is null and ((ind is null and data_type&#x3D;&#39;A&#39;) or (ind is not null and data_type&#x3D;&#39;B&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>翻译java代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">QueryWrapper&lt;T&gt; qw &#x3D;new QueryWrapper&lt;&gt;();qw.isNull(&quot;status&quot;);qw.and(a-&gt;a.isNull(&quot;ind&quot;).eq(&quot;data_type&quot;,&quot;A&quot;)            .or(b-&gt;b.isNotNull(&quot;ind&quot;).eq(&quot;data_type&quot;,&quot;B&quot;)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 替换背景图片提示文件夹拒绝访问</title>
      <link href="/computer/win10-ti-huan-bei-jing-tu-pian-ti-shi-wen-jian-jia-ju-jue-fang-wen/"/>
      <url>/computer/win10-ti-huan-bei-jing-tu-pian-ti-shi-wen-jian-jia-ju-jue-fang-wen/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2022071817051501.png" alt="2022071817051501.png"></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins建立一个指定的分支</title>
      <link href="/tools/jenkins-jian-li-yi-ge-zhi-ding-de-fen-zhi/"/>
      <url>/tools/jenkins-jian-li-yi-ge-zhi-ding-de-fen-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2022042710531301.png" alt="2022042710531301.png"><br><img src="/images/2022042710531302.png" alt="2022042710531302.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Profile多环境支持</title>
      <link href="/java/springboot-profile-duo-huan-jing-zhi-chi/"/>
      <url>/java/springboot-profile-duo-huan-jing-zhi-chi/</url>
      
        <content type="html"><![CDATA[<p>多profiles文件使用spring.profiles.active&#x3D;dev没有生效，需要在pom.xml文件中增加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- profile多环境支持需要配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicaiton.properties，需要切换环境只需要在application.properties中修改spring.profiles.active&#x3D;dev或者prod</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server.port=8089spring.profiles.active=dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>application-dev.properties</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server.port=8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>application-prod.properties</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server.port=8082<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yaml文件配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev    <span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8085</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>yaml文件和properties文件只能存在一种，使用yaml文件需要把properties文件里的内容全部注释掉。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman Cloud not get response</title>
      <link href="/tools/postman-cloud-not-get-response/"/>
      <url>/tools/postman-cloud-not-get-response/</url>
      
        <content type="html"><![CDATA[<p>使用post输入https请求是提示cloud not get response<br><img src="/images/2022041114501501.png" alt="2022041114501501.png"><br>只需要在设置中关闭ssl certificate verification<br><img src="/images/2022041114501502.png" alt="2022041114501502.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装出现的问题</title>
      <link href="/tools/docker-an-zhuang-chu-xian-de-wen-ti/"/>
      <url>/tools/docker-an-zhuang-chu-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<ol><li>.bash:docker.exe Common not found<br><img src="/images/2022032914521201.png" alt="2022032914521201.png"><br>在系统环境变量中配置一下docker的安装路径</li><li>Looks like something went wrong in step ´Looking for vboxmanage.exe´<br>需要一步步排除docker安装目录下的文件（start.sh）中的系统环境变量读取是否正确<br>配置环境变量还是读取不了，直接赋值具体路径（D:\Program Files\Docker Toolbox\docker-machine.exe)<br><img src="/images/2022032914521202.png" alt="2022032914521202.png"><br>同样的方法排除变量VBOX_MSI_INSTALL_PATH<br><img src="/images/2022032914521203.png" alt="2022032914521203.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java SimpleDateFormat用法</title>
      <link href="/java/java-simpledateformat-yong-fa/"/>
      <url>/java/java-simpledateformat-yong-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;        &#x2F;**         *SimpleDateFormat函数语法：          G 年代标志符          y 年          M 月          d 日          h 时 在上午或下午 (1~12)          H 时 在一天中 (0~23)          m 分          s 秒          S 毫秒          E 星期          D 一年中的第几天          F 一月中第几个星期几          w 一年中第几个星期          W 一月中第几个星期          a 上午 &#x2F; 下午 标记符          k 时 在一天中 (1~24)          K 时 在上午或下午 (0~11)          z 时区         *&#x2F;        SimpleDateFormat simple&#x3D;new SimpleDateFormat(                &quot;yyyyMMdd HH:mm:ss 一年中的第 D 天 第w个星期 一月中第W个星期 E 在一天中k时 z时区&quot;);        System.out.println(simple.format(new Date()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2022022316061601.png" alt="2022022316061601.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 操作表</title>
      <link href="/mysql-sql-oracle/oracle-cao-zuo-biao/"/>
      <url>/mysql-sql-oracle/oracle-cao-zuo-biao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">--查询回收站中的表select * from recyclebin;--清空回收站中的表purge recyclebin;--清空回收站中指定的表purge table &amp;ORIGINAL_NAME;--恢复回收站中的指定表FLASHBACK TABLE TABLE_NAME TO BEFORE DROP;--恢复回收站中的指定表并重命名flashback table TABLE_NAME to before drop rename to new_table_name;--一次性彻底删除表drop table TABLE_NAME purge;--删除带约束的表drop table TABLE_NAME cascade constraints;--删除表，并未真正删除，只是把表放入回收站中drop table TABLE_NAME;--查询表名select * from user_tables;--批量生成删除语句select &#39;drop table &#39;|| table_name || &#39; cascade constraints;&#39; from user_tables; --判断是否存在表再删除declare  n_count number;begin  select count(1)    into n_count    from user_tables   where table_name &#x3D; &#39;TABLE_NAME&#39;;  if n_count &gt; 0 then    execute immediate &#39;drop table TABLE_NAMEcascade constraints&#39;;  end if;end;--查询表最后的更新时间（last_ddl_time）SELECT object_name,object_type,created,last_ddl_time FROM USER_OBJECTS WHERE OBJECT_TYPE &#x3D; &#39;TABLE&#39; order by last_ddl_time desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plsql导出表结构</title>
      <link href="/mysql-sql-oracle/plsql-dao-chu-biao-jie-gou/"/>
      <url>/mysql-sql-oracle/plsql-dao-chu-biao-jie-gou/</url>
      
        <content type="html"><![CDATA[<ol><li>点击export table,选中导出的表</li><li>在where clause加上 where rownum&lt;1,控制是否导出数据<br><img src="/images/2021110316201201.png" alt="2021110316201201.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中http请求</title>
      <link href="/java/java-zhong-http-qing-qiu/"/>
      <url>/java/java-zhong-http-qing-qiu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;** * Http请求 *  * @param url         请求地址 * @param requestType 请求方式(GET,POST) * @return String *&#x2F;public static String sendRequest(String httpUrl, String requestType) &#123;    HttpURLConnection con &#x3D; null;    BufferedReader reader &#x3D; null;    StringBuilder result &#x3D; null;    InputStream stream &#x3D; null;    try &#123;        URL url &#x3D; new URL(httpUrl);        con &#x3D; (HttpURLConnection) url.openConnection();        con.setRequestMethod(requestType);        con.setRequestProperty(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;);        con.setDoOutput(true);        con.setDoInput(true);        con.setUseCaches(false);        int respon &#x3D; con.getResponseCode();        if (respon &#x3D;&#x3D; 200) &#123;            stream &#x3D; con.getInputStream();            result &#x3D; new StringBuilder();            String line;            reader &#x3D; new BufferedReader(new InputStreamReader(stream, &quot;UTF-8&quot;));            while ((line &#x3D; reader.readLine()) !&#x3D; null) &#123;                result.append(line);            &#125;            return result.toString();        &#125;    &#125; catch (Exception e) &#123;        log.error(&quot;请求异常：&quot; + e.toString());    &#125; finally &#123;        if (reader !&#x3D; null) &#123;            try &#123;                reader.close();            &#125; catch (IOException e) &#123;                log.error(&quot;关闭读取流失败：&quot; + e.toString());            &#125;        &#125;        if (stream !&#x3D; null) &#123;            try &#123;                stream.close();            &#125; catch (IOException e) &#123;                log.error(&quot;关闭流失败：&quot; + e.toString());            &#125;        &#125;        if (con !&#x3D; null) &#123;            con.disconnect();        &#125;    &#125;    return &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算两个日期相隔月份</title>
      <link href="/java/ji-suan-liang-ge-ri-qi-xiang-ge-yue-fen/"/>
      <url>/java/ji-suan-liang-ge-ri-qi-xiang-ge-yue-fen/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;** *  * 比较日期月份 * @param start 开始日期 * @param end 结束日期 * @return Integer *&#x2F;public static Integer diffMonth(Date start, Date end) &#123;    if (start &#x3D;&#x3D; null || end &#x3D;&#x3D; null) &#123;        return null;    &#125;    Calendar cStart &#x3D; Calendar.getInstance();    cStart.setTime(start);    Calendar cEnd &#x3D; Calendar.getInstance();    cEnd.setTime(end);    int month &#x3D; cEnd.get(Calendar.MONTH) - cStart.get(Calendar.MONTH);    int year &#x3D; cEnd.get(Calendar.YEAR) - cStart.get(Calendar.YEAR);    return year * 12 + month;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 日期验证和获取</title>
      <link href="/java/java-ri-qi-yan-zheng-he-huo-qu/"/>
      <url>/java/java-ri-qi-yan-zheng-he-huo-qu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;*** 日期格式 yyyyMMdd*&#x2F;private static final String DATEFORMAT &#x3D; &quot;([0-9]&#123;4&#125;)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])&quot;;&#x2F;** *  * isDate 判断是否是有效的日期 * @param date 日期字符串 * @return 是否 *&#x2F;public static boolean isDate(String date) &#123;        Pattern pattern &#x3D; Pattern.compile(DATEFORMAT);    Matcher matcher &#x3D; pattern.matcher(date);    if (matcher.matches()) &#123;        pattern &#x3D; Pattern.compile(DATE);        matcher &#x3D; pattern.matcher(date);        if (matcher.matches()) &#123;            int y &#x3D; Integer.valueOf(matcher.group(1));            int m &#x3D; Integer.valueOf(matcher.group(2));            int d &#x3D; Integer.valueOf(matcher.group(3));            if (d &gt; 28) &#123;                Calendar c &#x3D; Calendar.getInstance();                c.set(y, m - 1, 1);                &#x2F;&#x2F; 每个月的最大天数                int lastDay &#x3D; c.getActualMaximum(Calendar.DAY_OF_MONTH);                return (lastDay &gt;&#x3D; d);            &#125;        &#125;        return true;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static final String DATEFORMAT &#x3D; &quot;([0-9]&#123;4&#125;)(0[1-9]|1[012])&quot;;private static final String DATE &#x3D; &quot;(\\d&#123;4&#125;)(\\d&#123;2&#125;)&quot;; &#x2F;** * 返回月份最后一天 * * @param month  日期 yyyyMM * @param amount 增加月份 * @return String *&#x2F;public static String addMonth(String month, int amount) &#123;    Date result &#x3D; null;    Pattern pattern &#x3D; Pattern.compile(DATEFORMAT);    Matcher matcher &#x3D; pattern.matcher(month);    if (matcher.matches()) &#123;        pattern &#x3D; Pattern.compile(DATE);        matcher &#x3D; pattern.matcher(month);        if (matcher.matches()) &#123;            int y &#x3D; Integer.parseInt(matcher.group(1));            int m &#x3D; Integer.parseInt(matcher.group(2));            Calendar c &#x3D; Calendar.getInstance();            c.set(y, (m - 1 + amount), 1);            &#x2F;&#x2F; 每个月的最大天数            int lastDay &#x3D; c.getActualMaximum(Calendar.DAY_OF_MONTH);            c.set(Calendar.DAY_OF_MONTH, lastDay);            result &#x3D; c.getTime();        &#125;    &#125;    SimpleDateFormat sdfDay &#x3D; new SimpleDateFormat(&quot;yyyyMMdd&quot;);    return sdfDay.format(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis注解调用存储过程获取返回值</title>
      <link href="/java/mybatis-zhu-jie-diao-yong-cun-chu-guo-cheng-huo-qu-fan-hui-zhi/"/>
      <url>/java/mybatis-zhu-jie-diao-yong-cun-chu-guo-cheng-huo-qu-fan-hui-zhi/</url>
      
        <content type="html"><![CDATA[<ol><li>准备存储过程</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create or replace procedure P_Test(vc_num1 in varchar2,                                   vc_num2 in varchar2,                                   vc_sql out varchar2) isbegin  &#x2F;&#x2F;具体操作end P_Test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在dao文件配置<br>statementType &#x3D; StatementType.CALLABLE 表示存储过程</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Select(&quot;&#123;call P_Test(#&#123;map.num1,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,&quot;            + &quot;#&#123;map.num2,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,&quot;            + &quot;#&#123;map.sql,jdbcType&#x3D;VARCHAR,mode&#x3D;OUT&#125;)&#125;&quot;)    @Result(column &#x3D; &quot;sql&quot;, property &#x3D; &quot;sql&quot;, jdbcType &#x3D; JdbcType.VARCHAR)    @Options(statementType &#x3D; StatementType.CALLABLE)    void getSqlBycondition(@Param(&quot;map&quot;) Map&lt;String, Object&gt; map);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在service中调用<br>在通过map.get(“sql”)获取返回值</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String sql &#x3D; &quot;&quot;;        Map&lt;String, Object&gt; mapSql &#x3D; new HashMap&lt;&gt;();        mapSql.put(&quot;num1&quot;, &quot;1&quot;);        mapSql.put(&quot;num2&quot;, &quot;2&quot;);        mapSql.put(&quot;sql&quot;, sql);        middleService.getSqlBycondition(mapSql);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DBeaver连接oracle声明变量使用</title>
      <link href="/mysql-sql-oracle/dbeaver-lian-jie-oracle-sheng-ming-bian-liang-shi-yong/"/>
      <url>/mysql-sql-oracle/dbeaver-lian-jie-oracle-sheng-ming-bian-liang-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>在<strong>plsql</strong>中使用&amp;接收用户输入的值</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select &amp;变量名 from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<strong>dbeaver</strong>可以定义变量实现<br>声明变量</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">@set 变量名（startdate）&#x3D;&#39;2021-08-02&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用变量</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select $&#123;startdate&#125; from dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle复制表中数据</title>
      <link href="/mysql-sql-oracle/oracle-fu-zhi-biao-zhong-shu-ju/"/>
      <url>/mysql-sql-oracle/oracle-fu-zhi-biao-zhong-shu-ju/</url>
      
        <content type="html"><![CDATA[<ol><li>insert into select<br>这种方式需要table1表和对象的字段都必须存在</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">insert into table1 (字段1,字段2) select  字段1,字段2 from table2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>create table as select<br>这种方式是根据table2的表结构创建table1</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create table table1 as select * from table2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置</title>
      <link href="/tools/git-pei-zhi/"/>
      <url>/tools/git-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>git config –global user.name “用户名”<br>git config –global user.email “用户邮箱”</p><h4 id="git配置修改"><a href="#git配置修改" class="headerlink" title="git配置修改"></a>git配置修改</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>git config –global –replace-all user.name “用户名”<br>git config –global –replace-all user.email “用户邮箱”</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>找到本地配置文件，路径：C:\Users{user 电脑登陆账号}.gitconfig，直接修改文件中name或email<br>如有name或email有重复值，需删除多个重复值，保留一个值即可。<br><img src="/images/2021061115381801.png" alt="2021061115381801.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc连接oracle方法</title>
      <link href="/mysql-sql-oracle/jdbc-lian-jie-oracle-fang-fa/"/>
      <url>/mysql-sql-oracle/jdbc-lian-jie-oracle-fang-fa/</url>
      
        <content type="html"><![CDATA[<ol><li><p>servicename连接方式<br>jdbc:oracle:thin:@&#x2F;&#x2F;<host>:<port>&#x2F;<service_name></p></li><li><p>sid连接方式</p><ol><li>jdbc:oracle:thin:@<host>:<port>&#x2F;<SID></li><li>jdbc:oracle:thin:@<host>:<port>:<SID></li></ol></li></ol><p>转载：<a href="https://www.cnblogs.com/zhuitian/p/11530694.html">https://www.cnblogs.com/zhuitian/p/11530694.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 查看所有表结构</title>
      <link href="/mysql-sql-oracle/oracle-cha-kan-suo-you-biao-jie-gou/"/>
      <url>/mysql-sql-oracle/oracle-cha-kan-suo-you-biao-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="查看所有表结构"><a href="#查看所有表结构" class="headerlink" title="查看所有表结构"></a>查看所有表结构</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">with temp as (select table_name name,         &#39;表&#39; type,         comments comments,         &#39;&#39; tablename,         0 num,         &#39;&#39; nullable    from user_tab_comments   where table_type &#x3D; &#39;TABLE&#39;  union all  select &#39;      &#39; || a.column_name name,         a.data_type || &#39;(&#39; || a.data_length || &#39;)&#39; type,         b.comments comments,         a.table_name tablename,         column_id num,         nullable nullable    from user_tab_columns a, user_col_comments b   where a.table_name &#x3D; b.table_name     and a.column_name &#x3D; b.column_name)select name, type, nullable, comments  from temp t start with tablename is nullconnect by prior t.name &#x3D; t.tablename order siblings by num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看指定表列名和描述"><a href="#查看指定表列名和描述" class="headerlink" title="查看指定表列名和描述"></a>查看指定表列名和描述</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select column_name,comments from user_col_comments where table_name&#x3D;&#39;tablename&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看表最后更新时间"><a href="#查看表最后更新时间" class="headerlink" title="查看表最后更新时间"></a>查看表最后更新时间</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT object_name,object_type,created,last_ddl_time FROM USER_OBJECTS WHERE OBJECT_TYPE &#x3D; &#39;TABLE&#39; order by last_ddl_time desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转载：<a href="https://www.cnblogs.com/fighter7/p/12667366.html">https://www.cnblogs.com/fighter7/p/12667366.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Orale 多列转多行</title>
      <link href="/mysql-sql-oracle/orale-duo-lie-zhuan-duo-xing/"/>
      <url>/mysql-sql-oracle/orale-duo-lie-zhuan-duo-xing/</url>
      
        <content type="html"><![CDATA[<ol><li>创建表</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create table TESTDATE(  calc_type NVARCHAR2(10),  calc_no   NVARCHAR2(10),  calc_name NVARCHAR2(10),  calc_aca1 NVARCHAR2(10),  calc_aca2 NVARCHAR2(10),  calc_acn1 NVARCHAR2(10),  calc_acn2 NVARCHAR2(10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入数据 如下图<br><img src="/images/2021052817261601.png" alt="2021052817261601.png"></li><li>sql语句</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select calc_type,calc_no,calc_name,aca,acn,newnamefrom testdate unpivot ((aca,acn) --多列合并一列别名 for newname in (   (calc_aca1,calc_acn1),(calc_aca2,calc_acn2) --实际数据库的列明   ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2021052817261602.png" alt="2021052817261602.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 离线安装CAB和MSU格式不定</title>
      <link href="/computer/win10-chi-xian-an-zhuang-cab-he-msu-ge-shi-bu-ding/"/>
      <url>/computer/win10-chi-xian-an-zhuang-cab-he-msu-ge-shi-bu-ding/</url>
      
        <content type="html"><![CDATA[<ol><li><p>CAB包安装<br>以管理员方式运行dos<br>dism &#x2F;online &#x2F;add-package &#x2F;packagepath:”文件路径”<br>文件路径例如 D:\test\test.cab</p></li><li><p>MUS安装<br>wusa.exe “文件路径” &#x2F;quiet &#x2F;norestart<br>文件路径例如 D:\test\test.mus</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle 查看表是否被锁定</title>
      <link href="/mysql-sql-oracle/oracle-cha-kan-biao-shi-fou-bei-suo-ding/"/>
      <url>/mysql-sql-oracle/oracle-cha-kan-biao-shi-fou-bei-suo-ding/</url>
      
        <content type="html"><![CDATA[<ol><li>查看哪个表被锁</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select b.owner,b.object_name,a.session_id,a.locked_modefrom v$locked_object a,dba_objects bwhere b.object_id &#x3D; a.object_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查看哪个进程锁的</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select b.username,b.sid,b.serial#,logon_timefrom v$locked_object a,v$session bwhere a.session_id &#x3D; b.sid order by b.logon_time;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>杀掉进程</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter system kill session &#39;sid,serial#&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse this compilation unit is not on the build path</title>
      <link href="/java/eclipse-this-compilation-unit-is-not-on-the-build-path/"/>
      <url>/java/eclipse-this-compilation-unit-is-not-on-the-build-path/</url>
      
        <content type="html"><![CDATA[<p>先看看项目中的project文件中的javabuilder和javanature有没有，没有就添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 检查有没有javabuilder,没有的话添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buildSpec</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buildCommand</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.eclipse.jdt.core.javabuilder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buildCommand</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buildSpec</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>natures</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 检查有没有javanature,没有的话添加--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nature</span><span class="token punctuation">></span></span>org.eclipse.jdt.core.javanature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nature</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nature</span><span class="token punctuation">></span></span>org.apache.ivyde.eclipse.ivynature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nature</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>natures</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 中javac命令无法执行</title>
      <link href="/java/win10-zhong-javac-ming-ling-wu-fa-zhi-xing/"/>
      <url>/java/win10-zhong-javac-ming-ling-wu-fa-zhi-xing/</url>
      
        <content type="html"><![CDATA[<p>在win10系统中配置Java jdk环境后，javac无法执行<br>网上没有找到解决办法<br>在系统变量中配置无用，在用户变量中也配置了一遍居然可以了<br><img src="/images/2021021914051501.png" alt="2021021914051501.png"><br><img src="/images/2021021914051502.png" alt="2021021914051502.png"><br><img src="/images/2021021914051503.png" alt="2021021914051503.png"></p><p>win10以下可以参考 <a href="https://www.cnblogs.com/ZJ199012/p/4033353.html">Java Jdk 环境配置和测</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/tools/docker-an-zhuang/"/>
      <url>/tools/docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="win10以下用户推荐下载Docker-Toolbox"><a href="#win10以下用户推荐下载Docker-Toolbox" class="headerlink" title="win10以下用户推荐下载Docker Toolbox"></a>win10以下用户推荐下载Docker Toolbox</h2><ol><li><p>安装docker Toolbox<br>　　安装完成后建议断开本地网络</p></li><li><p>指定docker machine的位置<br>　　a.在Windows的系统环境添加MACHINE_STORAGE_PATH ，指向虚拟机的位置（例如F:\vm\docker）<br>　　b.复制安装目录下boot2docker.iso到虚拟机的位置同级目录cache中,没有该文件夹自己创建（F:\vm\docker\cache）</p></li><li><p>修改start.sh脚本<br>　　找到”${DOCKER_MACHINE}” create</p><p>   –engine-registry-mirror 指定加速地址<br>   –virtualbox-disk-size 指定虚机空间大小，单位M</p><p>  调整为<br>  “${DOCKER_MACHINE}” create ‘–engine-registry-mirror&#x3D;<a href="https://8080ka5p.mirror.aliyuncs.com/">https://8080ka5p.mirror.aliyuncs.com</a>‘ -d virtualbox –virtualbox-disk-size “100000” $PROXY_ENV “${VM}”</p></li></ol><p><img src="/images/2021021907371701.png" alt="2021021907371701.png"><br>4. 运行Docker QuickStart安装即可</p><ol start="5"><li>镜像加速</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine <span class="token function">ssh</span> default<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|EXTRA_ARGS='|EXTRA_ARGS='--registry-mirror=https://registry.docker-cn.com |g"</span> /var/lib/boot2docker/profile<span class="token builtin class-name">exit</span>docker-machine restart default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>建议虚机分配至少2cpu、2G内存，在Oracle VM VirtualBox关闭虚机后调整<br><img src="/images/2021021907371702.png" alt="2021021907371702.png"></li><li>验证命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>docker-machine <span class="token function">ssh</span> default<span class="token comment">#当类似</span><span class="token function">docker</span> search mysql<span class="token comment">#该命令无法执行使，需要调整一下dns</span><span class="token function">sudo</span> <span class="token function">vi</span> /etc/resolv.confnameserver  <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h2><ol><li><p>对于Windows 10 Home的用户</p><ol><li>安装要求</li></ol></li></ol><p>Windows 10 Home machines must meet the following requirements to install Docker Desktop:</p><p>Install Windows 10, version 1903 or higher.<br>Enable the WSL 2 feature on Windows. For detailed instructions, refer to the <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Microsoft documentation</a>.<br>The following hardware prerequisites are required to successfully run WSL 2 on Windows 10 Home:<br>    64 bit processor with <a href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation">Second Level Address Translation (SLAT)</a><br>    4GB system RAM<br>    BIOS-level hardware virtualization support must be enabled in the BIOS settings. For more information, see <a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled">Virtualization</a>.</p><p>Download and install the <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">Linux kernel update package</a>.<br>   2. 客户端安装<br><a href="https://docs.docker.com/docker-for-windows/install-windows-home/">https://docs.docker.com/docker-for-windows/install-windows-home/</a><br>   3. 镜像加速<br>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写下方加速器地址：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>对于Windows 10 专业版以上的用户</p><ol><li>安装要求</li></ol></li></ol><p>Windows 10 64-bit: Pro, Enterprise, or Education (Build 15063 or later).<br>Hyper-V and Containers Windows features must be enabled.<br>   2. 客户端安装<br><a href="https://docs.docker.com/docker-for-windows/install/">https://docs.docker.com/docker-for-windows/install/</a><br>   3. 镜像加速<br>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写下方加速器地址：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong><br>Docker for Windows 和 Docker Toolbox互不兼容，如果同时安装两者的话，需要使用hyperv的参数启动。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine create --engine-registry-mirror<span class="token operator">=</span>https://8080ka5p.mirror.aliyuncs.com <span class="token parameter variable">-d</span> hyperv default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Docker for Windows 有两种运行模式，一种运行Windows相关容器，一种运行传统的Linux容器。同一时间只能选择一种模式运行。<br>运行出现如下错误：<br>Caused by: com.github.dockerjava.api.exception.InternalServerErrorException: {“message”:”driver failed programming external connectivity on endpoint objective_wright (709b2f91ae761c8cfb7c2c1caa99360265da62eb7c20f82de40d4038545c6dfb): Bind for 0.0.0.0:6379 failed: port is already allocated”}<br>解决办法：<br>打开oracle虚拟机，重启虚拟机</p><p>参考文档<br><a href="https://docs.docker.com/engine/reference/commandline/cli/?spm=5176.8351553.0.0.c4471991tz57hG">Docker 命令参考文档</a><br><a href="https://docs.docker.com/engine/reference/builder/?spm=5176.8351553.0.0.c4471991tz57hG">Dockerfile 镜像构建参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git统计代码量和常用命令</title>
      <link href="/tools/git-tong-ji-dai-ma-liang-he-chang-yong-ming-ling/"/>
      <url>/tools/git-tong-ji-dai-ma-liang-he-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Git统计代码量"><a href="#Git统计代码量" class="headerlink" title="Git统计代码量"></a>Git统计代码量</h2><ol><li>根据用户名时间段统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"username"</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2018</span>-01-01 <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token number">2019</span>-12-31 <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看提交者排名前N位</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k1</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>提交数统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>根据用户名统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"username"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>根据时间段统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2020</span>-01-01 <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token number">2021</span>-02-04 <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>统计每个人的增删行数</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"<span class="token variable">$name</span><span class="token entity" title="\t">\t</span>"</span><span class="token punctuation">;</span> <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span>"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s ", add, subs, loc &#125;'</span> -<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>贡献者统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>根据时间段排除文件夹统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2021</span>-01-28 <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token number">2021</span>-02-03 <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> -- <span class="token builtin class-name">.</span> <span class="token string">":(exclude)src/test"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– . “:(exclude)folderName”  folderName指src&#x2F;test文件夹，这里是相对路径<br>– . “:(exclude)folderName1”  “:(exclude)folderName2”  排除多个文件夹<br>– . “:(exclude)folderName”也 可以用在其他的统计中；–前只能有一个空格，有多个空格识别不了</p><ol start="9"><li>根据指定文件夹统计</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2021</span>-06-24 <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token number">2021</span>-06-30 <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">grep</span> src/test <span class="token operator">|</span> <span class="token function">gawk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src&#x2F;test 指定src的test目录下<br>注意：增删也算统计的代码量就修改loc +&#x3D; $1 + $2</p><ol start="10"><li>代码存量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> *<span class="token punctuation">\</span>.java  <span class="token parameter variable">-exec</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;s+=$1&#125;END&#123;print s&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="11"><li>统计每个人的增删行数到csv</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log  <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"<span class="token variable">$name</span>,<span class="token entity" title="\t">\t</span>"</span><span class="token punctuation">;</span> <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span>"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat:  <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2024</span>-05-01 <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token number">2024</span>-05-31 <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "%s, %s\n",  add,subs &#125;'</span> -<span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">>></span> gitCode.csv<span class="token punctuation">;</span><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s,removed lines %s, total lines: %s\n",  add,subs, loc &#125;'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><ol><li>克隆一个git项目到本地,将git项目拉取到本地</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone  项目地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看文件状态,列出当前目录没有被git管理，以及被修改过还未提交的文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>将我们提交的文件添加到索引库中（添加到缓冲区），*可以是路径也可以是.符号，git add . 代表将当前目录下的所有文件都添加到索引库中,如果指定路径则代表将制定路径的文件添加到索引库中。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>将文件推送到本地仓库中,-m 后可以填写此次提交的备注如git commit -m “提交删除功能代码”，那么在git项目中的提交记录里面就能看见你的推送备注。</li></ol><p>这一步仅仅是放在缓冲区中，还未真正提交代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"备注"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>这一步才是推送代码推送时需要跟分支名，表示需要将代码推送至某个分支.如git push origin dev表示你要讲代码推送至dev分支</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>更新当前分支的代码,获取最新的代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>从当前分支切换至另一个分支</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>当前分支合并其他分支</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>提交被忽略的文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> src/XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>删除本地分支</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名<span class="token comment"># 强制删除</span><span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="11"><li>版本回退</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#之前提交的修改都不会存在</span><span class="token comment"># 回退上一个版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> head^<span class="token comment"># 回退到提交id版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token function">head</span> 提交id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果抛出如下异常</p><p>The following paths are ignored by one of your .gitignore files:src&#x2F;XXX<br>Use -f if you really want to add them.<br>提示提交的时候，需要加 –f。使用如下命令即可解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-f</span> src/XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 <a href="https://git-scm.com/docs/git-log">https://git-scm.com/docs/git-log</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找ORA-04021等待超时</title>
      <link href="/mysql-sql-oracle/cha-zhao-ora-04021-deng-dai-chao-shi/"/>
      <url>/mysql-sql-oracle/cha-zhao-ora-04021-deng-dai-chao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步-知道sid"><a href="#第一步-知道sid" class="headerlink" title="第一步:知道sid"></a>第一步:知道sid</h2><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select session_id sid, owner, name, type,mode_held held, mode_requested requestfrom dba_ddl_lockswhere name &#x3D; &#39;&amp;存储过程名称&#39;  ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二步：通过sid查找"><a href="#第二步：通过sid查找" class="headerlink" title="第二步：通过sid查找"></a>第二步：通过sid查找</h2><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select b.sid,b.serial#,b.machine,b.terminal,b.program,b.process,b.status from v$lock a , v$session bwhere a.SID &#x3D; b.SID and b.sid in (178,152);select b.serial#,a.* from v$session_wait a,v$session b where a.sid &#x3D; b.sid and b.sid in (178,152);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过电脑名称查找"><a href="#通过电脑名称查找" class="headerlink" title="通过电脑名称查找"></a>通过电脑名称查找</h2><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select V$SESSION.*  from v$lock,       V$SESSION where v$lock.sid &#x3D; v$session.sid   and V$SESSION.MACHINE &#x3D; &#39;电脑名称&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中时间戳和日期相互转换</title>
      <link href="/c-winform/csharp-zhong-shi-jian-chuo-he-ri-qi-xiang-hu-zhuan-huan/"/>
      <url>/c-winform/csharp-zhong-shi-jian-chuo-he-ri-qi-xiang-hu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<ol><li>日期转换时间戳</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 将日期转换为时间戳&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;time&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;private long ConverDateTimeToLong(DateTime time)&#123;    DateTime startTime &#x3D; TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0));    long t &#x3D; (time.Ticks - startTime.Ticks) &#x2F; 10000;   &#x2F;&#x2F;除10000调整为13位          return t;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>时间戳转换日期</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 将时间戳转换为日期&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;timespan&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;private DateTime ConvertToDateTime(long timespan)&#123;     DateTime dtStart &#x3D; TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1));    string l &#x3D; timespan + &quot;0000&quot;;    TimeSpan ts &#x3D; new TimeSpan(long.Parse(l));    return dtStart.Add(ts);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记事本中快速查看数字对应的ASCII</title>
      <link href="/tools/ji-shi-ben-zhong-kuai-su-cha-kan-shu-zi-dui-ying-de-ascii/"/>
      <url>/tools/ji-shi-ben-zhong-kuai-su-cha-kan-shu-zi-dui-ying-de-ascii/</url>
      
        <content type="html"><![CDATA[<p>先按键盘上的 ATL键，输入数字，然后放开ALT键<br><img src="/images/2020080715301301.gif" alt="2020080715301301.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dos命令调用FlashFXP上传文件</title>
      <link href="/c-winform/dos-ming-ling-diao-yong-flashfxp-shang-chuan-wen-jian/"/>
      <url>/c-winform/dos-ming-ling-diao-yong-flashfxp-shang-chuan-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>DOS命令调用FlashFXP上传文件到FTP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flashfxp.exe <span class="token parameter variable">-upload</span> ftp://user:password@192.168.2.1:21 <span class="token parameter variable">-localpath</span><span class="token operator">=</span>本地路径  <span class="token parameter variable">-remotepath</span><span class="token operator">=</span>FTP路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程FTP路径根目录直接用  “&#x2F;”  表示</p><p>本地路径如果想上传文件夹下的所有文件，必须在文件夹后加“&#x2F;”；例如：D:\test\表示把test文件夹上所有文件都上传</p><p>下载文件到本地使用<br>flashfxp.exe -download<br>flashfxp上传文件完成后自动关闭</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flashfxp.exe <span class="token parameter variable">-min</span> <span class="token parameter variable">-c2</span> <span class="token parameter variable">-upload</span> ftp://user:password@192.168.2.1:21 <span class="token parameter variable">-localpath</span><span class="token operator">=</span>本地路径  <span class="token parameter variable">-remotepath</span><span class="token operator">=</span>FTP路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-c2表示上传完成后自动关闭flashfxp，还有其他参数看下图<br><img src="/images/2020070215481801.png" alt="2020070215481801.png"></p><p>-min 最小化<br>-max 最大化<br>-tray 启动flashfxp在系统托盘</p><p>参考 <a href="https://www.flashfxp.com/forum/flashfxp/frequently-asked-questions-faq-/14748-command-line-switches.html">https://www.flashfxp.com/forum/flashfxp/frequently-asked-questions-faq-/14748-command-line-switches.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl 上传文件</title>
      <link href="/tools/curl-shang-chuan-wen-jian/"/>
      <url>/tools/curl-shang-chuan-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>cur下载地址<br><a href="https://curl.haxx.se/download.html">curl</a></p><p>curl FTP 上传下载文件</p><ol><li>查看文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> ftp://192.168.2.10/test/ <span class="token parameter variable">-u</span> user:passwd    <span class="token comment">#查看test文件夹下的文件（文件夹后必须加 /）,查看更目录直接写ftp://192.168.2.10/</span><span class="token function">curl</span> ftp://192.168.2.10/test/test.txt <span class="token parameter variable">-u</span> user:passwd    <span class="token comment">#在dos界面查看test.txt文件内容</span><span class="token function">curl</span> ftp://user:passwd@192.168.2.10/test/    <span class="token comment">#查看test文件夹下内容的简洁写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>上传文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#上传test.txt文件并以test.txt保存在ftp上</span><span class="token function">curl</span> ftp://user:passwd@192.168.2.10/test/ <span class="token parameter variable">-u</span> user:passwd <span class="token parameter variable">-T</span> <span class="token string">"test.txt"</span><span class="token comment">#上传test.txt文件并以test_new.txt保存在ftp上</span><span class="token function">curl</span> ftp://user:passwd@192.168.2.10/test/test_new.txt <span class="token parameter variable">-u</span> user:passwd <span class="token parameter variable">-T</span> <span class="token string">"test.txt"</span><span class="token comment">#上传多个文件</span><span class="token function">curl</span> ftp://user:passwd@192.168.2.10/test/ <span class="token parameter variable">-u</span> user:passwd <span class="token parameter variable">-T</span> <span class="token string">"&#123;test1.txt,test2.txt&#125;"</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>下载文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载 FTP 指定文件 /test/test.txt, 以原文件名命名保存到当前目录</span><span class="token function">curl</span> ftp://user:passwd@192.168.2.10/test/test.txt <span class="token parameter variable">-u</span> user:passwd <span class="token parameter variable">-O</span><span class="token comment">#下载 FTP 指定文件 /test/test.txt, 以 test_new.txt 命名保存</span><span class="token function">curl</span> ftp://192.168.2.10/test/test.txt <span class="token parameter variable">-u</span> user:passwd <span class="token parameter variable">-o</span> test_new.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传中文名称文件有问题，还没有找到解决的办法</p><p>参考 <a href="https://curl.haxx.se/docs/manual.html">https://curl.haxx.se/docs/manual.html</a></p><p><a href="https://blog.csdn.net/wulong710/article/details/53127606">https://blog.csdn.net/wulong710/article/details/53127606</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理文件中等待几秒</title>
      <link href="/c-winform/pi-chu-li-wen-jian-zhong-deng-dai-ji-miao/"/>
      <url>/c-winform/pi-chu-li-wen-jian-zhong-deng-dai-ji-miao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token builtin class-name">echo</span> 开始延时5秒<span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token number">127.0</span>.0.<span class="token operator"><span class="token file-descriptor important">1</span>></span>nul<span class="token builtin class-name">echo</span> 这句话延时了5秒pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载 C# 连接oracle 10g 出现ora-1017用户名/口令无效; 登录被拒绝</title>
      <link href="/mysql-sql-oracle/zhuan-zai-csharp-lian-jie-oracle-10g-chu-xian-ora-1017-yong-hu-ming-kou-ling-wu-xiao-deng-lu-bei-ju-jue/"/>
      <url>/mysql-sql-oracle/zhuan-zai-csharp-lian-jie-oracle-10g-chu-xian-ora-1017-yong-hu-ming-kou-ling-wu-xiao-deng-lu-bei-ju-jue/</url>
      
        <content type="html"><![CDATA[<h2 id="出现症状"><a href="#出现症状" class="headerlink" title="出现症状"></a>出现症状</h2><ol><li>使用sqlplus连接正常</li><li>C#使用10g的ODP.NET连接时，报上面的错误</li></ol><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>Oracle11G之前密码是不区分大小写的，从11G开始默认密码区分大小写</li><li>使用10G的ODP.NET时，会自动把密码转换成大写</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>给连接字符串中密码使用加上引号，这样密码就不会转成大写了</li><li>换成11G客户端</li><li>修改数据库，禁用大小写敏感模式：ALTER SYSTEM SET SEC_CASE_SENSITIVE_LOGON &#x3D; FALSE</li></ol><p>因连接字符串是写在XML文件里，在XML文件里“引号”是需要转义的，现提供XML中常用的转义字符：</p><table><thead><tr><th>转义符</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&amp;lt;</td><td>&lt;</td><td>小于号</td></tr><tr><td>&amp;gt;</td><td>&gt;</td><td>大于号</td></tr><tr><td>&amp;amp;</td><td>&amp;</td><td>和</td></tr><tr><td>&amp;apos;</td><td>‘</td><td>单引号</td></tr><tr><td>&amp;quot;</td><td>“</td><td>双引号</td></tr></tbody></table><p>转载 <a href="https://www.cnblogs.com/tommyli/archive/2013/10/15/3370569.html">https://www.cnblogs.com/tommyli/archive/2013/10/15/3370569.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载 Oracle字符的拼接和拆解</title>
      <link href="/mysql-sql-oracle/zhuan-zai-oracle-zi-fu-de-pin-jie-he-chai-jie/"/>
      <url>/mysql-sql-oracle/zhuan-zai-oracle-zi-fu-de-pin-jie-he-chai-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串拼接方法-LISTAGG"><a href="#字符串拼接方法-LISTAGG" class="headerlink" title="字符串拼接方法 LISTAGG"></a>字符串拼接方法 LISTAGG</h3><ol><li>基本语法：listagg(‘p1’, ‘p2’) within group(order by ‘p3’) over (partition by ‘p4’)<ol><li>p1: 需要进行拼接的字段，一般是分组条件查询后存在多个值的字段</li><li>p2: 指定什么符号作为连接分隔符，例如：’,’</li><li>p3: 这个参数是被按照用来对 p1 指定的字段进行排序的</li><li>p4: 这个参数类似于 group by 条件语句。group by 语句需要将查询的参数都置于其后这样会显得累赘，而 partition 则不会存在这个问题，相对要灵活一点。</li></ol></li><li>完整用例</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">&#x2F;&#x2F; 简单的用法，将查询出的所有ID字段进行拼接，这也是我最常用的SELECT LISTAGG(A.ACPE_ID, &#39;,&#39;) WITHIN GROUP(ORDER BY A.ACPE_ID)  FROM BD_CRM_ACPE A;&#x2F;&#x2F; 加上 GROUP BY 语句后的使用方式SELECT A.ACPE_TYPE,       LISTAGG(A.ACPE_ID, &#39;,&#39;) WITHIN GROUP(ORDER BY A.ACPE_ID)  FROM BD_CRM_ACPE A GROUP BY A.ACPE_TYPE;&#x2F;&#x2F; 这种查询会得到与上一种相同的结果SELECT A.ACPE_TYPE,       LISTAGG(A.ACPE_ID, &#39;,&#39;) WITHIN GROUP(ORDER BY A.ACPE_ID) OVER(PARTITION BY A.ACPE_TYPE)  FROM BD_CRM_ACPE A;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的拆解方法"><a href="#字符串的拆解方法" class="headerlink" title="字符串的拆解方法"></a>字符串的拆解方法</h3><p>要完成字符串按照特定符号拆解成多行的效果，需要了解 oracle 内置的三种方法的用法。当然如果觉得麻烦也可以自己创建一个函数来处理。</p><ol><li>正则匹配截取字符串函数 REGEXP_SUBSTR<br>语法：regexp_substr( str, regexp, start-pos, choice)<br>str：要被处理的字符串<br>regexp：正则表达式匹配模式<br>start-pos：从第几个字符开始匹配，默认为1<br>choice：返回第几个匹配到的数据</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT REGEXP_SUBSTR(&#39;1,2,3&#39;, &#39;[^,]+&#39;, 1, 1) FROM DUAL;--返回：1--正则：&#39;[^,]+&#39; 表示匹配一个或多个不包含 &#39;,&#39; 的字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>条件语句 CONNECT BY<br>该语句一般是用于递归查询数据库中存在上下级关系的数据，但这里只是用它来获取一个连续的值，用于REGEXP_SUBSTR函数的choice参数</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">&#x2F;&#x2F; 这样会返回三个值：1、2、3SELECT ROWNUM FROM DUAL CONNECT BY ROWNUM &lt;&#x3D; 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>正则匹配字符替换函数 REGEXP_REPLACE<br>因为这里的需求是分割字符串，现在需要知道分割后到底有几个值，这个值需要赋值给 CONNECT BY 语句后。<br>所以现在的解决思路是先得到原来字符串的长度，然后将符号替换掉，再求出长度，然后之前的长度减去现在去掉符号后的长度然后加一就是我们需要的值了。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">length(&#39;1,2,3&#39;) &#x3D; 5length(&#39;123&#39;) &#x3D; 3length(&#39;1,2,3&#39;) - length(&#39;123&#39;) + 1 &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>语法：REGEXP_REPLACE(source_char, pattern , replace_string)<br>source_char：需要替换字符的原始字符串<br>pattern：正则匹配需要被替换的字符<br>replace_string：替换后的字符</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT REGEXP_REPLACE(&#39;1,2,3&#39;, &#39;,&#39; ,&#39;&#39;) FROM DUAL;--最终得到：&#39;123&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方法整合"><a href="#方法整合" class="headerlink" title="方法整合"></a>方法整合</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"> &#x2F;&#x2F; 最终的完整语句，你只需要将 &#39;1,2,3&#39; 替换成需要拆分的表字段 SELECT REGEXP_SUBSTR(&#39;1,2,3&#39;, &#39;[^,]+&#39;, 1, ROWNUM) FROM DUALCONNECT BY ROWNUM &lt;&#x3D; LENGTH(&#39;1,2,3&#39;) - LENGTH(REGEXP_REPLACE(&#39;1,2,3&#39;, &#39;,&#39; ,&#39;&#39;)) + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转载 <a href="https://www.jianshu.com/p/3ccc45ea3953">https://www.jianshu.com/p/3ccc45ea3953</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm控件置顶或置底</title>
      <link href="/c-winform/winform-kong-jian-zhi-ding-huo-zhi-di/"/>
      <url>/c-winform/winform-kong-jian-zhi-ding-huo-zhi-di/</url>
      
        <content type="html"><![CDATA[<p>BringToFront 方法将控件置于所有控件的顶层</p><p>SendToBack 方法将控件置于所有控件的底层</p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows批处理FTP上传文件</title>
      <link href="/other/windows-pi-chu-li-ftp-shang-chuan-wen-jian/"/>
      <url>/other/windows-pi-chu-li-ftp-shang-chuan-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="ftp上传文件批处理文件"><a href="#ftp上传文件批处理文件" class="headerlink" title="ftp上传文件批处理文件"></a>ftp上传文件批处理文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token builtin class-name">echo</span> <span class="token function">open</span> ip地址 端口（默认端口21） <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> user 用户名 密码<span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> put 文件（例如 D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>test.txt） <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> bye <span class="token operator">>></span> temp.txt<span class="token function">ftp</span> <span class="token parameter variable">-n</span> -s:<span class="token string">"temp.txt"</span>del /q 文件（例如 D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>test.txt）del /q temp.txtpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ftp-批量上传文件批处理文件"><a href="#ftp-批量上传文件批处理文件" class="headerlink" title="ftp 批量上传文件批处理文件"></a>ftp 批量上传文件批处理文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token builtin class-name">echo</span> <span class="token function">open</span> ip地址 端口（默认端口21） <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> user 用户名 密码<span class="token operator">>></span> temp.txt::lcd切换本地路径<span class="token builtin class-name">echo</span> lcd %~dp0<span class="token punctuation">\</span>Data <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> prompt<span class="token operator">>></span>temp.txt<span class="token builtin class-name">echo</span> bin <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> mput *.* <span class="token operator">>></span> temp.txt<span class="token builtin class-name">echo</span> bye <span class="token operator">>></span> temp.txt<span class="token function">ftp</span> <span class="token parameter variable">-n</span> -s:<span class="token string">"temp.txt"</span>del /q temp.txtpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ftp命令行参考"><a href="#ftp命令行参考" class="headerlink" title="ftp命令行参考"></a>ftp命令行参考</h2><p>FTP命令是Internet用户使用最频繁的命令之一，不论是在DOS还是UNIX操作系统下使用FTP，都会遇到大量的FTP内部命令。熟悉并灵活应用FTP的内部命令，可以大大方便使用者，并收到事半功倍之效。　　<br>FTP的命令行格式为：ftp-v-d-i-n-g[主机名]，其中　<br>-v显示远程服务器的所有响应信息；<br>-i限制ftp的自动登录，即不使用；<br>-netrc文件；　　<br>-d使用调试方式；<br>-g取消全局文件名。<br>ftp使用的内部命令如下(中括号表示可选项): </p><ol><li>![cmd[args]]：在本地机中执行交互shell，exit回到ftp环境，如：!ls*.zip。 </li><li>$macro-ame[args]：执行宏定义macro-name。 </li><li>account[password]：提供登录远程系统成功后访问系统资源所需的补充口令。 </li><li>appendlocal-file[remote-file]：将本地文件追加到远程系统主机，若未指定远程系统文件名，则使用本地文件名。 </li><li>ascii：使用ascii类型传输方式。 </li><li>bell：每个命令执行完毕后计算机响铃一次。 </li><li>bin：使用二进制文件传输方式。 </li><li>bye：退出ftp会话过程。　　 </li><li>case：在使用mget时，将远程主机文件名中的大写转为小写字母。 </li><li>cdremote-dir：进入远程主机目录。　　 </li><li>cdup：进入远程主机目录的父目录。 </li><li>chmodmodefile-name：将远程主机文件file-name的存取方式设置为mode，如：chmod777a.out。 </li><li>close：中断与远程服务器的ftp会话(与open对应)。 </li><li>cr：使用asscii方式传输文件时，将回车换行转换为回行。　</li><li>deleteremote-file：删除远程主机文件。 </li><li>debug[debug-value]：设置调试方式，显示发送至远程主机的每条命令，如：debup3，若设为0，表示取消debug。 </li><li>dir[remote-dir][local-file]：显示远程主机目录，并将结果存入本地文件local-file。　 </li><li>disconnection：同close。 </li><li>formformat：将文件传输方式设置为format，缺省为file方式。 </li><li>getremote-file[local-file]：将远程主机的文件remote-file传至本地硬盘的local-file。 </li><li>glob：设置mdelete，mget，mput的文件名扩展，缺省时不扩展文件名，同命令行的-g参数。 </li><li>hash：每传输1024字节，显示一个hash符号(#)。 </li><li>help[cmd]：显示ftp内部命令cmd的帮助信息，如：helpget。 </li><li>idle[seconds]：将远程服务器的休眠计时器设为[seconds]秒。 </li><li>image：设置二进制传输方式(同binary)。 </li><li>lcd[dir]：将本地工作目录切换至dir。 </li><li>ls[remote-dir][local-file]：显示远程目录remote-dir，并存入本地文件local-file。 </li><li>macdefmacro-name：定义一个宏，遇到macdef下的空行时，宏定义结束。 </li><li>mdelete[remote-file]：删除远程主机文件。 </li><li>mdirremote-fileslocal-file：与dir类似，但可指定多个远程文件，如：mdir*.o.*.zipoutfile。 </li><li>mgetremote-files：传输多个远程文件。 </li><li>mkdirdir-name：在远程主机中建一目录。 </li><li>mlsremote-filelocal-file：同nlist，但可指定多个文件名。 </li><li>mode[modename]：将文件传输方式设置为modename，缺省为stream方式。 </li><li>modtimefile-name：显示远程主机文件的最后修改时间。 </li><li>mputlocal-file：将多个文件传输至远程主机。　　</li><li>newerfile-name：如果远程机中file-name的修改时间比本地硬盘同名文件的时间更近，则重传该文件。 </li><li>nlist[remote-dir][local-file]：显示远程主机目录的文件清单，并存入本地硬盘的local-file。 </li><li>nmap[inpatternoutpattern]：设置文件名映射机制，使得文件传输时，文件中的某些字符相互转换，如：nmap$1.$2.$3[$1，$2].[$2，$3]，则传输文件a1.a2.a3时，文件名变为a1，a2。该命令特别适用于远程主机为非UNIX机的情况。 </li><li>ntrans[inchars[outchars]]：设置文件名字符的翻译机制，如ntrans1R，则文件名LLL将变为RRR。 </li><li>openhost[port]：建立指定ftp服务器连接，可指定连接端口。 </li><li>passive：进入被动传输方式。 </li><li>prompt：设置多个文件传输时的交互提示。　　 </li><li>proxyftp-cmd：在次要控制连接中，执行一条ftp命令，该命令允许连接两个ftp服务器，以在两个服务器间传输文件。第一条ftp命令必须为open，以首先建立两个服务器间的连接。　　 </li><li>putlocal-file[remote-file]：将本地文件local-file传送至远程主机。 </li><li>pwd：显示远程主机的当前工作目录。 </li><li>quit：同bye，退出ftp会话。 </li><li>quotearg1，arg2…：将参数逐字发至远程ftp服务器，如：quotesyst。 </li><li>recvremote-file[local-file]：同get。　　 </li><li>regetremote-file[local-file]：类似于get，但若local-file存在，则从上次传输中断处续传。 </li><li>rhelp[cmd-name]：请求获得远程主机的帮助。 </li><li>rstatus[file-name]：若未指定文件名，则显示远程主机的状态，否则显示文件状态。 </li><li>rename[from][to]：更改远程主机文件名。 </li><li>reset：清除回答队列。 </li><li>restartmarker：从指定的标志marker处，重新开始get或put，如：restart130。 </li><li>rmdirdir-name：删除远程主机目录。 </li><li>runique：设置文件名唯一性存储。　　 </li><li>sendlocal-file[remote-file]：同put。　　 </li><li>sendport：设置PORT命令的使用。　　 </li><li>sitearg1，arg2…：将参数作为SITE命令逐字发送至远程ftp主机。 </li><li>sizefile-name：显示远程主机文件大小，如：siteidle7200。 </li><li>status：显示当前ftp状态。 </li><li>struct[struct-name]：将文件传输结构设置为struct-name，缺省时使用stream结构。 </li><li>sunique：将远程主机文件名存储设置为唯一(与runique对应)。 </li><li>system：显示远程主机的操作系统类型。　　 </li><li>tenex：将文件传输类型设置为TENEX机的所需的类型。 </li><li>tick：设置传输时的字节计数器。 </li><li>trace：设置包跟踪。　　 </li><li>type[type-name]：设置文件传输类型为type-name，缺省为ascii，如：typebinary，设置二进制传输方式。 </li><li>umask[newmask]：将远程服务器的缺省umask设置为newmask，如：umask3。 　 </li><li>useruser-name[password][account]：向远程主机表明自己的身份，需要口令时，必须输入口令，如：anyone@email。　　 </li><li>verbose：同命令行的-v参数，即设置详尽报告方式，ftp服务器的所有响应都将显示给用户，缺省为on。　　 </li><li>?[cmd]：同help。</li></ol><p>参考：<a href="https://www.jb51.net/article/85324.htm">https://www.jb51.net/article/85324.htm</a><br><a href="https://www.cnblogs.com/dotnetsong/archive/2008/08/05/1261543.html">https://www.cnblogs.com/dotnetsong/archive/2008/08/05/1261543.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在右键菜单中添加Git Bash Here</title>
      <link href="/tools/zai-you-jian-cai-dan-zhong-tian-jia-git-bash-here/"/>
      <url>/tools/zai-you-jian-cai-dan-zhong-tian-jia-git-bash-here/</url>
      
        <content type="html"><![CDATA[<p>安装Git后一般右键菜单都会有“Git Bash Here”选项，如果没有可以按下面方法添加</p><ol><li>进入注册表找到HKEY_CLASSES_ROOT\Directory\Background\shell，没有shell就新建一个<br><img src="/images/2020052713501001.png" alt="2020052713501001.png"></li><li>在shell下面右键新建项名称为Git，在其默认值中输入“Git Bash Here”<br><img src="/images/2020052713501002.png" alt="2020052713501002.png"></li><li>在Git下新建项，名称为command，在其默认值中输入“ Git安装目录\git-bash.exe”<br><img src="/images/2020052713501003.png" alt="2020052713501003.png"></li><li>在Git Bash Here 设置一个icon图标，在Git下右键新建字符串Icon输入值 “Git安装目录\mingw64\share\git\git-for-windows.ico”<br><img src="/images/2020052713501004.png" alt="2020052713501004.png"></li></ol><p>参考 <a href="https://blog.csdn.net/johnnymartin/article/details/80802425">https://blog.csdn.net/johnnymartin/article/details/80802425</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载 sqludr2导出数据</title>
      <link href="/mysql-sql-oracle/zhuan-zai-sqludr2-dao-chu-shu-ju/"/>
      <url>/mysql-sql-oracle/zhuan-zai-sqludr2-dao-chu-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="sqluldr2下载与安装"><a href="#sqluldr2下载与安装" class="headerlink" title="sqluldr2下载与安装"></a>sqluldr2下载与安装</h2><ol><li>软件下载地址：</li></ol><p>百度云链接：<a href="https://pan.baidu.com/s/1V8eqyyYsbJqQSD-Sn-RQGg">https://pan.baidu.com/s/1V8eqyyYsbJqQSD-Sn-RQGg</a><br>提取码：6mdn</p><p>下载完后并解压会生成4个文件</p><p><strong>sqluldr2.exe</strong>                用于32位windows平台；<br><strong>sqluldr2_linux32_10204.bin</strong>  适用于linux32位操作系统；<br><strong>sqluldr2_linux64_10204.bin</strong>  适用于linux64位操作系统；<br><strong>sqluldr264.exe</strong>              用于64位windows平台。</p><ol start="2"><li>直接在cmd上运行（我的sqluldr文件放在F盘里，我电脑是64位，所以使用sqluldr264）</li></ol><h2 id="sqluldr2-导出"><a href="#sqluldr2-导出" class="headerlink" title="sqluldr2 导出"></a>sqluldr2 导出</h2><ol><li>导出命令的主要参数</li></ol><p>user&#x3D;用户名&#x2F;密码@ip地址:1521&#x2F;服务   ,如果是本地库，可以只写 用户名和密码：eg：user&#x3D;用户名&#x2F;密码</p><p>query&#x3D;”sql查询语句”</p><p>head&#x3D;yes|no  是否导出表头</p><p>file&#x3D;文件存放路径（该文件可以写很多后缀: .txt  .csv   .dmp 等等，我发现，导出.dmp文件速度快）</p><p>table&#x3D;查询的表名 有这句话，sqluldr2会自动生成一个.ctl文件，导入的时候会用到（）;</p><p>Field：分隔符，指定字段分隔符，默认为逗号； 比如：field&#x3D;#  在选择分隔符时，一定不能选择会在字段值中出现的字符组合，如常见的单词等，很多次导入时报错，回过头来找原因时，都发现是因为分隔符出现在字段值中了。</p><p>record：分隔符，指定记录分隔符，默认为回车换行，Windows下的换行；</p><p>quote：引号符，指定非数字字段前后的引号符；</p><p>charset：字符集，执行导出时的字符集，一般有UTF8、GBK等；<br>2. 常规的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqluldr264 <span class="token assign-left variable">user</span><span class="token operator">=</span>zxx/zxx123@127.0.0.1:1521/orcl <span class="token assign-left variable">query</span><span class="token operator">=</span><span class="token string">"select * from mv_xlsymx1 where ysyddm='00001H'"</span>  <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">file</span><span class="token operator">=</span>h:<span class="token punctuation">\</span>mx.csv  <span class="token assign-left variable">log</span><span class="token operator">=</span>+F:<span class="token punctuation">\</span>tem.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>可以使用sql参数</li></ol><p>可以使用sql参数代替query</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqluldr264 <span class="token assign-left variable">user</span><span class="token operator">=</span>zxx/zxx  <span class="token assign-left variable">sql</span><span class="token operator">=</span>h:<span class="token punctuation">\</span>test.sql <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">file</span><span class="token operator">=</span>h:<span class="token punctuation">\</span>mx.csv <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>test.sql是提前维护好的一个文件，文件的内容为sql语句。</p><ol><li>带有table参数的导出</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqluldr264 <span class="token assign-left variable">user</span><span class="token operator">=</span>zxx/zxx <span class="token assign-left variable">query</span><span class="token operator">=</span><span class="token string">"select * from mv_xlsymx1 where ysyddm='00001H'"</span> <span class="token assign-left variable">table</span><span class="token operator">=</span>mv_xlsymx1  <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">file</span><span class="token operator">=</span>F:<span class="token punctuation">\</span>mx.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会生成一个.ctl文件(mv_xlsymx1_sqlldr.ctl,默认生成在sqluldr文件下，我的就生成在F:\sqluldr\ mv_xlsymx1_sqlldr.ctl)<br>5. 指定.ctl文件生成的位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqluldr264 <span class="token assign-left variable">user</span><span class="token operator">=</span>zxx/zxx  <span class="token assign-left variable">query</span><span class="token operator">=</span><span class="token string">"select * from mv_xlsymx1 where ysyddm='00001H'"</span> <span class="token assign-left variable">table</span><span class="token operator">=</span>mv_xlsymx1  <span class="token assign-left variable">control</span><span class="token operator">=</span>F:<span class="token punctuation">\</span>mx.ctl <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">file</span><span class="token operator">=</span>F:<span class="token punctuation">\</span>mx.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>带有日志log参数</li></ol><p>当集成sqluldr2在脚本中时，就希望屏蔽上不输出这些信息，但又希望这些信息能保留，这时可以用“LOG”选项来指定日志文件名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqluldr264 <span class="token assign-left variable">user</span><span class="token operator">=</span>zxx/zxx <span class="token assign-left variable">query</span><span class="token operator">=</span><span class="token string">"select * from mv_xlsymx1 where ysyddm='00001H'"</span>  <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">file</span><span class="token operator">=</span>F:<span class="token punctuation">\</span>mx.csv  <span class="token assign-left variable">log</span><span class="token operator">=</span>+F:<span class="token punctuation">\</span>tmp.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：这里的log路径要写上“+”</p><p>转载：<a href="https://www.cnblogs.com/your-Name/p/10315286.html">https://www.cnblogs.com/your-Name/p/10315286.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理文件 中文乱码</title>
      <link href="/computer/pi-chu-li-wen-jian-zhong-wen-luan-ma/"/>
      <url>/computer/pi-chu-li-wen-jian-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off REM 后续命令使用的是：GBK编码chcp <span class="token number">936</span><span class="token builtin class-name">cd</span> %~dp0 <span class="token builtin class-name">set</span> <span class="token assign-left variable">fileName</span><span class="token operator">=</span>%~dp0<span class="token punctuation">\</span>testfile.csv<span class="token builtin class-name">set</span> <span class="token assign-left variable">rarName</span><span class="token operator">=</span>%~dp0<span class="token punctuation">\</span>testfile.rarsqluldr264.exe <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>test/test@oracl <span class="token assign-left variable">sql</span><span class="token operator">=</span>%~dp0<span class="token punctuation">\</span>exportsql.sql <span class="token assign-left variable">head</span><span class="token operator">=</span>yes <span class="token assign-left variable">FILE</span><span class="token operator">=</span>%fileName%D:cd/<span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>WinRARwinrar a <span class="token parameter variable">-ep1</span> -o+ <span class="token parameter variable">-inul</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-ibck</span> %rarName% %fileName%del %fileName%pause<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：批处理文件中定义变量最好不要有空格，有空个变量名也要带上空格</p><p>chcp 65001 UTF-8<br>chcp 936 GBK<br>chcp 437 美国英语</p><p>参考 <a href="http://www.360doc.com/content/19/0121/16/17585043_810413905.shtml">http://www.360doc.com/content/19/0121/16/17585043_810413905.shtml</a></p><p><a href="https://www.jianshu.com/p/6d0c5cda5d8e">https://www.jianshu.com/p/6d0c5cda5d8e</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器software_reporter_tool</title>
      <link href="/computer/gu-ge-liu-lan-qi-software-reporter-tool/"/>
      <url>/computer/gu-ge-liu-lan-qi-software-reporter-tool/</url>
      
        <content type="html"><![CDATA[<p>早上打开电脑cpu使用率很高，排序看了下什么程序占用cpu了，一看是software_reporter_tool，直接定位到目录</p><p><img src="/images/2020050717151501.png" alt="2020050717151501.png"></p><p>直接用记事本工具打开manifest.json，修改allow-reporter-logs值为false</p><p><img src="/images/2020050717151502.png" alt="2020050717151502.png"></p><p>在software_reporter_tool右键属性</p><p><img src="/images/2020050717151503.png" alt="2020050717151503.png"></p><p>在弹出的框中选择删除，然后点击应用，确定即可。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 家庭版输入gpedit.msc命令提示找不到</title>
      <link href="/computer/win10-jia-ting-ban-shu-ru-gpedit.msc-ming-ling-ti-shi-zhao-bu-dao/"/>
      <url>/computer/win10-jia-ting-ban-shu-ru-gpedit.msc-ming-ling-ti-shi-zhao-bu-dao/</url>
      
        <content type="html"><![CDATA[<p>新建一个bat文件，然后编辑输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token function">pushd</span> <span class="token string">"%~dp0"</span><span class="token function">dir</span> /b C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>servicing<span class="token punctuation">\</span>Packages<span class="token punctuation">\</span>Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum <span class="token operator">></span>List.txt<span class="token function">dir</span> /b C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>servicing<span class="token punctuation">\</span>Packages<span class="token punctuation">\</span>Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum <span class="token operator">>></span>List.txt<span class="token keyword">for</span> /f %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'findstr /i . List.txt 2^>nul'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> dism /online /norestart /add-package:<span class="token string">"C:\Windows\servicing\Packages\%%i"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该文件上右键，以管理员身份运行<br>然后在数据gpedit.msc命令运行就可以了</p><p>转载 <a href="https://blog.csdn.net/u013642500/article/details/80138799">https://blog.csdn.net/u013642500/article/details/80138799</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL查询显示乱码或者问号</title>
      <link href="/mysql-sql-oracle/plsql-cha-xun-xian-shi-luan-ma-huo-zhe-wen-hao/"/>
      <url>/mysql-sql-oracle/plsql-cha-xun-xian-shi-luan-ma-huo-zhe-wen-hao/</url>
      
        <content type="html"><![CDATA[<p>在plsql中查询数据，查询出的结果中包含中文就显示乱码</p><h2 id="使用-select-from-V-NLS-PARAMETERS查看字符集"><a href="#使用-select-from-V-NLS-PARAMETERS查看字符集" class="headerlink" title="使用 select * from V$NLS_PARAMETERS查看字符集"></a>使用 select * from V$NLS_PARAMETERS查看字符集</h2><p><img src="/images/2020011616311301.png" alt="2020011616311301.png"></p><h2 id="如果没有看注册表中的oracle是否包含-NLS-LANG并且值为-SIMPLIFIED-CHINESE-CHINA-ZHS16GBK，没有则新建配置上"><a href="#如果没有看注册表中的oracle是否包含-NLS-LANG并且值为-SIMPLIFIED-CHINESE-CHINA-ZHS16GBK，没有则新建配置上" class="headerlink" title="如果没有看注册表中的oracle是否包含 NLS_LANG并且值为 SIMPLIFIED CHINESE_CHINA.ZHS16GBK，没有则新建配置上"></a>如果没有看注册表中的oracle是否包含 NLS_LANG并且值为 SIMPLIFIED CHINESE_CHINA.ZHS16GBK，没有则新建配置上</h2><p><img src="/images/2020011616311302.png" alt="2020011616311302.png"></p><h2 id="以上配置都没有问题，就看电脑环境变量中是否存在NLS-LANG，没有则新建，然后重新打开plsql。"><a href="#以上配置都没有问题，就看电脑环境变量中是否存在NLS-LANG，没有则新建，然后重新打开plsql。" class="headerlink" title="以上配置都没有问题，就看电脑环境变量中是否存在NLS_LANG，没有则新建，然后重新打开plsql。"></a>以上配置都没有问题，就看电脑环境变量中是否存在NLS_LANG，没有则新建，然后重新打开plsql。</h2><p><img src="/images/2020011616311303.png" alt="2020011616311303.png"></p><p>转载： <a href="https://jingyan.baidu.com/article/a3aad71aa9bfefb1fa00964d.html">https://jingyan.baidu.com/article/a3aad71aa9bfefb1fa00964d.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sonar 扫描C#代码 排除文件</title>
      <link href="/c-winform/sonar-sao-miao-csharp-dai-ma-pai-chu-wen-jian/"/>
      <url>/c-winform/sonar-sao-miao-csharp-dai-ma-pai-chu-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="用管理员账户登录sonaqube配置排除选项"><a href="#用管理员账户登录sonaqube配置排除选项" class="headerlink" title="用管理员账户登录sonaqube配置排除选项"></a>用管理员账户登录sonaqube配置排除选项</h3><p>参考 <a href="https://www.jianshu.com/p/ffeb73eeccd6">https://www.jianshu.com/p/ffeb73eeccd6</a></p><h3 id="在本地的sonar-project-properties文件中配置"><a href="#在本地的sonar-project-properties文件中配置" class="headerlink" title="在本地的sonar-project.properties文件中配置"></a>在本地的sonar-project.properties文件中配置</h3><p>　　sonar.exclusions 表示不包含的项目</p><p>　　? 匹配单个字符<br>　　** 匹配0个或多个文件夹<br>　　* 匹配0个或多个字符</p><pre><code>例如排除所有的Test结尾的cs文件，多个以逗号分隔</code></pre><p>　　sonar.exclusions&#x3D; **&#x2F;*Test.cs,**&#x2F;*Dao.cs</p><pre><code>排除文件夹下所有的文件</code></pre><p>　　sonar.exclusions&#x3D;test&#x2F;entity&#x2F;*</p><pre><code>参考 &lt;https://docs.sonarqube.org/7.1/NarrowingtheFocus.html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 短日期转换为DateTime</title>
      <link href="/c-winform/csharp-duan-ri-qi-zhuan-huan-wei-datetime/"/>
      <url>/c-winform/csharp-duan-ri-qi-zhuan-huan-wei-datetime/</url>
      
        <content type="html"><![CDATA[<p>将字符串“201804”转换为DateTime</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DateTime dTime &#x3D; DateTime.ParseExact(&quot;201804&quot;, &quot;yyyyMM&quot;, CultureInfo.CurrentCulture);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 常见的日期转换</p><ol><li>Convert.ToDateTime(string date)<ol><li>date格式为 yyyy-mm-dd hh:mm:ss</li></ol></li><li>Convert.ToDateTime(string date, IFormatProvider formatter)<ol><li>formatter 指日期格式</li></ol></li><li>DateTime.Parse(dateInput)</li></ol><p>参考 <a href="http://www.bubuko.com/infodetail-3293058.html">http://www.bubuko.com/infodetail-3293058.html</a><br><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime?redirectedfrom=MSDN">https://docs.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime?redirectedfrom=MSDN</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑远程连接不上或者ip的地址一直是169.254</title>
      <link href="/computer/dian-nao-yuan-cheng-lian-jie-bu-shang-huo-zhe-ip-de-di-zhi-yi-zhi-shi-169.254/"/>
      <url>/computer/dian-nao-yuan-cheng-lian-jie-bu-shang-huo-zhe-ip-de-di-zhi-yi-zhi-shi-169.254/</url>
      
        <content type="html"><![CDATA[<p>如果出现如标题的情况后按常规的方法解决不了，可以试试重置网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dos命令netsh winsock reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#导出CSV或者EXCEL文件转换文本</title>
      <link href="/c-winform/csharp-dao-chu-csv-huo-zhe-excel-wen-jian-zhuan-huan-wen-ben/"/>
      <url>/c-winform/csharp-dao-chu-csv-huo-zhe-excel-wen-jian-zhuan-huan-wen-ben/</url>
      
        <content type="html"><![CDATA[<p>C#写入CSV文件是日期格式会自动转换，不需要转换在内容前加一个制表符TAB（表示缩进），C#的\t对应tab键</p><p>写入EXCEL不需要转换需要在内容前加一个’(英文的单引号)</p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 计算两个日期相差天时分秒</title>
      <link href="/mysql-sql-oracle/oracle-ji-suan-liang-ge-ri-qi-xiang-chai-tian-shi-fen-miao/"/>
      <url>/mysql-sql-oracle/oracle-ji-suan-liang-ge-ri-qi-xiang-chai-tian-shi-fen-miao/</url>
      
        <content type="html"><![CDATA[<h3 id="用到oracle相关函数"><a href="#用到oracle相关函数" class="headerlink" title="用到oracle相关函数"></a>用到oracle相关函数</h3><p> round、trunc、to_number、to_date</p><ol><li>round(number[,decimals]) 四舍五入<ol><li>number：指需要处理的数值，是必须填写的值。</li><li>decimals：指在进行四舍五入运算时 , 小数的应取的位数，该参数可以不填，不填的时候，系统默认小数位数取0。</li></ol></li><li>trunc(number[,num_digits])<ol><li>number：指需要处理的数值，是必须填写的值。</li><li>num_digits：用于指定取整精度的数字，截取时不进行四舍五入。该参数可以不填，不填的时候num_digits 的默认值为 0。</li></ol></li><li>[to_number(expr [, fmt [, ‘nlsparam’ ] ])](<a href="https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions211.htm#SQLRF06140">https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions211.htm#SQLRF06140</a>) 转换数据类型<ol><li>expr：如果expr为char、nchar、varchar2,nvarchar2则可以指定格式fmt，如果是binary_float、binary_double则不能指定格式</li><li>nlsparam： 用于数字转换的TO_CHAR函数中的nlsparam参数具有相同的目的。有关更多信息，请参阅TO_CHAR（nuber）。此功能不直接支持CLOB数据。然而，CLOB可以通过隐式数据转换作为参数传入</li></ol></li><li>[to_date(char [, fmt [, ‘nlsparam’ ] ])](<a href="https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions203.htm#SQLRF06132">https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions203.htm#SQLRF06132</a>) 将字符转换为日期格式<ol><li>char：需要转换的字符</li><li>fmt：是一种指定char格式的日期时间模型格式。如果省略FMT，则char必须是默认日期格式。默认日期格式由NLS_Area初始化参数隐式确定，也可以由NLS_DATE_FORCT参数显式设置。如果fmt是J，对于Julian，char必须是一个整数。</li><li>nlsparam： 指定正在转换为日期的文本字符串的语言。该参数可以具有以下形式</li></ol></li><li><a href="https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions101.htm#SQLRF00668">mod(n1,n2)</a> 取余（n1&#x2F;n2的小数部分）<ol><li>n1,n2 都为数字类型</li></ol></li></ol><h3 id="相差时分秒"><a href="#相差时分秒" class="headerlink" title="相差时分秒"></a>相差时分秒</h3><p>第一种</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">--4天2小时10分 &#x3D;353405秒select trunc(353405&#x2F;(24*60*60)) 天,trunc( mod(353405,24*60*60)&#x2F;(60*60) ) 时, trunc(mod(353405,60*60)&#x2F;60) 分,trunc(mod(353405,60)) 秒 from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/2019121611290901.png" alt="2019121611290901.png"></p><p>第二种<br>两个日期相减得出一个数字类型</p><p><strong>1天2小时5分10秒&#x3D;1.0869212962963</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select to_date(&#39;2020-01-06 14:35:35&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;)-to_date(&#39;2020-01-05 12:30:25&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;) from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select trunc(1.0869212962963) 天 ,             trunc(mod(1.0869212962963, 1) * 24) 时,             trunc(mod(mod(1.0869212962963, 1) * 24, 1) * 60) 分,             trunc(mod(mod(mod(1.0869212962963, 1) * 24, 1) * 60,1)*60) 秒        from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2019121611290902.png" alt="2019121611290902.png"></p><p>第三种</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select startTime, endTime, tday, thour, tminute, round((tt_minute-tminute)*60) as tseconds  from (  select startTime, endTime, tday, thour, trunc((tt_hour-thour)*60) as tminute, (tt_hour-thour)*60 as tt_minute   from   (select startTime, endTime, tday, trunc((tt_day-tday)*24) as thour, (tt_day-tday)*24 as tt_hour from     (select to_number(endTime - startTime) as tt_day,          trunc(to_number(endTime - startTime)) as tday, startTime, endTime from      (select to_date(&#39;2012-11-01 00:20:31&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;) as startTime,sysdate as endTime from dual)     )  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2019121611290903.png" alt="2019121611290903.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T4模板生成自定义的实体类</title>
      <link href="/c-winform/t4-mo-ban-sheng-cheng-zi-ding-yi-de-shi-ti-lei/"/>
      <url>/c-winform/t4-mo-ban-sheng-cheng-zi-ding-yi-de-shi-ti-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>VS2017、Oracle、PL&#x2F;SQL、<a href="https://www.cnblogs.com/ZJ199012/p/T4Toolbox">T4Toolbox</a><br>T4模板编辑工具 <a href="https://t4-editor.tangible-engineering.com/Download_T4Editor_Plus_ModelingTools.html">T4 Editor</a></p><h2 id="数据库查询语句"><a href="#数据库查询语句" class="headerlink" title="数据库查询语句"></a>数据库查询语句</h2><ol><li>oracle</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">--查询当前用户的所有表SELECT TABLE_NAME FROM USER_TABLES;--根据表名查询表结构数据SELECT A.column_name    字段名,                                                                                      A.data_type      数据类型,A.data_length    长度,A.data_precision 整数位,A.Data_Scale     小数位,A.nullable       允许空值,A.Data_default   缺省值,B.comments       备注,A.TABLE_NAME     表名FROM user_tab_columns A, user_col_comments BWHERE a.column_name &#x3D; b.column_nameAND A.Table_Name &#x3D; B.Table_NameAND A.Table_Name &#x3D; &#39;test&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>mysql</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">--查询数据库表    string connectionString &#x3D; &quot;Data Source&#x3D;.;Initial Catalog&#x3D;NFineBase;User ID&#x3D;sa;Password&#x3D;hjf19870810;&quot;;     SqlConnection conn &#x3D; new SqlConnection(connectionString);     conn.Open();     System.Data.DataTable schema &#x3D; conn.GetSchema(&quot;TABLES&quot;); --通过数据库表查询表结构SELECT 表名&#x3D;sobj.name,字段名&#x3D;scol.name,字段说明&#x3D;sprop.[value] FROM syscolumns as scol inner join sys.sysobjects as sobj on scol.id&#x3D;sobj.id and sobj.xtype&#x3D;&#39;U&#39; and sobj.name&lt;&gt;&#39;dtproperties&#39; left join sys.extended_properties as sprop on scol.id&#x3D;sprop.major_id and scol.colid&#x3D;sprop.minor_id where sobj.name&#x3D;&#39;@tableName&#39; and scol.name&#x3D;&#39;@columnName&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>sqlserver</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">--SQL 查询所有表名SELECT NAME FROM SYSOBJECTS WHERE TYPE&#x3D;&#39;U&#39;SELECT * FROM INFORMATION_SCHEMA.TABLES--查询表的所有字段名SELECT NAME FROM SYSCOLUMNS WHERE ID&#x3D;OBJECT_ID(&#39; 表名&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成类文件公用类-ModelAuto-ttinclude"><a href="#生成类文件公用类-ModelAuto-ttinclude" class="headerlink" title="生成类文件公用类 ModelAuto.ttinclude"></a>生成类文件公用类 ModelAuto.ttinclude</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;#@ assembly name&#x3D;&quot;System.Core&quot;#&gt;&lt;#@ assembly name&#x3D;&quot;EnvDTE&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;System.Collections.Generic&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;System.IO&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;System.Text&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;Microsoft.VisualStudio.TextTemplating&quot;#&gt;&lt;#+class Manager&#123;    public struct Block &#123;        public String Name;        public int Start, Length;    &#125;    public List&lt;Block&gt; blocks &#x3D; new List&lt;Block&gt;();    public Block currentBlock;    public Block footerBlock &#x3D; new Block();    public Block headerBlock &#x3D; new Block();    public ITextTemplatingEngineHost host;    public ManagementStrategy strategy;    public StringBuilder template;    public String OutputPath &#123; get; set; &#125;    public Manager(ITextTemplatingEngineHost host, StringBuilder template, bool commonHeader) &#123;        this.host &#x3D; host;        this.template &#x3D; template;        OutputPath &#x3D; String.Empty;        strategy &#x3D; ManagementStrategy.Create(host);    &#125;    public void StartBlock(String name) &#123;        currentBlock &#x3D; new Block &#123; Name &#x3D; name, Start &#x3D; template.Length &#125;;    &#125;    public void StartFooter() &#123;        footerBlock.Start &#x3D; template.Length;    &#125;    public void EndFooter() &#123;        footerBlock.Length &#x3D; template.Length - footerBlock.Start;    &#125;    public void StartHeader() &#123;        headerBlock.Start &#x3D; template.Length;    &#125;    public void EndHeader() &#123;        headerBlock.Length &#x3D; template.Length - headerBlock.Start;    &#125;        public void EndBlock() &#123;        currentBlock.Length &#x3D; template.Length - currentBlock.Start;        blocks.Add(currentBlock);    &#125;    public void Process(bool split) &#123;        String header &#x3D; template.ToString(headerBlock.Start, headerBlock.Length);        String footer &#x3D; template.ToString(footerBlock.Start, footerBlock.Length);        blocks.Reverse();        foreach(Block block in blocks) &#123;            String fileName &#x3D; Path.Combine(OutputPath, block.Name);            if (!Directory.Exists(OutputPath))            &#123;                Directory.CreateDirectory(OutputPath);            &#125;            if (split) &#123;                String content &#x3D; header + template.ToString(block.Start, block.Length) + footer;                strategy.CreateFile(fileName, content);                template.Remove(block.Start, block.Length);            &#125; else &#123;                strategy.DeleteFile(fileName);            &#125;        &#125;    &#125;&#125;class ManagementStrategy&#123;    internal static ManagementStrategy Create(ITextTemplatingEngineHost host) &#123;        return (host is IServiceProvider) ? new VSManagementStrategy(host) : new ManagementStrategy(host);    &#125;    internal ManagementStrategy(ITextTemplatingEngineHost host) &#123; &#125;    internal virtual void CreateFile(String fileName, String content) &#123;        File.WriteAllText(fileName, content);    &#125;    internal virtual void DeleteFile(String fileName) &#123;        if (File.Exists(fileName))            File.Delete(fileName);    &#125;&#125;class VSManagementStrategy : ManagementStrategy&#123;    private EnvDTE.ProjectItem templateProjectItem;    internal VSManagementStrategy(ITextTemplatingEngineHost host) : base(host) &#123;        IServiceProvider hostServiceProvider &#x3D; (IServiceProvider)host;        if (hostServiceProvider &#x3D;&#x3D; null)            throw new ArgumentNullException(&quot;Could not obtain hostServiceProvider&quot;);        EnvDTE.DTE dte &#x3D; (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));        if (dte &#x3D;&#x3D; null)            throw new ArgumentNullException(&quot;Could not obtain DTE from host&quot;);        templateProjectItem &#x3D; dte.Solution.FindProjectItem(host.TemplateFile);    &#125;    internal override void CreateFile(String fileName, String content) &#123;        base.CreateFile(fileName, content);        ((EventHandler)delegate &#123; templateProjectItem.ProjectItems.AddFromFile(fileName); &#125;).BeginInvoke(null, null, null, null);    &#125;    internal override void DeleteFile(String fileName) &#123;        ((EventHandler)delegate &#123; FindAndDeleteFile(fileName); &#125;).BeginInvoke(null, null, null, null);    &#125;    private void FindAndDeleteFile(String fileName) &#123;        foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems) &#123;            if (projectItem.get_FileNames(0) &#x3D;&#x3D; fileName) &#123;                projectItem.Delete();                return;            &#125;        &#125;    &#125;&#125;#&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="T4模板文件"><a href="#T4模板文件" class="headerlink" title="T4模板文件"></a>T4模板文件</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;#@ template debug&#x3D;&quot;true&quot; hostspecific&#x3D;&quot;true&quot; language&#x3D;&quot;C#&quot; #&gt;&lt;#@ output extension&#x3D;&quot;.cs&quot; #&gt;&lt;#@ assembly name&#x3D;&quot;System.Data&quot; #&gt;&lt;#@ assembly name&#x3D;&quot;System.Xml&quot; #&gt;&lt;#@ assembly name&#x3D;&quot;System.Linq&quot; #&gt;&lt;#@ assembly name&#x3D;&quot;System.IO&quot; #&gt;&lt;#@ assembly name&#x3D;&quot;$(ProjectDir)\Lib\Oracle.ManagedDataAccess.dll&quot; #&gt;&lt;#@ import namespace&#x3D;&quot;System&quot; #&gt;&lt;#@ import namespace&#x3D;&quot;System.Xml&quot; #&gt;&lt;#@ import namespace&#x3D;&quot;System.Data&quot; #&gt;&lt;#@ import namespace&#x3D;&quot;System.IO&quot; #&gt;&lt;#@ import namespace&#x3D;&quot;System.Collections.Generic&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;System.Linq&quot;#&gt;&lt;#@ import namespace&#x3D;&quot;Oracle.ManagedDataAccess.Client&quot; #&gt;&lt;#@ include file&#x3D;&quot;ModelAuto.ttinclude&quot;#&gt;&lt;# var manager2 &#x3D; new Manager(Host, GenerationEnvironment, true) &#123; OutputPath &#x3D; Path.GetDirectoryName(Host.TemplateFile)+&quot;\\DefaultModel&quot;&#125;; #&gt;&lt;# ModelManager manager &#x3D; new ModelManager();List&lt;string&gt; list&#x3D;manager.GetTableList();#&gt;&lt;#     foreach (var item in list)    &#123;        string tableName&#x3D;item;        DataTable table&#x3D; manager.GetTableSchema(tableName); #&gt; &lt;#         string tempTableName&#x3D;manager.FirstCharToUpper(tableName);        manager2.StartBlock(tempTableName+&quot;Entity.cs&quot;); #&gt;&#x2F;********************************************************** Copyright (c) 2019* All rights reserved.* * 文件名称：&lt;#&#x3D;tempTableName #&gt;.cs* 摘    要：业务实体&lt;#&#x3D;tableName#&gt;的对象** 当前版本：1.0.0** 作    者：test* 完成日期：&lt;#&#x3D;System.DateTime.Now.ToString(&quot;yyyy年MM月dd日&quot;) #&gt;**********************************************************&#x2F;using System;namespace Common.Entity&#123;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 业务实体&lt;#&#x3D; tableName #&gt;的对象    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    [Serializable]    public class &lt;#&#x3D; tempTableName  #&gt;Entity: BaseEntity, ITableInfo    &#123;        #region Parameter List&lt;#foreach(DataRow row in table.Rows)&#123;#&gt;        private &lt;#&#x3D; manager.TransFromSqlType(row[&quot;数据类型&quot;].ToString(),row[&quot;整数位&quot;].ToString(),row[&quot;小数位&quot;].ToString())#&gt; &lt;#&#x3D; row[&quot;字段名&quot;].ToString().ToLower()#&gt; &#x3D; &lt;#&#x3D; manager.MapValue(row[&quot;数据类型&quot;].ToString(),row[&quot;整数位&quot;].ToString(),row[&quot;小数位&quot;].ToString()) #&gt;;    &#x2F;&#x2F;&lt;#&#x3D; row[&quot;备注&quot;]#&gt;&lt;#&#125;#&gt;        private string tableName &#x3D; &quot;&lt;#&#x3D; tableName #&gt;&quot;;        private string tableSchema &#x3D; &quot;&quot;;        #endregion        #region Property List&lt;#foreach(DataRow row in table.Rows)&#123;#&gt;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;#&#x3D;row[&quot;备注&quot;]#&gt;        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;           public &lt;#&#x3D; manager.TransFromSqlType(row[&quot;数据类型&quot;].ToString(),row[&quot;整数位&quot;].ToString(),row[&quot;小数位&quot;].ToString())#&gt; &lt;#&#x3D; manager.FirstCharToUpper(row[&quot;字段名&quot;].ToString())#&gt;        &#123;            get            &#123;                return &lt;#&#x3D; row[&quot;字段名&quot;].ToString().ToLower() #&gt;;            &#125;            set            &#123;                &lt;#&#x3D; row[&quot;字段名&quot;].ToString().ToLower() #&gt; &#x3D; value;            &#125;        &#125;       &lt;#&#125;#&gt;        #endregion        #region ITableInfo Members        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; Database Table Name        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public string TableName        &#123;            get            &#123;                return tableName;            &#125;            set            &#123;                tableName &#x3D; value;            &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; Database Table Schema        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public string TableSchema        &#123;            get            &#123;                return tableSchema;            &#125;            set            &#123;                tableSchema &#x3D; value;            &#125;        &#125;        #endregion    &#125;&#125;&lt;# manager2.EndBlock(); #&gt;&lt;#    &#125;   #&gt;        &lt;# manager2.Process(true); #&gt;&lt;#+    public class ModelManager    &#123;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 数据库连接字符串        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;       private const string CONNECTION_STRING &#x3D; &quot;DATA SOURCE&#x3D;testPRO;USER ID&#x3D;APP;PASSWORD&#x3D;APP;&quot;;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 用户信息表名        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        private const string PERSONINFO_TABLE_NAME &#x3D; &quot;USERINFO&quot;;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 根据表名查询表结构信息        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        private const string SELECT_SCHEMA_BY_TABLE_NAME &#x3D; @&quot;SELECT         A.column_name  字段名                                        A.data_type      数据类型,        A.data_length    长度,        A.data_precision 整数位,        A.Data_Scale     小数位,        A.nullable       允许空值,        A.Data_default   缺省值,        B.comments       备注,        A.TABLE_NAME     表名        FROM user_tab_columns A, user_col_comments B         WHERE a.COLUMN_NAME &#x3D; b.column_name         AND A.Table_Name &#x3D; B.Table_Name         AND A.Table_Name &#x3D; &#39;&#123;0&#125;&#39;&quot;;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 获得数据连接        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;        private OracleConnection GetConnection()        &#123;            return new OracleConnection(CONNECTION_STRING);        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 得到当前用户的所有表名        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;        public List&lt;string&gt; GetTableList()        &#123;            string sql &#x3D; &quot;SELECT * FROM USER_TABLES&quot;;            DataTable dt &#x3D; OracleHelper.ExecuteDataTable(sql);            List&lt;string&gt; list &#x3D; new List&lt;string&gt;();            if (dt!&#x3D;null&amp;&amp;dt.Rows.Count&gt;0)            &#123;                for (int i &#x3D; 0; i &lt; dt.Rows.Count; i++)                &#123;                    list.Add(dt.Rows[i][&quot;TABLE_NAME&quot;].ToString());                &#125;             &#125;            return list;         &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 释放连接        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;con&quot;&gt;&lt;&#x2F;param&gt;        private void ReleaseConnection(OracleConnection con)        &#123;            if (con !&#x3D; null)            &#123;                if (con.State &#x3D;&#x3D; ConnectionState.Open)                &#123;                    con.Close();                &#125;            &#125;        &#125;        public DataTable GetTableSchema(string tableName)        &#123;            DataTable dt;            using (OracleConnection con &#x3D; GetConnection())            &#123;                con.Open();                OracleCommand cmd &#x3D; con.CreateCommand();                cmd.CommandText &#x3D; string.Format(SELECT_SCHEMA_BY_TABLE_NAME,tableName);                cmd.CommandType &#x3D; CommandType.Text;                OracleDataAdapter adapter &#x3D; new OracleDataAdapter(cmd);                DataSet ds &#x3D; new DataSet();                 adapter.Fill(ds);                dt &#x3D; ds.Tables[0];            &#125;            return dt;        &#125;        public string FirstCharToUpper(string input)        &#123;            if (String.IsNullOrEmpty(input))                throw new ArgumentException(&quot;ARGH!&quot;);            return input.First().ToString().ToUpper() + input.Substring(1).ToLower();        &#125;        public string MapValue(string type, string number, string small)        &#123;            string dataType &#x3D; TransFromSqlType(type, number, small);            if (string.Equals(dataType, &quot;string&quot;, StringComparison.OrdinalIgnoreCase))            &#123;                return &quot;null&quot;;            &#125;            else            &#123;                return dataType + &quot;.MinValue&quot;;            &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; SQL[不完善,需要的自己改造]        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;type&quot;&gt;&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;        public string TransFromSqlType(string type, string number, string small)        &#123;            if (string.IsNullOrEmpty(type))            &#123;                return string.Empty;            &#125;            if (string.Equals(type, &quot;number&quot;, StringComparison.OrdinalIgnoreCase))            &#123;                if (!string.IsNullOrEmpty(number))                &#123;                    if (!string.IsNullOrEmpty(small) &amp;&amp; int.Parse(small) &gt; 0)                    &#123;                        return &quot;decimal&quot;;                    &#125;                    if (int.Parse(number) &gt;&#x3D; 10 &amp;&amp; (string.IsNullOrEmpty(small) || (!string.IsNullOrEmpty(small)&amp;&amp;int.Parse(small)&#x3D;&#x3D;0)))                    &#123;                        return &quot;Int64&quot;;                    &#125;                    else if (int.Parse(number) &lt; 10 &amp;&amp; (string.IsNullOrEmpty(small) || (!string.IsNullOrEmpty(small) &amp;&amp; int.Parse(small) &#x3D;&#x3D; 0)))                    &#123;                        return &quot;Int32&quot;;                    &#125;                                   &#125;                else                &#123;                    return &quot;Int32&quot;;                &#125;            &#125;            if (string.Equals(type, &quot;date&quot;, StringComparison.OrdinalIgnoreCase))            &#123;                return &quot;DateTime&quot;;            &#125;            else if (string.Equals(type, &quot;nvarchar2&quot;, StringComparison.OrdinalIgnoreCase) || string.Equals(type, &quot;char&quot;, StringComparison.OrdinalIgnoreCase))            &#123;                return &quot;string&quot;;            &#125;            return &quot;string&quot;;        &#125;    &#125;#&gt;&lt;#+ public class OracleHelper    &#123;        private static string oracleConnectionStr &#x3D; &quot;DATA SOURCE&#x3D;testPRO;USER ID&#x3D;APP;PASSWORD&#x3D;APP;&quot;;        public static DataTable ExecuteDataTable(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    DataTable dt &#x3D; new DataTable();                    OracleDataAdapter adapter &#x3D; new OracleDataAdapter(command);                    adapter.Fill(dt);                    return dt;                &#125;            &#125;        &#125;        public static int ExecuteNonQuery(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    return command.ExecuteNonQuery();                &#125;            &#125;        &#125;        public static object ExecuteScalar(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    return command.ExecuteScalar();                &#125;            &#125;        &#125;    &#125; #&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成文件如下图<br><img src="/images/2019120910561601.png" alt="2019120910561601.png"></p><h2 id="T4模板语法"><a href="#T4模板语法" class="headerlink" title="T4模板语法"></a>T4模板语法</h2><p>　主要分为 1指令 2文本块 3指令块</p><p>  &lt;# 标准控制块 #&gt; 可以包含语句。<br>  &lt;#&#x3D; 表达式控制块 #&gt; 可以包含表达式。<br>  &lt;#+ 类功能控制块 #&gt; 可以包含方法、字段和属性，就像一个类的内部</p><p>　　1 指令</p><p>　　主要包括template, output, assembly, import, include等类型</p><p>　　$(SolutionDir):当前项目所在解决方案目录<br>　　$(ProjectDir):当前项目所在目录<br>　　$(TargetPath):当前项目编译输出文件绝对路径<br>　　$(TargetDir):当前项目编译输出目录，即web项目的Bin目录，控制台、类库项目bin目录下的debug或release目录(取决于当前的编译模式)</p><p>　　2 文本块</p><p>　　文本块直接向输出文件插入文本。 文本块没有特殊格式，就像我们刚才初体验中写的类一样。</p><p>　　3 指令块</p><p>　　标准控制块：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;#    for(int i &#x3D; 0; i &lt; 4; i++)    &#123;#&gt;Hello World!&lt;#    &#125; #&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表达式控制块：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;#    XmlDocument xDoc &#x3D; new XmlDocument();    xDoc.Load(@&quot;E:\CSharp\Overview.xml&quot;);    XmlAttributeCollection attributes &#x3D; xDoc.Attributes;    if (attributes !&#x3D; null)    &#123;       foreach (XmlAttribute attr in attributes)       &#123;#&gt;&lt;#&#x3D; attr.Name #&gt;&lt;#       &#125;    &#125;#&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类功能控制块：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;#+ public class OracleHelper    &#123;        private static string oracleConnectionStr &#x3D; &quot;DATA SOURCE&#x3D;testPRO;USER ID&#x3D;APP;PASSWORD&#x3D;APP;&quot;;        public static DataTable ExecuteDataTable(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    DataTable dt &#x3D; new DataTable();                    OracleDataAdapter adapter &#x3D; new OracleDataAdapter(command);                    adapter.Fill(dt);                    return dt;                &#125;            &#125;        &#125;        public static int ExecuteNonQuery(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    return command.ExecuteNonQuery();                &#125;            &#125;        &#125;        public static object ExecuteScalar(string sql, params OracleParameter[] paramList)        &#123;            using (OracleConnection conn &#x3D; new OracleConnection(oracleConnectionStr))            &#123;                conn.Open();                using (OracleCommand command &#x3D; conn.CreateCommand())                &#123;                    command.CommandText &#x3D; sql;                    command.Parameters.AddRange(paramList);                    return command.ExecuteScalar();                &#125;            &#125;        &#125;    &#125; #&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的T4模板语法参考 <a href="https://docs.microsoft.com/zh-cn/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2015">https://docs.microsoft.com/zh-cn/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2015</a></p><p>参考：<a href="https://www.cnblogs.com/fenglingyi/p/5927082.html">https://www.cnblogs.com/fenglingyi/p/5927082.html</a></p><p>　　　<a href="https://www.cnblogs.com/maiaimei/p/8994552.html">https://www.cnblogs.com/maiaimei/p/8994552.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# UrlEncode 编码</title>
      <link href="/mysql-sql-oracle/urlencode-bian-ma/"/>
      <url>/mysql-sql-oracle/urlencode-bian-ma/</url>
      
        <content type="html"><![CDATA[<p>在开发中遇见一个将文件流转换为Base64码，这个码中有特殊字符需要处理，然后选择用</p><p>HttpUtility.UrlEncode进行编码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">HttpUtility.UrlEncode(text);  &#x2F;&#x2F;utf-8 编码HttpUtility.UrlDecode(text);  &#x2F;&#x2F;utf-8 解码HttpUtility.UrlEncode(text, System.Text.Encoding.GetEncoding(936));  &#x2F;&#x2F;gb2312编码HttpUtility.UrlDecode(text, System.Text.Encoding.GetEncoding(936));  &#x2F;&#x2F;gb2312解码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>后来查找文章发现这个方法会将空格转换为+</p><p>这是就需要将+替换为空格对应的ASCII码（%20）</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">fileStream &#x3D; HttpUtility.UrlEncode(fileStream); fileStream &#x3D; fileStream (&quot;+&quot;, &quot;%20&quot;); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> js的转码可以查看文章 <a href="https://www.cnblogs.com/ZJ199012/p/7356753.html">https://www.cnblogs.com/ZJ199012/p/7356753.html</a></p><p>参考 <a href="https://www.cnblogs.com/luckyuns/p/6396792.html">https://www.cnblogs.com/luckyuns/p/6396792.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL快速生成增删改查语句</title>
      <link href="/mysql-sql-oracle/plsql-kuai-su-sheng-cheng-zeng-shan-gai-cha-yu-ju/"/>
      <url>/mysql-sql-oracle/plsql-kuai-su-sheng-cheng-zeng-shan-gai-cha-yu-ju/</url>
      
        <content type="html"><![CDATA[<ol><li>在PLSQL中新建一个SQL Windows<br><img src="/images/2019112614270701.png" alt="2019112614270701.png"></li><li>鼠标左键选中表名往SQL Windows中拖，会出现一个菜单<br><img src="/images/2019112614270702.png" alt="2019112614270702.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 检查星期只能是1-7的数字不能重复</title>
      <link href="/mysql-sql-oracle/oracle-jian-cha-xing-qi-zhi-neng-shi-1-7-de-shu-zi-bu-neng-chong-fu/"/>
      <url>/mysql-sql-oracle/oracle-jian-cha-xing-qi-zhi-neng-shi-1-7-de-shu-zi-bu-neng-chong-fu/</url>
      
        <content type="html"><![CDATA[<ol><li>利用Oracle的REGEXP_INSTR匹配数字</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select REGEXP_INSTR (&#39;1357&#39;, &#39;^[1-7]&#123;1,7&#125;$&#39;) into n_Count from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>循环查找是否存在重复的数字</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">for i in 1..length(i_vc_Week) loop   v_findStr:&#x3D;substr(i_vc_Week,i,1);   if nvl(instr(i_vc_Week,v_findStr,(i+1)),0)&gt;0 then     return 2;   end if;end loop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">FUNCTION P_SR_CheckWeekLegal(i_vc_Week varchar2)  return integer  IS     n_Count integer;     v_findStr varchar2(1);  BEGIN   n_Count:&#x3D;0;   select REGEXP_INSTR (i_vc_Week, &#39;^[1-7]&#123;1,7&#125;$&#39;) into n_Count from dual;   if n_Count&#x3D;0 then     return 2;   end if;   for i in 1..length(i_vc_Week) loop      v_findStr:&#x3D;substr(i_vc_Week,i,1);      if nvl(instr(i_vc_Week,v_findStr,(i+1)),0)&gt;0 then        return 2;      end if;   end loop;       return n_Count;  END;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://docs.oracle.com/database/121/SQLRF/functions162.">https://docs.oracle.com/database/121/SQLRF/functions162.</a>htm#SQLRF06300</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL 插入数据无响应</title>
      <link href="/mysql-sql-oracle/plsql-cha-ru-shu-ju-wu-xiang-ying/"/>
      <url>/mysql-sql-oracle/plsql-cha-ru-shu-ju-wu-xiang-ying/</url>
      
        <content type="html"><![CDATA[<p>插入数据一直没有成功，可能是该条记录被锁住了</p><ol><li>查询锁定记录</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT s.sid, s.serial# FROM v$locked_object lo, dba_objects ao, v$session s WHERE ao.object_id &#x3D; lo.object_id AND lo.session_id &#x3D; s.sid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>删除</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">ALTER system KILL session &#39;SID,serial&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 <a href="https://blog.csdn.net/xujiangdong1992/article/details/70766419">https://blog.csdn.net/xujiangdong1992/article/details/70766419</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# DataTable 排序</title>
      <link href="/c-winform/csharp-datatable-pai-xu/"/>
      <url>/c-winform/csharp-datatable-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>使用DataTable的DefaultView中Sort方法排序，如果遇见数字类型就会有问题<br><img src="/images/2019112513381801.png" alt="2019112513381801.png"></p><ol><li>补齐年龄位数（不建议）</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">#region 补齐年龄位数，然后排序foreach (DataRow item in dt.Rows)&#123;    item[&quot;Age&quot;] &#x3D; item[&quot;Age&quot;].ToString().PadLeft(2, &#39;0&#39;);&#125;dt.DefaultView.Sort &#x3D; &quot;Age ASC&quot;;dt &#x3D; dt.DefaultView.ToTable();#endregion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>增加一列，判断年龄长度然后排序</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">#region 增加一列，判断年龄长度然后排序dt.Columns.Add(&quot;AgeLength&quot;, typeof(int), &quot;len(Age)&quot;);dt.DefaultView.Sort &#x3D; &quot;AgeLength,Age ASC&quot;;dt &#x3D; dt.DefaultView.ToTable();#endregion <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>克隆表结构，将年龄列数据类型修改为数字类型</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">#region 克隆表结构，将年龄列数据类型修改为数字类型DataTable dtNew &#x3D; dt.Clone();dtNew.Columns[1].DataType &#x3D; typeof(int);foreach (DataRow item in dt.Rows)&#123;    dtNew.ImportRow(item);&#125;dtNew.DefaultView.Sort &#x3D; &quot;Age ASC&quot;;dtNew &#x3D; dtNew.DefaultView.ToTable();#endregion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>利用linq将dataTable转换为集合，然后排序</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">#region 利用linq将dataTable转换为集合，然后排序dt &#x3D; dt.Rows.Cast&lt;DataRow&gt;().OrderBy(r &#x3D;&gt; int.Parse(r[&quot;Age&quot;].ToString())).CopyToDataTable();#endregion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://www.jb51.net/article/43343.htm">https://www.jb51.net/article/43343.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 获取程序集信息</title>
      <link href="/c-winform/csharp-huo-qu-cheng-xu-ji-xin-xi/"/>
      <url>/c-winform/csharp-huo-qu-cheng-xu-ji-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>在C#的程序中都会有AssemblyInfo.cs文件，该文件中包含着程序的一些信息</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Reflection;using System.Runtime.CompilerServices;using System.Runtime.InteropServices;&#x2F;&#x2F; 有关程序集的常规信息通过以下&#x2F;&#x2F; 特性集控制。更改这些特性值可修改&#x2F;&#x2F; 与程序集关联的信息。[assembly: AssemblyTitle(&quot;ConsoleApplication1&quot;)][assembly: AssemblyDescription(&quot;测试&quot;)][assembly: AssemblyConfiguration(&quot;&quot;)][assembly: AssemblyCompany(&quot;Microsoft&quot;)][assembly: AssemblyProduct(&quot;ConsoleApplication1&quot;)][assembly: AssemblyCopyright(&quot;Copyright © Microsoft 2019&quot;)][assembly: AssemblyTrademark(&quot;&quot;)][assembly: AssemblyCulture(&quot;&quot;)]&#x2F;&#x2F; 将 ComVisible 设置为 false 使此程序集中的类型&#x2F;&#x2F; 对 COM 组件不可见。如果需要从 COM 访问此程序集中的类型，&#x2F;&#x2F; 则将该类型上的 ComVisible 特性设置为 true。[assembly: ComVisible(false)]&#x2F;&#x2F; 如果此项目向 COM 公开，则下列 GUID 用于类型库的 ID[assembly: Guid(&quot;8b945092-ddb6-4163-943b-1b36e99475d3&quot;)]&#x2F;&#x2F; 程序集的版本信息由下面四个值组成:&#x2F;&#x2F;&#x2F;&#x2F;      主版本&#x2F;&#x2F;      次版本 &#x2F;&#x2F;      内部版本号&#x2F;&#x2F;      修订号&#x2F;&#x2F;&#x2F;&#x2F; 可以指定所有这些值，也可以使用“内部版本号”和“修订号”的默认值，&#x2F;&#x2F; 方法是按如下所示使用“*”:&#x2F;&#x2F; [assembly: AssemblyVersion(&quot;1.0.*&quot;)][assembly: AssemblyVersion(&quot;1.2.5.0&quot;)][assembly: AssemblyFileVersion(&quot;1.0.5.0&quot;)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何获取程序集中的一些信息呢</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class AssemblyInfos&#123;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 获取程序集标题    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public string GetAssemblyTitle()    &#123;        object[] attributes &#x3D; Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);        if (attributes.Length &gt; 0)        &#123;             AssemblyTitleAttribute title &#x3D; (AssemblyTitleAttribute)attributes[0];            if (!string.IsNullOrEmpty(title.Title))                return title.Title;        &#125;        return Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 获取程序集版本    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public string GetAssemblyVersion()    &#123;        return Assembly.GetExecutingAssembly().GetName().Version.ToString();    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 获取程序集描述说明    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public string GetAssemblyDescription()    &#123;        object[] attributes &#x3D; Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);        if (attributes.Length &#x3D;&#x3D; 0)        &#123;            return &quot;&quot;;        &#125;        return ((AssemblyDescriptionAttribute)attributes[0]).Description;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有许多的自定义消息，都和获取程序集描述说明类似<br><img src="/images/2019112509341401.png" alt="2019112509341401.png"></p><p>获取AssemblyFileVersion可以直接通过Application.ProductVersion获取版本<br>还可以通过Application.ProductName获取AssemblyProduct信息</p><p>参考：,<a href="https://blog.csdn.net/zhaoyuqings/article/details/77480727%3E">https://blog.csdn.net/zhaoyuqings/article/details/77480727&gt;</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 调用WinRAR解压缩文件</title>
      <link href="/c-winform/csharp-diao-yong-winrar-jie-ya-suo-wen-jian/"/>
      <url>/c-winform/csharp-diao-yong-winrar-jie-ya-suo-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>在项目中有可能会用到解压缩，代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class CompressHelper&#123;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 压缩    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sourceFilePath&quot;&gt;源文件路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sourceName&quot;&gt;源文件名称&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;compressName&quot;&gt;压缩文件名&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;compressPath&quot;&gt;压缩文件路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public static bool CompressFile(string sourceFilePath, string sourceName, string compressName, string compressPath)    &#123;        string winrarPath &#x3D; string.Empty;        if (!ExistsCompressApp(out winrarPath))        &#123;            return false;        &#125;        if (string.IsNullOrEmpty(compressPath))        &#123;            compressPath &#x3D; sourceFilePath;        &#125;        string type &#x3D; compressName.Substring(compressName.IndexOf(&#39;.&#39;) + 1);        string compressType &#x3D; string.Empty;        if (type.ToUpper() &#x3D;&#x3D; CompressType.RAR.ToString())        &#123;            compressType &#x3D; &quot;-af&quot; + CompressType.RAR.ToString().ToLower();        &#125;        else if (type.ToUpper() &#x3D;&#x3D; CompressType.ZIP.ToString())        &#123;            compressType &#x3D; &quot;-af&quot; + CompressType.ZIP.ToString().ToLower();        &#125;        else        &#123;            compressType &#x3D; &quot;-af&quot; + CompressType.RAR.ToString().ToLower();            compressName &#x3D; compressName + &quot;.&quot; + CompressType.RAR.ToString().ToLower();        &#125;        CreateFolder(compressPath);        &#x2F;**         * &lt;命令&gt; -&lt;开关1&gt; -&lt;开关N&gt; &lt;压缩文件 &gt; &lt;文件...&gt; &lt;@列表文件...&gt; &lt;解压路径\&gt;          * 压缩 a      a -ep -o+ -df d:\test.rar d:\test.jpg         * 压缩 -ep（排除文件名的路径） -o+（覆盖全部文件 (更新压缩文件时的默认值)）         *      -df（压缩后删除源文件）-afrar（-AF&lt;类型&gt; - 指定压缩文件格式）         * *&#x2F;        string cmd &#x3D; string.Format(@&quot; a -ep -o+ &#123;2&#125; -df &#123;0&#125; &#123;1&#125;&quot;, Path.Combine(compressPath, compressName), Path.Combine(sourceFilePath, sourceName), compressType);        return StartProcess(winrarPath, cmd);    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 解压    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;unCompressPath&quot;&gt;解压文件路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;unCompressName&quot;&gt;解压文件名&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filePath&quot;&gt;解压后文件路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public static bool UnCompressFile(string unCompressPath, string unCompressName, string filePath)    &#123;        string winrarPath &#x3D; string.Empty;        if (!ExistsCompressApp(out winrarPath))        &#123;            return false;        &#125;        if (string.IsNullOrEmpty(filePath))        &#123;            filePath &#x3D; unCompressPath;        &#125;        CreateFolder(filePath);        &#x2F;**         * &lt;命令&gt; -&lt;开关1&gt; -&lt;开关N&gt; &lt;压缩文件 &gt; &lt;文件...&gt; &lt;@列表文件...&gt; &lt;解压路径\&gt;          * 解压 x      x -ibck -inul -y -mt5 d:\test.rar d:\test         * 解压 -ibck(在后台执行 WinRAR) -inul(禁用错误信息)  -y(所有问题的默认值为“是”)         *      -mt5(设置线程数量)         * *&#x2F;        string cmd &#x3D; string.Format(@&quot; x -ibck -inul -y -mt5 &#123;0&#125; &#123;1&#125;&quot;, Path.Combine(unCompressPath, unCompressName), filePath);        return StartProcess(winrarPath, cmd);    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 判断是否安装了压缩软件    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;winrarPath&quot;&gt;软件安装路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    private static bool ExistsCompressApp(out string winrarPath)    &#123;        winrarPath &#x3D; string.Empty;        &#x2F;&#x2F;通过注册表找到WinRAR软件        RegistryKey key &#x3D; Registry.LocalMachine.OpenSubKey(@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\WinRAR.exe&quot;);        if (key &#x3D;&#x3D; null)            return false;        winrarPath &#x3D; key.GetValue(&quot;&quot;).ToString();&#x2F;&#x2F;获取winrar软件安装路径        key.Close(); &#x2F;&#x2F;关闭注册表        return !string.IsNullOrEmpty(winrarPath);    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 执行压缩操作    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;exePath&quot;&gt;WinRAR路径&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;exeArg&quot;&gt;WinRAR参数&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;isHide&quot;&gt;是否显示窗体&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    private static bool StartProcess(string exePath, string exeArg, bool isHide &#x3D; false)    &#123;        Process p &#x3D; new Process();        p.StartInfo.FileName &#x3D; exePath;        p.StartInfo.Arguments &#x3D; exeArg;        if (isHide)        &#123;            p.StartInfo.WindowStyle &#x3D; ProcessWindowStyle.Hidden;            p.StartInfo.CreateNoWindow &#x3D; true;        &#125;        else        &#123;            p.StartInfo.WindowStyle &#x3D; ProcessWindowStyle.Normal;            p.StartInfo.CreateNoWindow &#x3D; false;        &#125;        p.Start();        int idx &#x3D; 1;        while (!p.HasExited)        &#123;            idx++;            p.WaitForExit(1000);            if (idx &#x3D;&#x3D; 50)            &#123;                p.Kill();                return false;            &#125;        &#125;        p.Close();        p.Dispose();        return true;    &#125;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 判断文件夹是否存在    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;path&quot;&gt;路径&lt;&#x2F;param&gt;    private static void CreateFolder(string path)    &#123;        if (!File.Exists(path))        &#123;            Directory.CreateDirectory(path);        &#125;    &#125;&#125;&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 压缩类型&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;public enum CompressType&#123;     RAR,    ZIP&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的命令可以参考winrar的帮助文档</p><p><img src="/images/2019112109411101.png" alt="2019112109411101.png"></p><p>参考 <a href="https://www.cnblogs.com/zhoub/p/3841276.html">https://www.cnblogs.com/zhoub/p/3841276.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataTable 获取一列最大值并修改</title>
      <link href="/c-winform/datatable-huo-qu-yi-lie-zui-da-zhi-bing-xiu-gai/"/>
      <url>/c-winform/datatable-huo-qu-yi-lie-zui-da-zhi-bing-xiu-gai/</url>
      
        <content type="html"><![CDATA[<p>DataTable中获取分数的最大值</p><ol><li>创建DataTable并赋值</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DataTable dt &#x3D; new DataTable();dt.Columns.Add(&quot;ID&quot;, typeof(int));dt.Columns.Add(&quot;Name&quot;, typeof(string));dt.Columns.Add(&quot;Score&quot;, typeof(double));&#x2F;&#x2F;设置datable主键列dt.PrimaryKey &#x3D; new DataColumn[] &#123; dt.Columns[&quot;ID&quot;] &#125;;#region 添加数据DataRow dr &#x3D; null;for (int i &#x3D; 0; i &lt; 10; i++)&#123;    dr &#x3D; dt.NewRow();    dr[&quot;ID&quot;] &#x3D; 100 + i.ToString();    dr[&quot;Name&quot;] &#x3D; &quot;Name&quot; + i.ToString();    dr[&quot;Score&quot;] &#x3D; (i + 1) * 30;    dt.Rows.Add(dr);&#125;#endregion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>找出DataTable中分数的最大值</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">double maxScore &#x3D; 0;double.TryParse(dt.Compute(&quot;Max(Score)&quot;, &quot;&quot;).ToString(), out maxScore);&#x2F;&#x2F; 取得datable中Score的最大值DataRow row &#x3D; dt.Select(&quot;Score&#x3D;&quot; + maxScore)[0];    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改最大分数值</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">row[&quot;Score&quot;] &#x3D; 100000000.12;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2019 离线安装</title>
      <link href="/tools/vs2019-chi-xian-an-zhuang/"/>
      <url>/tools/vs2019-chi-xian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<ol><li>在微软官网下载需要的版本<br>例如 <a href="https://visualstudio.microsoft.com/zh-hans/downloads/">VS2019 Enterprise</a></li><li>下载组件到指定目录<br>例如（D:\VS2019_Enterprise）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vs_enterprise.exe <span class="token parameter variable">--layout</span> D:<span class="token punctuation">\</span>VS2019_Enterprise <span class="token parameter variable">--all</span> <span class="token parameter variable">--includeRecommended</span> <span class="token parameter variable">--includeOptional</span> <span class="token parameter variable">--lang</span> zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载 .NET 桌面和 .NET Web 工作负载，以及所有推荐组件和 GitHub 扩展。 仅包括中文语言包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vs_enterprise.exe <span class="token parameter variable">--layout</span> D:<span class="token punctuation">\</span>VS2019_Enterprise ^ <span class="token parameter variable">--lang</span> zh-CN ^ <span class="token parameter variable">--add</span> Microsoft.VisualStudio.Workload.NetWeb ^ <span class="token parameter variable">--add</span> Microsoft.VisualStudio.Workload.ManagedDesktop ^ <span class="token parameter variable">--add</span> Component.GitHub.VisualStudio ^ <span class="token parameter variable">--includeRecommended</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体参数详解请参考 <a href="https://docs.microsoft.com/zh-cn/visualstudio/install/use-command-line-parameters-to-install-visual-studio?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/install/use-command-line-parameters-to-install-visual-studio?view=vs-2019</a></p><p>参考 <a href="https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio?view=vs-2019</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle11g安装客户端检查先决条件失败</title>
      <link href="/mysql-sql-oracle/oracle11g-an-zhuang-ke-hu-duan-jian-cha-xian-jue-tiao-jian-shi-bai/"/>
      <url>/mysql-sql-oracle/oracle11g-an-zhuang-ke-hu-duan-jian-cha-xian-jue-tiao-jian-shi-bai/</url>
      
        <content type="html"><![CDATA[<p>在64bit的WIN7上安装64bit的oracle11gR2客户端，执行检查先决条件失败</p><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><ol><li>物理内存信息<br>预期值:?N&#x2F;A</li></ol><p>　　　　实际值:?N&#x2F;A<br>2. 可用物理内存信息（实际的物理内存是够用的）<br>       预期值:?N&#x2F;A<br>　　　　实际值:?N&#x2F;A<br>3. 环境变量PATH信息<br>       预期值:?N&#x2F;A<br>　　　　实际值:?N&#x2F;A</p><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>可能是操作系统未开启默认共享，导致oracle无法检查环境的可用性</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>打开系统注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\LanmanServer\Parameters选中Parameters，修改右边的AutoShareWks值，将0改为1，然后重启电脑，安装完成后再将值改为0<br><img src="/images/2019102315480801.png" alt="2019102315480801.png"><br>查找到一些文章说只要将C盘的默认共享设置为共享就可以了，但是实际安装还是出现一样的问题。</p><h2 id="Dos设置默认共享"><a href="#Dos设置默认共享" class="headerlink" title="Dos设置默认共享"></a>Dos设置默认共享</h2><ol><li>打开C盘默认共享</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net share c$<span class="token operator">=</span>c:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除C盘默认共享</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net share c$ /del<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考：<a href="https://jingyan.baidu.com/article/b0b63dbf058bdb4a483070f7.html">https://jingyan.baidu.com/article/b0b63dbf058bdb4a483070f7.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm textbox 只允许输入数字</title>
      <link href="/c-winform/winform-textbox-zhi-yun-xu-shu-ru-shu-zi/"/>
      <url>/c-winform/winform-textbox-zhi-yun-xu-shu-ru-shu-zi/</url>
      
        <content type="html"><![CDATA[<p>textbox只允许输入指定数字（1-7），并且不能重复</p><p>在KeyPress事件中实现</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void txtWeek_KeyPress(object sender, KeyPressEventArgs e)&#123;    if ((e.KeyChar &lt; &#39;1&#39; || e.KeyChar &gt; &#39;7&#39;) &amp;&amp; e.KeyChar !&#x3D; (char)8) &#x2F;&#x2F;允许输入退格键    &#123;        e.Handled &#x3D; true;    &#125;    if (((TextBox)sender).Text.Trim().IndexOf(e.KeyChar)&gt;&#x3D;0)    &#123;        e.Handled &#x3D; true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle存储过程</title>
      <link href="/mysql-sql-oracle/oracle-cun-chu-guo-cheng/"/>
      <url>/mysql-sql-oracle/oracle-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<ol><li>作用<ol><li>在开发中，为了一个特定的业务功能，会向数据库进行多次连接关闭(连接和关闭是很耗资源)，需要对数据库进行多次I&#x2F;O读写，性能比较低。如果把这些业务放入存储过程中，就可以做到连接关闭一次数据库就可以实现业务，可以大大的提高效率。</li><li>Oracle官方建议，能够让数据库操作的不要放在程序中，在数据库中实现基本上不会出现错误，在程序中操作可能会存在错误。（如果在数据库中操作，可以有一定的日志恢复功能。）</li></ol></li><li>语法</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE OR REPLACE PROCEDURE 存储过程名称[(参数列表)] ISBEGINEND 存储过程名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据参数的类型，可以分为3类</p><ol><li><p>不带参数</p></li><li><p>带输入参数</p></li><li><p>带输入输出参数（返回值）</p></li><li><p>无参存储</p></li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create or replace procedure p_hello as--声明变量begin    dbms_output.put_line(&#39;Hello World!&#39;);end p_hello ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 在plsql中可以直接在begin end中直接写存储过程名，或者在命令窗口中执行 exec 存储过程名;。</p><p>注意：</p><ol><li><p>is和as是可以相互用的</p></li><li><p>过程中没有declare关键字，declare用在语句块中</p></li><li><p>带输入参数存储</p></li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create or replace procedure p_queryName(i_empno in emp.empno%type) as--声明变量v_name emp.ename%type;v_sal emp.sal%type;begin    --查询emp表中对应员工的信息    select ename,sal into v_name,v_sal from emp where empno&#x3D;i_empno;    dbms_output.put_line(&#39;名称：&#39;||v_name||&#39;薪水：&#39;||v_sal);end p_queryName;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>带输入输出参数存储</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create or replace procedure p_querySalOut(i_empno in emp.empno%type,o_sal out emp.sal%type) as--声明变量begin    --查询emp表中对应员工的信息    select sal into o_sal from emp where empno&#x3D;i_empno;    dbms_output.put_line(&#39;名称：&#39;||v_name||&#39;薪水：&#39;||v_sal);end p_querySalOut;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare--声明变量接受存储过程中的输出参数    v_sal emp.sal%type;begin    p_querySalOut(7839,v_sal);    dbms_output.put_line(v_sal);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle游标</title>
      <link href="/mysql-sql-oracle/oracle-you-biao/"/>
      <url>/mysql-sql-oracle/oracle-you-biao/</url>
      
        <content type="html"><![CDATA[<p>游标是用于临时存储一个查询返回的多行数据（结果集），通过遍历游标，可以逐行访问处理改结果集的数据。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>声明——&gt;打开——&gt;读取——&gt;关闭</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>游标声明：</strong><br>CURSOR 游标名[（参数列表）] IS 查询语句;<br><strong>游标打开：</strong><br>OPEN 游标名;<br><strong>游标读取：</strong><br>FETCH 游标名 INTO 变量列表;<br><strong>游标关闭：</strong><br>CLOSE 游标名;</p><h2 id="游标属性"><a href="#游标属性" class="headerlink" title="游标属性"></a>游标属性</h2><table><thead><tr><th>游标的属性</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>%ROWCOUNT</td><td>整型</td><td>获得FETCH语句返回的数据行数</td></tr><tr><td>%FOUND</td><td>布尔型</td><td>最近的FETCH语句返回的一行数据则为证，否则为假</td></tr><tr><td>%NOTFOUND</td><td>布尔型</td><td>与%FOUND属性返回值相反</td></tr><tr><td>%ISOPEN</td><td>布尔型</td><td>游标已经打开时值为真，否则为假</td></tr></tbody></table><p>无参数游标</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    --声明游标    cursor c_emp is select ename,sal from emp;    --声明变量    v_ename emp.ename%type;    v_sal emp.sal%type;begin    --打开游标    open c_emp;    --遍历循环    loop        --获取游标中的数据        fetch c_emp into v_ename,v_sal;                exit when c_emp%notfound;        dbms_output.put_line(&#39;姓名：&#39;||v_name||&#39;工资：&#39;||v_sal);    end loop；    --关闭游标    close c_emp;    end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有参数游标</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    --声明游标    cursor c_emp(v_deptno emp.deptno%type) is select ename,sal from emp where deptno&#x3D;v_deptno;    --声明变量    v_ename emp.ename%type;    v_sal emp.sal%type;begin    --打开游标    open c_emp(10);    --遍历循环    loop        --获取游标中的数据        fetch c_emp into v_ename,v_sal;                exit when c_emp%notfound;        dbms_output.put_line(&#39;姓名：&#39;||v_name||&#39;工资：&#39;||v_sal);    end loop；    --关闭游标    close c_emp;    end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle之PL/SQL流程控制</title>
      <link href="/mysql-sql-oracle/oracle-zhi-plsql-liu-cheng-kong-zhi/"/>
      <url>/mysql-sql-oracle/oracle-zhi-plsql-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><ol><li>IF语法</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">begin　　if 条件1 then 执行1　　elsif 条件2 then 执行2　　else 执行3　　end if；end；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    --emp表中记录数    v_count number;begin    select count(1) into v_count from emp;    if v_count&gt;20 then        dbms_output.put_line(&#39;表中记录数超过20条，为：&#39;||v_count);     elsif v_count&gt;&#x3D;10 then        dbms_output.put_line(&#39;表中记录数在10到20之间，为：&#39;||v_count)    else        dbms_output.put_line(&#39;表中记录数小于10条，为：&#39;||v_count)    end if；end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：关键字elsif不是elseif</strong><br>2. Case 语法</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">case 条件表达式　　WHEN 条件表达式结果1 THEN    　　　　语句1　　 WHEN 条件表达式结果2 THEN    　　　　语句2　　　　　　......　　WHEN 条件表达式结果n THEN    　　　　语句n　 [else 条件表达式结果]end case;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    v_name varchar2(20);begin    v_name:&#x3D;&#39;zhangsan&#39;;    case v_name      when &#39;zhangsan&#39; then dbms_output.put_line(&#39;张三&#39;);        when &#39;lisi&#39; then dbms_output.put_line(&#39;李四&#39;);            else dbms_output.put_line(&#39;无法找到改名称&#39;); end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">case　　　WHEN 条件表达式1 THEN 　　　　语句1　　　WHEN 条件表达式2 THEN 　　　　语句2　　　......　　　WHEN 条件表达式n THEN　　　　语句n　　　[else 语句]end case;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    v_name varchar2(20);begin    v_name:&#x3D;&#39;zhangsan&#39;;    case       when v_name&#x3D;&#39;zhangsan&#39; then dbms_output.put_line(&#39;张三&#39;);        when v_name&#x3D;&#39;lisi&#39; then dbms_output.put_line(&#39;李四&#39;);            else dbms_output.put_line(&#39;无法找到改名称&#39;); end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li>Loop</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">begin 　　　loop　　　    exit when 执行2 　退出循环条件　end loop；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    num number:&#x3D;1;begin    loop      exit when num&gt;10      dbms_output.put_line(num);      num :&#x3D; num+1;      end loop;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>While</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">while &lt;布尔表达式&gt; loop　　循环体语句;end loop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">declare    flag boolean:&#x3D;TRUE;begin    while flag loop      dbms_output.put_line (&#39;Hello World!&#39;);      flag:&#x3D;FALSE;    end loop;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>For</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">[&lt;&lt;标签&gt;&gt;] for 循环计数器 in [ REVERSE ] 下限 .. 上限 loop　　　　　　循环体语句;end loop [&lt;&lt;标签&gt;&gt;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">begin    for i in 1..3 loop        dbms_output.put_line(i);    end loop;        end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 变量</title>
      <link href="/mysql-sql-oracle/oracle-bian-liang/"/>
      <url>/mysql-sql-oracle/oracle-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h2><ol><li>普通数据类型（char，varchar2,date,number,boolean,long）</li><li>特殊变量类型 （引用型变量，记录型变量）</li></ol><h2 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h2><p>变量名 变量类型（变量长度）  例如： address varchar2(200);</p><ol><li><p>普通变量<br>变量赋值</p><ol><li>直接赋值 :&#x3D; 例如   age:&#x3D;20;</li><li>语句赋值,select … into 赋值；（语法 select 值 into 变量）</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DECLARE--姓名v_name varchar2(20):&#x3D;&#39;zhangsan&#39;;--薪水v_sal number;--地址v_addr varchar2(200);begin    --直接赋值    v_sal:&#x3D;20000;    select &#39;北京市&#39; into v_addr from dual;    --打印变量    dbms_output.put_line(&#39;姓名：&#39;||v_name||&#39;,薪水：&#39;||v_sal||&#39;,地址：&#39;||v_addr);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用型变量（变量的类型长度取决于表中字段类型和长度）<br>通过表名.列名%TYPE指定变量的类型和长度，例如： v_name emp.ename%TYPE;</p></li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DECLARE    --姓名    v_name emp.ename%TYPE:&#x3D;&#39;zhangsan&#39;;    --薪水    v_sal emp.sal%TYPE;begin    --查询表中姓名和薪水并赋值给变量    select ename，sal into v_name,v_sal from emp where empno&#x3D;7839;    --打印变量    dbms_output.put_line(&#39;姓名：&#39;||v_name||&#39;,薪水：&#39;||v_sal);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>记录型变量（接受表中的一行记录）<br>语法：变量名 表名%ROWTYPE，例如： v_emp emp%ROWTYPE;</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DECLARE    --记录型变量   v_emp emp%ROWTYPE;begin    --直接赋值        select * into v_emp from emp where empno&#x3D;7839;    --打印变量    dbms_output.put_line(&#39;姓名：&#39;||v_emp.ename||&#39;,薪水：&#39;||v_emp.sal);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4net 使用</title>
      <link href="/c-winform/log4net-shi-yong/"/>
      <url>/c-winform/log4net-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="在nuget中搜索log4net-然后直接安装"><a href="#在nuget中搜索log4net-然后直接安装" class="headerlink" title="在nuget中搜索log4net,然后直接安装"></a>在nuget中搜索log4net,然后直接安装</h3><h3 id="无论是CS还是BS都可以在AssemblyInfo-cs文件里添加以下的语句："><a href="#无论是CS还是BS都可以在AssemblyInfo-cs文件里添加以下的语句：" class="headerlink" title="无论是CS还是BS都可以在AssemblyInfo.cs文件里添加以下的语句："></a>无论是CS还是BS都可以在AssemblyInfo.cs文件里添加以下的语句：</h3><p>[assembly: log4net.Config .XmlConfigurator(ConfigFile &#x3D;”log4net.config”)]<br>还有ConfigFileExtension（配置文件的扩展名） 和 Watch（表示是否监视该配置文件）<br>或者建一个类，CS端在Main方法中调用，BS在Global.asax.cs的Application_Start方法中调用</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class LogHelper&#123;    static LogHelper()    &#123;        var logCfg &#x3D; new FileInfo(AppDomain.CurrentDomain.BaseDirectory + &quot;log4net.config&quot;);        XmlConfigurator.Configure(logCfg);    &#125;    private static LogHelper _instance &#x3D; null;    private static ILog ILog;    public static ILog Log(Type t)    &#123;        if (_instance &#x3D;&#x3D; null)            _instance &#x3D; new LogHelper();        ILog &#x3D; LogManager.GetLogger(t);        return ILog;    &#125;    public static ILog Log(string type)    &#123;        if (_instance &#x3D;&#x3D; null)            _instance &#x3D; new LogHelper();        ILog &#x3D; LogManager.GetLogger(type);        return ILog;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意配置文件必须要放到bin下面的目录里</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configSections</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4net<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4net.Config.Log4NetConfigurationSectionHandler, log4net<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configSections</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4net</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileAppender<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4net.Appender.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log\<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendToFile</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingStyle</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datePattern</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyyMMdd'.log'<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>staticLogFileName</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4net.Layout.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionPattern</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%date [%thread] %-5level %logger [%property&#123;NDC&#125;] - %message%newline<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ALL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileAppender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4net</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用代码配置</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 日志&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;public static class LogHelper&#123;    public static void Setup(Level level)    &#123;        Hierarchy hierarchy &#x3D; (Hierarchy)LogManager.GetRepository();        &#x2F;&#x2F; 文件Appender        PatternLayout filePatternLayout &#x3D; new PatternLayout        &#123;            ConversionPattern &#x3D; &quot;%date&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %-75.75logger - %message%newline&quot;        &#125;;        filePatternLayout.ActivateOptions();        RollingFileAppender fileAppender &#x3D; new RollingFileAppender        &#123;            Encoding &#x3D; Encoding.UTF8,            AppendToFile &#x3D; true,            File &#x3D; @&quot;.\log\&quot;,            RollingStyle &#x3D; RollingFileAppender.RollingMode.Date,            StaticLogFileName &#x3D; false,            PreserveLogFileNameExtension &#x3D; true,            Layout &#x3D; filePatternLayout,            DatePattern &#x3D; &quot;yyyyMMdd&#39;.log&#39;&quot;        &#125;;        fileAppender.ActivateOptions();        &#x2F;&#x2F; 控制台Appender        PatternLayout consolePatternLayout &#x3D; new PatternLayout        &#123;            ConversionPattern &#x3D; &quot;%date&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] - %message%newline&quot;        &#125;;        consolePatternLayout.ActivateOptions();        ConsoleAppender consoleAppender &#x3D; new ConsoleAppender();        consoleAppender.Layout &#x3D; consolePatternLayout;        consoleAppender.ActivateOptions();        &#x2F;&#x2F; 添加Appenders        hierarchy.Root.AddAppender(fileAppender);        hierarchy.Root.AddAppender(consoleAppender);        hierarchy.Root.Level &#x3D; level;        hierarchy.Configured &#x3D; true;    &#125;    private static Dictionary&lt;Type, ILog&gt; Loggers &#x3D; new Dictionary&lt;Type, ILog&gt;();    private static object locker &#x3D; new object();    public static ILog Write    &#123;        get        &#123;            Type triggerType &#x3D; new StackTrace().GetFrames().Skip(1).First().GetMethod().DeclaringType;            if (triggerType &#x3D;&#x3D; null)                triggerType &#x3D; typeof(LogHelper);                        if (!Loggers.ContainsKey(triggerType))            &#123;                lock (locker)                &#123;                    if (!Loggers.ContainsKey(triggerType))                    &#123;                        Loggers.Add(triggerType, LogManager.GetLogger(triggerType));                    &#125;                &#125;            &#125;            return Loggers[triggerType];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有很多配置可以参考<br><a href="http://logging.apache.org/log4net/release/config-examples.html">http://logging.apache.org/log4net/release/config-examples.html</a></p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">class Program&#123;    static void Main(string[] args)    &#123;        Console.WriteLine(&quot;dfasdfas&quot;);        ILog log &#x3D; LogHelper.Log(typeof(Program));        log.Info(&quot;dadafds&quot;);        log.Debug(&quot;debug&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Matplotlib 画图显示中文问题</title>
      <link href="/python/python-matplotlib-hua-tu-xian-shi-zhong-wen-wen-ti/"/>
      <url>/python/python-matplotlib-hua-tu-xian-shi-zhong-wen-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>画图显示中文出现问题<br><img src="/images/2019070416010101.png" alt="2019070416010101.png"></p><p><strong>解决办法</strong></p><ol><li>安装字体（黑体 SimHei），系统中有改字体就不用安装了</li><li>找到matplotlib包的安装目录（Lib\site-packages\matplotlib\mpl-data）</li><li>修改matplotlib的配置（matplotlibrc）<br> font.family         : sans-serif<br>　　font.sans-serif     : SimHei<br>　　axes.unicode_minus  : False<br>　　去掉这些配置前面的#<br><img src="/images/2019070416010102.png" alt="2019070416010102.png"><br>或者在代码里修改配置也可以</li></ol><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 将科学计算字符串转换为数值</title>
      <link href="/mysql-sql-oracle/sql-jiang-ke-xue-ji-suan-zi-fu-chuan-zhuan-huan-wei-shu-zhi/"/>
      <url>/mysql-sql-oracle/sql-jiang-ke-xue-ji-suan-zi-fu-chuan-zhuan-huan-wei-shu-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select convert(decimal(19,2),convert(float,&#39;1.635359e+006&#39;))或select cast(cast(&#39;1.635359e+006&#39; as float) as decimal(19,2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 数据迁移到 SQL Server</title>
      <link href="/mysql-sql-oracle/oracle-shu-ju-qian-yi-dao-sql-server/"/>
      <url>/mysql-sql-oracle/oracle-shu-ju-qian-yi-dao-sql-server/</url>
      
        <content type="html"><![CDATA[<p>现在需要将Oracle数据迁移到SQL Server ，在网上找资料，发现微软官方提供了一个工具 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=54258">Microsoft SQL Server Migration Assistant 8.1 for Oracle</a></p><ol><li>安装工具后新建一个项目，选择对应版本的数据库<br><img src="/images/2019050915321201.png" alt="2019050915321201.png"></li><li>连接数据库<br>连接oracle<br><img src="/images/2019050915321202.png" alt="2019050915321202.png"><br>连接sqlserver<br><img src="/images/2019050915321203.png" alt="2019050915321203.png"></li><li>转换Schema<br>在oracle中勾选需要转换的表Convert Schema<br><img src="/images/2019050915321204.png" alt="2019050915321204.png"><br>在sqlserver中Synchronize with Database<br><img src="/images/2019050915321205.png" alt="2019050915321205.png"></li><li>在Oracle Metadata Explorer窗口中执行Migrate Data，开始迁移数据。<br><img src="/images/2019050915321206.png" alt="2019050915321206.png"><br><img src="/images/2019050915321207.png" alt="2019050915321207.png"><br>还有将mysql、Access、DB2 数据导入到SQL数据库中的工具</li></ol><p>问题：提示如图警告<br><img src="/images/2019050915321208.png" alt="2019050915321208.png"><br>在开始菜单中找到“数据库配置工具”，启动sqlserver 代理服务<br><img src="/images/2019050915321209.png" alt="2019050915321209.png"></p><p>参考 <a href="https://blogs.msdn.microsoft.com/ssma/2017/02/21/released-sql-server-migration-assistant-ssma-v7-3/">https://blogs.msdn.microsoft.com/ssma/2017/02/21/released-sql-server-migration-assistant-ssma-v7-3/</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 导入导出dmp文件</title>
      <link href="/mysql-sql-oracle/oracle-dao-ru-dao-chu-dmp-wen-jian/"/>
      <url>/mysql-sql-oracle/oracle-dao-ru-dao-chu-dmp-wen-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>EXP和IMP</strong>是客户端工具程序，它们既可以在客户端使用，也可以在服务端使用。<br><strong>EXPDP和IMPDP</strong>是服务端的工具程序，他们只能在ORACLE服务端使用，不能在客户端使用。<br>IMP只适用于EXP导出的文件，不适用于EXPDP导出文件；IMPDP只适用于EXPDP导出的文件，而不适用于EXP导出文件。</p><p><strong>–exp导出数据</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exp test/test@orcl <span class="token assign-left variable">file</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>orcl.dmp <span class="token assign-left variable">log</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>log<span class="token punctuation">\</span>orcl.log <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>–imp导入数据</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">imp test/test@orcl <span class="token assign-left variable">file</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>orcl.dmp <span class="token assign-left variable">log</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>log<span class="token punctuation">\</span>orcl.log <span class="token assign-left variable">full</span><span class="token operator">=</span>y <span class="token assign-left variable">ignore</span><span class="token operator">=</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：test&#x2F;test@orcl —&gt;用户名&#x2F;密码@数据库实例<br>      file&#x3D;”本地路径+需要导入&#x2F;导出的dmp文件全称”<br>      log&#x3D;”日志文件”<br>      full&#x3D;y;<br>　　   ignore&#x3D;y: 如果没有的表，创建并倒入数据，如果已经有的表，忽略创建的，但不忽略倒入。</p><p>使用ignore&#x3D;y,Oracle不检查要导入的数据结构和现存在数据库中表的结构是否相同</p><p>在后面也可以加入其它参数</p><p>如：tables&#x3D;(table1,table2)：表示值导入&#x2F;导出table1、table2这两张表；compress&#x3D;y:表示压缩文件，还有fromuser、touser等</p><p>注意：上面的命令只需打开dos窗口输入直接执行即可；如果使用sqlplus登陆进入使用上面的命令会报“<strong>sp2-0734:未知的命令开头</strong>‘imp 忽略了剩余行”错误。</p><p>–expdp导出数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">expdp test/test@orcl directory <span class="token operator">=</span> <span class="token string">"testdata"</span> dumpfile <span class="token operator">=</span><span class="token string">"orcl.dmp"</span> logfile <span class="token operator">=</span> orcl.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–impdp导入数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">impdp test/test@orcl <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"testdata"</span> <span class="token assign-left variable">dumpfile</span><span class="token operator">=</span><span class="token string">"orcl.dmp"</span> logfile <span class="token operator">=</span> orcl.log <span class="token assign-left variable">full</span><span class="token operator">=</span>y<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 创建用户并授权</title>
      <link href="/mysql-sql-oracle/oracle-chuang-jian-yong-hu-bing-shou-quan/"/>
      <url>/mysql-sql-oracle/oracle-chuang-jian-yong-hu-bing-shou-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><p>进入dos界面，输入 sqlplus &#x2F; as sysdba;以dba的权限登陆oracle (sqlplus test&#x2F;test as sysdba);test指用户名，&#x2F;后的test是密码。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create tablespace testSpace datafile &#39;D:\test.dbf&#39; size 100M autoextend on next 50M;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>testSpace：表空间名<br>datafile 数据库文件及路径</p><h2 id="创建用户，并设置默认表空间"><a href="#创建用户，并设置默认表空间" class="headerlink" title="创建用户，并设置默认表空间"></a>创建用户，并设置默认表空间</h2><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create user test identified by test default tablespace testSpace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>user后的test是用户名<br>by后的test 是 密码<br>从11g后 创建公用用户需要以 <strong>C##或c##开头</strong></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">grant connect,dba to test;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将连接、dba的权限给test用户</p><h2 id="常用查询"><a href="#常用查询" class="headerlink" title="常用查询"></a>常用查询</h2><ol><li><p>查询表空间</p><ol><li>查所有表空间</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from dba_tablespacer t;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>只查表空间名称：</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select tablespace_name from dba_tablespaces;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以进Oracle点击TABLESPACE里面看。</p></li><li><p>查询目录</p></li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from dba_directories;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以进Oracle点击DIRECTORY里面看.点击右键properties可以看到目录路径</p><ol start="3"><li>查看当前数据库版本号</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from v$version;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 <a href="http://www.cnblogs.com/xqzt/p/5034261.html">http://www.cnblogs.com/xqzt/p/5034261.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql incorrect string value 错误</title>
      <link href="/mysql-sql-oracle/mysql-incorrect-string-value-cuo-wu/"/>
      <url>/mysql-sql-oracle/mysql-incorrect-string-value-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>Mysql中添加数据时,报错(incorrect string value ) 字符转换不正确</p><p>这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。而Mysql的utf8编码最多3个字节，遇到超过3个字节的的数据就插不进去。</p><p>在网上找到了解决办法</p><ol><li>在Mysql的安装目录下有一个文件叫做my.ini。（如没有可以自己新建一个）<br>在其中添加两句：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8mb4<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行重启Mysql服务。<br>也可以用命令将数据库转换格式<br><img src="/images/2019050510310101.png" alt="2019050510310101.png"><br>将红色框中的名称替换为自己的数据库名</p><ol start="2"><li>将已经建好的表也转换为utf8mb4格式</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter table banner convert to character set utf8mb4 collate utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2019050510310102.png" alt="2019050510310102.png"><br>将红色框中的表名替换为自己要修改的表名</p><p>参考 <a href="https://www.jianshu.com/p/4aa27b7b0ab0">https://www.jianshu.com/p/4aa27b7b0ab0</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据坐标经纬度计算两点之间的距离</title>
      <link href="/c-winform/gen-ju-zuo-biao-jing-wei-du-ji-suan-liang-dian-zhi-jian-de-ju-chi/"/>
      <url>/c-winform/gen-ju-zuo-biao-jing-wei-du-ji-suan-liang-dian-zhi-jian-de-ju-chi/</url>
      
        <content type="html"><![CDATA[<p>地球是一个近乎标准的椭球体，它的赤道半径为6378.140千米，极半径为 6356.755千米，平均半径6371.004千米。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 给定的经度1，纬度1；经度2，纬度2. 计算2个经纬度之间的距离。&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;lat1&quot;&gt;纬度1&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;lon1&quot;&gt;经度1&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;lat2&quot;&gt;纬度2&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;lon2&quot;&gt;经度2&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;距离（公里、千米）&lt;&#x2F;returns&gt;private double Distance(double lat1, double lon1, double lat2, double lon2)&#123;    double EARTH_RADIUS &#x3D; 6371.0;    &#x2F;&#x2F;用haversine公式计算球面两点间的距离。    &#x2F;&#x2F;经纬度转换成弧度    lat1 &#x3D; ConvertDegreesToRadians(lat1);    lon1 &#x3D; ConvertDegreesToRadians(lon1);    lat2 &#x3D; ConvertDegreesToRadians(lat2);    lon2 &#x3D; ConvertDegreesToRadians(lon2);    &#x2F;&#x2F;差值    var vLon &#x3D; Math.Abs(lon1 - lon2);    var vLat &#x3D; Math.Abs(lat1 - lat2);    &#x2F;&#x2F; h is the great circle distance in radians, great circle    &#x2F;&#x2F; 就是一个球体上的切面，它的圆心即是球心的一个周长最大的圆。    var h &#x3D; HaverSin(vLat) + Math.Cos(lat1) * Math.Cos(lat2) * HaverSin(vLon);    var distance &#x3D; 2 * EARTH_RADIUS * Math.Asin(Math.Sqrt(h));    return distance;&#125;&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 将角度换算为弧度。&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;degrees&quot;&gt;角度&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;弧度&lt;&#x2F;returns&gt;private double ConvertDegreesToRadians(double degrees)&#123;    return degrees * Math.PI &#x2F; 180;&#125;&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 将弧度换算为角度。&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;radian&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;private double ConvertRadiansToDegrees(double radian)&#123;    return radian * 180.0 &#x2F; Math.PI;&#125;&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; HaverSin&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;theta&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;private double HaverSin(double theta)&#123;    var v &#x3D; Math.Sin(theta &#x2F; 2);    return v * v;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线计算经纬度距离工具 <a href="http://www.gpsspg.com/distance.htm">http://www.gpsspg.com/distance.htm</a></p><p>参考 <a href="https://blog.csdn.net/xiejm2333/article/details/73297004">https://blog.csdn.net/xiejm2333/article/details/73297004</a></p><p><a href="https://www.cnblogs.com/zhoug2020/p/3950933.html">https://www.cnblogs.com/zhoug2020/p/3950933.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 获取类名</title>
      <link href="/c-winform/csharp-huo-qu-lei-ming/"/>
      <url>/c-winform/csharp-huo-qu-lei-ming/</url>
      
        <content type="html"><![CDATA[<ol><li>获取C#类中类名</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>获取C#类中类名（包含命名空间）</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.FullName;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>获取C# 类中方法名</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">System.Reflection.MethodBase.GetCurrentMethod().Name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post、Get请求</title>
      <link href="/c-winform/post-get-qing-qiu/"/>
      <url>/c-winform/post-get-qing-qiu/</url>
      
        <content type="html"><![CDATA[<p>post、get请求方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; Post、Get请求&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;url&quot;&gt;请求地址（http:localshost：8080）&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;method&quot;&gt;请求方式（post、get）&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;bodys&quot;&gt;post请求参数&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;querys&quot;&gt;get请求蚕食&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;headers&quot;&gt;请求头&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;contentType&quot;&gt;编码方式（application&#x2F;x-www-form-urlencoded）&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public static string HttpInvoker(string url, string method, string bodys, string querys, Dictionary&lt;string, string&gt; headers, string contentType)&#123;    HttpWebRequest httpRequest &#x3D; null;    HttpWebResponse httpResponse &#x3D; null;    if (querys.Length &lt; 0)    &#123;        url &#x3D; url + &quot;?&quot; + querys;    &#125;    if (url.Contains(&quot;https:&#x2F;&#x2F;&quot;))    &#123;        ServicePointManager.ServerCertificateValidationCallback &#x3D; new RemoteCertificateValidationCallback(CheckValidationResult);        httpRequest &#x3D; (HttpWebRequest)WebRequest.CreateDefault(new Uri(url));    &#125;    else    &#123;        httpRequest &#x3D; (HttpWebRequest)WebRequest.Create(url);    &#125;    httpRequest.Method &#x3D; method.ToUpper();    foreach (var header in headers)    &#123;        httpRequest.Headers.Add(header.Key, header.Value);    &#125;    &#x2F;&#x2F;根据API的要求，定义相对应的Content-Type    httpRequest.ContentType &#x3D; contentType;    if (bodys.Length &lt; 0)    &#123;        &#x2F;&#x2F;添加post参数        byte[] data &#x3D; Encoding.UTF8.GetBytes(bodys);        using (Stream stream &#x3D; httpRequest.GetRequestStream())        &#123;            stream.Write(data, 0, data.Length);        &#125;    &#125;    try    &#123;        httpResponse &#x3D; (HttpWebResponse)httpRequest.GetResponse();    &#125;    catch (WebException ex)    &#123;        httpResponse &#x3D; (HttpWebResponse)ex.Response;    &#125;    Stream s &#x3D; httpResponse.GetResponseStream();    string result &#x3D; string.Empty;    using (StreamReader reader &#x3D; new StreamReader(s, Encoding.UTF8))    &#123;        result &#x3D; reader.ReadToEnd();    &#125;    return result;&#125;private static bool CheckValidationResult(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors)&#123;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image和Base64相互转换</title>
      <link href="/c-winform/image-he-base64-xiang-hu-zhuan-huan/"/>
      <url>/c-winform/image-he-base64-xiang-hu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<ol><li>图片转换为Base64</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 图片转换为base64&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;imagefile&quot;&gt;图片路径&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;picFomatter&quot;&gt;图片格式(.jpg、.png等)&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public string GetBase64FromImage(string imagefile,string icFomatter)&#123;    string strbaser64 &#x3D; &quot;&quot;;    try    &#123;        Bitmap bmp &#x3D; new Bitmap(imagefile);        MemoryStream ms &#x3D; new MemoryStream();        ImageFormat format &#x3D; ImageFormat.Jpeg;        switch (picFomatter)        &#123;            case &quot;png&quot;:                format &#x3D; ImageFormat.Png;                break;            case &quot;bmp&quot;:                format &#x3D; ImageFormat.Bmp;                break;        &#125;        bmp.Save(ms, format);        byte[] arr &#x3D; new byte[ms.Length];        ms.Position &#x3D; 0;        ms.Read(arr, 0, (int)ms.Length);        ms.Close();        ms.Dispose();        strbaser64 &#x3D; Convert.ToBase64String(arr);        switch (picFomatter)        &#123;            case &quot;jpg&quot;:                strbaser64 &#x3D; &quot;data:image&#x2F;&quot; + picFomatter + &quot;;base64,&quot; + strbaser64;                break;            case &quot;jpeg&quot;:                strbaser64 &#x3D; &quot;data:image&#x2F;&quot; + picFomatter + &quot;;base64,&quot; + strbaser64;                break;            case &quot;bmp&quot;:                strbaser64 &#x3D; &quot;data:image&#x2F;&quot; + picFomatter + &quot;;base64,&quot; + strbaser64;                break;            default:                strbaser64 &#x3D; &quot;data:image&#x2F;png&quot; + &quot;;base64,&quot; + strbaser64;                break;        &#125;    &#125;    catch (Exception)    &#123;        throw new Exception(&quot;Something wrong during convert!&quot;);    &#125;    return strbaser64;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Base64转换图片</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; Base64转换图片&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strbase64&quot;&gt;base64字符串&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;picFomatter&quot;&gt;图片格式&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public string Base64StringToImage(string strbase64, string icFomatter)&#123;    try    &#123;        byte[] arr &#x3D; Convert.FromBase64String(strbase64);        MemoryStream ms &#x3D; new MemoryStream(arr);        Bitmap bmp &#x3D; new Bitmap(ms);        string filePath &#x3D; System.AppDomain.CurrentDomain.BaseDirectory;        ImageFormat format &#x3D; ImageFormat.Jpeg;        switch (picFomatter)        &#123;            case &quot;png&quot;:                format &#x3D; ImageFormat.Png;                break;            case &quot;bmp&quot;:                format &#x3D; ImageFormat.Bmp;                break;        &#125;        string filename &#x3D; filePath + DateTime.Now.ToFileTime().ToString() + &quot;.&quot; + picFomatter;        bmp.Save(filename, format);        ms.Close();        return filename;    &#125;    catch (Exception ex)    &#123;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 判断是否Base64编码&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;s&quot;&gt;编码字符串&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public bool IsBase64(string s)&#123;    try    &#123;        Convert.FromBase64String(s);        return true;    &#125;    catch (FormatException)    &#123;        return false;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html checkbox全选</title>
      <link href="/js/html-checkbox-quan-xuan/"/>
      <url>/js/html-checkbox-quan-xuan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;table class&#x3D;&quot;data-table td-center&quot;&gt;     &lt;tr&gt;        &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;ckAll&quot; name&#x3D;&quot;checkAll&quot;  &#x2F;&gt;全选&lt;&#x2F;td&gt;        &lt;td&gt;编号&lt;&#x2F;td&gt;        &lt;td&gt;姓名&lt;&#x2F;td&gt;        &lt;td&gt;班级&lt;&#x2F;td&gt;        &lt;td&gt;年龄&lt;&#x2F;td&gt;        &lt;td&gt;邮箱&lt;&#x2F;td&gt;        &lt;td&gt;操作&lt;&#x2F;td&gt;     &lt;&#x2F;tr&gt;     &lt;tr&gt;        &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;checkItem&quot; onclick&#x3D;&quot;checkOne(this)&quot;&#x2F;&gt;&lt;&#x2F;td&gt;        &lt;td&gt;1&lt;&#x2F;td&gt;        &lt;td&gt;张三&lt;&#x2F;td&gt;        &lt;td&gt;2班&lt;&#x2F;td&gt;        &lt;td&gt;12&lt;&#x2F;td&gt;        &lt;td&gt;zs@qq.com&lt;&#x2F;td&gt;        &lt;td&gt;&lt;a href&#x3D;&#39;javascript:void(0);&#39;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;checkItem&quot; onclick&#x3D;&quot;checkOne(this)&quot; &#x2F;&gt;&lt;&#x2F;td&gt;        &lt;td&gt;2&lt;&#x2F;td&gt;        &lt;td&gt;李四&lt;&#x2F;td&gt;        &lt;td&gt;1班&lt;&#x2F;td&gt;        &lt;td&gt;11&lt;&#x2F;td&gt;        &lt;td&gt;ls@qq.com&lt;&#x2F;td&gt;        &lt;td&gt;&lt;a href&#x3D;&#39;javascript:void(0);&#39;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core 中间件</title>
      <link href="/netcore/net-core-zhong-jian-jian/"/>
      <url>/netcore/net-core-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<p>中间件是一种装配到应用管道以处理请求和响应的软件。 每个组件：</p><ol><li>选择是否将请求传递到管道中的下一个组件。</li><li>可在管道中的下一个组件前后执行工作。</li></ol><p>请求委托用于生成请求管道。 请求委托处理每个 HTTP 请求。<br>使用 RunMap 和 Use 扩展方法来配置请求委托。 可将一个单独的请求委托并行指定为匿名方法（称为并行中间件），或在可重用的类中对其进行定义。 这些可重用的类和并行匿名方法即为中间件，也叫中间件组件。 请求管道中的每个中间件组件负责调用管道中的下一个组件，或使管道短路。</p><p><strong>使用 IApplicationBuilder 创建中间件管道</strong></p><p>ASP.NET Core 请求管道包含一系列请求委托，依次调用。 下图演示了这一概念。 沿黑色箭头执行。<br><img src="/images/2019020217460601.png" alt="2019020217460601.png"></p><p>每个委托均可在下一个委托前后执行操作。 此外，委托还可以决定不将请求传递给下一个委托，这就是对请求管道进行短路。 通常需要短路，因为这样可以避免不必要的工作。 例如，静态文件中间件可以返回静态文件请求并使管道的其余部分短路。 先在管道中调用异常处理委托，以便它们可以捕获在管道的后期阶段所发生的异常。</p><p>新建一个类RequestIPMiddleware获取ip地址</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Threading.Tasks;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Logging;public class RequestIPMiddleware&#123;    private readonly RequestDelegate _next;    private readonly ILogger _logger;    public RequestIPMiddleware(RequestDelegate next, ILoggerFactory loggerFactory)    &#123;        _next &#x3D; next;        _logger &#x3D; loggerFactory.CreateLogger&lt;RequestIPMiddleware&gt;();    &#125;    public async Task Invoke(HttpContext context)    &#123;        _logger.LogInformation(&quot;User IP-------&gt;&quot; + context.Connection.RemoteIpAddress.ToString());        await context.Response.WriteAsync(&quot;IP-----&gt;&quot;+context.Connection.RemoteIpAddress.ToString() +&quot;\n&quot;);        await _next.Invoke(context);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建类RequestIPExtensions</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using Microsoft.AspNetCore.Builder;public static class RequestIPExtensions&#123;    public static IApplicationBuilder UseRequestIP(this IApplicationBuilder builder)    &#123;        return builder.UseMiddleware&lt;RequestIPMiddleware&gt;();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Startup类中的Configure方法中调用</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">loggerfactory.AddConsole(minLevel: LogLevel.Information);app.UseRequestIP(); &#x2F;&#x2F;使用Ip中间件app.Run(async context &#x3D;&gt;&#123;       await context.Response.WriteAsync(&quot;Hello world !&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-2.1">https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-2.1</a></p>]]></content>
      
      
      <categories>
          
          <category> NETCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# DataTable 用法</title>
      <link href="/c-winform/csharp-datatable-yong-fa/"/>
      <url>/c-winform/csharp-datatable-yong-fa/</url>
      
        <content type="html"><![CDATA[<ol><li>创建DataTable</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DataTable dataTable &#x3D; new DataTable(); &#x2F;&#x2F;创建一个空表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建DataRow</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DataRow row &#x3D;  dataTable.NewRow(); &#x2F;&#x2F;创建空行dataTable.Rows.Add(row); &#x2F;&#x2F;添加行DataRow row &#x3D; dataTable.Rows.Add(); &#x2F;&#x2F;创建空行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建DataColumn</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;1.创建空列DataColumn dc &#x3D; new DataColumn();dataTable.Columns.Add(dc);&#x2F;&#x2F;2.创建带列名和类型名的列(两种方式任选其一)dataTable.Columns.Add(&quot;column0&quot;,System.Type.GetType(&quot;System.String&quot;));dataTable.Columns.Add(&quot;column0&quot;, typeof(String));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>筛选</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">dataTable.Select(&quot;column0 like &#39;li%&#39;&quot;); &#x2F;&#x2F;类似写sql语句dataTable.Select(&quot;column0 like &#39;li%&#39;&quot;,&quot;column0 DESC&quot;); &#x2F;&#x2F;可以排序object obj &#x3D; dataTable.Compute(&quot;max(列名)&quot;, &quot;&quot;);  &#x2F;&#x2F;还可以使用其它sql的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>删除</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">dataTable.Rows.Remove(dataTable.Rows[0]);dataTable.Rows.RemoveAt(0);&#x2F;&#x2F;通过索引删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>复制表</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DataTable newdt &#x3D; dataTable.Clone(); &#x2F;&#x2F;复制DataTable的表结构DataTable dtNew &#x3D; dataTable.Copy();&#x2F;&#x2F;复制DataTable的表结构及数据dataTable.ImportRow(dataRow); &#x2F;&#x2F;将dataRow中的数据复制到dataTable的dataRow中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>排序</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">DataView dv &#x3D; dataTable.DefaultView;dv.Sort &#x3D; &quot; 列名 DESC&quot;;DataTable dtNew &#x3D; dv.ToTable();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考： <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.data.datatable?view=netframework-4.7.2">https://docs.microsoft.com/zh-cn/dotnet/api/system.data.datatable?view=netframework-4.7.2</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math.round、Math.floor、Math.ceil 区别</title>
      <link href="/js/math.round-math.floor-math.ceil-qu-bie/"/>
      <url>/js/math.round-math.floor-math.ceil-qu-bie/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Math.round（） 按照四舍五入的方式返回值</p><p> 例如：Math.round（9.5）&#x3D;10</p></li></ol><p>　　      Math.round（9.4）&#x3D;9</p><ol start="2"><li><p>Math.floor（）返回最小整数</p><p> 例如：Math.floor（9.5）&#x3D;9</p></li></ol><p>　　　    Math.floor（9.2）&#x3D;9</p><ol start="3"><li><p>Math.ceil（）返回最大整数</p><p> 例如： Math.ceil（9.1）&#x3D;10</p></li></ol><p>　　       Math.ceil（9.5）&#x3D;10</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中margin属性</title>
      <link href="/html-css/css-zhong-margin-shu-xing/"/>
      <url>/html-css/css-zhong-margin-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>css中margin块级元素的垂直相邻外边距会合并，比如<br><img src="/images/2018121813270701.png" alt="2018121813270701.png"></p><p>方框的上下外边距并不是2px，而是合并为1px了。</p><p>设置float属性就可以避免这种同级元素边距合并</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server 常用函数</title>
      <link href="/mysql-sql-oracle/sql-server-chang-yong-han-shu/"/>
      <url>/mysql-sql-oracle/sql-server-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="SUBSTRING-expression-start-length"><a href="#SUBSTRING-expression-start-length" class="headerlink" title="SUBSTRING ( expression ,start , length )"></a>SUBSTRING ( expression ,start , length )</h2><p>参数</p><p>. expression<br>字符串、二进制字符串、文本、图像、列或包含列的表达式。不要使用包含聚合函数的表达式。</p><p>.start<br>指定子字符串从何处开始的整数。start可以是bigint类型；索引从1开始</p><p>.length<br>长度是一个正整数，它指定返回表达式的字符或字节数。如果长度为负值，则返回错误。长度可以是bigint型</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT SUBSTRING(&#39;LGAG4DY30B353&#39;,1,10)  --截取前10位返回结果 LGAG4DY30B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="STUFF-character-expression-start-length-replaceWith-expression"><a href="#STUFF-character-expression-start-length-replaceWith-expression" class="headerlink" title="STUFF ( character_expression , start , length , replaceWith_expression )"></a>STUFF ( character_expression , start , length , replaceWith_expression )</h2><p>参数</p><p>.character_expression<br>字符数据的表达式可以是常量、变量，也可以是字符列或二进制数据列。</p><p>.start<br>一个整数值，指定删除和插入的开始位置。 如果 start 为负或为零，则返回空字符串。 如果 start 的长度大于第一个 character_expression，则返回空字符串。 start 的类型可以是 bigint。索引从1开始。</p><p>.length<br>一个整数，指定要删除的字符数。 如果 length 为负，则返回空字符串。 如果 length 的长度大于第一个 character_expression，则最多可以删除到最后一个 character_expression 中的最后一个字符。 如果 length 为零，则在字符串中第一个字符之前插入内容。 length 的类型可以是 bigint。</p><p>.replaceWith_expression<br>字符数据的表达式。 character_expression 可以是常量、变量，也可以是字符列或二进制数据列。 此表达式从 start 开始替换 length 个字符的 character_expression。 如果 replaceWith_expression 为 NULL，则在不插入任何内容的情况下删除字符。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT STUFF(&#39;LGAG4DY30B&#39;,9,1,&#39;-&#39;) --返回结果 LGAG4DY3-B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SELECT 字段 FROM 表名 FOR JSON AUTO</strong><br><strong>SELECT 字段 FROM 表名 FOR JSON PATH</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select top 1 Id,Name,CreateTime from Log for json path  --返回结果 [&#123;&quot;Id&quot;:1,&quot;Name&quot;:&quot;车辆信息查询&quot;,&quot;CreateTime&quot;:&quot;2018-09-06T09:00:28.090&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SELECT 字段 FROM 表名 FOR JSON PATH，ROOT(‘ ‘)</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select top 1 Id,Name,CreateTime from Log for json path,root(&#39;Log&#39;)  --返回结果 &#123;&quot;Log&quot;:[&#123;&quot;Id&quot;:1,&quot;Name&quot;:&quot;车辆信息查询&quot;,&quot;CreateTime&quot;:&quot;2018-09-06T09:00:28.090&quot;&#125;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>FOR XML PATH 用法类似</strong><br><strong>FOR XML PATH和STUFF结合使用，将字段用逗号连接起来</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select STUFF((select &#39;,&#39;+CONVERT(varchar(200),ID) from  SMP_Case for xml path(&#39;&#39;)),1,1,&#39;&#39;) as IDs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CHARINDEX-expressionToFind-expressionToSearch-start-location"><a href="#CHARINDEX-expressionToFind-expressionToSearch-start-location" class="headerlink" title="CHARINDEX ( expressionToFind , expressionToSearch [ , start_location ] )"></a>CHARINDEX ( expressionToFind , expressionToSearch [ , start_location ] )</h2><p>参数</p><p>.expressionToFind<br>一个字符表达式，其中包含要查找的序列。 expressionToFind 限制为 8000 个字符 。</p><p>.expressionToSearch<br>要搜索的字符表达式。</p><p>.start_location<br>表示搜索开始位置的 integer 或 bigint 表达式 。 如果 start_location 未指定、具有负数值或 0，搜索将从 expressionToSearch 的开头开始 。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select CHARINDEX(&#39;-&#39;,&#39;LGWE13243-ABC&#39;)  --返回结果10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PATINDEX-‘-pattern-’-expression"><a href="#PATINDEX-‘-pattern-’-expression" class="headerlink" title="PATINDEX ( ‘%pattern%’ , expression )"></a>PATINDEX ( ‘%pattern%’ , expression )</h2><p>参数</p><p>.pattern<br>包含要查找的序列的字符表达式。 可以使用通配符；但 pattern 之前和之后必须有 % 字符（搜索第一个或最后一个字符时除外） 。 pattern 是字符串数据类型类别的表达式 。 pattern最多包含 8000 个字符 。</p><p>.expression<br>是一个expression，通常是针对指定模式搜索的列。 expression 是字符串数据类型类别的表达式 。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select PATINDEX(&#39;%-%&#39;,&#39;243532B-ACFDF3333&#39;) --返回结果8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考：  <a href="https://docs.microsoft.com/zh-cn/sql/t-sql/functions/len-transact-sql?view=sql-server-2017">https://docs.microsoft.com/zh-cn/sql/t-sql/functions/len-transact-sql?view=sql-server-2017</a></p><p>　　　<a href="https://docs.microsoft.com/en-us/sql/relational-databases/json/format-query-results-as-json-with-for-json-sql-server?view=sql-server-2017">https://docs.microsoft.com/en-us/sql/relational-databases/json/format-query-results-as-json-with-for-json-sql-server?view=sql-server-2017</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API 接口收集</title>
      <link href="/other/api-jie-kou-shou-ji/"/>
      <url>/other/api-jie-kou-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>节假日</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">http://api.goseek.cn/http://timor.tech/api/holidayhttp://www.easybots.cn/api/holiday.php?d=20130101https://tool.bitefu.net/jiari/?d=20181001&amp;info=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发票验证</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">https://market.aliyun.com/products/56928005/cmapi025075.html?spm=5176.10695662.1996646101.searchclickresult.112d7d3dtnP9jR#sku=yuncode1907500000https://market.aliyun.com/products/57124001/cmapi027758.html#sku=yuncode2175800000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json 序列化为Dictionary</title>
      <link href="/c-winform/json-xu-lie-hua-wei-dictionary/"/>
      <url>/c-winform/json-xu-lie-hua-wei-dictionary/</url>
      
        <content type="html"><![CDATA[<p>如下所示的json字符串中包含中文属性转换成英文属性</p><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">[&quot;sid&quot;:&quot;dd1312&quot;,&quot;success&quot;:true,&quot;data&quot;:&#123;  &quot;发票代码&quot;: &quot;032001500XXX&quot;,  &quot;发票号码&quot;: &quot;25272XXX&quot;,  &quot;开票日期&quot;: &quot;2017年XX月XX日&quot;,  &quot;校验码&quot;: &quot;15922733756000XXXXXX&quot;,  &quot;发票金额&quot;: &quot;XXX.00&quot;,  &quot;发票税额&quot;: &quot;XXX.43&quot;,  &quot;不含税金额&quot;: &quot;XXX.57&quot;,  &quot;受票方名称&quot;: &quot;XXX&quot;,  &quot;受票方税号&quot;: &quot;XXXX&quot;,  &quot;受票方地址、电话&quot;: &quot;XXX&quot;,  &quot;受票方开户行、账号&quot;: &quot;XXX&quot;,  &quot;销售方名称&quot;: &quot;XXX&quot;,  &quot;销售方税号&quot;: &quot;913201043023368XXX&quot;,  &quot;销售方地址、电话&quot;: &quot;XXX&quot;,  &quot;销售方开户行、账号&quot;: &quot;XXX&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现将json字符串转换成Dictionary类型</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 将Json数据反序列化为Dictionary&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;jsonData&quot;&gt;json数据&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public Dictionary&lt;string, object&gt; JsonToDictionary(string sonData)&#123;    &#x2F;&#x2F;实例化JavaScriptSerializer类的新实例    JavaScriptSerializer javaScriptSerializer &#x3D; new JavaScriptSerializer();    try    &#123;        &#x2F;&#x2F;将指定的 JSON 字符串转换为 Dictionary&lt;string, object&gt; 类型的对象        return javaScriptSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(jsonData);    &#125;    catch (Exception ex)    &#123;        throw new Exception(ex.Message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将中文属性转换成对应的英文属性</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Dictionary&lt;string,object&gt; dic &#x3D; JsonToDictionary(ress);InvoiceAliOcr res &#x3D; new InvoiceAliOcr();res.data &#x3D; new Ocr();if (dic !&#x3D; null &amp;&amp;dic.ContainsKey(&quot;data&quot;))&#123;    Dictionary&lt;string, object&gt; dataSet &#x3D; (Dictionary&lt;string, object&gt;)dic[&quot;data&quot;];    foreach (KeyValuePair&lt;string, object&gt; item in dataSet)    &#123;        switch (item.Key)        &#123;            case &quot;发票代码&quot;:                res.data.fpdm &#x3D; item.Value.ToString();                break;            case &quot;发票号码&quot;:                res.data.fphm &#x3D; item.Value.ToString();                break;            case &quot;开票日期&quot;:                res.data.kprq &#x3D; string.IsNullOrEmpty(item.Value.ToString()) ? &quot;&quot; : Convert.ToDateTime(item.Value.ToString()).ToString(&quot;yyyyMMdd&quot;);                break;            case &quot;校验码&quot;:                res.data.code &#x3D; item.Value.ToString();                break;            case &quot;发票金额&quot;:                res.data.sumamount &#x3D; item.Value.ToString();                break;            case &quot;发票税额&quot;:                res.data.taxamount &#x3D; item.Value.ToString();                break;            case &quot;不含税金额&quot;:                res.data.notaxamount &#x3D; item.Value.ToString();                break;            case &quot;受票方名称&quot;:                res.data.gfMc &#x3D; item.Value.ToString();                break;            case &quot;受票方税号&quot;:                res.data.gfCode &#x3D; item.Value.ToString();                break;            case &quot;销售方名称&quot;:                res.data.sfMc &#x3D; item.Value.ToString();                break;            case &quot;销售方税号&quot;:                res.data.sfCode &#x3D; item.Value.ToString();                break;            default:                break;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisClient 连接redis 提示 ERR Client sent AUTH, but no password is set</title>
      <link href="/mvc/redisclient-lian-jie-redis-ti-shi-err-client-sent-auth-but-no-password-is-set/"/>
      <url>/mvc/redisclient-lian-jie-redis-ti-shi-err-client-sent-auth-but-no-password-is-set/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2018111610561601.png" alt="2018111610561601.png"><br>使用redisclient连接redis出现上图的错误</p><p>在配置中已经找到requirepass修改了密码，但是还是出现上图错误。在网上找了资料在dos设置<br><img src="/images/2018111610561602.png" alt="2018111610561602.png"></p><p>出现上图红框中的错误，研究了半天也没有解决。后来将配置中的requirepass重新注释掉，在重新配置就可以了。<br><img src="/images/2018111610561603.png" alt="2018111610561603.png"></p><p>参考文章 <a href="http://www.cnblogs.com/robinli/p/9265186.html">http://www.cnblogs.com/robinli/p/9265186.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC JSON JavaScriptSerializer 进行序列化或反序列化时出错</title>
      <link href="/mvc/mvc-json-javascriptserializer-jin-xing-xu-lie-hua-huo-fan-xu-lie-hua-shi-chu-cuo/"/>
      <url>/mvc/mvc-json-javascriptserializer-jin-xing-xu-lie-hua-huo-fan-xu-lie-hua-shi-chu-cuo/</url>
      
        <content type="html"><![CDATA[<p>MVC control中返回json格式数据一般都是如下格式</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[HttpPost]public ActionResult CaseAudit(string name)&#123;    var data &#x3D;&quot;dasda&quot;；        return Json(data);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样如果字符串长度太大会报错</p><p><strong>JSON JavaScriptSerializer 进行序列化或反序列化时出错。字符串的长度超过了为 maxJsonLength 属性设置的值</strong></p><p>按下面方法可以解决</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[HttpPost]public ActionResult CaseAudit(string name)&#123;    var data &#x3D;&quot;dasda&quot;；        return new JsonResult() &#123; Data &#x3D; data, MaxJsonLength &#x3D; int.MaxValue, ContentType &#x3D; &quot;application&#x2F;json&quot; &#125;；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者在Web.config中配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.web.extensions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scripting</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webServices</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsonSerialization</span> <span class="token attr-name">maxJsonLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1024000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webServices</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scripting</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.web.extensions</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Control 接收post请求的json数据</title>
      <link href="/mvc/mvc-control-jie-shou-post-qing-qiu-de-json-shu-ju/"/>
      <url>/mvc/mvc-control-jie-shou-post-qing-qiu-de-json-shu-ju/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[HttpPost]public string QueryInvoice()&#123;    string stream;    using (var sr &#x3D; new StreamReader(Request.InputStream))    &#123;        stream &#x3D; sr.ReadToEnd();    &#125;    JavaScriptSerializer js &#x3D; new JavaScriptSerializer();    QueryInfo info &#x3D; js.Deserialize&lt;QueryInfo&gt;(stream);    if (info &#x3D;&#x3D; null)    &#123;        return “请输入正确参数”;    &#125;&#125;public class QueryInfo&#123;    public string caseNumber &#123; get; set; &#125;    public string picture &#123; get; set; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据类型</title>
      <link href="/python/python-shu-ju-lei-xing/"/>
      <url>/python/python-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h2><p>查看数据类型的方法：例如看int类型的方法，在pycharm里 输入int，然后按住ctrl鼠标点击int即可查看int类型的方法</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>int （整型）</p><p>在python2中<br>在32位机器上，整数的位数为32位，范围是 -231<code>~</code>231-1<br>在64位机器上，整数的位数为64位，范围是 -263<code>~</code>263-1</p><p>在python3中<br>整型长度无限制<br><img src="/images/2018091411011101.png" alt="2018091411011101.png"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><img src="/images/2018091411011102.png" alt="2018091411011102.png"><br>特性：</p><ol><li>字符串按照从左到右的字符集存放，可以使用索引的方式访问（从0开始），是有序的</li><li>只能存放一个值，不可变</li></ol><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p>真或假<br>假包括 False、0、空字符串（‘ ’）、[]列表、（）元组、{}字典、None</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>创建列表<br>lst &#x3D; [1, 3, ‘jack’]  或者<br>lst &#x3D; list([1, 3, ‘jack’])</p><p>特性:</p><ol><li>可以存放多个值</li><li>可以使用索引的方式访问（从0开始），是<strong>有序</strong>的</li><li><strong>可以</strong>修改指定索引对应的值</li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>创建元组<br>tu &#x3D; (1, 2, [‘jack’], ‘abc’,)   或者<br>tu &#x3D; list((1, 2, [‘jack’], ‘abc’,))</p><p>特性</p><ol><li>可以存放多个值</li><li>可以使用索引的方式访问（从0开始），是<strong>有序</strong>的</li><li><strong>不可以</strong>修改指定索引对应的值</li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>创建字典<br>dic &#x3D; {‘name’: ‘jack’, ‘age’: 18}  或者<br>dic &#x3D; dict({‘name’: ‘jack’, ‘age’: 18})</p><p>特性</p><ol><li>可以存放多个值</li><li><strong>可以</strong>使用键值对的方式访问，是<strong>无序</strong>的</li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>创建集合<br>s &#x3D; {1, 3, (1, 5, 9), [‘jack’, 2]} 或者<br>s &#x3D; set({1, 3, (1, 5, 9), [‘jack’, 2]})</p><p>特性</p><ol><li><strong>无序且不重复</strong>元素的集合</li></ol><h2 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><img src="/images/2018091411011103.png" alt="2018091411011103.png"></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="/images/2018091411011104.png" alt="2018091411011104.png"></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><img src="/images/2018091411011105.png" alt="2018091411011105.png"></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><img src="/images/2018091411011106.png" alt="2018091411011106.png"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="/images/2018091411011107.png" alt="2018091411011107.png"></p><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p><img src="/images/2018091411011108.png" alt="2018091411011108.png"></p><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p><img src="/images/2018091411011109.png" alt="2018091411011109.png"></p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/images/2018091411011110.png" alt="2018091411011110.png"></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><img src="/images/2018091411011111.png" alt="2018091411011111.png"></p><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><p>按存值个数区分</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>标量／原子类型</td><td>数字，字符串</td></tr><tr><td>容器类型</td><td>列表，元组，字典</td></tr></tbody></table><p>按可变不可变区分</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>可变</td><td>列表，字典</td></tr><tr><td>不可变</td><td>数字，字符串，元组</td></tr></tbody></table><p>按访问顺序区分</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>直接访问</td><td>数字</td></tr><tr><td>顺序访问（序列类型）</td><td>字符串，列表，元组</td></tr><tr><td>key值访问（映射类型）</td><td>字典</td></tr></tbody></table><p>参考：<a href="http://www.runoob.com/python/python-operators.html">http://www.runoob.com/python/python-operators.html</a></p><p>　　　<a href="https://docs.python.org/3/library/stdtypes.html">https://docs.python.org/3/library/stdtypes.html</a></p><p><a href="http://www.cnblogs.com/linhaifeng/articles/5935801.html">http://www.cnblogs.com/linhaifeng/articles/5935801.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quartz和TopShelf Windows服务作业调度</title>
      <link href="/c-winform/quartz-he-topshelf-windows-fu-wu-zuo-ye-diao-du/"/>
      <url>/c-winform/quartz-he-topshelf-windows-fu-wu-zuo-ye-diao-du/</url>
      
        <content type="html"><![CDATA[<p>上一次写了一遍关于Quartz作业调度的文章</p><p>现在使用TopShelf和Quartz实现windows服务作业调度</p><p>TopShelf版本4.0<br>Quartz版本3.0.6</p><p>任务文件和上次文章的一样将日期写入txt文件中，TimeJob代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class TimeJob : IJob&#123;    public Task Execute(IJobExecutionContext context)    &#123;        string filePath &#x3D; @&quot;D:\\log.txt&quot;;        File.AppendAllText(filePath, DateTime.Now.ToString(&quot;yyyy年MM月dd日 HH:mm:ss&quot;) + Environment.NewLine);        Console.WriteLine(DateTime.Now.ToString(&quot;yyyy年MM月dd日 HH:mm:ss&quot;) + Environment.NewLine);        return Task.FromResult(true);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>.创建调度器工厂  ISchedulerFactory factory &#x3D; new StdSchedulerFactory();</li><li>创建任务调度器 IScheduler scheduler &#x3D; null;</li><li>创建任务和触发器</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">scheduler &#x3D; await factory.GetScheduler();&#x2F;&#x2F;创建一个任务IJobDetail job &#x3D; JobBuilder.Create&lt;TimeJob&gt;().WithIdentity&quot;myJob1&quot;, &quot;group1&quot;).Build();&#x2F;&#x2F;创建一个触发器ITrigger trigger &#x3D; TriggerBuilder.Create().WithIdentity&quot;myTrigger1&quot;, &quot;group1&quot;).StartNow().    WithSimpleSchedule(a &#x3D;&gt; a.WithIntervalInSeconds(10).RepeatForever()).Build();&#x2F;&#x2F;将任务和触发器添加到调度器里await scheduler.ScheduleJob(job, trigger);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>开始执行 scheduler.Start()<br>Manager代码如下</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Manager&#123;    &#x2F;&#x2F;创建调度器工厂    ISchedulerFactory factory &#x3D; new StdSchedulerFactory();    &#x2F;&#x2F;创建调度器    IScheduler scheduler &#x3D; null;    public Manager() &#123;        Init();    &#125;     private async void Init()    &#123;        scheduler &#x3D; await factory.GetScheduler();        &#x2F;&#x2F;创建一个任务        IJobDetail job &#x3D; JobBuilder.Create&lt;TimeJob&gt;().WithIdentity(&quot;myJob1&quot;, &quot;group1&quot;).Build();        &#x2F;&#x2F;创建一个触发器        ITrigger trigger &#x3D; TriggerBuilder.Create().WithIdentity(&quot;myTrigger1&quot;, &quot;group1&quot;).StartNow().            WithSimpleSchedule(a &#x3D;&gt; a.WithIntervalInSeconds(10).RepeatForever()).Build();        &#x2F;&#x2F;将任务和触发器添加到调度器里        await scheduler.ScheduleJob(job, trigger);    &#125;     public async void Start()    &#123;        &#x2F;&#x2F;开始执行        await scheduler.Start();    &#125;     public async void Stop()    &#123;        &#x2F;&#x2F;停止        await scheduler.Shutdown(false);    &#125;     public async void Pause()    &#123;        &#x2F;&#x2F;暂停        await scheduler.PauseAll();    &#125;     public async void Continue()    &#123;        &#x2F;&#x2F;继续        await scheduler.ResumeAll();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>调用</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static void Main(string[] args)&#123;    var fac &#x3D; HostFactory.New(x &#x3D;&gt;    &#123;        x.Service&lt;Manager&gt;(s &#x3D;&gt;        &#123;            s.ConstructUsing(name &#x3D;&gt; new Manager());            s.WhenStarted(m &#x3D;&gt; m.Start());            s.WhenStopped(m &#x3D;&gt; m.Stop());            s.WhenPaused(m &#x3D;&gt; m.Pause());            s.WhenContinued(m &#x3D;&gt; m.Continue());        &#125;);        x.RunAsLocalSystem();        x.SetDescription(&quot;QuartzTopShelfDemo Windows服务&quot;);        x.SetDisplayName(&quot;QuartzTopShelfDemo 服务&quot;);        x.SetServiceName(&quot;QuartzTopShelfDemoService&quot;);    &#125;);    fac.Run();       Console.ReadKey();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>配置安装服务</li></ol><p>安装：TopshelfDemo.exe install<br>启动：TopshelfDemo.exe start<br>卸载：TopshelfDemo.exe uninstall</p><p><img src="/images/2018071811491901.png" alt="2018071811491901.png"><br><img src="/images/2018071811491902.png" alt="2018071811491902.png"></p><p>参考：<a href="https://topshelf.readthedocs.io/en/latest/configuration/config_api.html#service-name">https://topshelf.readthedocs.io/en/latest/configuration/config_api.html#service-name</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quartz.NET 作业调度使用</title>
      <link href="/c-winform/quartz.net-zuo-ye-diao-du-shi-yong/"/>
      <url>/c-winform/quartz.net-zuo-ye-diao-du-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Quartz.NET的使用方法有很多，今天使用Quartz.NET3.0.6的时候发现和2.0版本的语法不太一样，百度上找了一圈也没有找到解决办法</p><p>后来在<a href="https://github.com/quartznet/quartznet">GitHub</a>上下载源代码解决了<br><img src="/images/2018071617291901.png" alt="2018071617291901.png"><br>实现每隔10s将时间写入txt文件</p><ol><li>新建一个类，实现IJob接口的Execute方法<strong>Task Execute(IJobExecutionContext context)</strong></li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class TimeJob : IJob&#123;    public Task Execute(IJobExecutionContext context)    &#123;        string filePath &#x3D; @&quot;D:\\log.txt&quot;;        File.AppendAllText(filePath, DateTime.Now + Environment.NewLine);        Console.WriteLine(DateTime.Now + Environment.NewLine);        return Task.FromResult(true);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>实现任务调度</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static void Main(string[] args)&#123;    TestJob();    Console.ReadKey();&#125;static async Task TestJob()&#123;    &#x2F;&#x2F;创建调度器工厂    ISchedulerFactory factory &#x3D; new StdSchedulerFactory();    &#x2F;&#x2F;创建调度器    IScheduler scheduler &#x3D; await factory.GetScheduler();         &#x2F;&#x2F;创建一个任务    IJobDetail job &#x3D; JobBuilder.Create&lt;TimeJob&gt;().WithIdentity(&quot;myJob1&quot;, &quot;group1&quot;).Build();    &#x2F;&#x2F;创建一个触发器    ITrigger trigger &#x3D; TriggerBuilder.Create().WithIdentity(&quot;myTrigger1&quot;, &quot;group1&quot;).StartNow().        WithSimpleSchedule(a &#x3D;&gt; a.WithIntervalInSeconds(10).RepeatForever()).Build();    &#x2F;&#x2F;将任务和触发器添加到调度器里    await scheduler.ScheduleJob(job, trigger);    &#x2F;&#x2F;开始执行    await scheduler.Start();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 参考 <a href="https://github.com/quartznet/quartznet">https://github.com/quartznet/quartznet</a><br><a href="https://quartznet.sourceforge.io/apidoc/3.0/html/">https://quartznet.sourceforge.io/apidoc/3.0/html/</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Epplus导出Excel(DataTable)</title>
      <link href="/c-winform/epplus-dao-chu-excel-datatable/"/>
      <url>/c-winform/epplus-dao-chu-excel-datatable/</url>
      
        <content type="html"><![CDATA[<ol><li>先将dataTable转换成流</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Stream DataTableToExcel(DataTable dataTable, string[] columns, string sheetName)&#123;    try    &#123;        using (ExcelPackage pck &#x3D; new ExcelPackage())        &#123;            ExcelWorksheet ws &#x3D; pck.Workbook.Worksheets.Add(sheetName);            ws.Cells[&quot;A1&quot;].LoadFromDataTable(dataTable, true);            for (int i &#x3D; 1; i &lt;&#x3D; columns.Length; i++) &#x2F;&#x2F;设置excel列名            &#123;                using (ExcelRange rng &#x3D; ws.Cells[1, i])                &#123;                    rng.Style.Font.Bold &#x3D; true;                    rng.Value &#x3D; columns[i - 1];                &#125;            &#125;            MemoryStream ms &#x3D; new MemoryStream();            pck.SaveAs(ms);            ms.Flush();            ms.Position &#x3D; 0;&#x2F;&#x2F;指定当前流的位置从0开始            return ms;        &#125;    &#125;    catch (Exception ex)    &#123;        throw ex;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置Excel单元格格式  <strong>ws.Column(1).Style.Numberformat.Format &#x3D; “YYYY-MM-DD HH:mm:ss”</strong></p><p>保存excel文件</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void ExportExcel(DataTable dt, string[] columns, string sheetName, DownResult result)&#123;       Stream stream &#x3D; DataTableToExcel(dt, columns, sheetName);    ExcelPackage package &#x3D; new ExcelPackage(stream);    fileName &#x3D; sheetName + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;.xlsx&quot;;    filePath &#x3D; HttpContext.Current.Server.MapPath(&quot;~&#x2F;UploadFile&#x2F;&quot;);&#x2F;&#x2F;文件保存地址      if (!Directory.Exists(filePath))&#x2F;&#x2F;如果不存在就创建file文件夹    &#123;        Directory.CreateDirectory(filePath);    &#125;    package.SaveAs(new FileInfo(filePath + fileName));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>直接将dataTable 保存为Excel文件</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void DataTableToExcel(DataTable dtResult,string sheetName)&#123;    string path &#x3D; AppDomain.CurrentDomain.BaseDirectory + DateTime.Now.ToString(&quot;yyyyMMdd&quot;) + &quot;.xlsx&quot;;    FileInfo file &#x3D; new FileInfo(path);    using (ExcelPackage pck &#x3D; new ExcelPackage(file))    &#123;        ExcelWorksheet w &#x3D; pack.Workbook.Worksheets[sheetName];         if (w !&#x3D; null &amp;&amp; w.Name.Equals(sheetName)) &#x2F;&#x2F;判断是否存在该sheet表，存在则删除            pack.Workbook.Worksheets.Delete(w);        ExcelWorksheet ws &#x3D; pack.Workbook.Worksheets.Add(sheetName);        ws.Cells[&quot;A1&quot;].LoadFromDataTable(dtResult, true); &#x2F;&#x2F;第二个参数设置为true则显示datable表头        pck.Save();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echart 动态生成series数据</title>
      <link href="/js/echart-dong-tai-sheng-cheng-series-shu-ju/"/>
      <url>/js/echart-dong-tai-sheng-cheng-series-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>要做成页面只传入数据，js生成图表，如下图<br><img src="/images/2018052914271701.png" alt="2018052914271701.png"><br>下面是js代码</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var LineChart &#x3D; function (ID, title, axisData,seriesData) &#123;    var myChart &#x3D; echarts.init(document.getElementById(ID));    var newData &#x3D; [];    var legendData &#x3D; [];    for (var i &#x3D; 0; i &lt; seriesData.length; i++) &#123;        var lineItem &#x3D; new serLineItem();        lineItem.name &#x3D; seriesData[i].name;        legendData.push(seriesData[i].name);        lineItem.data &#x3D; seriesData[i].data;        newData.push(lineItem);    &#125;    var option &#x3D; &#123;        title: &#123;            text: title,            subtext: &#39;&#39;,            x: &#39;center&#39;        &#125;,        tooltip: &#123;            trigger: &#39;axis&#39;        &#125;,        legend: &#123;            data: legendData,            bottom:0        &#125;,        toolbox: &#123;            show: true,            feature: &#123;                dataZoom: &#123;                   yAxisIndex: &#39;none&#39;                &#125;,                magicType: &#123; type: [&#39;line&#39;, &#39;bar&#39;] &#125;,                restore: &#123;&#125;,                saveAsImage: &#123;&#125;            &#125;        &#125;,        xAxis: &#123;            type: &#39;category&#39;,            boundaryGap: false,            data: axisData        &#125;,        yAxis: &#123;            type: &#39;value&#39;        &#125;,        series: newData    &#125;;    myChart.setOption(option);&#125;var serLineItem &#x3D; function () &#123;    return &#123;        name: &#39;&#39;,        type: &#39;line&#39;,        data: []    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前台页面调用</p><p>引入相关的js文件</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">$(document).ready(function () &#123;　　var axisData&#x3D; [&#39;周一&#39;, &#39;周二&#39;, &#39;周三&#39;, &#39;周四&#39;, &#39;周五&#39;, &#39;周六&#39;, &#39;周日&#39;];var seriesData &#x3D; [&#123; name: &#39;直接访问&#39;, data: [320, 302, 301, 334, 390, 330, 320] &#125;,&#123;name: &#39;邮件营销&#39;, data: [120, 132, 101, 134, 120, 230, 210]&#125;,&#123;name: &#39;联盟广告&#39;, data: [220, 182, 191, 234, 290, 330, 310]&#125;,&#123;name: &#39;视频广告&#39;, data: [150, 212, 201, 154, 190, 330, 410]&#125;,&#123; name: &#39;搜索引擎&#39;, data: [820, 832, 901, 934, 1290, 1330, 1320] &#125;]; LineChart(&#39;main&#39;, &#39;访问&#39;, axisData, seriesData);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转换Excel格式</title>
      <link href="/c-winform/zhuan-huan-excel-ge-shi/"/>
      <url>/c-winform/zhuan-huan-excel-ge-shi/</url>
      
        <content type="html"><![CDATA[<p>做一个功能需要将excel2003格式转成2007的格式，代码如下</p><p>需要引用office的microsoft.office.interop.excel.dll</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">var app &#x3D; new Microsoft.Office.Interop.Excel.Application();var wb &#x3D; app.Workbooks.Open(fileInfos[n].ullName); &#x2F;&#x2F;文件的路径名称wb.SaveAs(fileInfos[n].FullName + &quot;x&quot;, icrosoft.Office.Interop.Excel.lFileFormat.xlOpenXMLWorkbook);wb.Close();app.Quit();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET接收邮件下载邮件附件——openpop.net</title>
      <link href="/c-winform/net-jie-shou-you-jian-xia-zai-you-jian-fu-jian-openpop.net/"/>
      <url>/c-winform/net-jie-shou-you-jian-xia-zai-you-jian-fu-jian-openpop.net/</url>
      
        <content type="html"><![CDATA[<p>使用OpenPop.Net接收邮件很方便，下面是接收下载邮件附件的代码</p><p>OpenPop.Net下载地址 <a href="https://sourceforge.net/projects/hpop/">https://sourceforge.net/projects/hpop/</a></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class EmailHelper&#123;    private string accout; &#x2F;&#x2F;邮箱账户    private string pass;&#x2F;&#x2F;邮箱密码    private string popServer; &#x2F;&#x2F;pop服务地址(阿里云：pop3.mxhichina.com)    private int popPort; &#x2F;&#x2F;pop服务端口号（110）    private bool isUseSSL;    public EmailHelper(string _accout, string _pass, string _popServer, int _popPort, bool _isUseSSL)    &#123;        this.accout &#x3D; _accout;        this.pass &#x3D; _pass;        this.popServer &#x3D; _popServer;        this.popPort &#x3D; _popPort;        this.isUseSSL &#x3D; _isUseSSL;    &#125;    #region 验证邮箱是否登录成功    public bool ValidateAccount(ref string error)    &#123;        Pop3Client client &#x3D; new Pop3Client();        try        &#123;            client.Connect(popServer, popPort, isUseSSL);            client.Authenticate(accout, pass);        &#125;        catch (InvalidLoginException ex)        &#123;            error &#x3D; &quot;邮箱登录失败！&quot;;            return false;        &#125;        catch (InvalidUseException ex)        &#123;            error &#x3D; &quot;邮箱登录失败！&quot;;            return false;        &#125;        catch (PopServerNotFoundException ex)        &#123;            error &#x3D; &quot;服务器没有找到！&quot;;            return false;        &#125;        catch (PopServerException ex)        &#123;            error &#x3D; &quot;请在邮箱开通POP3&#x2F;SMTP！&quot;;            return false;        &#125;        catch (Exception ex)        &#123;            error &#x3D; &quot;连接出现异常&quot;;            return false;        &#125;        finally        &#123;            client.Disconnect();        &#125;        return true;    &#125;    #endregion    # region 下载邮件附件    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 下载邮件附件    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    public void DownAttachments(string path)    &#123;        using (Pop3Client client &#x3D; new Pop3Client())        &#123;            if (client.Connected)            &#123;                client.Disconnect();            &#125;            client.Connect(popServer, popPort, isUseSSL);            client.Authenticate(accout, pass, AuthenticationMethod.UsernameAndPassword);            int messageCount &#x3D; client.GetMessageCount();            StringBuilder strBuilder &#x3D; new StringBuilder();            int count &#x3D; Convert.ToInt32(SqlHelper.ExecuteScalar(&quot;SELECT COUNT(1) FROM EmailList&quot;));            int i &#x3D; 1;            for (i &#x3D; count + 1; i &lt;&#x3D; messageCount; i++)            &#123;                Message message &#x3D; client.GetMessage(i);                string senders &#x3D; message.Headers.From.DisplayName;                string from &#x3D; message.Headers.From.Address;                string subject &#x3D; message.Headers.Subject;                DateTime Datesent &#x3D; message.Headers.DateSent;                List&lt;MessagePart&gt; messageParts &#x3D; message.FindAllAttachments();                foreach (var item in messageParts)                &#123;                    if (item.IsAttachment)                    &#123;                        if (!File.Exists(path + item.FileName))                        &#123;                            if (item.FileName.Contains(&quot;.zip&quot;) || item.FileName.Contains(&quot;.rar&quot;))                                File.WriteAllBytes(path + item.FileName, item.Body);                        &#125;                    &#125;                &#125;                strBuilder.Append(&quot;INSERT INTO [dbo].[EmailList]([Title],[FromAdd],[Time],[isFlag]) VALUES (&quot;);                strBuilder.Append(&quot;&#39;&quot; + subject + &quot;&#39;,&quot; + &quot;&#39;&quot; + from + &quot;&#39;,&quot; + &quot;&#39;&quot; + Datesent.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) + &quot;&#39;,&quot; + 1);                strBuilder.Append(&quot;)&quot;);                SqlHelper.ExecuteNonQuery(strBuilder.ToString());                strBuilder.Clear();            &#125;        &#125;    &#125;    #endregion    #region 下载邮件附件    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 下载邮件附件    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    public void DownAttachmentsById(string path, int messageId)    &#123;        using (Pop3Client client &#x3D; new Pop3Client())        &#123;            if (client.Connected)            &#123;                client.Disconnect();            &#125;            client.Connect(popServer, popPort, isUseSSL);            client.Authenticate(accout, pass, AuthenticationMethod.UsernameAndPassword);            Message message &#x3D; client.GetMessage(messageId);            string senders &#x3D; message.Headers.From.DisplayName;            string from &#x3D; message.Headers.From.Address;            string subject &#x3D; message.Headers.Subject;            DateTime Datesent &#x3D; message.Headers.DateSent;            List&lt;MessagePart&gt; messageParts &#x3D; message.FindAllAttachments();            foreach (var item in messageParts)            &#123;                if (item.IsAttachment)                &#123;                    if (!File.Exists(path + item.FileName))                    &#123;                        if (item.FileName.Contains(&quot;.zip&quot;) || item.FileName.Contains(&quot;.rar&quot;))                            File.WriteAllBytes(path + item.FileName, item.Body);                    &#125;                &#125;            &#125;            MessagePart nomessageParts &#x3D; message.FindFirstHtmlVersion();            string html &#x3D; nomessageParts.GetBodyAsText();            Regex reg &#x3D; new Regex(@&quot;(?is)&lt;a[^&gt;]*?href&#x3D;([&#39;&quot;&quot;]?)(?&lt;url&gt;[^&#39;&quot;&quot;\s&gt;]+)\1[^&gt;]*&gt;(?&lt;text&gt;(?:(?!&lt;&#x2F;?a\b).)*)&lt;&#x2F;a&gt;&quot;);            MatchCollection mc &#x3D; reg.Matches(html);            string url &#x3D; string.Empty;            url &#x3D; mc[0].Groups[&quot;url&quot;].Value;            HttpWebRequest req &#x3D; (HttpWebRequest)HttpWebRequest.Create(url);            req.Method &#x3D; &quot;GET&quot;;            using (WebResponse res &#x3D; req.GetResponse())            &#123;                string reader &#x3D; new StreamReader(res.GetResponseStream(), Encoding.GetEncoding(&quot;utf-8&quot;)).ReadToEnd();                MatchCollection ms &#x3D; reg.Matches(reader);                url &#x3D; ms[0].Groups[&quot;url&quot;].Value;            &#125;        &#125;    &#125;    #endregion    #region    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; 获取邮件数量    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    public int GetEmailCount()    &#123;        int messageCount &#x3D; 0;        using (Pop3Client client &#x3D; new Pop3Client())        &#123;            if (client.Connected)            &#123;                client.Disconnect();            &#125;            client.Connect(popServer, popPort, isUseSSL);            client.Authenticate(accout, pass, AuthenticationMethod.UsernameAndPassword);            messageCount &#x3D; client.GetMessageCount();        &#125;        return messageCount;    &#125;    #endregion&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度Echart 地图</title>
      <link href="/js/bai-du-echart-di-tu/"/>
      <url>/js/bai-du-echart-di-tu/</url>
      
        <content type="html"><![CDATA[<p>使用百度地图做一个全国地图数据分析的功能，如下图<br><img src="/images/2017081411180801.png" alt="2017081411180801.png"></p><p>代码</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; CodeBehind&#x3D;&quot;EchartMap.aspx.cs&quot; Inherits&#x3D;&quot;Demo.EchartMap&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;&lt;head runat&#x3D;&quot;server&quot;&gt;    &lt;title&gt;&lt;&#x2F;title&gt;    &lt;script src&#x3D;&quot;Script&#x2F;jquery&#x2F;jquery-1.10.1.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form id&#x3D;&quot;frmEchartMap&quot; runat&#x3D;&quot;server&quot;&gt;    &lt;div id&#x3D;&quot;mainChart&quot; style&#x3D;&quot;width: 100%; height: 500px; margin-top: 20px;&quot;&gt;    &lt;&#x2F;div&gt;    &lt;&#x2F;form&gt;    &lt;script src&#x3D;&quot;Script&#x2F;echarts&#x2F;echarts.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;Script&#x2F;echarts&#x2F;china.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;Script&#x2F;1.9.3&#x2F;layer.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        var myChart &#x3D; echarts.init(document.getElementById(&#39;mainChart&#39;));        option &#x3D; &#123;            title: &#123;                text: &#39;订单量&#39;,                subtext: &#39;纯属虚构&#39;,                x: &#39;center&#39;            &#125;,            tooltip: &#123;                trigger: &#39;item&#39;            &#125;,            legend: &#123;                orient: &#39;vertical&#39;,                x: &#39;left&#39;,                data: [&#39;订单量&#39;]            &#125;,            dataRange:            &#123;                x: &#39;left&#39;,                y: &#39;bottom&#39;,                splitList:                [                    &#123; start: 900, end: 1500 &#125;,                    &#123; start: 310, end: 1000 &#125;,                    &#123; start: 200, end: 300 &#125;,                    &#123; end: 10 &#125;,                    &#123; start: 10, end: 200, label: &#39;10 到 200（自定义label）&#39; &#125;,                    &#123; start: 5, end: 5, label: &#39;5（自定义特殊颜色）&#39;, color: &#39;black&#39; &#125;,                    &#123; start: 1500 &#125;                ],                color: [&#39;#E0022B&#39;, &#39;#E09107&#39;, &#39;#A3E00B&#39;]            &#125;,            toolbox: &#123;                show: true,                orient: &#39;vertical&#39;,                x: &#39;right&#39;,                y: &#39;center&#39;,                feature: &#123;                    mark: &#123; show: true &#125;,                    dataView: &#123; show: true, readOnly: false &#125;,                    restore: &#123; show: true &#125;,                    saveAsImage: &#123; show: true &#125;                &#125;            &#125;,            roamController: &#123;                show: true,                x: &#39;right&#39;,                mapTypeControl: &#123;                    &#39;china&#39;: true                &#125;            &#125;,            series:            [                &#123;                    name: &#39;订单量&#39;,                    type: &#39;map&#39;,                    mapType: &#39;china&#39;,                    roam: false,                    itemStyle: &#123;                        normal: &#123;                            label: &#123;                                show: true,                                textStyle: &#123;                                    color: &quot;#080808&quot;                                &#125;                            &#125;,                            areaColor: &quot;#EDEDED&quot;                        &#125;,                        emphasis:                                &#123;                                    label: &#123; show: true &#125;                                &#125;                            &#125;,                    showLegendSymbol: false, &#x2F;&#x2F;去掉地图的上标志点                    data: [                        &#123; name: &#39;北京&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;天津&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;上海&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;重庆&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;河北&#39;, value: 0 &#125;,                        &#123; name: &#39;河南&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;云南&#39;, value: 5 &#125;,                        &#123; name: &#39;辽宁&#39;, value: 305 &#125;,                        &#123; name: &#39;黑龙江&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;湖南&#39;, value: 200 &#125;,                        &#123; name: &#39;安徽&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;山东&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;新疆&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;江苏&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;浙江&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;江西&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;湖北&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;广西&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;甘肃&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;山西&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;内蒙古&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;陕西&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;吉林&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;福建&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;贵州&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;广东&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;青海&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;西藏&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;四川&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;宁夏&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;海南&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;台湾&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;香港&#39;, value: Math.round(Math.random() * 2000) &#125;,                        &#123; name: &#39;澳门&#39;, value: Math.round(Math.random() * 2000) &#125;                    ]                &#125;            ]        &#125;;        myChart.on(&quot;click&quot;, function (param) &#123;            var selected &#x3D; param.data;            &#x2F;&#x2F;如果出现乱码可以使用escape、encodeURI、encodeURIComponent() 等方法转码，解码使用对应的unescape、decodeURI、decodeURIComponent            layer_show_wh(&quot;订单查看&quot;, &quot;ParMap.aspx?pName&#x3D;&quot; + selected[&#39;name&#39;], &quot;800px&quot;, &quot;900px&quot;);            myChart.setOption(option);            &#x2F;&#x2F;window.location.href &#x3D; encodeURI(&quot;ParMap.aspx?pName&#x3D;&quot; + escape(selected[&#39;name&#39;]));        &#125;)        &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);        function layer_show_wh(title, url, w, h) &#123;            if (title &#x3D;&#x3D; null || title &#x3D;&#x3D; &#39;&#39;) &#123;                title &#x3D; false;            &#125;;            if (url &#x3D;&#x3D; null || url &#x3D;&#x3D; &#39;&#39;) &#123;                url &#x3D; &quot;&#x2F;manage&#x2F;404.html&quot;;            &#125;;            if (w &#x3D;&#x3D; null || w &#x3D;&#x3D; &#39;&#39;) &#123;                w &#x3D; 800;            &#125;;            if (h &#x3D;&#x3D; null || h &#x3D;&#x3D; &#39;&#39;) &#123;                h &#x3D; ($(window).height() - 50);            &#125;;            layer.open(&#123;                type: 2,                area: [w, h],                fix: false, &#x2F;&#x2F;不固定                maxmin: true,                shade: 0.4,                title: title,                content: url            &#125;);        &#125;    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; CodeBehind&#x3D;&quot;ParMap.aspx.cs&quot; Inherits&#x3D;&quot;Demo.ParMap&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;&lt;head runat&#x3D;&quot;server&quot;&gt;    &lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form id&#x3D;&quot;form1&quot; runat&#x3D;&quot;server&quot;&gt;    &lt;div id&#x3D;&quot;mainChart&quot; style&#x3D;&quot;width: 100%; height: 500px; margin-top: 20px;&quot;&gt;    &lt;&#x2F;div&gt;    &lt;&#x2F;form&gt;    &lt;script src&#x3D;&quot;Script&#x2F;jquery&#x2F;jquery-1.10.1.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;Script&#x2F;echarts&#x2F;echarts.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        var myChart &#x3D; echarts.init(document.getElementById(&#39;mainChart&#39;));        window.onload &#x3D; function () &#123;            var mapHash &#x3D; &#123; &quot;河北&quot;: &quot;hebei&quot;, &quot;山西&quot;: &quot;shanxi&quot;, &quot;内蒙古&quot;: &quot;neimenggu&quot;, &quot;辽宁&quot;: &quot;liaoning&quot;, &quot;吉林&quot;: &quot;jilin&quot;, &quot;黑龙江&quot;: &quot;heilongjiang&quot;, &quot;江苏&quot;: &quot;jiangsu&quot;, &quot;浙江&quot;: &quot;zhejiang&quot;, &quot;安徽&quot;: &quot;anhui&quot;, &quot;福建&quot;: &quot;fujian&quot;, &quot;江西&quot;: &quot;jiangxi&quot;, &quot;山东&quot;: &quot;shandong&quot;, &quot;河南&quot;: &quot;henan&quot;, &quot;湖北&quot;: &quot;hubei&quot;, &quot;湖南&quot;: &quot;hunan&quot;, &quot;广东&quot;: &quot;guangdong&quot;, &quot;广西&quot;: &quot;guangxi&quot;, &quot;海南&quot;: &quot;hainan&quot;, &quot;四川&quot;: &quot;sichuan&quot;, &quot;贵州&quot;: &quot;guizhou&quot;, &quot;云南&quot;: &quot;yunnan&quot;, &quot;西藏&quot;: &quot;xizang&quot;, &quot;陕西&quot;: &quot;shanxi1&quot;, &quot;甘肃&quot;: &quot;gansu&quot;, &quot;青海&quot;: &quot;qinghai&quot;, &quot;宁夏&quot;: &quot;ningxia&quot;, &quot;新疆&quot;: &quot;xinjiang&quot;, &quot;北京&quot;: &quot;beijing&quot;, &quot;天津&quot;: &quot;tianjin&quot;, &quot;上海&quot;: &quot;shanghai&quot;, &quot;重庆&quot;: &quot;chongqing&quot;, &quot;香港&quot;: &quot;xianggang&quot;, &quot;澳门&quot;: &quot;aomen&quot;, &quot;台湾&quot;: &quot;taiwan&quot; &#125;;            var pName &#x3D; GetQueryString(&quot;pName&quot;);            showProvince(mapHash[pName]);        &#125;;        function GetQueryString(name) &#123;            var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);            var url &#x3D; decodeURI(window.location.search);            var r &#x3D; url.substr(1).match(reg);            if (r !&#x3D; null) return unescape(r[2]); return null;        &#125;        function showProvince(name) &#123;            $.get(&#39;&#x2F;Script&#x2F;echarts&#x2F;mapdata&#x2F;&#39; + name + &#39;.json&#39;, function (geoJson) &#123;                echarts.registerMap(name, geoJson);                myChart.setOption(option &#x3D; &#123;                    &#x2F;&#x2F;backgroundColor: &#39;#404a59&#39;,                    tooltip: &#123;                        trigger: &#39;item&#39;                    &#125;,                    title: &#123;                        left: &#39;center&#39;,                        textStyle: &#123;                            color: &#39;#fff&#39;                        &#125;                    &#125;,                    legend: &#123;                        x: &#39;right&#39;,                        data: [&#39;订单数据&#39;]                    &#125;,                    dataRange:                    &#123;                        orient: &#39;horizontal&#39;,                        x: &#39;right&#39;,                        min: 0,                        max: 1000,                        color: [&#39;orange&#39;, &#39;yellow&#39;],                        text: [&#39;高&#39;, &#39;低&#39;],           &#x2F;&#x2F; 文本，默认为数值文本                        splitNumber: 0                    &#125;,                    series: [                        &#123;                            name: &#39;订单数据&#39;,                            type: &#39;map&#39;,                            mapType: name,                            label: &#123;                                emphasis: &#123;                                    textStyle: &#123;                                        color: &#39;#fff&#39;                                    &#125;                                &#125;                            &#125;,                            itemStyle: &#123;                                normal: &#123;                                    borderColor: &#39;#389BB7&#39;,                                    areaColor: &#39;#fff&#39;,                                    label: &#123; show: true &#125;                                &#125;,                                emphasis: &#123;                                    areaColor: &#39;#389BB7&#39;,                                    borderWidth: 0,                                    label: &#123; show: true &#125;                                &#125;                            &#125;,                            showLegendSymbol: false, &#x2F;&#x2F;去掉地图的上标志点                            animation: false,                            roam: true,                            data:                            [                                &#123; name: &#39;重庆市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;北京市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;天津市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;上海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;香港&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;澳门&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;巴音郭楞蒙古自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;和田地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;哈密地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿克苏地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿勒泰地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;喀什地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;塔城地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;昌吉回族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;克孜勒苏柯尔克孜自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;吐鲁番地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;伊犁哈萨克自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;博尔塔拉蒙古自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;乌鲁木齐市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;克拉玛依市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿拉尔市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;图木舒克市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;五家渠市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;石河子市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;那曲地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿里地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;日喀则地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;林芝地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;昌都地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;山南地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;拉萨市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;呼伦贝尔市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿拉善盟&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;锡林郭勒盟&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鄂尔多斯市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;赤峰市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;巴彦淖尔市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;通辽市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;乌兰察布市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;兴安盟&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;包头市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;呼和浩特市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;乌海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;海西蒙古族藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;玉树藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;果洛藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;海南藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;海北藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黄南藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;海东地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;西宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;甘孜藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阿坝藏族羌族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;凉山彝族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;绵阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;达州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;广元市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;雅安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宜宾市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;乐山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南充市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;巴中市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;泸州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;成都市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;资阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;攀枝花市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;眉山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;广安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;德阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;内江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;遂宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;自贡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黑河市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;大兴安岭地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;哈尔滨市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;齐齐哈尔市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;牡丹江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;绥化市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;伊春市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;佳木斯市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鸡西市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;双鸭山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;大庆市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鹤岗市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;七台河市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;酒泉市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;张掖市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;甘南藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;武威市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;陇南市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;庆阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;白银市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;定西市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;天水市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;兰州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;平凉市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;临夏回族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;金昌市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;嘉峪关市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;普洱市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;红河哈尼族彝族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;文山壮族苗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;曲靖市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;楚雄彝族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;大理白族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;临沧市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;迪庆藏族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;昭通市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;昆明市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;丽江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;西双版纳傣族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;保山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;玉溪市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;怒江傈僳族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;德宏傣族景颇族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;百色市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;河池市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;桂林市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;柳州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;崇左市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;来宾市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;玉林市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;梧州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;贺州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;钦州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;贵港市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;防城港市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;北海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;怀化市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;永州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;邵阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;郴州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;常德市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;湘西土家族苗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;衡阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;岳阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;益阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;长沙市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;株洲市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;张家界市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;娄底市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;湘潭市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;榆林市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;延安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;汉中市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;安康市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;商洛市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宝鸡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;渭南市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;咸阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;西安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;铜川市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;清远市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;韶关市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;湛江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;梅州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;河源市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;肇庆市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;惠州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;茂名市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;江门市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阳江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;云浮市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;广州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;汕尾市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;揭阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;珠海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;佛山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;潮州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;汕头市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;深圳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;东莞市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;中山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;延边朝鲜族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;吉林市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;白城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;松原市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;长春市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;白山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;通化市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;四平市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;辽源市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;承德市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;张家口市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;保定市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;唐山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;沧州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;石家庄市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;邢台市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;邯郸市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;秦皇岛市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;衡水市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;廊坊市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;恩施土家族苗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;十堰市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宜昌市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;襄樊市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黄冈市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;荆州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;荆门市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;咸宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;随州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;孝感市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;武汉市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黄石市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;神农架林区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;天门市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;仙桃市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;潜江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鄂州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;遵义市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黔东南苗族侗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;毕节地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黔南布依族苗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;铜仁地区&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黔西南布依族苗族自治州&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;六盘水市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;安顺市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;贵阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;烟台市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;临沂市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;潍坊市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;青岛市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;菏泽市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;济宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;德州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;滨州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;聊城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;东营市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;济南市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;泰安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;威海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;日照市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;淄博市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;枣庄市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;莱芜市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;赣州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;吉安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;上饶市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;九江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;抚州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宜春市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南昌市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;景德镇市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;萍乡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鹰潭市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;新余市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;信阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;洛阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;驻马店市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;周口市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;商丘市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;三门峡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;新乡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;平顶山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;郑州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;安阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;开封市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;焦作市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;许昌市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;濮阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;漯河市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鹤壁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;大连市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;朝阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;丹东市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;铁岭市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;沈阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;抚顺市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;葫芦岛市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阜新市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;锦州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;鞍山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;本溪市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;营口市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;辽阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;盘锦市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;忻州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;吕梁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;临汾市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;晋中市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;运城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;大同市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;长治市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;朔州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;晋城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;太原市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阳泉市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;六安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;安庆市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;滁州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宣城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;阜阳市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宿州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;黄山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;巢湖市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;亳州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;池州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;合肥市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;蚌埠市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;芜湖市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;淮北市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;淮南市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;马鞍山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;铜陵市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南平市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;三明市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;龙岩市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宁德市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;福州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;漳州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;泉州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;莆田市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;厦门市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;丽水市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;杭州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;温州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宁波市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;舟山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;台州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;金华市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;衢州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;绍兴市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;嘉兴市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;湖州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;盐城市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;徐州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南通市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;淮安市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;苏州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;宿迁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;连云港市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;扬州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;南京市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;泰州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;无锡市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;常州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;镇江市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;吴忠市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;中卫市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;固原市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;银川市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;石嘴山市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;儋州市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;文昌市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;乐东黎族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;三亚市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;琼中黎族苗族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;东方市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;海口市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;万宁市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;澄迈县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;白沙黎族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;琼海市&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;昌江黎族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;临高县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;陵水黎族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;屯昌县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;定安县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;保亭黎族苗族自治县&#39;, value: Math.round(Math.random() * 1000) &#125;,                                &#123; name: &#39;五指山市&#39;, value: Math.round(Math.random() * 1000) &#125;                            ]                        &#125;                    ]                &#125;);            &#125;);        &#125;           &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：全国省份的数据不要带<strong>市、省、自治区</strong>等<br>如果弹出框出现乱码可以使用<strong>escape、encodeURI、encodeURIComponent()</strong> 等方法转码</p><p>js对文字进行编码涉及3个函数：escape,encodeURI,encodeURIComponent，相应3个解码函数：unescape,decodeURI,decodeURIComponent</p><ol><li>传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。<br>例如：</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;script language&#x3D;&quot;javascript&quot;&gt;document.write(&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;passport.baidu.com&#x2F;?logout&amp;aid&#x3D;7&amp;u&#x3D; +encodeURIComponent(&quot;http:&#x2F;&#x2F;cang.baidu.com&#x2F;bruce42&quot;)+&quot;&gt;退出&lt;&#x2F;a&gt;&#39;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>进行url跳转时可以整体使用encodeURI<br>例如：</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">Location.href&#x3D;encodeURI(&quot;http:&#x2F;&#x2F;cang.baidu.com&#x2F;do&#x2F;s?word&#x3D;百度&amp;ct&#x3D;21&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>js使用数据时可以使用escape<br>例如：收藏中history记录。</li><li>escape对0-255以外的unicode值进行编码时输出%u****格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。<br>最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方式和当前页面编码方式相同）</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">escape不编码字符有69个：*，+，-，.，&#x2F;，@，_，0-9，a-z，A-ZencodeURI不编码字符有82个：!，#，$，&amp;，&#39;，(，)，*，+，,，-，.，&#x2F;，:，;，&#x3D;，?，@，_，~，0-9，a-z，A-ZencodeURIComponent不编码字符有71个：!， &#39;，(，)，*，-，.，_，~，0-9，a-z，A-Z <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mobiscroll 日期问题</title>
      <link href="/js/mobiscroll-ri-qi-wen-ti/"/>
      <url>/js/mobiscroll-ri-qi-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>做的一个项目中用到了mobiscroll日期控件，设置距离当前日期往前推一个月的时间出现如下图问题<br><img src="/images/2017081410471701.png" alt="2017081410471701.png"><br>弹出窗默认的年份不对，后来查找原因是初始化属性配置有问题，应该将设置为**dateFormat:’yy-mm-dd’**就可以了<br><img src="/images/2017081410471702.png" alt="2017081410471702.png"></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    $(function () &#123;        initCurrentDate();        var currYear &#x3D; (new Date()).getFullYear();        var d &#x3D; new Date();        var month &#x3D; d.getMonth().toString().length &#x3D;&#x3D; 1 ? &quot;0&quot; + (d.getMonth() + 1) : (d.getMonth() + 1);        var day &#x3D; d.getDate().toString().length &#x3D;&#x3D; 1 ? &quot;0&quot; + d.getDate() : d.getDate();        var date &#x3D; d.getFullYear() + &#39;-&#39; + month + &#39;-&#39; + day;        d.setMonth(d.getMonth() - 1);        var sMonth &#x3D; d.getMonth().toString().length &#x3D;&#x3D; 1 ? &quot;0&quot; + (d.getMonth() + 1) : (d.getMonth() + 1);        var sDay &#x3D; d.getDate().toString().length &#x3D;&#x3D; 1 ? &quot;0&quot; + d.getDate() : d.getDate();        var sDate &#x3D; d.getFullYear() + &#39;-&#39; + sMonth + &#39;-&#39; + sDay;        $(&quot;#startDate&quot;).val(sDate)        $(&quot;#endDate&quot;).val(date);    &#125;);    function initCurrentDate() &#123;      var currYear &#x3D; (new Date()).getFullYear();        var opt &#x3D; &#123;            preset: &#39;date&#39;, &#x2F;&#x2F;日期            theme: &#39;android-ics light&#39;, &#x2F;&#x2F;皮肤样式            display: &#39;modal&#39;, &#x2F;&#x2F;显示方式            mode: &#39;scroller&#39;, &#x2F;&#x2F;日期选择模式            dateFormat: &#39;yy-mm-dd&#39;, &#x2F;&#x2F; 日期格式            lang: &#39;zh&#39;,            setText: &#39;确定&#39;, &#x2F;&#x2F;确认按钮名称            cancelText: &#39;取消&#39;,&#x2F;&#x2F;取消按钮名籍我            startYear: currYear - 50, &#x2F;&#x2F;开始年份            endYear: currYear + 10 &#x2F;&#x2F;结束年份        &#125;;        $(&quot;#startDate&quot;).mobiscroll(opt);        $(&quot;#endDate&quot;).mobiscroll(opt);&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery自动完成插件flexselect</title>
      <link href="/js/jquery-zi-dong-wan-cheng-cha-jian-flexselect/"/>
      <url>/js/jquery-zi-dong-wan-cheng-cha-jian-flexselect/</url>
      
        <content type="html"><![CDATA[<p>项目中使用flexselect自动完成插件时遇到一个问题<br><img src="/images/2017073115241301.png" alt="2017073115241301.png"><br>刚开始以为是js的引用顺序有问题，但是查看后发现不是js引用顺序问题</p><p>js引用顺序如下<br><img src="/images/2017073115241301.png" alt="2017073115241302.png"><br>最后查找资料也没有解决问题，一直提示这个错误</p><p>后来在function中加入$就好了<br><img src="/images/2017073115241303.png" alt="2017073115241303.png"></p><p>参考 <a href="http://www.jq22.com/jquery-info455">http://www.jq22.com/jquery-info455</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 video 连续播放视频</title>
      <link href="/html-css/html5-video-lian-xu-bo-fang-shi-pin/"/>
      <url>/html-css/html5-video-lian-xu-bo-fang-shi-pin/</url>
      
        <content type="html"><![CDATA[<p>HTML Video标签属性<br><img src="/images/2017072409491901.png" alt="2017072409491901.png"><br>html页面代码</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;video height&#x3D;&quot;2160&quot; id&#x3D;&quot;playVideo&quot; width&#x3D;&quot;3840&quot; poster&#x3D;&quot;img&#x2F;blank.png&quot; autoplay&#x3D;&quot;autoplay&quot; preload&#x3D;&quot;auto&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取video对象</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var media &#x3D; document.getElementById(&quot;playVideo&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>不要使用jquery获取，这样会有问题</strong></p><p>监听video对象的ended属性实现连续播放</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var curr &#x3D; 0;var media &#x3D; document.getElementById&quot;playVideo&quot;);media.addEventListener(&quot;ended&quot;, function ) &#123;    media.src &#x3D; videoArr[curr];    media.play();    curr++;    if (curr &gt;&#x3D; videoArr.length)        curr &#x3D; 0;&#125;, false);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的属性请参考<br><a href="http://www.w3school.com.cn/jsref/dom_obj_event.asp">http://www.w3school.com.cn/jsref/dom_obj_event.asp</a><br><a href="http://www.jianshu.com/p/404d01b8e713/">http://www.jianshu.com/p/404d01b8e713/</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>team foundation server 工具的使用</title>
      <link href="/tools/team-foundation-server-gong-ju-de-shi-yong/"/>
      <url>/tools/team-foundation-server-gong-ju-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<ol><li>打开TFS工具点击创建集合，填写集合名称，下一步，按照步骤一步一步的往下操作。<br><img src="/images/2017062915270701.jpg" alt="2017062915270701.jpg"></li><li>创建完集合以后，打开VS工具，如下图，在主页上左键选择新建团队项目。<br><img src="/images/2017062915270702.jpg" alt="2017062915270702.jpg"></li><li>选择团队项目，然后选择新建的项目集合和团队项目<br><img src="/images/2017062915270703.jpg" alt="2017062915270703.jpg"></li><li>选择好以后，点击添加文件，选择要添加的项目所在的文件夹。直接点击完成即可。然后就分配人员权限等等。<br><img src="/images/2017062915270704.jpg" alt="2017062915270704.jpg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dotfuscator 的使用方法</title>
      <link href="/c-winform/dotfuscator-de-shi-yong-fang-fa/"/>
      <url>/c-winform/dotfuscator-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>打开Dotfuscator工具，选择“Create New Project”<br><img src="/images/2017061417170701.jpg" alt="2017061417170701.jpg"><br>在Input选项中选择需要混淆的文件<br><img src="/images/2017061417170702.jpg" alt="2017061417170702.jpg"><br>把 <strong>Disable String Encryption</strong> 设为 <strong>NO</strong>，即启用字符串加密；检查 <strong>Disable Control flow</strong>、<strong>Dsiable Renaming</strong> 也为 <strong>NO</strong>，即保证控制流和混淆功能打开，其他默认。如下图：<br><img src="/images/2017061417170703.jpg" alt="2017061417170703.jpg"><br>Rename 选项勾选“<strong>Use Enhanced Overload Induction</strong>”（使用增强模式），注意：不要勾选下方的“ <strong>Do not suppress on serializable types</strong>”，即序列化类型的变量不加密，否则编译后可能异常； “<strong>Renaming Scheme</strong>” 选择“<strong>Unprintable</strong>”（不可打印字符，即乱码），也可以选择其他如小写字母、大写字符、数字的方式，其他保持默认如下图<br><img src="/images/2017061417170704.jpg" alt="2017061417170704.jpg"><br><strong>String Encryption</strong> 选项 include里勾选需要字符串加密的工程文件EXE、DLL等然后点击绿色小三角生成项目，如下图<br><img src="/images/2017061417170705.jpg" alt="2017061417170705.jpg"><br>完成后使用.Net Reflector查看生成的文件，如下图<br><img src="/images/2017061417170706.jpg" alt="2017061417170706.jpg"><br>参考<a href="http://www.cnblogs.com/icyJ/p/dotfuscator.html">http://www.cnblogs.com/icyJ/p/dotfuscator.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTCMS 网站管理系统</title>
      <link href="/web/dtcms-wang-zhan-guan-li-xi-tong/"/>
      <url>/web/dtcms-wang-zhan-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>dtcms适合开发一些简单小型网站</p><p>开发的过程中遇见了各种问题，下面总结下我遇见的问题</p><ol><li>遇见提示未开启生成静态功能<br><img src="/images/2017053110491901.jpg" alt="2017053110491901.jpg"><br><strong>在系统设置里面将“伪URL重写”为“生成静态”可以解决</strong><br><img src="/images/2017053110491902.jpg" alt="2017053110491902.jpg"></li><li>在生成静态页面的时候提示生成页面完成，但是右下角却显示失败<br><img src="/images/2017053110491903.jpg" alt="2017053110491903.jpg"><br><strong>这个可能是在新建站点的时候，填写的“绑定域名”不能和主域名一样</strong><br><img src="/images/2017053110491904.jpg" alt="2017053110491904.jpg"></li><li>dtcms开发网站部署到IIS生成静态页后，iis的应用程序池的<strong>托管管道模式要选择集成</strong>，不然点击跳转链接的时候会出错。</li></ol><p>插件开发入门可以看看这个文章 <a href="http://www.cnblogs.com/JangoJing/p/4662022.html">http://www.cnblogs.com/JangoJing/p/4662022.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Zxing 生成二维码</title>
      <link href="/c-winform/google-zxing-sheng-cheng-er-wei-ma/"/>
      <url>/c-winform/google-zxing-sheng-cheng-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<p>Net Zxing 源码地址 <a href="http://zxingnet.codeplex.com/">http://zxingnet.codeplex.com/</a></p><p>github 地址 <a href="https://github.com/zxing/zxing">https://github.com/zxing/zxing</a></p><p>新建一个Winform 项目，引用zxing.dll就可了，下图是生成的二维码<br><img src="/images/2017011715251501.png" alt="2017011715251501.png"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;生成中间带二维码的图片private void btnImageCode_Click(object sender, EventArgs e)&#123;    lblShow.Text &#x3D; &quot;&quot;;    try    &#123;        &#x2F;&#x2F;构造二维码写码器        MultiFormatWriter mutiWriter &#x3D; new MultiFormatWriter();        Hashtable hint &#x3D; new Hashtable();        hint.Add(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);        hint.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);        &#x2F;&#x2F;生成二维码        ByteMatrix bm &#x3D; mutiWriter.encode(txtContent.Text, BarcodeFormat.QR_CODE, 300, 300, hint);        Bitmap img &#x3D; bm.ToBitmap();        &#x2F;&#x2F;要插入到二维码中的图片        Image middlImg &#x3D; picLittle.Image;        &#x2F;&#x2F;获取二维码实际尺寸（去掉二维码两边空白后的实际尺寸）        Size realSize &#x3D; mutiWriter.GetEncodeSize(txtContent.Text, BarcodeFormat.QR_CODE, 300, 300);        &#x2F;&#x2F;计算插入图片的大小和位置        int middleImgW &#x3D; Math.Min((int)(realSize.Width &#x2F; 3.5), middlImg.Width);        int middleImgH &#x3D; Math.Min((int)(realSize.Height &#x2F; 3.5), middlImg.Height);        int middleImgL &#x3D; (img.Width - middleImgW) &#x2F; 2;        int middleImgT &#x3D; (img.Height - middleImgH) &#x2F; 2;        &#x2F;&#x2F;将img转换成bmp格式，否则后面无法创建 Graphics对象        Bitmap bmpimg &#x3D; new Bitmap(img.Width, img.Height, PixelFormat.Format32bppArgb);        using (Graphics g &#x3D; Graphics.FromImage(bmpimg))        &#123;            g.InterpolationMode &#x3D; InterpolationMode.HighQualityBicubic;            g.SmoothingMode &#x3D; SmoothingMode.HighQuality;            g.CompositingQuality &#x3D; CompositingQuality.HighQuality;            g.DrawImage(img, 0, 0);        &#125;        &#x2F;&#x2F;在二维码中插入图片        Graphics MyGraphic &#x3D; Graphics.FromImage(bmpimg);        &#x2F;&#x2F;白底        MyGraphic.FillRectangle(Brushes.White, middleImgL, middleImgT, middleImgW, middleImgH);        MyGraphic.DrawImage(middlImg, middleImgL, middleImgT, middleImgW, middleImgH);        picCode.Image &#x3D; bmpimg;        &#x2F;&#x2F;自动保存图片到当前目录        string filename &#x3D; Environment.CurrentDirectory + &quot;\\QR&quot; + DateTime.Now.Ticks.ToString() + &quot;.jpg&quot;;        bmpimg.Save(filename, ImageFormat.Jpeg);        lblShow.Text &#x3D; &quot;图片已保存到：&quot; + filename;    &#125;    catch (Exception ee)    &#123;         MessageBox.Show(ee.Message);     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成条形码、二维码和图片解码代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;生成条形码private void btnBarCode_Click(object sender, EventArgs e)&#123;    lblShow.Text &#x3D; &quot;&quot;;    Regex rg &#x3D; new Regex(&quot;^[0-9]&#123;13&#125;$&quot;);    if (!rg.IsMatch(txtContent.Text.Trim()))    &#123;        MessageBox.Show(&quot;本例子采用EAN_13编码，需要输入13位数字&quot;);        return;    &#125;    try    &#123;        MultiFormatWriter mutiWriter &#x3D; new MultiFormatWriter();        ByteMatrix bm &#x3D; mutiWriter.encode(txtContent.Text, BarcodeFormat.EAN_13, 363, 150);        Bitmap img&#x3D; bm.ToBitmap();        picCode.Image &#x3D; img;        &#x2F;&#x2F;自动保存图片到当前目录        string filename &#x3D; Environment.CurrentDirectory + &quot;\\EAN_13&quot; + DateTime.Now.Ticks.ToString() + &quot;.jpg&quot;;        img.Save(filename, ImageFormat.Jpeg);        lblShow.Text &#x3D; &quot;图片已保存到：&quot; + filename;    &#125;    catch (Exception ex)    &#123;        MessageBox.Show(ex.Message);    &#125;&#125;&#x2F;&#x2F;生成二维码private void btnDimensionCode_Click(object sender, EventArgs )&#123;    lblShow.Text &#x3D; &quot;&quot;;    try    &#123;        &#x2F;&#x2F;构造二维码写码器        MultiFormatWriter mutiWriter &#x3D; new MultiFormatWriter();        ByteMatrix bm &#x3D; mutiWriter.encode(txtContent.Text, BarcodeFormat.QR_CODE, 300, 300);        Bitmap img &#x3D; bm.ToBitmap();        picCode.Image &#x3D; img;        &#x2F;&#x2F;自动保存图片到当前目录        string filename &#x3D; Environment.CurrentDirectory + &quot;\\QR&quot; + DateTime.Now.Ticks.ToString() + &quot;.jpg&quot;;        img.Save(filename, ImageFormat.Jpeg);        lblShow.Text &#x3D; &quot;图片已保存到：&quot; + filename;    &#125;    catch (Exception ex)    &#123;         MessageBox.Show(ex.Message);    &#125;&#125;&#x2F;&#x2F;打开二维码图片路径string opFilePath &#x3D; string.Empty;&#x2F;&#x2F;插入二维码中的小图片private void picLittle_Click(object sender, EventArgs e)&#123;    OpenFileDialog ofd &#x3D; new OpenFileDialog();    ofd.Filter &#x3D; &quot;图片文件|*.bmp;*.jpg;*.png;*.ico&quot;;    if (ofd.ShowDialog() &#x3D;&#x3D; DialogResult.OK)    &#123;        opFilePath &#x3D; ofd.FileName;        picLittle.Image &#x3D; Image.FromFile(opFilePath);    &#125;&#125;&#x2F;&#x2F;生成中间带二维码的图片private void btnImageCode_Click(object sender, EventArgs e)&#123;    lblShow.Text &#x3D; &quot;&quot;;    try    &#123;        &#x2F;&#x2F;构造二维码写码器        MultiFormatWriter mutiWriter &#x3D; new MultiFormatWriter();        Hashtable hint &#x3D; new Hashtable();        hint.Add(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);        hint.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);        &#x2F;&#x2F;生成二维码        ByteMatrix bm &#x3D; mutiWriter.encode(txtContent.Text, BarcodeFormat.QR_CODE, 300, 300, hint);        Bitmap img &#x3D; bm.ToBitmap();        &#x2F;&#x2F;要插入到二维码中的图片        Image middlImg &#x3D; picLittle.Image;        &#x2F;&#x2F;获取二维码实际尺寸（去掉二维码两边空白后的实际尺寸）        Size realSize &#x3D; mutiWriter.GetEncodeSize(txtContent.Text, BarcodeFormat.QR_CODE, 300, 300);        &#x2F;&#x2F;计算插入图片的大小和位置        int middleImgW &#x3D; Math.Min((int)(realSize.Width &#x2F; 3.5), middlImg.Width);        int middleImgH &#x3D; Math.Min((int)(realSize.Height &#x2F; 3.5), middlImg.Height);        int middleImgL &#x3D; (img.Width - middleImgW) &#x2F; 2;        int middleImgT &#x3D; (img.Height - middleImgH) &#x2F; 2;        &#x2F;&#x2F;将img转换成bmp格式，否则后面无法创建 Graphics对象        Bitmap bmpimg &#x3D; new Bitmap(img.Width, img.Height, PixelFormat.Format32bppArgb);        using (Graphics g &#x3D; Graphics.FromImage(bmpimg))        &#123;            g.InterpolationMode &#x3D; InterpolationMode.HighQualityBicubic;            g.SmoothingMode &#x3D; SmoothingMode.HighQuality;            g.CompositingQuality &#x3D; CompositingQuality.HighQuality;            g.DrawImage(img, 0, 0);        &#125;        &#x2F;&#x2F;在二维码中插入图片        Graphics MyGraphic &#x3D; Graphics.FromImage(bmpimg);        &#x2F;&#x2F;白底        MyGraphic.FillRectangle(Brushes.White, middleImgL, middleImgT, middleImgW, middleImgH);        MyGraphic.DrawImage(middlImg, middleImgL, middleImgT, middleImgW, middleImgH);        picCode.Image &#x3D; bmpimg;        &#x2F;&#x2F;自动保存图片到当前目录        string filename &#x3D; Environment.CurrentDirectory + &quot;\\QR&quot; + DateTime.Now.Ticks.ToString() + &quot;.jpg&quot;;        bmpimg.Save(filename, ImageFormat.Jpeg);        lblShow.Text &#x3D; &quot;图片已保存到：&quot; + filename;    &#125;    catch (Exception ee)    &#123;         MessageBox.Show(ee.Message);     &#125;&#125;private void btnSelect_Click(object sender, EventArgs e)&#123;    OpenFileDialog ofd &#x3D; new OpenFileDialog();    ofd.Filter &#x3D; &quot;图片文件|*.bmp;*.jpg;*.png;*.ico&quot;;    if (ofd.ShowDialog() &#x3D;&#x3D; DialogResult.OK)    &#123;        opFilePath &#x3D; ofd.FileName;        picDeCode.ImageLocation &#x3D; opFilePath;    &#125;&#125;&#x2F;&#x2F;图片解码private void btnDecode_Click(object sender, EventArgs e)&#123;    MultiFormatReader multiReader &#x3D; new MultiFormatReader();    Bitmap img &#x3D; (Bitmap)Bitmap.FromFile(opFilePath);    if (img &#x3D;&#x3D; null)        return;    LuminanceSource ls &#x3D; new RGBLuminanceSource(img, img.Width, img.Height);    BinaryBitmap bb &#x3D; new BinaryBitmap(new HybridBinarizer(ls));    &#x2F;&#x2F;注意  必须是Utf-8编码    Hashtable hints &#x3D; new Hashtable();    hints.Add(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);    Result r &#x3D; multiReader.decode(bb, hints);    txtDeCodeMsg.Text &#x3D; r.Text;    lblShow.Text &#x3D; &quot;解码成功！&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://pan.baidu.com/s/1nuOpiLb">测试例子代码</a></p><p>生成二维码还有ThoughtWorks.QRCode.dll</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void MarkQrCode(string str)&#123;    &#x2F;&#x2F;初始化二维码生成工具    QRCodeEncoder qrCodeEncoder &#x3D; new QRCodeEncoder();    qrCodeEncoder.QRCodeEncodeMode &#x3D; QRCodeEncoder.ENCODE_MODE.BYTE;    qrCodeEncoder.QRCodeErrorCorrect &#x3D; QRCodeEncoder.ERROR_CORRECTION.M;    qrCodeEncoder.QRCodeVersion &#x3D; 0;  &#x2F;&#x2F;版本    qrCodeEncoder.QRCodeScale &#x3D; 4; &#x2F;&#x2F;大小    &#x2F;&#x2F;将字符串生成二维码图片    Bitmap image &#x3D; qrCodeEncoder.Encode(str, Encoding.Default);    &#x2F;&#x2F;保存为PNG到内存流      MemoryStream ms &#x3D; new MemoryStream();    image.Save(ms, ImageFormat.Png);    &#x2F;&#x2F;输出二维码图片    Response.BinaryWrite(ms.GetBuffer());    Response.End();   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asp.net 下载文件</title>
      <link href="/web/asp.net-xia-zai-wen-jian/"/>
      <url>/web/asp.net-xia-zai-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>第一种下载方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void DownExcel(string filePath)&#123;    &#x2F;&#x2F;string path &#x3D; HttpContext.Current.Server.MapPath(&quot;&#x2F;UploadFiles&#x2F;KGData&#x2F;test.xls&quot;);    string path &#x3D; HttpContext.Current.Server.MapPath(filePath);    FileInfo fileInfo &#x3D; new FileInfo(filePath);    Response.Clear();    Response.ClearContent();    Response.ClearHeaders();    Response.AddHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename&#x3D;&quot; + fileInfo.Name);    Response.AddHeader(&quot;Content-Length&quot;, fileInfo.Length.ToString());    Response.AddHeader(&quot;Content-Transfer-Encoding&quot;, &quot;binary&quot;);    Response.ContentType &#x3D; &quot;application&#x2F;octet-stream&quot;;    Response.ContentEncoding &#x3D; Encoding.GetEncoding(&quot;gb2312&quot;);    Response.WriteFile(fileInfo.FullName);    Response.Flush();    Response.End();             &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种下载方法<br>windows.location.href &#x3D; “&#x2F;test&#x2F;ExcelDownLoad.aspx?file&#x3D;test.xls” ;</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">protected void ResponseFile()&#123;   string fileName &#x3D; Request.QueryString[&quot;file&quot;];   ext(fileName);    System.IO.Stream iStream &#x3D; null;    &#x2F;&#x2F; 缓冲区为10k    byte[] buffer &#x3D; new Byte[10240];    &#x2F;&#x2F; 文件长度    int length;    &#x2F;&#x2F; 需要读的数据长度    long dataToRead;    try    &#123;        string fileName &#x3D; path;        string filepath &#x3D; HttpContext.Current.Server.MapPath(&quot;&#x2F;ExcelTemp&#x2F;&quot;) + fileName; &#x2F;&#x2F;待下载的文件路径        iStream &#x3D; new System.IO.FileStream(filepath, System.IO.FileMode.Open,            System.IO.FileAccess.Read, System.IO.FileShare.Read);        Response.Clear();        dataToRead &#x3D; iStream.Length;        &#x2F;&#x2F;iStream.Position &#x3D; 0;        long p &#x3D; 0;        if (Request.Headers[&quot;Range&quot;] !&#x3D; null)        &#123;            Response.StatusCode &#x3D; 206;            p &#x3D; long.Parse(Request.Headers[&quot;Range&quot;].Replace(&quot;bytes&#x3D;&quot;, &quot;&quot;).Replace(&quot;-&quot;, &quot;&quot;));        &#125;        if (p !&#x3D; 0)        &#123;            Response.AddHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + p.ToString() + &quot;-&quot; + ((long)(dataToRead - 1)).ToString() + &quot;&#x2F;&quot; + dataToRead.ToString());        &#125;        Response.AddHeader(&quot;Content-Length&quot;, ((long)(dataToRead - p)).ToString());        Response.ContentType &#x3D; &quot;application&#x2F;octet-stream&quot;;        Response.AddHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; +HttpUtility.UrlEncode(Path.GetFileName(filepath)));        Response.AppendHeader(&quot;Location&quot;, Request.Url.AbsoluteUri);         iStream.Position &#x3D; p;        dataToRead &#x3D; dataToRead - p;        while (dataToRead &gt; 0)        &#123;    &#x2F;&#x2F; 检查客户端是否还处于连接状态            if (Response.IsClientConnected)            &#123;                length &#x3D; iStream.Read(buffer, 0, 10240);                Response.OutputStream.Write(buffer, 0, length);                             Response.Flush();                                buffer &#x3D; new Byte[10240];                dataToRead &#x3D; dataToRead - length;            &#125;            else            &#123;    &#x2F;&#x2F; 如果不再连接则跳出死循环                dataToRead &#x3D; -1;            &#125;        &#125;    &#125;    catch (Exception ex)    &#123;        Response.Write(&quot;Error : 文件不存在！！！&quot;);       &#x2F;&#x2F; Response.Redirect(&quot;..&#x2F;Supplier_Idex.aspx&quot;);    &#125;    finally    &#123;        if (iStream !&#x3D; null)        &#123;            iStream.Close();        &#125;        Response.End();    &#125;&#125;protected string ext(string file)&#123;    string str &#x3D; string.Empty;    if(!string.IsNullOrEmpty(file))    &#123;        var invalidPattern &#x3D; new Regex(@&quot;[\\\&#x2F;\:\*\?&lt;\&gt;\|]&quot;);        string strExt &#x3D; invalidPattern.Replace(file, &quot;&quot;);        strExt &#x3D;  Path.GetExtension(file);        switch(strExt)        &#123;            case &quot;.config&quot;:                str &#x3D; &quot;文件不存在&quot;;                break;            default:                str &#x3D; file; break;        &#125;    &#125;    return str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用jquery下载方法</p><p>js方法</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">jQuery.download &#x3D; function (downloadurl, method, filepath, filename) &#123;    jQuery(&#39;&lt;form action&#x3D;&quot;&#39; + downloadurl + &#39;&quot; method&#x3D;&quot;&#39; + (method || &#39;post&#39;) + &#39;&quot;&gt;&#39; +  &#x2F;&#x2F; action请求路径及推送方法         &#39;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;filepath&quot; value&#x3D;&quot;&#39; + filepath + &#39;&quot;&#x2F;&gt;&#39; + &#x2F;&#x2F; 文件路径         &#39;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;filename&quot; value&#x3D;&quot;&#39; + filename + &#39;&quot;&#x2F;&gt;&#39; + &#x2F;&#x2F; 文件名称         &#39;&lt;&#x2F;form&gt;&#39;)        .appendTo(&#39;body&#39;).submit().remove();&#125;;    function ExportToExcel() &#123;    if (confirm(&quot;确定要导出Excel吗？&quot;)) &#123;        var start &#x3D; getQueryString(&#39;fromDate&#39;);        var end &#x3D; getQueryString(&#39;toDate&#39;);        var brand &#x3D; getQueryString(&#39;brandCompany&#39;);        var staff &#x3D; getQueryString(&#39;staff&#39;);        var groupName &#x3D; getQueryString(&#39;groupName&#39;);        $.ajax(&#123;            type: &quot;POST&quot;,            dataType: &quot;json&quot;,            url: &quot;Test.aspx&#x2F;ExportToExcel&quot;,            data: &quot;&#123;fromDate:&#39;&quot; + start + &quot;&#39;,toDate:&#39;&quot; + end + &quot;&#39;,brandName:&#39;&quot; + brand + &quot;&#39;&#125;&quot;,            contentType: &quot;application&#x2F;json; charset&#x3D;utf-8&quot;,            success: function (data) &#123;                var result &#x3D; eval(&#39;(&#39; + data.d + &#39;)&#39;);                if (result.Body &#x3D;&#x3D; &#39;没有需要导出的信息&#39;) &#123;                    alert(result.Body);                &#125;                else &#123;                    $.download(result.DownLoadUrl, &#39;post&#39;, result.FilePath, result.FileName);                &#125;            &#125;,            error: function (msg) &#123;               alert(&#39;系统繁忙，请稍后重试！&#39;);            &#125;        &#125;);    &#125;      &#125; function getQueryString(name)&#123;    var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;);    var result &#x3D; window.location.search.substr(1).match(reg);    if (result !&#x3D; null) &#123;        return unescape(result[2]);    &#125; else &#123;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[WebMethod]public static string ExportToRiskExcel(DateTime fromDate,ateTime toDate,string brandName)&#123;    DataSet ds &#x3D; new wcfInternalService.InternalServiceClient().GetList(fromDate, toDate, brandName);    DownResult result &#x3D; new DownResult()    &#123;        Success &#x3D; false,        Body &#x3D; &quot;导出失败，请稍后再试！&quot;    &#125;;    if (ds.Tables[0] !&#x3D; null &amp;&amp; ds.Tables[0].Rows.Count &gt; 0)    &#123;        string[] columns &#x3D; &#123; &quot;序号&quot;, &quot;案件&quot;, &quot;车牌&quot;, &quot;分类&quot;, &quot;处理时间&quot;, &quot;人员&quot;, &quot;金额&quot; &#125;;        result &#x3D; ExportExcel(ds.Tables[0], columns, &quot;分布详情&quot;, result);    &#125;    else    &#123;        result &#x3D; new DownResult()        &#123;            Success &#x3D; true,            Body &#x3D; &quot;没有需要导出的信息&quot;        &#125;;    &#125;    return JsonConvert.SerializeObject(result);&#125;  public static DownResult ExportExcel(DataTable dt, string[] columns, string sheetName, DownResult result)&#123;    string filePath &#x3D; string.Empty;&#x2F;&#x2F;文件路径    string fileName &#x3D; string.Empty;&#x2F;&#x2F;文件名称    Stream stream &#x3D; DataTableToExcel(dt, columns, sheetName);    ExcelPackage package &#x3D; new ExcelPackage(stream);    fileName &#x3D; sheetName + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;.xlsx&quot;;    filePath &#x3D; HttpContext.Current.Server.MapPath(&quot;~&#x2F;UploadFile&#x2F;&quot;);&#x2F;&#x2F;文件保存地址     if (!Directory.Exists(filePath))&#x2F;&#x2F;如果不存在就创建file文件夹    &#123;        Directory.CreateDirectory(filePath);    &#125;    package.SaveAs(new FileInfo(filePath + fileName));    result &#x3D; new DownResult()    &#123;        Success &#x3D; true,        Body &#x3D; &quot;导出成功！&quot;,        DownLoadUrl &#x3D; &quot;DownExcel.aspx&quot;,        FilePath &#x3D; filePath,        FileName &#x3D; fileName,    &#125;;    return result;&#125;     public static Stream DataTableToExcel(DataTable dataTable, string[] columns, string sheetName)&#123;    try    &#123;        using (ExcelPackage pck &#x3D; new ExcelPackage())        &#123;            ExcelWorksheet ws &#x3D; pck.Workbook.Worksheets.Add(sheetName);            ws.Cells[&quot;A1&quot;].LoadFromDataTable(dataTable, true);            for (int i &#x3D; 1; i &lt;&#x3D; columns.Length; i++)            &#123;                using (ExcelRange rng &#x3D; ws.Cells[1, i])                &#123;                    rng.Style.Font.Bold &#x3D; true;                    rng.Value &#x3D; columns[i - 1];                &#125;            &#125;            MemoryStream ms &#x3D; new MemoryStream();            pck.SaveAs(ms);            ms.Flush();            ms.Position &#x3D; 0;&#x2F;&#x2F;指定当前流的位置从0开始            return ms;        &#125;    &#125;    catch (Exception ex)    &#123;        throw ex;    &#125;&#125;  public class DownResult&#123;    public bool Success &#123; get; set; &#125;    public string Body &#123; get; set; &#125;    public string DownLoadUrl &#123; get; set; &#125;    public string FilePath &#123; get; set; &#125;    public string FileName &#123; get; set; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 方法必须为静态，参数需要一致</p><p>下载页面方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">protected void Page_Load(object sender, EventArgs e)&#123;    string fileName &#x3D; Request[&quot;filename&quot;];&#x2F;&#x2F;下载文档名      string filePath &#x3D; Request[&quot;filepath&quot;];    FileInfo fileInfo &#x3D; new FileInfo(filePath + fileName);    Response.Clear();    Response.ClearContent();    Response.ClearHeaders();    String userAgent &#x3D; HttpContext.Current.Request.UserAgent;    &#x2F;&#x2F;判断是否为ie10以下及ie11浏览器      if (userAgent.Contains(&quot;MSIE&quot;) || userAgent.Contains(&quot;rv:11&quot;))    &#123;        fileName &#x3D; HttpUtility.UrlEncode(fileName);    &#125;    Response.AddHeader(&quot;Content-Disposition&quot;, string.Format(&quot;attachment;filename&#x3D;\&quot;&#123;0&#125;\&quot;&quot;, fileName));    Response.AddHeader(&quot;Content-Length&quot;, fileInfo.Length.ToString());    Response.AddHeader(&quot;Content-Transfer-Encoding&quot;, &quot;binary&quot;);    Response.ContentType &#x3D; &quot;application&#x2F;octet-stream&quot;;    Response.ContentEncoding &#x3D; System.Text.Encoding.GetEncoding(&quot;gb2312&quot;);    Response.WriteFile(fileInfo.FullName);    Response.Flush();    if (File.Exists(Path.GetFullPath(fileInfo.ToString())))    &#123;        File.Delete(Path.GetFullPath(fileInfo.ToString()));&#x2F;&#x2F;用户下载后删除服务器文件    &#125;    Response.End();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS 开发中觉得不错的几款插件</title>
      <link href="/tools/vs-kai-fa-zhong-jue-de-bu-cuo-de-ji-kuan-cha-jian/"/>
      <url>/tools/vs-kai-fa-zhong-jue-de-bu-cuo-de-ji-kuan-cha-jian/</url>
      
        <content type="html"><![CDATA[<ol><li><strong>C# Outline 2013</strong>  {}折叠<br><img src="/images/2017010316451501.png" alt="2017010316451501.png"></li><li><strong>Indent Guides</strong>：为缩进添加竖直线<br><img src="/images/2017010316451502.png" alt="2017010316451502.png"></li><li><strong>ResXManager</strong>：多语言资源文件编辑</li><li><strong>C# Formatter</strong>：代码清理<br><img src="/images/2017010316451503.png" alt="2017010316451503.png"></li><li><strong>Highlight all occurrences of selected word</strong>：双击高亮全部选择的词<br><img src="/images/2017010316451504.png" alt="2017010316451504.png"></li><li><strong>Hide Main Menu</strong>：可以隐藏菜单以节省屏幕空间，支持菜单鼠标悬停显示，并且带有动画效果。<br><img src="/images/2017010316451505.png" alt="2017010316451505.png"></li><li><strong>VSCommands for Visual Studio</strong>：代码显示增强：它可以在尾部显示方法或过程名字，仅因这个就非常喜欢了</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC 中Simditor上传本地图片</title>
      <link href="/mvc/mvc-zhong-simditor-shang-chuan-ben-di-tu-pian/"/>
      <url>/mvc/mvc-zhong-simditor-shang-chuan-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<ol><li>引用样式和js文件</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;link href&#x3D;&quot;~&#x2F;Content&#x2F;scripts&#x2F;plugins&#x2F;simditor&#x2F;css&#x2F;simditor.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;&lt;script src&#x3D;&quot;~&#x2F;Content&#x2F;scripts&#x2F;plugins&#x2F;simditor&#x2F;js&#x2F;simditor.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>初始化Simditor</li></ol><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var editor &#x3D; null;    $(function () &#123;        &#x2F;&#x2F;可以参考 http:&#x2F;&#x2F;www.jcodecraeer.com&#x2F;a&#x2F;javascript&#x2F;2015&#x2F;0201&#x2F;2393.html        editor &#x3D; new Simditor(&#123;            textarea: $(&#39;#NewsContent&#39;),            placeholder: &#39;这里输入公告内容...&#39;,            toolbar: [&#39;title&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;color&#39;, &#39;|&#39;, &#39;ol&#39;, &#39;ul&#39;, &#39;blockquote&#39;, &#39;code&#39;, &#39;table&#39;, &#39;|&#39;, &#39;link&#39;, &#39;image&#39;, &#39;hr&#39;, &#39;|&#39;, &#39;indent&#39;, &#39;outdent&#39;],            upload: &#123;                url: &#39;&#x2F;PublicInfoManage&#x2F;Notice&#x2F;SavePic&#39;, &#x2F;&#x2F;文件上传的接口地址                params: null, &#x2F;&#x2F;键值对,指定文件上传接口的额外参数,上传的时候随文件一起提交                fileKey: &#39;fileDataFileName&#39;, &#x2F;&#x2F;服务器端获取文件数据的参数名                connectionCount: 3,                leaveConfirm: &#39;正在上传文件&#39;            &#125;        &#125;);    &#125;)var editor &#x3D; null;    $(function () &#123;        &#x2F;&#x2F;可以参考 http:&#x2F;&#x2F;www.jcodecraeer.com&#x2F;a&#x2F;javascript&#x2F;2015&#x2F;0201&#x2F;2393.html        editor &#x3D; new Simditor(&#123;            textarea: $(&#39;#NewsContent&#39;),            placeholder: &#39;这里输入公告内容...&#39;,            toolbar: [&#39;title&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;color&#39;, &#39;|&#39;, &#39;ol&#39;, &#39;ul&#39;, &#39;blockquote&#39;, &#39;code&#39;, &#39;table&#39;, &#39;|&#39;, &#39;link&#39;, &#39;image&#39;, &#39;hr&#39;, &#39;|&#39;, &#39;indent&#39;, &#39;outdent&#39;],            upload: &#123;                url: &#39;&#x2F;PublicInfoManage&#x2F;Notice&#x2F;SavePic&#39;, &#x2F;&#x2F;文件上传的接口地址                params: null, &#x2F;&#x2F;键值对,指定文件上传接口的额外参数,上传的时候随文件一起提交                fileKey: &#39;fileDataFileName&#39;, &#x2F;&#x2F;服务器端获取文件数据的参数名                connectionCount: 3,                leaveConfirm: &#39;正在上传文件&#39;            &#125;        &#125;);    &#125;)var editor &#x3D; null;    $(function () &#123;        &#x2F;&#x2F;可以参考 http:&#x2F;&#x2F;www.jcodecraeer.com&#x2F;a&#x2F;javascript&#x2F;2015&#x2F;0201&#x2F;2393.html        editor &#x3D; new Simditor(&#123;            textarea: $(&#39;#NewsContent&#39;),            placeholder: &#39;这里输入公告内容...&#39;,            toolbar: [&#39;title&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;color&#39;, &#39;|&#39;, &#39;ol&#39;, &#39;ul&#39;, &#39;blockquote&#39;, &#39;code&#39;, &#39;table&#39;, &#39;|&#39;, &#39;link&#39;, &#39;image&#39;, &#39;hr&#39;, &#39;|&#39;, &#39;indent&#39;, &#39;outdent&#39;],            upload: &#123;                url: &#39;&#x2F;PublicInfoManage&#x2F;Notice&#x2F;SavePic&#39;, &#x2F;&#x2F;文件上传的接口地址                params: null, &#x2F;&#x2F;键值对,指定文件上传接口的额外参数,上传的时候随文件一起提交                fileKey: &#39;fileDataFileName&#39;, &#x2F;&#x2F;服务器端获取文件数据的参数名                connectionCount: 3,                leaveConfirm: &#39;正在上传文件&#39;            &#125;        &#125;);    &#125;)var editor &#x3D; null;    $(function () &#123;        &#x2F;&#x2F;可以参考 http:&#x2F;&#x2F;www.jcodecraeer.com&#x2F;a&#x2F;javascript&#x2F;2015&#x2F;0201&#x2F;2393.html        editor &#x3D; new Simditor(&#123;            textarea: $(&#39;#NewsContent&#39;),            placeholder: &#39;这里输入公告内容...&#39;,            toolbar: [&#39;title&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;color&#39;, &#39;|&#39;, &#39;ol&#39;, &#39;ul&#39;, &#39;blockquote&#39;, &#39;code&#39;, &#39;table&#39;, &#39;|&#39;, &#39;link&#39;, &#39;image&#39;, &#39;hr&#39;, &#39;|&#39;, &#39;indent&#39;, &#39;outdent&#39;],            upload: &#123;                url: &#39;&#x2F;PublicInfoManage&#x2F;Notice&#x2F;SavePic&#39;, &#x2F;&#x2F;文件上传的接口地址                params: null, &#x2F;&#x2F;键值对,指定文件上传接口的额外参数,上传的时候随文件一起提交                fileKey: &#39;fileDataFileName&#39;, &#x2F;&#x2F;服务器端获取文件数据的参数名                connectionCount: 3,                leaveConfirm: &#39;正在上传文件&#39;            &#125;        &#125;);    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>upload设置好就会出现下图中的选项<br><img src="/images/2016120517321201.png" alt="2016120517321201.png"><br>实现功能之前需要修改一下引用的js文件，使用查看浏览器的审核元素功能查看，发现input按钮没有name属性<br><img src="/images/2016120517321202.png" alt="2016120517321202.png"><br>3. 打开Simditor.js文件搜索accept属性，然后添加“name&#x3D;“fileData”属性，共有两处需要添加，如下图<br><img src="/images/2016120517321203.png" alt="2016120517321203.png"><br>4. 编写后台处理图片代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 上传图片&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public ActionResult SavePic()&#123;    HttpPostedFileBase file &#x3D; Request.Files[&quot;fileDataFileName&quot;];    if (file !&#x3D; null)    &#123;        string strPath &#x3D; HttpContext.Server.MapPath(&quot;&#x2F;Content&#x2F;Upload&#x2F;&quot;);        if (!Directory.Exists(strPath))        &#123;            Directory.CreateDirectory(strPath);        &#125;        string filePath &#x3D; Path.Combine(strPath, Path.GetFileName(file.FileName));        file.SaveAs(filePath);        return Success(&quot;上传成功！&quot;);    &#125;    else    &#123;        return Success(&quot;上传失败！&quot;);    &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章 <a href="http://www.jcodecraeer.com/a/javascript/2015/0201/2393.html">http://www.jcodecraeer.com/a/javascript/2015/0201/2393.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MVC模式开发的后台框架</title>
      <link href="/mvc/ji-yu-mvc-mo-shi-kai-fa-de-hou-tai-kuang-jia/"/>
      <url>/mvc/ji-yu-mvc-mo-shi-kai-fa-de-hou-tai-kuang-jia/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="http://demo.thinkcmf.com/admin/index/index.html">ThinkCMF</a><br><img src="/images/2016112514230301.png" alt="2016112514230301.png"></li><li><a href="http://www.nfine.cn:8099/Home/Index">NFine快速开发平台</a><br><img src="/images/2016112514230303.png" alt="2016112514230303.png"></li><li><a href="http://121.40.148.178:8080/">力软快速开发框架</a><br><img src="/images/2016112514230302.png" alt="2016112514230302.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 中 图标编码 icon——Font-Awesome</title>
      <link href="/html-css/css3-zhong-tu-biao-bian-ma-icon-font-awesome/"/>
      <url>/html-css/css3-zhong-tu-biao-bian-ma-icon-font-awesome/</url>
      
        <content type="html"><![CDATA[<p>在做网页开发中经常会用到图标，原来经常会到一些icon网站上找导入到项目中，现在<a href="http://fontawesome.io/">Font-Awesome</a>中的有很多的图标，并且还在不断更新<br><img src="/images/2016112514031301.png" alt="2016112514031301.png"></p><p>现在Font-Awesome最新版本是4.7，下载出来的Font-Awesome有下面这些文件，只保留css和fonts文件夹中的内容就可以了<br><img src="/images/2016112514031302.png" alt="2016112514031302.png"></p><p>新建一个html页面，在html用引用css样式</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;link href&#x3D;&quot;css&#x2F;font-awesome.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在官网中选择好要引用的图标点击该图标进去<br><img src="/images/2016112514031303.png" alt="2016112514031303.png"></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;ul class&#x3D;&quot;fa&quot;&gt;    &lt;li class&#x3D;&quot;fa fa-list-ul&quot;&gt;百度&lt;&#x2F;li&gt;&lt;br&#x2F;&gt;    &lt;li  class&#x3D;&quot;fa fa-list-ul&quot;&gt;谷歌&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>页面显示<br><img src="/images/2016112514031304.png" alt="2016112514031304.png"><br><strong>注意引用样式的时候要在样式（fa-list-ul）前面加上fa</strong></p><p>如果想改变图标和文字颜色呢？</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;ul class&#x3D;&quot;fa&quot;&gt;    &lt;li class&#x3D;&quot;fa fa-list-ul&quot;&gt;百度&lt;&#x2F;li&gt;&lt;br&#x2F;&gt;    &lt;span style&#x3D;&quot;color:red;&quot;&gt;&lt;li  class&#x3D;&quot;fa fa-list-ul&quot;&gt;谷歌&lt;&#x2F;li&gt;&lt;span&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>页面显示<br><img src="/images/2016112514031305.png" alt="2016112514031305.png"></p><p>只需要在li标签前面加上<span>标签设置color颜色就可以了。</p><p>这里只是做一个简单的介绍，还想了解更多可以看看<a href="http://fontawesome.io/examples/">官网的例子</a></p><p>还有一个<a href="http://www.fontawesome.com.cn/">Font-Awesome</a>中文网站，不过版本没有英文版本的新，可以参考下</p><p>IE9之前还只支持eot格式，需要将ttf格式转换成eot格式</p><p>在线转换工具 <a href="https://www.fontsquirrel.com/tools/webfont-generator">Webfont Generator</a></p><p>还可以参考一些文章 <a href="http://www.jb51.net/css/70033.html">http://www.jb51.net/css/70033.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch 插件 大全</title>
      <link href="/search/elasticsearch-cha-jian-da-quan/"/>
      <url>/search/elasticsearch-cha-jian-da-quan/</url>
      
        <content type="html"><![CDATA[<p>本文使用的elasticsearch版本：1.7.3</p><p>推荐几款比较常用的elasticsearch插件</p><ol><li>集群监控插件 <a href="https://github.com/lukas-vlcek/bigdesk">bigdesk</a><br>node<br><img src="/images/2016112316141301.png" alt="2016112316141301.png"><br>cluster<br><img src="/images/2016112316141302.png" alt="2016112316141302.png"></li><li>集群资源查看和查询插件 <a href="https://github.com/lmenezes/elasticsearch-kopf">kopf</a><br><img src="/images/2016112316141303.png" alt="2016112316141303.png"><br><img src="/images/2016112316141304.png" alt="2016112316141304.png"></li><li>调试查询  <a href="https://github.com/polyfractal/elasticsearch-inquisitor">inquisitor</a><br><img src="/images/2016112316141305.png" alt="2016112316141305.png"></li><li>类似sql语法的查询插件 <a href="https://github.com/NLPchina/elasticsearch-sql">elasticsearch-sql</a> （1.x elasticseach版本安装命令 plugin -u <a href="https://github.com/NLPchina/elasticsearch-sql/releases/download/1.4.9/elasticsearch-sql-1.4.9.zip">https://github.com/NLPchina/elasticsearch-sql/releases/download/1.4.9/elasticsearch-sql-1.4.9.zip</a> –install sql），具体的请看说明<a href="https://github.com/NLPchina/elasticsearch-sql">https://github.com/NLPchina/elasticsearch-sql</a><br><img src="/images/2016112316141306.png" alt="2016112316141306.png"></li><li>查询插件 marvel  安装命令（plugin -i elasticsearch&#x2F;marvel&#x2F;latest）输入localhost:9200&#x2F;_plugin&#x2F;marvel&#x2F;sense&#x2F;就可以浏览界面了；输入plugin -i elasticsearch&#x2F;marvel&#x2F;latest也可以卸载改插件<br><img src="/images/2016112316141307.png" alt="2016112316141307.png"></li></ol><p>如果用命令方式安装不上，到<a href="http://download.elasticsearch.org/elasticsearch/marvel/marvel-latest.zip">marvel-latest</a>下载下来，然后在ElasticSearch的plugin目录下新建marvel文件夹，将下载的文件解压到marvel文件夹中就可以了；</p><p>想具体了解可以查看<a href="https://www.elastic.co/downloads/marvel">ElasticSearch</a>官网</p><p>以下内容转载 <a href="http://www.searchtech.pro/elasticsearch-plugins">http://www.searchtech.pro/elasticsearch-plugins</a></p><p>Elasticsearch扩展性非常好，有很多官方和第三方开发的插件，下面以分词、同步、数据传输、脚本支持、站点、其它这几个类别进行划分。</p><p><strong>分词插件</strong><br><a href="https://github.com/yakaz/elasticsearch-analysis-combo/">Combo Analysis Plugin</a> (作者 Olivier Favre, Yakaz)<br>简介：组合分词器，可以把多个分词器的结果组合在一起。<br><a href="https://github.com/elasticsearch/elasticsearch-analysis-smartcn">Smart Chinese Analysis Plugin</a> (作者 elasticsearch 团队)<br>简介：lucene默认的中文分词器<br><a href="https://github.com/elasticsearch/elasticsearch-analysis-icu">ICU Analysis plugin</a> (作者 elasticsearch 团队)<br>简介：lucene自带的ICU分词，ICU是一套稳定、成熟、功能强大、轻便易用和跨平台支持Unicode 的开发包。<br><a href="https://github.com/elasticsearch/elasticsearch-analysis-stempel">Stempel (Polish) Analysis plugin</a> (作者 elasticsearch 团队)<br>简介：法文分词器<br><a href="https://github.com/medcl/elasticsearch-analysis-ik">IK Analysis Plugin</a> (作者 Medcl)<br>简介：大名鼎鼎的ik分词，都懂的！<br><a href="https://github.com/medcl/elasticsearch-analysis-mmseg">Mmseg Analysis Plugin</a> (作者 Medcl)<br>简介：mmseg中文分词<br><a href="https://github.com/jprante/elasticsearch-analysis-hunspell">Hunspell Analysis Plugin</a> (作者 Jörg Prante)<br>简介：lucene自带的Hunspell模块<br><a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">Japanese (Kuromoji) Analysis plugin</a> (作者 elasticsearch 团队).<br>简介：日文分词器<br><a href="https://github.com/suguru/elasticsearch-analysis-japanese">Japanese Analysis plugin</a> (作者 suguru).<br>简介：日文分词器<br><a href="https://github.com/imotov/elasticsearch-analysis-morphology">Russian and English Morphological Analysis Plugin</a> (作者 Igor Motov)<br>简介：俄文英文分词器<br>Pinyin Analysis Plugin (作者 Medcl)<br>简介：拼音分词器<br><a href="https://github.com/medcl/elasticsearch-analysis-string2int">String2Integer Analysis Plugin</a> (作者 Medcl)<br>简介：字符串转整型工具。主要用在facet这个功能上，如果facet的field的值是字符串的话，计算起来比较耗资源。可以把字符串映射成整型，对整型进行facet操作要比对字符串的快很多。</p><p><strong>同步插件</strong><br><a href="https://github.com/elasticsearch/elasticsearch-river-couchdb">CouchDB River Plugin</a> (作者 elasticsearch 团队)<br>简介：CouchDB和elasticsearch的同步插件<br><a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia">Wikipedia River Plugin</a> (作者 elasticsearch 团队)<br>简介：wikipedia文件读取插件。wikipedia是维基百科的一个离线库，不定期发布最新数据，是以xml形式发布的。这个river读取这个文件来建索引。<br><a href="https://github.com/elasticsearch/elasticsearch-river-twitter">Twitter River Plugin</a> (作者 elasticsearch 团队)<br>简介：twitter的同步插件，可以同步你twitter上的微博。<br><a href="https://github.com/elasticsearch/elasticsearch-river-rabbitmq">RabbitMQ River Plugin</a> (作者 elasticsearch 团队)<br>简介：rabbitmq同步插件，读取rabbitmq上的队列信息并索引。<br><a href="http://dadoonet.github.com/rssriver/">RSS River Plugin</a> (作者 David Pilato)<br>简介：定期索引指定一个或多个RSS源的数据。<br><a href="https://github.com/richardwilly98/elasticsearch-river-mongodb/">MongoDB River Plugin</a> (作者 Richard Louapre)<br>简介：mongodb同步插件，mongodb必须搭成副本集的模式，因为这个插件的原理是通过定期读取mongodb中的oplog来同步数据。<br><a href="https://github.com/jprante/elasticsearch-river-oai/">Open Archives Initiative (OAI) River Plugin</a> (作者 Jörg Prante)<br>简介：可以索引oai数据提供者提供的数据。<br><a href="https://github.com/sunnygleason/elasticsearch-river-st9">St9 River Plugin</a> (作者 Sunny Gleason)<br>简介：可以索引索引st9数据（st9是神马？囧！！！）<br><a href="https://github.com/adamlofts/elasticsearch-river-sofa">Sofa River Plugin</a> (作者 adamlofts)<br>简介：这个插件可以把多个CouchDB的数据库同步到同一个es索引中。<br><a href="https://github.com/jprante/elasticsearch-river-jdbc">JDBC River Plugin</a> (作者 Jörg Prante)<br>简介：关系型数据库的同步插件<br><a href="http://www.pilato.fr/fsriver/">FileSystem River Plugin</a> (作者 David Pilato)<br>简介：本地文件系统文件同步插件，使用方法是指定一个本地目录路径，es会定期扫描索引该目录下的文件。<br><a href="https://github.com/tlrx/elasticsearch-river-ldap">LDAP River Plugin</a> (作者 Tanguy Leroux)<br>简介：索引LDAP目录下的文件数据。<br><a href="http://www.pilato.fr/dropbox/">Dropbox River Plugin</a> (作者 David Pilato)<br>简介：索引dropbox网盘上的文件。通过oauth协议来调用dropbox上的api建索引。<br><a href="https://github.com/domdorn/elasticsearch-river-activemq/">ActiveMQ River Plugin</a> (作者 Dominik Dorn)<br>简介：activemq队列的同步插件，和之前rabbitmq的类似<br><a href="https://github.com/javanna/elasticsearch-river-solr/">Solr River Plugin</a> (作者 Luca Cavanna)<br>简介：solr同步插件，可以把solr里面的索引同步到es<br><a href="https://github.com/xxBedy/elasticsearch-river-csv">CSV River Plugin</a> (作者 Martin Bednar)<br>简介：通过指定目录地址来索引csv文件。</p><p><strong>数据传输插件</strong><br><a href="https://github.com/elasticsearch/elasticsearch-transport-wares">Servlet transport</a> (作者 elasticsearch 团队)<br>简介：Servlet rest插件，通过servlet来封装rest接口。<br><a href="https://github.com/elasticsearch/elasticsearch-transport-memcached">Memcached transport plugin</a> (作者 elasticsearch 团队)<br>简介：本插件可以通过memcached协议进行rest接口的调用。注意：这里不是使用memcache作为es的缓存。<br><a href="https://github.com/elasticsearch/elasticsearch-transport-thrift">Thrift Transport</a> (作者 elasticsearch 团队)<br>简介：使用thrift进行数据传输。<br><a href="https://github.com/tlrx/transport-zeromq">ZeroMQ transport layer plugin</a> (作者 Tanguy Leroux)<br>简介：使用zeromq进rest接口的调用。<br><a href="https://github.com/sonian/elasticsearch-jetty">Jetty HTTP transport plugin</a> (作者 Sonian Inc.)<br>简介：使用jetty来提供http rest接口。默认是使用netty。这个插件的好处是可以对http接口进行一些权限的设置。</p><p><strong>脚本插件</strong><br><a href="https://github.com/elasticsearch/elasticsearch-lang-python">Python language Plugin</a> (作者 elasticsearch 团队)<br>简介：python脚本支持<br><a href="https://github.com/elasticsearch/elasticsearch-lang-javascript">JavaScript language Plugin</a> (作者 elasticsearch 团队)<br>简介：javascript脚本支持<br><a href="https://github.com/elasticsearch/elasticsearch-lang-groovy">Groovy lang Plugin</a> (作者 elasticsearch 团队)<br>简介：groovy脚本支持<br><a href="https://github.com/hiredman/elasticsearch-lang-clojure">Clojure Language Plugin</a> (作者 Kevin Downey)<br>简介：clojure脚本支持</p><p><strong>站点插件（以网页形式展现）</strong><br><a href="https://github.com/lukas-vlcek/bigdesk">BigDesk Plugin</a> (作者 Lukáš Vlček)<br>简介：监控es状态的插件，推荐！<br><a href="https://github.com/mobz/elasticsearch-head">Elasticsearch Head Plugin</a> (作者 Ben Birch)<br>简介：很方便对es进行各种操作的客户端。<br><a href="https://github.com/karmi/elasticsearch-paramedic">Paramedic Plugin</a> (作者 Karel Minařík)<br>简介：es监控插件<br><a href="https://github.com/polyfractal/elasticsearch-segmentspy">SegmentSpy Plugin</a> (作者 Zachary Tong)<br>简介：查看es索引segment状态的插件<br><a href="https://github.com/polyfractal/elasticsearch-inquisitor">Inquisitor Plugin</a> (作者 Zachary Tong)<br>简介：这个插件主要用来调试你的查询。</p><p><strong>其它插件</strong><br><a href="https://github.com/elasticsearch/elasticsearch-mapper-attachments">Mapper Attachments Type plugin</a> (作者 elasticsearch 团队)<br>简介：附件类型插件，通过tika库把各种类型的文件格式解析成字符串。<br><a href="https://github.com/elasticsearch/elasticsearch-hadoop">Hadoop Plugin</a> (作者 elasticsearch team)<br>简介：hadoop和elasticsearch的集成插件，可以通过hadoop的mapreduce算法来并行建立索引，同时支持cascading，hive和pig等框架。<br><a href="https://github.com/elasticsearch/elasticsearch-cloud-aws">AWS Cloud Plugin</a> (作者 elasticsearch 团队)<br>简介：elasticsearch与amazon web services的集成。<br><a href="https://github.com/mattweber/elasticsearch-mocksolrplugin">ElasticSearch Mock Solr Plugin</a> (作者 Matt Weber)<br>简介：elasticsearch的solr api接口。用了这个插件可以使用solr的api来调用es，直接用solrj就可以调用es。比较适用于从solr转es时暂时过度。<br><a href="https://github.com/spinscale/elasticsearch-suggest-plugin">Suggester Plugin</a> (作者 Alexander Reelsen)<br>简介：es 搜索提示功能插件，不过es0.9版本后自带了这个功能，<br><a href="https://github.com/medcl/elasticsearch-partialupdate">ElasticSearch PartialUpdate Plugin</a> (作者 Medcl)<br>简介：elasticsearch的部分更新插件。<br><a href="https://github.com/sonian/elasticsearch-zookeeper">ZooKeeper Discovery Plugin</a> (作者 Sonian Inc.)<br>简介：通过zookeeper管理集群的插件。通过这个插件，es的分布式架构和solrcloud相似。<br><a href="https://github.com/derryx/elasticsearch-changes-plugin">ElasticSearch Changes Plugin</a> (作者 Thomas Peuss)<br>简介：elasticsearch索引操作记录插件。通过这个插件可以查看用户对索引的增删改操作。<br><a href="http://tlrx.github.com/elasticsearch-view-plugin">ElasticSearch View Plugin</a> (作者 Tanguy Leroux)<br>简介：这个插件可以把es的文档以html，xml或text的方式显示出来，它也可以通过查询生成web页面。<br><a href="https://github.com/viniciusccarvalho/elasticsearch-newrelic">ElasticSearch New Relic Plugin</a> (作者 Vinicius Carvalho)<br>简介：elasticsearch和newrelic的集成插件。newrelica是一个性能监控工具。这个插件会把节点的状态数据传到newrelic的账号上。</p>]]></content>
      
      
      <categories>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 服务搭建</title>
      <link href="/search/elasticsearch-fu-wu-da-jian/"/>
      <url>/search/elasticsearch-fu-wu-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><pre><code>操作系统：Win7ElasticSearch:1.73Java JDK:1.7</code></pre><h2 id="二、搭建操作"><a href="#二、搭建操作" class="headerlink" title="二、搭建操作"></a>二、搭建操作</h2><ol><li>安装Java JDK,然后配置系统环境变量，新建CLASS_PATH（jre所在目录 【.;D:\Program Files\Java\jre7\lib】）和JAVA_HOME(D:\Program Files\Java\jdk1.7.0_80)<br><img src="/images/2016112311321301.png" alt="2016112311321301.png"><br>在系统变量Path最后位置输入;%JAVA_HOME%\bin<br><img src="/images/2016112311321302.png" alt="2016112311321302.png"></li><li>在系统变量Path中输入elasticseach的路径（D:\elasticsearch\elasticsearch-1.7.3\bin），根据文件所在位置更改；这样可以直接执行elasticsearch安装命令（service intsall）、启动服务（service start）、停止服务（service stop）、卸载服务（service remove）</li><li>打开dos命令窗口，输入service install，看到下图表示安装服务成功，然后输入service start 启动服务<br><img src="/images/2016112311321303.png" alt="2016112311321303.png"></li><li>在浏览器中输入localhost:9200如下图所示表示Elasticsearch启动成功<br><img src="/images/2016112311321304.png" alt="2016112311321304.png"></li><li>上图中的name和cluster_name可以通过修改config文件夹下的elasticsearch.yml的配置文件来修改<br><img src="/images/2016112311321305.png" alt="2016112311321305.png"></li><li>安装head插件输入plugin -install mobz&#x2F;elasticsearch-head即可安装head插件，具体的操作步骤也可以参考<a href="https://github.com/mobz/elasticsearch-head">github</a><br><img src="/images/2016112311321306.png" alt="2016112311321306.png"></li><li>安装google浏览器的插件sense，其他的版本安装方法可以查看文章 <a href="http://www.cnblogs.com/ZJ199012/p/6094083.html">elasticsearch 插件 大全</a> 中的marvel插件<br><img src="/images/2016112311321307.png" alt="2016112311321307.png"></li></ol><p>还有其他的插件安装方法都类似</p><p>elasticsearch集群监控插件<a href="https://github.com/lukas-vlcek/bigdesk">bigdesk</a>   (安装命令 plugin -install lukas-vlcek&#x2F;bigdesk)</p><p>集群资源查看和查询插件 <a href="https://github.com/lmenezes/elasticsearch-kopf">kopf</a> （安装命令 plugin -install lmenezes&#x2F;elasticsearch-kopf）</p><p>调试查询  <a href="https://github.com/polyfractal/elasticsearch-inquisitor">inquisitor</a> （安装命令 plugin -install polyfractal&#x2F;elasticsearch-inquisitor）</p><p>类似sql语法的查询插件 <a href="https://github.com/NLPchina/elasticsearch-sql">elasticsearch-sql</a> （安装命令 plugin -install NLPchina&#x2F;elasticsearch-sql）</p><p>更多插件可以参考 <a href="http://www.searchtech.pro/elasticsearch-plugins">http://www.searchtech.pro/elasticsearch-plugins</a></p><p>github有一个可以定制msi安装elasticsearch工具感兴趣可以看看<a href="https://github.com/salyh/elasticsearch-msi-installer">https://github.com/salyh/elasticsearch-msi-installer</a></p>]]></content>
      
      
      <categories>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB系列—— Window 搭建Mongodb 集群</title>
      <link href="/mongodb/mongodb-xi-lie-window-da-jian-mongodb-ji-qun/"/>
      <url>/mongodb/mongodb-xi-lie-window-da-jian-mongodb-ji-qun/</url>
      
        <content type="html"><![CDATA[<p>Mongodb的集群方式的搭建有三种：Replica Set &#x2F; Sharding &#x2F; Master-Slaver。这里只说明最简单的集群搭建方式（Replica Set）</p><p>Replica Set</p><pre><code>  Mongodb(M)表示主节点，Mongodb(S)表示备节点，Mongodb(A)表示仲裁节点。主备节点存储数据，仲裁节点不存储数据。客户端同时连接主节点与备节点，不连接仲裁节点。    默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。  仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有 一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。我开始也不相信必须要有仲裁节点，但是自己也试过没仲裁节点的话，主节点挂了备节点还是备节点， 所以咱们还是需要它的。  介绍完了集群方案，那么现在就开始搭建了。</code></pre><p>mongodb版本3.0.4</p><p>mongodb参数说明</p><p>–quiet     # 安静输出<br>–port arg  # 指定服务端口号，默认端口27017<br>–bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP<br>–logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录<br>–logappend     # 使用追加的方式写日志<br>–pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件<br>–keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效<br>–unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 &#x2F;tmp)<br>–fork  # 以守护进程的方式运行MongoDB，创建服务器进程<br>–auth  # 启用验证<br>–cpu   # 定期显示CPU的CPU利用率和iowait<br>–dbpath arg    # 指定数据库路径<br>–diaglog arg   # diaglog选项 0&#x3D;off 1&#x3D;W 2&#x3D;R 3&#x3D;both 7&#x3D;W+some reads<br>–directoryperdb    # 设置每个数据库将被保存在一个单独的目录<br>–journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里<br>–journalOptions arg    # 启用日志诊断选项<br>–ipv6  # 启用IPv6选项<br>–jsonp     # 允许JSONP形式通过HTTP访问（有安全影响）<br>–maxConns arg  # 最大同时连接数 默认2000<br>–noauth    # 不启用验证<br>–nohttpinterface   # 关闭http接口，默认关闭27018端口访问<br>–noprealloc    # 禁用数据文件预分配(往往影响性能)<br>–noscripting   # 禁用脚本引擎<br>–notablescan   # 不允许表扫描<br>–nounixsocket  # 禁用Unix套接字监听<br>–nssize arg (&#x3D;16)  # 设置信数据库.ns文件大小(MB)<br>–objcheck  # 在收到客户数据,检查的有效性，<br>–profile arg   # 档案参数 0&#x3D;off 1&#x3D;slow, 2&#x3D;all<br>–quota     # 限制每个数据库的文件数，设置默认为8<br>–quotaFiles arg    # number of files allower per db, requires –quota<br>–rest  # 开启简单的rest API<br>–repair    # 修复所有数据库run repair on all dbs<br>–repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath<br>–slowms arg (&#x3D;100)     # value of slow for profile and console log<br>–smallfiles    # 使用较小的默认文件<br>–syncdelay arg (&#x3D;60)   # 数据写入磁盘的时间秒数(0&#x3D;never,不推荐)<br>–sysinfo   # 打印一些诊断系统信息<br>–upgrade   # 如果需要升级数据库</p><p>Replicaton 参数<br>–fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步<br>–autoresync    # 如果从库与主库同步数据差得多，自动重新同步，<br>–oplogSize arg     # 设置oplog的大小(MB)</p><p>主&#x2F;从参数<br>–master    # 主库模式<br>–slave     # 从库模式<br>–source arg    # 从库 端口号<br>–only arg  # 指定单一的数据库复制<br>–slavedelay arg    # 设置从库同步主库的延迟时间</p><p>Replica set(副本集)选项<br>–replSet arg   # 设置副本集名称</p><p>Sharding(分片)选项<br>–configsvr     # 声明这是一个集群的config服务,默认端口27019，默认目录&#x2F;data&#x2F;configdb<br>–shardsvr  # 声明这是一个集群的分片,默认端口27018<br>–noMoveParanoia    # 关闭偏执为moveChunk数据保存</p><ol><li><p>建立mongodb文件加，在里面新建3个文件夹（master、slave、arbiter）</p></li><li><p>将下载的mongodb安装解压后，在上面三个文件夹里每个放一份</p></li><li><p>在三个文件夹里分别依次建立master.config、slave.config、arbiter.config文件</p></li></ol><p>master.config</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">dbpath&#x3D;D:\mongodb\master\data\dblogpath&#x3D;D:\mongodb\master\data\log\mongodb.logport &#x3D; 2222logappend &#x3D; truereplSet &#x3D; zjslave.configdbpath&#x3D;D:\mongodb\slave\data\dblogpath&#x3D;D:\mongodb\slave\data\log\mongodb.logport &#x3D; 3333logappend &#x3D; truereplSet &#x3D; zj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>arbiter.config</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">dbpath&#x3D;D:\mongodb\arbiter\data\dblogpath&#x3D;D:\mongodb\arbiter\data\log\mongodb.logport &#x3D; 4444logappend &#x3D; truereplSet &#x3D; zj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>新建一个bat文件安装mongodb服务，分别放到三个文件夹中，将标红的地方的名称修改一下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off  @echo ---------------------welcome to use mongod auto run tools--------------  @echo. <span class="token operator">&amp;</span> pause  @echo ---------------------正在关闭冗余进程，骚等----------------------------   taskkill /im mongod.exe /f   @echo --------------------冗余进程执行完毕，安装服务器正在启动，骚等-------------  start D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>master<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>mongod.exe <span class="token parameter variable">--install</span> <span class="token parameter variable">--logpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>master<span class="token punctuation">\</span>data<span class="token punctuation">\</span>log<span class="token punctuation">\</span>mongodb.log <span class="token parameter variable">--logappend</span>  <span class="token parameter variable">--dbpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>master<span class="token punctuation">\</span>data<span class="token punctuation">\</span>db  <span class="token parameter variable">--serviceName</span> <span class="token string">"MongoDB2222"</span> <span class="token parameter variable">--serviceDisplayName</span> <span class="token string">"MongoDB2222"</span> <span class="token parameter variable">--port</span> <span class="token number">2222</span> <span class="token parameter variable">--replSet</span> zj@echo. <span class="token operator">&amp;</span> pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>启动服务安装这三个服务</p></li><li><p>打开dos命令窗口，运行命令 cd D:\mongodb\master\bin，然后运行mongo 192.168.2.129:2222</p></li><li><p>运行命令use zjdb，这是切换到数据库zjdb了</p></li><li><p>输入</p></li></ol><p>config&#x3D;{_id:”zj”,members:[<br>{_id:0,host:”192.168.2.129:2222”},<br>{_id:1,host:”192.168.2.129:3333”},<br>{_id:2,host:”192.168.2.129:4444”,arbiterOnly:true}<br>]}，接着输入rs.initiate(config)回车；<br><img src="/images/2016111015391901.png" alt="2016111015391901.png"><br>最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的192.168.2.129:2222。</p><p>特别注 意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。</p><pre><code>  配置的生效时间根据不同的机器配置会有长有短，配置不错的话基本上十几秒内就能生效，有的配置需要一两分钟。如果生效了，执行rs.status()命令会看到如下信息：</code></pre><p><img src="/images/2016111015391902.png" alt="2016111015391902.png"><br>结果说明</p><p>“health” : 1, #代表机器正常<br>“stteStr” : “PRIMARY”, #代表是主节点，可读写，</p><p>其中有以下几下状态:</p><p>STARTUP：刚加入到复制集中，配置还未加载<br>STARTUP2：配置已加载完，初始化状态<br>RECOVERING：正在恢复，不适用读<br>ARBITER: 仲裁者<br>DOWN：节点不可到达<br>UNKNOWN：未获取其他节点状态而不知是什么状态，一般发生在只有两个成员的架构，脑裂<br>REMOVED：移除复制集<br>ROLLBACK：数据回滚，在回滚结束时，转移到RECOVERING或SECONDARY状态<br>FATAL：出错。查看日志grep “replSet FATAL”找出错原因，重新做同步<br>PRIMARY：主节点<br>SECONDARY：备份节点</p><ol start="9"><li>设置备份节点可读，使用命令 db.getMongo().setSlaveOk()<br><img src="/images/2016111015391903.png" alt="2016111015391903.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS判断所有IE浏览器所有版本</title>
      <link href="/js/js-pan-duan-suo-you-ie-liu-lan-qi-suo-you-ban-ben/"/>
      <url>/js/js-pan-duan-suo-you-ie-liu-lan-qi-suo-you-ban-ben/</url>
      
        <content type="html"><![CDATA[<p>原来判断IE浏览器版本很简单，但是随着版本的升级，navigator.userAgent显示的信息也不一样；下图是IE11显示的信息<br><img src="/images/2016101714521201.png" alt="2016101714521201.png"></p><p>原来的浏览器中有msie,但是IE11中没有，IE11中新增了trident</p><p>判断浏览器代码如下</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">function Match() &#123;    var userAgent &#x3D; navigator.userAgent,        rMsie &#x3D; &#x2F;(msie\s|trident.*rv:)([\w.]+)&#x2F;,        rFirefox &#x3D; &#x2F;(firefox)\&#x2F;([\w.]+)&#x2F;,        rOpera &#x3D; &#x2F;(opera).+version\&#x2F;([\w.]+)&#x2F;,        rChrome &#x3D; &#x2F;(chrome)\&#x2F;([\w.]+)&#x2F;,        rSafari &#x3D; &#x2F;version\&#x2F;([\w.]+).*(safari)&#x2F;;    var browser;    var version;    var ua &#x3D; userAgent.toLowerCase();    var match &#x3D; rMsie.exec(ua);    if (match !&#x3D; null) &#123;        return &#123; browser: &quot;IE&quot;, version: match[2] || &quot;0&quot; &#125;;    &#125;    var match &#x3D; rFirefox.exec(ua);    if (match !&#x3D; null) &#123;        return &#123; browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot; &#125;;    &#125;    var match &#x3D; rOpera.exec(ua);    if (match !&#x3D; null) &#123;        return &#123; browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot; &#125;;    &#125;    var match &#x3D; rChrome.exec(ua);    if (match !&#x3D; null) &#123;        return &#123; browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot; &#125;;    &#125;    var match &#x3D; rSafari.exec(ua);    if (match !&#x3D; null) &#123;        return &#123; browser: match[2] || &quot;&quot;, version: match[1] || &quot;0&quot; &#125;;    &#125;    if (match !&#x3D; null) &#123;        return &#123; browser: &quot;&quot;, version: &quot;0&quot; &#125;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用上面的代码判断浏览器版本</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">function initBrowserVersion()&#123;    var browserMatch &#x3D; Match();    alert(browserMatch.browser + &#39;--&#39; + browserMatch.version);    if (browserMatch.browser) &#123;        if (browserMatch.browser &#x3D;&#x3D; &quot;IE&quot;&amp;&amp;browserMatch.version&lt;8)        &#123;            alert(&quot;浏览器版本太低，请升级，以免影响使用体验！&quot;);            return false;        &#125;        else if (browserMatch.browser &#x3D;&#x3D; &quot;chrome&quot; &amp;&amp;  30&gt;browserMatch.version.substring(0,browserMatch.version.indexOf(&quot;.&quot;)))        &#123;           alert(&quot;浏览器版本太低，请升级，以免影响使用体验！&quot;);            return false;        &#125;        else if (browserMatch.browser &#x3D;&#x3D; &quot;firefox&quot; &amp;&amp; 40 &gt; browserMatch.version.substring(0, browserMatch.version.indexOf(&quot;.&quot;))) &#123;           alert(&quot;浏览器版本太低，请升级，以免影响使用体验！&quot;);            return false;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页中引用优酷视频默认自动播放超清</title>
      <link href="/html-css/wang-ye-zhong-yin-yong-you-ku-shi-pin-mo-ren-zi-dong-bo-fang-chao-qing/"/>
      <url>/html-css/wang-ye-zhong-yin-yong-you-ku-shi-pin-mo-ren-zi-dong-bo-fang-chao-qing/</url>
      
        <content type="html"><![CDATA[<p>网页中会进场引用视频播放，怎么设置优酷视频自动播放超清</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt;  &lt;title&gt;自动播放超清测试&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt;  &lt;embed src&#x3D;&#39;http:&#x2F;&#x2F;static.youku.com&#x2F;v1.0.0149&#x2F;v&#x2F;swf&#x2F;loader.swf?VideoIDS&#x3D;XMTM2NjA5NTUxNg&amp;&amp;quality&#x3D;high&amp;isAutoPlay&#x3D;true&amp;isShowRelatedVideo&#x3D;false&#39;  width&#x3D;&#39;480&#39; height&#x3D;&#39;400&#39; align&#x3D;&#39;middle&#39; flashvars&#x3D;&quot;winType&#x3D;1&quot; allowScriptAccess&#x3D;&#39;always&#39; allowFullScreen&#x3D;&#39;true&#39; mode&#x3D;&#39;transparent&#39; type&#x3D;&#39;application&#x2F;x-shockwave-flash&#39;&gt;&lt;&#x2F;embed&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要引用优酷中的视频，我们只需要复制优酷中的代码（如下）粘贴到网页中就可以了：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;embed src&#x3D;&#39;http:&#x2F;&#x2F;player.youku.com&#x2F;player.php&#x2F;Type&#x2F;Folder&#x2F;Fid&#x2F;&#x2F;Ob&#x2F;&#x2F;sid&#x2F;XMTc2MjE2NTc1Mg&#x3D;&#x3D;&#x2F;v.swf&#39; quality&#x3D;&#39;high&#39; width&#x3D;&#39;480&#39; height&#x3D;&#39;400&#39; align&#x3D;&#39;middle&#39; allowScriptAccess&#x3D;&#39;always&#39; allowFullScreen&#x3D;&#39;true&#39; mode&#x3D;&#39;transparent&#39; type&#x3D;&#39;application&#x2F;x-shockwave-flash&#39;&gt;&lt;&#x2F;embed&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制好后，我们将src的播放器的地址修改成“<a href="http://static.youku.com/v1.0.0149/v/swf/loader.swf%E2%80%9D%EF%BC%9B%E5%A4%8D%E5%88%B6%E5%87%BA%E6%9D%A5%E7%9A%84%E4%BB%A3%E7%A0%81sid%E5%90%8E%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%B2%E6%98%AF%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91%E7%9A%84id%EF%BC%8C%E8%BF%99%E6%97%B6%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%B0%86%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9%E4%B8%BAhttp://static.youku.com/v1.0.0149/v/swf/loader.swf?VideoIDS=XMTc2MjE2NTc1Mg&quality=high&isAutoPlay=true&winType=adshow">http://static.youku.com/v1.0.0149/v/swf/loader.swf”；复制出来的代码sid后面的一串是优酷视频的id，这时我们需要将地址修改为http://static.youku.com/v1.0.0149/v/swf/loader.swf?VideoIDS=XMTc2MjE2NTc1Mg&amp;quality=high&amp;isAutoPlay=true&amp;winType=adshow</a></p><p>参数：<br><strong>VideoIDS</strong>表示视频url的id</p><p><strong>quality</strong>表示视频的清楚度，超清是high，开始自动播放默认是超清只需在后面添加上&amp;quality&#x3D;high</p><p><strong>isAutoPlay</strong>表示视频是否自动播放，true是自动播放；false是不自动播放</p><p><strong>winType</strong>表示视频是否显示下方状态栏，adshow表示不显示；改参数也可以在别处设置如</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;embed src&#x3D;&#39;http:&#x2F;&#x2F;static.youku.com&#x2F;v1.0.0149&#x2F;v&#x2F;swf&#x2F;loader.swf?VideoIDS&#x3D;XMTc2MjE2NTc1Mg&#39; quality&#x3D;&#39;high&#39; width&#x3D;&#39;480&#39; height&#x3D;&#39;400&#39; align&#x3D;&#39;middle&#39; allowScriptAccess&#x3D;&#39;always&#39; flashvars&#x3D;&quot;winType&#x3D;1&quot; allowFullScreen&#x3D;&#39;true&#39; mode&#x3D;&#39;transparent&#39; type&#x3D;&#39;application&#x2F;x-shockwave-flash&#39;&gt;&lt;&#x2F;embed&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置flashvars中设置winType&#x3D;1则显示下方状态栏；设置为winType&#x3D;adshow则不显示</p><p>如果想将mv视频已mp3格式呈现在空间或者博客中，只需将代码修改成如下格式</p><p><a href="http://static.youku.com/v/swf/qplayer.swf?VideoIDS=XMTc2MjE2NTc1Mg&isAutoPlay=true&isShowRelatedVideo=false&embedid=-&showAd=0#.mp3">http://static.youku.com/v/swf/qplayer.swf?VideoIDS=XMTc2MjE2NTc1Mg&amp;isAutoPlay=true&amp;isShowRelatedVideo=false&amp;embedid=-&amp;showAd=0#.mp3</a></p><p>注意后面的后缀变成MP3格式了，其中isShowRelatedVideo表示不显示相关视频showAd表示不显示广告（不是所有广告都能屏蔽）</p><p>参考文章：<a href="http://lanyes.org/web/164.html">http://lanyes.org/web/164.html</a></p><p><a href="http://www.16css.com/page_code/321.html">http://www.16css.com/page_code/321.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 还原或备份失败数据库变成单个用户模式无法访问</title>
      <link href="/mysql-sql-oracle/sql-huan-yuan-huo-bei-fen-shi-bai-shu-ju-ku-bian-cheng-dan-ge-yong-hu-mo-shi-wu-fa-fang-wen/"/>
      <url>/mysql-sql-oracle/sql-huan-yuan-huo-bei-fen-shi-bai-shu-ju-ku-bian-cheng-dan-ge-yong-hu-mo-shi-wu-fa-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>还原数据失败了，数据库变成单个用户模式，无法操作了，执行下面的语句就可以了</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">USE master GODECLARE @SQL VARCHAR(MAX);SET @SQL&#x3D;&#39;&#39;SELECT @SQL&#x3D;@SQL+&#39;; KILL &#39;+RTRIM(SPID)FROM master..sysprocessesWHERE dbid&#x3D;DB_ID(&#39;数据库名称&#39;);EXEC(@SQL);ALTER DATABASE 数据库名称 SET MULTI_USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度webuploader 上传演示例子</title>
      <link href="/web/bai-du-webuploader-shang-chuan-yan-shi-li-zi/"/>
      <url>/web/bai-du-webuploader-shang-chuan-yan-shi-li-zi/</url>
      
        <content type="html"><![CDATA[<p>前端代码</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; CodeBehind&#x3D;&quot;baiduWebUpload.aspx.cs&quot; Inherits&#x3D;&quot;School.Web.TestDemo.baiduWebUpload&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;&lt;head runat&#x3D;&quot;server&quot;&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&#x2F;&gt;    &lt;title&gt;百度上传控件&lt;&#x2F;title&gt;    &lt;link href&#x3D;&quot;&#x2F;Scripts&#x2F;fileupload&#x2F;webuploader&#x2F;picstyle.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;    &lt;link href&#x3D;&quot;&#x2F;Scripts&#x2F;fileupload&#x2F;webuploader&#x2F;webuploader.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;    &lt;link href&#x3D;&quot;&#x2F;Scripts&#x2F;fileupload&#x2F;webuploader&#x2F;demo.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;    &lt;script src&#x3D;&quot;..&#x2F;..&#x2F;Scripts&#x2F;hadd&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;--%&gt;    &lt;script src&#x3D;&quot;&#x2F;Scripts&#x2F;jquery&#x2F;jquery-1.10.2.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;&#x2F;Scripts&#x2F;fileupload&#x2F;webuploader&#x2F;webuploader.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        jQuery(function () &#123;             &#x2F;&#x2F;定义参数            var $ &#x3D; jQuery,                    $wrap &#x3D; $(&#39;#uploader&#39;),                    $queue &#x3D; $(&#39;&lt;ul class&#x3D;&quot;filelist&quot;&gt;&lt;&#x2F;ul&gt;&#39;)                           .appendTo($wrap.find(&#39;.queueList&#39;)),                    fileCount &#x3D; 0,                    fileSize &#x3D; 0,                    ratio &#x3D; window.devicePixelRatio || 1,                    &#x2F;&#x2F; 缩略图大小                    thumbnailWidth &#x3D; 110 * ratio,                    thumbnailHeight &#x3D; 110 * ratio,                    percentages &#x3D; &#123;&#125;,                    &#x2F;&#x2F;是否支持旋转                    supportTransition &#x3D; (function () &#123;                        var s &#x3D; document.createElement(&#39;p&#39;).style,                            r &#x3D; &#39;transition&#39; in s ||                                &#39;WebkitTransition&#39; in s ||                                &#39;MozTransition&#39; in s ||                                &#39;msTransition&#39; in s ||                                &#39;OTransition&#39; in s;                        s &#x3D; null;                        return r;                    &#125;)(),                    state &#x3D; &#39;pedding&#39;,                    &#x2F;&#x2F;上传按钮                    $upload &#x3D; $wrap.find(&#39;.uploadBtn&#39;),                    errMsg &#x3D; &#39;上传失败，请重试&#39;;            uploader;             &#x2F;&#x2F;实例化            uploader &#x3D; WebUploader.create(&#123;                pick: &#123;                    id: &#39;#filePicker&#39;,                    label: &#39;点击选择文件&#39;                &#125;,                 accept: &#123;                    title: &#39;myself&#39;,                    extensions: &#39;gif,jpg,jpeg,bmp,png,pdf,doc,docx&#39;,                    mimeTypes: &#39;image&#x2F;*,application&#x2F;pdf,application&#x2F;msword,application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.document&#39;                &#125;,                 &#x2F;&#x2F; swf文件路径                swf: &#39;&#x2F;Scripts&#x2F;fileupload&#x2F;webuploader&#x2F;Uploader.swf&#39;,                 server: &#39;&#x2F;TestDemo&#x2F;ajax&#x2F;baiduUpload.ashx&#39;,                duplicate: true             &#125;);             function setState(val) &#123;                var file, stats;                 if (val &#x3D;&#x3D;&#x3D; state) &#123;                    return;                &#125;                 $upload.removeClass(&#39;state-&#39; + state);                $upload.addClass(&#39;state-&#39; + val);                state &#x3D; val;                 switch (state) &#123;                    case &#39;pedding&#39;:      &#x2F;&#x2F;待定                        $queue.parent().removeClass(&#39;filled&#39;);                        $queue.hide();                        uploader.refresh();                        break;                     case &#39;ready&#39;:                        $(&#39;#filePicker&#39;).removeClass(&#39;element-invisible&#39;);                        $queue.parent().addClass(&#39;filled&#39;);                        $queue.show();                         uploader.refresh();                        break;                     case &#39;uploading&#39;:                        $(&#39;#filePicker&#39;).addClass(&#39;element-invisible&#39;);                         $upload.text(&#39;暂停上传&#39;);                        break;                     case &#39;paused&#39;:                         $upload.text(&#39;继续上传&#39;);                        break;                     case &#39;confirm&#39;:                         $upload.text(&#39;开始上传&#39;).addClass(&#39;disabled&#39;);                         stats &#x3D; uploader.getStats();                        if (stats.successNum &amp;&amp; !stats.uploadFailNum) &#123;                            setState(&#39;finish&#39;);                            return;                        &#125;                        break;                    case &#39;finish&#39;:                        stats &#x3D; uploader.getStats();                        if (stats.successNum) &#123;                            alert(&#39;上传成功&#39;);                        &#125; else &#123;                            &#x2F;&#x2F; 没有成功的图片，重设                            state &#x3D; &#39;done&#39;;                            location.reload();                        &#125;                        break;                &#125;                 if (state !&#x3D; &quot;ready&quot;) &#123;                    $(&#39;#filePicker&#39;).removeClass(&#39;element-invisible&#39;);                     $upload.text(&#39;开始上传&#39;).removeClass(&#39;disabled&#39;);                &#125;            &#125;             function addFile(file) &#123;                var $li &#x3D; $(&#39;&lt;li id&#x3D;&quot;&#39; + file.id + &#39;&quot;&gt;&#39; +                          &#39;&lt;p class&#x3D;&quot;title&quot;&gt;&#39; + file.name + &#39;&lt;&#x2F;p&gt;&#39; +                          &#39;&lt;p class&#x3D;&quot;imgWrap&quot;&gt;&lt;&#x2F;p&gt;&#39; +                          &#39;&lt;p class&#x3D;&quot;progress&quot;&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&#39; +                          &#39;&lt;&#x2F;li&gt;&#39;),                       $btns &#x3D; $(&#39;&lt;div class&#x3D;&quot;file-panel&quot;&gt;&#39; +                          &#39;&lt;span class&#x3D;&quot;cancel&quot;&gt;删除&lt;&#x2F;span&gt;&#39; +                          &#39;&lt;span class&#x3D;&quot;rotateRight&quot;&gt;向右旋转&lt;&#x2F;span&gt;&#39; +                          &#39;&lt;span class&#x3D;&quot;rotateLeft&quot;&gt;向左旋转&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;).appendTo($li),                      $prgress &#x3D; $li.find(&#39;p.progress span&#39;),                      $wrap &#x3D; $li.find(&#39;p.imgWrap&#39;),                      $info &#x3D; $(&#39;&lt;p class&#x3D;&quot;error&quot;&gt;&lt;&#x2F;p&gt;&#39;),                         showError &#x3D; function (code) &#123;                            switch (code) &#123;                                case &#39;exceed_size&#39;:                                    text &#x3D; &#39;文件大小超出&#39;;                                    break;                                 case &#39;interrupt&#39;:                                    text &#x3D; &#39;上传暂停&#39;;                                    break;                                 default:                                     text &#x3D; errMsg;;                                    break;                            &#125;                            $info.text(text).appendTo($li);                        &#125;;                   &#x2F;&#x2F;1.生成缩略图                if (file.getStatus() &#x3D;&#x3D;&#x3D; &#39;invalid&#39;) &#123;  &#x2F;&#x2F;不合格                    showError(file.statusText);                &#125; else &#123;                    &#x2F;&#x2F; @todo lazyload                    $wrap.text(&#39;预览中&#39;);                    uploader.makeThumb(file, function (error, src) &#123;                        if (error) &#123;                            $wrap.text(&#39;不能预览&#39;);                            return;                        &#125;                         var img &#x3D; $(&#39;&lt;img src&#x3D;&quot;&#39; + src + &#39;&quot;&gt;&#39;);                        $wrap.empty().append(img);                    &#125;, thumbnailWidth, thumbnailHeight);                     percentages[file.id] &#x3D; [file.size, 0];                    file.rotation &#x3D; 0;                &#125;                &#x2F;&#x2F;2.文件状态变化                file.on(&#39;statuschange&#39;, function (cur, prev) &#123;                    &#x2F;&#x2F;前一个状态                    if (prev &#x3D;&#x3D;&#x3D; &#39;progress&#39;) &#123;             &#x2F;&#x2F;上传中                        $prgress.hide().width(0);                    &#125;                    else if (prev &#x3D;&#x3D;&#x3D; &#39;queued&#39;) &#123;          &#x2F;&#x2F;进入队列,等待上传                        $li.off(&#39;mouseenter mouseleave&#39;);                        $btns.remove();                    &#125;                     &#x2F;&#x2F; 成功                    if (cur &#x3D;&#x3D;&#x3D; &#39;error&#39; || cur &#x3D;&#x3D;&#x3D; &#39;invalid&#39;) &#123;    &#x2F;&#x2F;失败不合格                        showError(file.statusText);                        percentages[file.id][1] &#x3D; 1;                    &#125; else if (cur &#x3D;&#x3D;&#x3D; &#39;interrupt&#39;) &#123;           &#x2F;&#x2F;暂停                        showError(&#39;interrupt&#39;);                    &#125; else if (cur &#x3D;&#x3D;&#x3D; &#39;queued&#39;) &#123;              &#x2F;&#x2F;队列中                        percentages[file.id][1] &#x3D; 0;                    &#125; else if (cur &#x3D;&#x3D;&#x3D; &#39;progress&#39;) &#123;            &#x2F;&#x2F;上传中                        $info.remove();                        $prgress.css(&#39;display&#39;, &#39;block&#39;);                    &#125; else if (cur &#x3D;&#x3D;&#x3D; &#39;complete&#39;) &#123;            &#x2F;&#x2F;上传完成                        $li.append(&#39;&lt;span class&#x3D;&quot;success&quot;&gt;&lt;&#x2F;span&gt;&#39;);                    &#125;                     $li.removeClass(&#39;state-&#39; + prev).addClass(&#39;state-&#39; + cur);                &#125;);                &#x2F;&#x2F;3.缩略图标签 旋转删除                $li.on(&#39;mouseenter&#39;, function () &#123;                    $btns.stop().animate(&#123; height: 30 &#125;);                &#125;);                 $li.on(&#39;mouseleave&#39;, function () &#123;                    $btns.stop().animate(&#123; height: 0 &#125;);                &#125;);                $btns.on(&#39;click&#39;, &#39;span&#39;, function () &#123;                    var index &#x3D; $(this).index(),                        deg;                     switch (index) &#123;                        case 0:                            uploader.removeFile(file);                            return;                         case 1:                            file.rotation +&#x3D; 90;                            break;                         case 2:                            file.rotation -&#x3D; 90;                            break;                    &#125;                     if (supportTransition) &#123;                        deg &#x3D; &#39;rotate(&#39; + file.rotation + &#39;deg)&#39;;                        $wrap.css(&#123;                            &#39;-webkit-transform&#39;: deg,                            &#39;-mos-transform&#39;: deg,                            &#39;-o-transform&#39;: deg,                            &#39;transform&#39;: deg                        &#125;);                    &#125; else &#123;                        $wrap.css(&#39;filter&#39;, &#39;progid:DXImageTransform.Microsoft.BasicImage(rotation&#x3D;&#39; + (~~((file.rotation &#x2F; 90) % 4 + 4) % 4) + &#39;)&#39;);                     &#125;                &#125;);                 $li.appendTo($queue);            &#125;             function removeFile(file) &#123;                var $li &#x3D; $(&#39;#&#39; + file.id);                delete percentages[file.id];                $li.off().find(&#39;.file-panel&#39;).off().end().remove();            &#125;              uploader.onUploadProgress &#x3D; function (file, percentage) &#123;                var $li &#x3D; $(&#39;#&#39; + file.id),                    $percent &#x3D; $li.find(&#39;.progress span&#39;);                 $percent.css(&#39;width&#39;, percentage * 100 + &#39;%&#39;);                percentages[file.id][1] &#x3D; percentage;            &#125;;             uploader.onFileQueued &#x3D; function (file) &#123;                fileCount++;                fileSize +&#x3D; file.size;                 addFile(file);                setState(&#39;ready&#39;);            &#125;;             uploader.onFileDequeued &#x3D; function (file) &#123;                fileCount--;                fileSize -&#x3D; file.size;                 if (!fileCount) &#123;                    setState(&#39;pedding&#39;);                &#125;                 removeFile(file);              &#125;;             uploader.on(&#39;all&#39;, function (type) &#123;                var stats;                switch (type) &#123;                    case &#39;uploadFinished&#39;:                        setState(&#39;confirm&#39;);                        break;                     case &#39;startUpload&#39;:                        setState(&#39;uploading&#39;);                        break;                     case &#39;stopUpload&#39;:                        setState(&#39;paused&#39;);                        break;                 &#125;            &#125;);             uploader.onError &#x3D; function (code) &#123;                alert(&#39;Eroor: &#39; + code);            &#125;;             uploader.on(&#39;uploadAccept&#39;, function (file, response) &#123;                  var hasError &#x3D; (response[&quot;result&quot;] &#x3D;&#x3D;&#x3D; &quot;error&quot;);                 if (hasError) &#123;                    &#x2F;&#x2F; 通过return false来告诉组件，此文件上传有错。                     errMsg &#x3D; response[&#39;error&#39;][&quot;message&quot;];                    return false;                &#125; else &#123;                 &#125;            &#125;);              uploader.on(&#39;uploadBeforeSend&#39;, function (file, data) &#123;                data.opr &#x3D; &#39;newupload&#39;;                data.type &#x3D; $(&quot;#hidtype&quot;).val();                data.pid &#x3D; $(&quot;#hidpid&quot;).val();             &#125;);              &#x2F;&#x2F;上传按钮            $upload.on(&#39;click&#39;, function () &#123;                if ($(this).hasClass(&#39;disabled&#39;)) &#123;                    return false;                &#125;                 if (state &#x3D;&#x3D;&#x3D; &#39;ready&#39;) &#123;                    uploader.upload();                &#125; else if (state &#x3D;&#x3D;&#x3D; &#39;paused&#39;) &#123;                    uploader.upload();                &#125; else if (state &#x3D;&#x3D;&#x3D; &#39;uploading&#39;) &#123;                    uploader.stop();                &#125;            &#125;);             $upload.addClass(&#39;state-&#39; + state);        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form id&#x3D;&quot;frmUpload&quot; runat&#x3D;&quot;server&quot;&gt;    &lt;div class&#x3D;&quot;page-container&quot;&gt;        &lt;div id&#x3D;&quot;uploader&quot; class&#x3D;&quot;wu-example&quot;&gt;            &lt;div class&#x3D;&quot;queueList&quot;&gt;                         &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;statusBar&quot; &gt;                &lt;div class&#x3D;&quot;btns&quot;&gt;                    &lt;div id&#x3D;&quot;filePicker&quot;&gt;&lt;&#x2F;div&gt;                    &lt;div class&#x3D;&quot;uploadBtn&quot;&gt;开始上传&lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;                   &lt;&#x2F;div&gt;    &lt;&#x2F;form&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般处理程序代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using School.Infrastructure.Common;using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using System.Web; namespace School.Web.TestDemo.ajax&#123;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; baiduUpload 的摘要说明    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    public class baiduUpload : IHttpHandler    &#123;         public void ProcessRequest(HttpContext context)        &#123;            context.Response.ContentType &#x3D; &quot;text&#x2F;plain&quot;;            HttpRequest Request &#x3D; context.Request;            HttpResponse Response &#x3D; context.Response;            string name &#x3D; Request[&quot;name&quot;];            string opr &#x3D; Request[&quot;opr&quot;];            string result &#x3D; string.Empty;            if(opr&#x3D;&#x3D;&quot;newupload&quot;)            &#123;                result &#x3D; NewUploadImg(Request, name);            &#125;            context.Response.Write(result);        &#125;          private string NewUploadImg(HttpRequest Request, string filename)        &#123;            var error &#x3D; new error &#123; code &#x3D; &quot;101&quot;, message &#x3D; &quot;Upload Failed&quot; &#125;;            JsonResultWebUpload jresult &#x3D; new JsonResultWebUpload(&quot;2.0&quot;) &#123; result &#x3D; &quot;error&quot; &#125;;            int filecount &#x3D; Request.Files.Count;            HttpPostedFile img &#x3D; null;             if (filecount &gt; 0 &amp;&amp; !string.IsNullOrEmpty(filename))            &#123;                img &#x3D; Request.Files[0];            &#125;            else            &#123;                jresult.error &#x3D; error;                jresult.id &#x3D; Request[&quot;id&quot;];                return JsonHelper.SerializeObject(jresult);            &#125;            byte[] bytes &#x3D; new byte[img.ContentLength];            using (BinaryReader reader &#x3D; new BinaryReader(img.InputStream, Encoding.UTF8))            &#123;                bytes &#x3D; reader.ReadBytes(img.ContentLength);            &#125;            string filefullpath &#x3D; HttpContext.Current.Server.MapPath(&quot;~&#x2F;UploadFiles&#x2F;&quot;) + filename;            using (FileStream fsWrite &#x3D; new FileStream(filefullpath, FileMode.OpenOrCreate))            &#123;                fsWrite.Write(bytes, 0, bytes.Length);            &#125;             if (true)            &#123;                jresult.result &#x3D; &quot;success&quot;;                jresult.id &#x3D; Request[&quot;id&quot;];            &#125;             return JsonHelper.SerializeObject(jresult);        &#125;         public bool IsReusable        &#123;            get            &#123;                return false;            &#125;        &#125;    &#125;     public class JsonResultWebUpload    &#123;        public JsonResultWebUpload()        &#123;         &#125;        public JsonResultWebUpload(string jsonrpc)        &#123;            this.jsonrpc &#x3D; jsonrpc;         &#125;        public string jsonrpc &#123; get; set; &#125;         public string result &#123; get; set; &#125;         public error error &#123; get; set; &#125;         public string id &#123; get; set; &#125;    &#125;     public class error    &#123;        public string code &#123; get; set; &#125;         public string message &#123; get; set; &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css样式</p><p>picstyle.css</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">body &#123;    margin-top: 50px;    font-size: 16px;    font-family: &quot;Myriad Pro&quot;, &quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;å¾®è½¯é›…é»‘&quot;, Calibri, Helvetica, tahoma,arial,simsun,&quot;å®‹ä½“&quot;, sans-serif;    line-height: 1.5;    -webkit-font-smoothing: antialiased;&#125;.jumbotron &#123;    background: transparent url(images&#x2F;banner.jpg) repeat-x 50% 0%;    color: #fff;    text-shadow: 1px 1px 1px #3b3262;    margin-bottom: 0;&#125;.jumbotron .container &#123;   position: relative;&#125;.jumbotron .github-btns &#123;    position: absolute;    bottom: 0;    right: 0;&#125;.fetature &#123;    margin-top: 30px;&#125;.page-body &#123;    min-height: 450px;&#125;.page-container &#123;    margin-top: 10px;&#125;.page-container h1,.page-container h2,.page-container h3 &#123;    padding-top: 70px;    margin-top: -50px;&#125;.logo &#123;    position: relative;    padding-left: 60px;&#125;.logo span &#123;    position: absolute;    left: 15px;    top: 8px;    font-size: 2em;    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);&#125;.logo.active &#123;  color: #fff;&#125;@media (min-width: 768px) &#123;    .fetature .row .col-lg-4 &#123;        min-height: 250px;    &#125;&#125;.footer &#123;    width: 100%;    overflow: hidden;    color: #f2f2f2;    background: #212121;    margin-top: 50px;&#125;.footer-fixed-bottom &#123;    position: fixed;    bottom: 0;&#125;.footer a &#123;    color: #f2f2f2;&#125;.footer .footer-inner &#123;    margin: 15px;&#125;.wu-example &#123;    position: relative;    padding: 45px 15px 15px;    margin: 15px 0;    background-color: #fafafa;    box-shadow: inset 0 3px 6px rgba(0, 0, 0, .05);    border-color: #e5e5e5 #eee #eee;    border-style: solid;    border-width: 1px 0;&#125;.wu-example:after &#123;    content:&quot;请上传证件&quot;;    position: absolute;    top: 15px;    left: 15px;    font-size: 12px;    font-weight: bold;    color: #bbb;    text-transform: uppercase;    letter-spacing: 1px;&#125;@media (min-width: 768px) &#123;    .bs-example &#123;        margin-left: 0;        margin-right: 0;        background-color: #fff;        border-width: 1px;        border-color: #ddd;        border-radius: 4px 4px 0 0;        box-shadow: none;    &#125;&#125;.post-toc &#123;    margin-top: 30px;    margin-bottom: 30px;    padding-top: 10px;    padding-bottom: 10px;    text-shadow: 0 1px 0 #fff;    background-color: #f7f5fa;    border-radius: 5px;&#125;.post-toc .nav &gt; li &gt; a &#123;    display: block;    color: #716b7a;    padding: 5px 20px;&#125;.post-toc .nav .nav &gt; li &gt; a &#123;    padding-top: 3px;    padding-bottom: 3px;    padding-left: 30px;    font-size: 90%;&#125;.post-toc.affix &#123;    position: static;&#125;.post-toc .nav .nav &#123;  display: none;  margin-bottom: 8px;&#125;@media (min-width: 992px) &#123;    .post-toc.affix &#123;        position: fixed;        width: 213px;        top: 50px;    &#125;    .post-toc .nav &gt; .active &gt; ul &#123;      display: block;    &#125;&#125;@media (min-width: 1200px) &#123;    .post-toc.affix &#123;        width: 263px;    &#125;    .post-toc .nav &gt; .active &gt; ul &#123;      display: block;    &#125;&#125;.post-toc .nav &gt; .active &gt; a,.post-toc .nav &gt; .active:hover &gt; a,.post-toc .nav &gt; .active:focus &gt; a &#123;    font-weight: bold;    color: #563d7c;    background-color: transparent;    border-right: 1px solid #563d7c;&#125;.friends-links &#123;    margin: 0;    padding: 0;    list-style: none;&#125;.weixin &#123;  text-align: center;  display: inline-block;&#125;.weixin img &#123;  width: 80px;&#125;&#x2F;**********************************  COMMENTS*********************************&#x2F;.comment &#123;    background-color: transparent;    border-color: #CACACA;    border-style: solid;    border-width: 1px;    color: black;    display: block;    margin-bottom: 10px;    margin-top: 10px;    padding: 0px;    width: 100%;  &#125;.comment .commentheader &#123;  border-bottom-color: #CACACA;  border-bottom-style: solid;  border-bottom-width: 1px;  color: black;  background-image: -webkit-linear-gradient(#F8F8F8,#E1E1E1);  background-image: -moz-linear-gradient(#F8F8F8,#E1E1E1);  color: black;  display: block;  float: left;  font-family: helvetica, arial, freesans, clean, sans-serif;  font-size: 12px;  font-style: normal;  font-variant: normal;  font-weight: normal;  height: 33px;  line-height: 33px;  margin: 0px;  overflow-x: hidden;  overflow-y: hidden;  padding: 0px;  text-overflow: ellipsis;  text-shadow: rgba(255, 255, 255, 0.699219) 1px 1px 0px;  white-space: nowrap;  width: 100%;&#125;.comment .commentheader .commentgravatar &#123;  background-attachment: scroll;  background-clip: border-box;  background-color: white;  background-image: none;  background-origin: padding-box;  border-color: #C8C8C8;  border-style: solid;  border-width: 1px;  color: black;  display: inline-block;  float: none;  font-family: helvetica, arial, freesans, clean, sans-serif;  font-size: 1px;  font-style: normal;  font-variant: normal;  font-weight: normal;  height: 24px;  line-height: 1px;  margin-left: 5px;  margin-right: 3px;  margin-top: -2px;  overflow-x: visible;  overflow-y: visible;  padding: 1px;  text-overflow: clip;  text-shadow: rgba(255, 255, 255, 0.699219) 1px 1px 0px;  vertical-align: middle;  white-space: nowrap;  width: 24px;&#125;.comment .commentheader a:link &#123;  text-decoration: none;&#125;.comment .commentheader a:hover &#123;  border-bottom:1px solid;&#125;.comment .commentheader .commentuser &#123;  background-color: transparent;  color: black;  display: inline;  float: none;  font-family: helvetica, arial, freesans, clean, sans-serif;  font-size: 12px;  font-style: normal;  font-variant: normal;  font-weight: bold;  height: 0px;  line-height: 16px;  margin-left: 5px;  margin-right: 10px;  overflow-x: visible;  overflow-y: visible;  padding: 0px;  text-overflow: clip;  text-shadow: rgba(255, 255, 255, 0.699219) 1px 1px 0px;  white-space: nowrap;  width: 0px;&#125;.comment .commentheader .commentdate &#123;  background-color: transparent;  color: #777;  display: inline;  float: none;  font-family: helvetica, arial, freesans, clean, sans-serif;  font-size: 11px;  font-style: normal;  font-variant: normal;  font-weight: normal;  height: 0px;  line-height: 33px;  margin: 0px;  overflow-x: visible;  overflow-y: visible;  padding: 0px;  text-overflow: clip;  text-shadow: rgba(255, 255, 255, 0.699219) 1px 1px 0px;  white-space: nowrap;  width: 20em;&#125;.comment .commentbody &#123;  background-attachment: scroll;  background-clip: border-box;  background-color: transparent;  background-image: none;  background-origin: padding-box;  color: #333;  display: block;  margin-bottom: 1em;  margin-left: 1em;  margin-right: 1em;  margin-top: 40px;  overflow-x: visible;  overflow-y: visible;  padding: 0em;  position: static;  width: 96%;  word-wrap: break-word;&#125;.comment .commentbody p &#123;  margin-bottom: 0.5em;  margin-top: 0.5em;  margin-left: 0em;  margin-right: 0em;&#125;.comment .commentbody pre &#123;  border: 0px solid #ddd;  background-color: #eef;  padding: 0 .4em;&#125;.comment .commentbody pre code &#123;  border: 0px solid #ddd;&#125;.comment .commentbody code &#123;  border: 1px solid #ddd;  background-color: #eef;  font-size: 85%;  padding: 0 .2em;&#125;&#x2F;*demoæ ·å¼*&#x2F;#picker &#123;    display: inline-block;    line-height: 1.428571429;    vertical-align: middle;    margin: 0 12px 0 0;&#125;#picker .webuploader-pick &#123;    padding: 6px 12px;    display: block;&#125;#uploader-demo .thumbnail &#123;    width: 110px;    height: 110px;&#125;#uploader-demo .thumbnail img &#123;    width: 100%;&#125;.uploader-list &#123;    width: 100%;    overflow: hidden;&#125;.file-item &#123;    float: left;    position: relative;    margin: 0 20px 20px 0;    padding: 4px;&#125;.file-item .error &#123;    position: absolute;    top: 4px;    left: 4px;    right: 4px;    background: red;    color: white;    text-align: center;    height: 20px;    font-size: 14px;    line-height: 23px;&#125;.file-item .info &#123;    position: absolute;    left: 4px;    bottom: 4px;    right: 4px;    height: 20px;    line-height: 20px;    text-indent: 5px;    background: rgba(0, 0, 0, 0.6);    color: white;    overflow: hidden;    white-space: nowrap;    text-overflow : ellipsis;    font-size: 12px;    z-index: 10;&#125;.upload-state-done:after &#123;    content:&quot;\f00c&quot;;    font-family: FontAwesome;    font-style: normal;    font-weight: normal;    line-height: 1;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;    font-size: 32px;    position: absolute;    bottom: 0;    right: 4px;    color: #4cae4c;    z-index: 99;&#125;.file-item .progress &#123;    position: absolute;    right: 4px;    bottom: 4px;    height: 3px;    left: 4px;    height: 4px;    overflow: hidden;    z-index: 15;    margin:0;    padding: 0;    border-radius: 0;    background: transparent;&#125;.file-item .progress span &#123;    display: block;    overflow: hidden;    width: 0;    height: 100%;    background: #d14 url(images&#x2F;progress.png) repeat-x;    -webit-transition: width 200ms linear;    -moz-transition: width 200ms linear;    -o-transition: width 200ms linear;    -ms-transition: width 200ms linear;    transition: width 200ms linear;    -webkit-animation: progressmove 2s linear infinite;    -moz-animation: progressmove 2s linear infinite;    -o-animation: progressmove 2s linear infinite;    -ms-animation: progressmove 2s linear infinite;    animation: progressmove 2s linear infinite;    -webkit-transform: translateZ(0);&#125;@-webkit-keyframes progressmove &#123;    0% &#123;        background-position: 0 0;    &#125;    100% &#123;        background-position: 17px 0;    &#125;&#125;@-moz-keyframes progressmove &#123;    0% &#123;        background-position: 0 0;    &#125;    100% &#123;        background-position: 17px 0;    &#125;&#125;@keyframes progressmove &#123;    0% &#123;        background-position: 0 0;    &#125;    100% &#123;        background-position: 17px 0;    &#125;&#125;a.travis &#123;  position: relative;  top: -4px;  right: 15px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo.css</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#container &#123;    color: #838383;    font-size: 12px;&#125;#uploader .queueList &#123;    margin: 20px;    &#x2F;*border: 3px dashed #e6e6e6;*&#x2F;&#125;#uploader .queueList.filled &#123;    padding: 17px;    margin: 0;    border: 3px dashed transparent;&#125;#uploader .queueList.webuploader-dnd-over &#123;    border: 3px dashed #999999;&#125;#uploader p &#123;margin: 0;&#125;.element-invisible &#123;    position: absolute !important;    clip: rect(1px 1px 1px 1px); &#x2F;* IE6, IE7 *&#x2F;    clip: rect(1px,1px,1px,1px);&#125;#uploader .placeholder &#123;    min-height: 350px;    padding-top: 178px;    text-align: center;    background: url(images&#x2F;image.png) center 93px no-repeat;    color: #cccccc;    font-size: 18px;    position: relative;&#125;#uploader .placeholder .webuploader-pick &#123;    font-size: 18px;    background: #00b7ee;    border-radius: 3px;    line-height: 44px;    padding: 0 30px;    *width: 120px;    color: #fff;    display: inline-block;    margin: 0 auto 20px auto;    cursor: pointer;    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);&#125;#uploader .placeholder .webuploader-pick-hover &#123;    background: #00a2d4;&#125;#uploader .placeholder .flashTip &#123;    color: #666666;    font-size: 12px;    position: absolute;    width: 100%;    text-align: center;    bottom: 20px;&#125;#uploader .placeholder .flashTip a &#123;    color: #0785d1;    text-decoration: none;&#125;#uploader .placeholder .flashTip a:hover &#123;    text-decoration: underline;&#125;#uploader .filelist &#123;    list-style: none;    margin: 0;    padding: 0;&#125;#uploader .filelist:after &#123;    content: &#39;&#39;;    display: block;    width: 0;    height: 0;    overflow: hidden;    clear: both;&#125;#uploader .filelist li &#123;    width: 110px;    height: 110px;    background: url(images&#x2F;bg.png) no-repeat;    text-align: center;    margin: 0 8px 20px 0;    position: relative;    display: inline;    float: left;    overflow: hidden;    font-size: 12px;&#125;#uploader .filelist li p.log &#123;    position: relative;    top: -45px;&#125;#uploader .filelist li p.title &#123;    position: absolute;    top: 0;    left: 0;    width: 100%;    overflow: hidden;    white-space: nowrap;    text-overflow : ellipsis;    top: 5px;    text-indent: 5px;    text-align: left;&#125;#uploader .filelist li p.progress &#123;    position: absolute;    width: 100%;    bottom: 0;    left: 0;    height: 8px;    overflow: hidden;    z-index: 50;    margin: 0;    border-radius: 0;    background: none;    -webkit-box-shadow: 0 0 0;&#125;#uploader .filelist li p.progress span &#123;    display: none;    overflow: hidden;    width: 0;    height: 100%;    background: #1483d8 url(images&#x2F;progress.png) repeat-x;    -webit-transition: width 200ms linear;    -moz-transition: width 200ms linear;    -o-transition: width 200ms linear;    -ms-transition: width 200ms linear;    transition: width 200ms linear;    -webkit-animation: progressmove 2s linear infinite;    -moz-animation: progressmove 2s linear infinite;    -o-animation: progressmove 2s linear infinite;    -ms-animation: progressmove 2s linear infinite;    animation: progressmove 2s linear infinite;    -webkit-transform: translateZ(0);&#125;@-webkit-keyframes progressmove &#123;    0% &#123;       background-position: 0 0;    &#125;    100% &#123;       background-position: 17px 0;    &#125;&#125;@-moz-keyframes progressmove &#123;    0% &#123;       background-position: 0 0;    &#125;    100% &#123;       background-position: 17px 0;    &#125;&#125;@keyframes progressmove &#123;    0% &#123;       background-position: 0 0;    &#125;    100% &#123;       background-position: 17px 0;    &#125;&#125;#uploader .filelist li p.imgWrap &#123;    position: relative;    z-index: 2;    line-height: 110px;    vertical-align: middle;    overflow: hidden;    width: 110px;    height: 110px;    -webkit-transform-origin: 50% 50%;    -moz-transform-origin: 50% 50%;    -o-transform-origin: 50% 50%;    -ms-transform-origin: 50% 50%;    transform-origin: 50% 50%;    -webit-transition: 200ms ease-out;    -moz-transition: 200ms ease-out;    -o-transition: 200ms ease-out;    -ms-transition: 200ms ease-out;    transition: 200ms ease-out;&#125;#uploader .filelist li img &#123;    width: 100%;&#125;#uploader .filelist li p.error &#123;    background: #f43838;    color: #fff;    position: absolute;    bottom: 0;    left: 0;    height: 28px;    line-height: 28px;    width: 100%;    z-index: 100;&#125;#uploader .filelist li .success &#123;    display: block;    position: absolute;    left: 0;    bottom: 0;    height: 40px;    width: 100%;    z-index: 200;    background: url(images&#x2F;success.png) no-repeat right bottom;&#125;#uploader .filelist div.file-panel &#123;    position: absolute;    height: 0;    filter: progid:DXImageTransform.Microsoft.gradient(GradientType&#x3D;0,startColorstr&#x3D;&#39;#80000000&#39;, endColorstr&#x3D;&#39;#80000000&#39;)\0;    background: rgba( 0, 0, 0, 0.5 );    width: 100%;    top: 0;    left: 0;    overflow: hidden;    z-index: 300;&#125;    #uploader .filelist div.file-panel span &#123;        width: 24px;        height: 24px;        display: inline;        float: right;        text-indent: -9999px;        overflow: hidden;        background: url(icons.png) no-repeat;        margin: 5px 1px 1px;        cursor: pointer;    &#125;#uploader .filelist div.file-panel span.rotateLeft &#123;    background-position: 0 -24px;&#125;#uploader .filelist div.file-panel span.rotateLeft:hover &#123;    background-position: 0 0;&#125;#uploader .filelist div.file-panel span.rotateRight &#123;    background-position: -24px -24px;&#125;#uploader .filelist div.file-panel span.rotateRight:hover &#123;    background-position: -24px 0;&#125;#uploader .filelist div.file-panel span.cancel &#123;    background-position: -48px -24px;&#125;#uploader .filelist div.file-panel span.cancel:hover &#123;    background-position: -48px 0;&#125;#uploader .statusBar &#123;    height: 63px;    border-top: 1px solid #dadada;    padding: 0 20px;    line-height: 63px;    vertical-align: middle;    position: relative;&#125;#uploader .statusBar .progress &#123;    border: 1px solid #1483d8;    width: 198px;    background: #fff;    height: 18px;    position: relative;    display: inline-block;    text-align: center;    line-height: 20px;    color: #6dbfff;    position: relative;    margin: 0 10px 0 0;&#125;#uploader .statusBar .progress span.percentage &#123;    width: 0;    height: 100%;    left: 0;    top: 0;    background: #1483d8;    position: absolute;&#125;#uploader .statusBar .progress span.text &#123;    position: relative;    z-index: 10;&#125;#uploader .statusBar .info &#123;    display: inline-block;    font-size: 14px;    color: #666666;&#125;#uploader .statusBar .btns &#123;    position: absolute;    top: 10px;    right: 20px;    line-height: 40px;&#125;#filePicker2 &#123;    display: inline-block;    float: left;&#125;#uploader .statusBar .btns .webuploader-pick,#uploader .statusBar .btns .uploadBtn,#uploader .statusBar .btns .uploadBtn.state-uploading,#uploader .statusBar .btns .uploadBtn.state-paused &#123;    background: #ffffff;    border: 1px solid #cfcfcf;    color: #565656;    padding: 0 18px;    display: inline-block;    border-radius: 3px;    margin-left: 10px;    cursor: pointer;    font-size: 14px;    float: left;&#125;#uploader .statusBar .btns .webuploader-pick-hover,#uploader .statusBar .btns .uploadBtn:hover,#uploader .statusBar .btns .uploadBtn.state-uploading:hover,#uploader .statusBar .btns .uploadBtn.state-paused:hover &#123;    background: #f0f0f0;&#125;#uploader .statusBar .btns .uploadBtn &#123;    background: #00b7ee;    color: #fff;    border-color: transparent;&#125;#uploader .statusBar .btns .uploadBtn:hover &#123;    background: #00a2d4;&#125;#uploader .statusBar .btns .uploadBtn.disabled &#123;    pointer-events: none;    opacity: 0.6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server 如何更改SQL Server和windows身份方式验证</title>
      <link href="/mysql-sql-oracle/sql-server-ru-he-geng-gai-sql-server-he-windows-shen-fen-fang-shi-yan-zheng/"/>
      <url>/mysql-sql-oracle/sql-server-ru-he-geng-gai-sql-server-he-windows-shen-fen-fang-shi-yan-zheng/</url>
      
        <content type="html"><![CDATA[<ol><li>安装sql后先用windows账户登陆进去，然后在sql上右键，选择“安全性”-“SQL Server和windows身份验证模式”然后确定<br><img src="/images/2016091316421201.png" alt="2016091316421201.png"></li><li>找到安全性——登陆名（sa用户）右键——状态，在登陆选项中选择已启用<br><img src="/images/2016091316421202.png" alt="2016091316421202.png"></li><li>在服务用重新启动sqlserver服务。<br>sqlserver从2008后保存修改的数据库表都会提示阻止修改，只需要在“工具”——设计器——将阻止保存要求重新创建表的更改去掉就可以了<br><img src="/images/2016091316421203.png" alt="2016091316421203.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已经阻止此发布者在你的计算机上运行软件</title>
      <link href="/computer/yi-jing-zu-zhi-ci-fa-bu-zhe-zai-ni-de-ji-suan-ji-shang-yun-xing-ruan-jian/"/>
      <url>/computer/yi-jing-zu-zhi-ci-fa-bu-zhe-zai-ni-de-ji-suan-ji-shang-yun-xing-ruan-jian/</url>
      
        <content type="html"><![CDATA[<ol><li>现在改软件上右键，点击“解除锁定”然后应用<br><img src="/images/2016091316431301.png" alt="2016091316431301.png"><br>这样后会提示“系统管理愿设置了策略，禁止进行此安装”<br><img src="/images/2016091316431302.png" alt="2016091316431302.png"></li><li>点击运行输入“gpedit.msc”命令<br><img src="/images/2016091316431303.png" alt="2016091316431303.png"><br>找到“用户账户控制：已管理员批准模式运行所有管理员”，该项改为禁用。<br><img src="/images/2016091316431304.png" alt="2016091316431304.png"><br>找到“禁用Windows Installer” 然后将该项改为禁用<br><img src="/images/2016091316431305.png" alt="2016091316431305.png"><br>找到软件限制策略，如果显示没有，则右键创建限制策略，然后将“强制”属性中的红框的限制用户改为图中所示选项。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL智能提示插件——SQLPrompt</title>
      <link href="/tools/sql-zhi-neng-ti-shi-cha-jian-sqlprompt/"/>
      <url>/tools/sql-zhi-neng-ti-shi-cha-jian-sqlprompt/</url>
      
        <content type="html"><![CDATA[<ol><li>安装SQLPrompt，直接点击下一步即可，然后打开SQL Server 在菜单栏找到SQLPrompt选项注册该软件<br><img src="/images/2016090614510101.png" alt="2016090614510101.png"></li><li>先断开网络，然后运行注册机，将注册吗复制到序列号的地方，将两个勾选的复选不选中，点击“Activate Manually”<br><img src="/images/2016090614510102.png" alt="2016090614510102.png"></li><li>点击红色框框中的按钮，弹出如下界面<br><img src="/images/2016090614510103.png" alt="2016090614510103.png"><br><img src="/images/2016090614510104.png" alt="2016090614510104.png"></li><li>将左边的中全部代码复制到注册机中，注册机的下面会自动生成一段代码，然后将生成的代码复制到右边，然后点击“finish”；到此注册完毕。</li></ol><p>SQLPrompt中有很多内置的代码段，在SQLPrompt——Snippet Manager中可以看见，也可以自己定义</p><p><img src="/images/2016090614510105.png" alt="2016090614510105.png"></p><p>如 输入ssf然后按tab键就会输出 SELECT * FROM ，具体看Snippet Manager中的内容即可</p><p>按Control+K+Y可以格式化SQL语句</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS 设置背景色和背景图片</title>
      <link href="/tools/vs-she-zhi-bei-jing-se-he-bei-jing-tu-pian/"/>
      <url>/tools/vs-she-zhi-bei-jing-se-he-bei-jing-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>VS版本：2013</p><p>选择菜单栏上——工具——选项——环境——字体和颜色——自定义(项背景)，选择好自己喜欢的颜色即可<br><img src="/images/2016090510081801.png" alt="2016090510081801.png"><br>设置背景图片</p><p>下载vs插件（ClaudiaIDE）：<a href="https://visualstudiogallery.msdn.microsoft.com/9ba50f8d-f30c-4e33-ab19-bfd9f56eb817">https://visualstudiogallery.msdn.microsoft.com/9ba50f8d-f30c-4e33-ab19-bfd9f56eb817</a></p><p>选择菜单栏上的——工具——ClaudiaIDE——General——单一背景，更改图片的路径就可以自己设置喜欢的图片了<br><img src="/images/2016090510081802.png" alt="2016090510081802.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Office 2013 时提示找不到 Office.zh-cn&#92;OfficeLR.cab#标题</title>
      <link href="/tools/an-zhuang-office-2013-shi-ti-shi-zhao-bu-dao-officelr.cab/"/>
      <url>/tools/an-zhuang-office-2013-shi-ti-shi-zhao-bu-dao-officelr.cab/</url>
      
        <content type="html"><![CDATA[<p>今天安装office2013的时候总是过会就提示找不到OfficeLR.cab文件<br><img src="/images/2016083014511801.jpg" alt="2016083014511801.jpg"></p><p>在网上找了好多方法不行，后来将注册表里的office选项全部删除就可以了（HKEY_CURRENT_USER\Software\Microsoft\Office）</p><p>安装完成后启动word是总是要配置office</p><p>直接在运行里输入 reg add HKCU\Software\Microsoft\Office\15.0\Word\Options &#x2F;v NoReReg &#x2F;t REG_DWORD &#x2F;d 1<br>然后回车</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 获取get请求方式的参数</title>
      <link href="/js/js-huo-qu-get-qing-qiu-fang-shi-de-can-shu/"/>
      <url>/js/js-huo-qu-get-qing-qiu-fang-shi-de-can-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;获取页面中的参数    name值参数名称（例如：http：&#x2F;&#x2F;localhost:8099&#x2F;index.aspx?id&#x3D;10，name则指的是id）function GetQueryString(name) &#123;    var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);    var r &#x3D; window.location.search.substr(1).match(reg);    if (r !&#x3D; null)        return unescape(r[2]);    return &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 通过 Hessian服务调用java</title>
      <link href="/c-winform/csharp-tong-guo-hessian-fu-wu-diao-yong-java/"/>
      <url>/c-winform/csharp-tong-guo-hessian-fu-wu-diao-yong-java/</url>
      
        <content type="html"><![CDATA[<ol><li>下载<a href="https://sourceforge.net/projects/hessiancsharp/">Hessiancsharp.dll</a></li><li>新建一个c#窗体程序，然后在添加一个类库</li><li>添加一个接口类，接口中的方法名和参数与java中的服务方法名和参数保持一致</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial interface HessianManager&#123;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F;     &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;method&quot;&gt;方法名&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;operate&quot;&gt;操作（添加、删除、修改）&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;json&quot;&gt;json数据&lt;&#x2F;param&gt;    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;    string synchronizeData(string method, string operate, string json);    string sayHello(string msg);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>引用Hessiancsharp.dll</li><li>通过hessian调用java</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial class frmHessian : Form    &#123;        string url &#x3D; ConfigurationManager.AppSettings[&quot;url&quot;].ToString();        CHessianProxyFactory factory &#x3D; new CHessianProxyFactory();        HessianManager hessianClient &#x3D; null;        public frmHessian()        &#123;            InitializeComponent();            hessianClient &#x3D; (HessianManager)factory.Create(typeof(HessianManager), url);        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 同步供应商        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sender&quot;&gt;&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;e&quot;&gt;&lt;&#x2F;param&gt;        private void btnSynSupplier_Click(object sender, EventArgs e)        &#123;            List&lt;Supplier&gt; supplists &#x3D; new List&lt;Supplier&gt;();            DataTable dt &#x3D; DbHelperSQL.Query(&quot;SELECT * FROM dbo.Sys_Supplier WHERE ss_State&#x3D;1&quot;).Tables[0];            foreach (DataRow item in dt.Rows)            &#123;                Supplier sup &#x3D; new Supplier();                sup.bbbpSn &#x3D; item[&quot;ss_SupplierNo&quot;].ToString();                sup.bbbpId &#x3D; item[&quot;ss_SupplierNo&quot;].ToString();                sup.bbbpBbbrId &#x3D; 1;                sup.bbbpName &#x3D; item[&quot;ss_SupplierName&quot;].ToString();                sup.bbbpContact &#x3D; item[&quot;ss_Contact&quot;].ToString();                sup.bbbpContactTel &#x3D; item[&quot;ss_Tel&quot;].ToString();                sup.bbbpContactPhone &#x3D; item[&quot;ss_Phone&quot;].ToString();                sup.bbbpContactAddress &#x3D; item[&quot;ss_Adress&quot;].ToString();                sup.bbbpState &#x3D; Convert.ToInt32(item[&quot;ss_State&quot;]) &#x3D;&#x3D; 1 ? &quot;有效&quot; : &quot;无效&quot;;                sup.bbbpLocationid &#x3D; 5001; &#x2F;&#x2F;item[&quot;sp_PurchaserNo&quot;] &#x3D;&#x3D; DBNull.Value ? 5001 : Convert.ToInt32(item[&quot;sp_PurchaserNo&quot;]);                sup.bbbpYingfu &#x3D; 0;                sup.bbbpIds &#x3D; &quot;,1,&quot;;                sup.bbbpBank &#x3D; item[&quot;ss_Bank&quot;].ToString();                sup.bbbpBankNumber &#x3D; item[&quot;ss_BankAccount&quot;].ToString();                sup.bbbpGongyingjiezhiDate &#x3D; string.Format(&quot;&#123;0:yyyy-MM-dd HH:mm:ss&#125;&quot;, item[&quot;ss_BusiLicexpireTime&quot;]);                sup.bbbpFaxNumber &#x3D; item[&quot;ss_Fax&quot;].ToString();                supplists.Add(sup);            &#125;            string msg &#x3D; hessianClient.synchronizeData(&quot;synBusinessParter&quot;, &quot;add&quot;, JsonHelper.SerializeObject(supplists));            Application.DoEvents();            MessageBox.Show(&quot;同步成功！&quot;);        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="http://hessian.caucho.com/">http://hessian.caucho.com/</a></p><p><a href="https://sourceforge.net/projects/hessiancsharp/">https://sourceforge.net/projects/hessiancsharp/</a></p><p><a href="http://www.cnblogs.com/lxsfg/archive/2008/08/27/1277777.html">http://www.cnblogs.com/lxsfg/archive/2008/08/27/1277777.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery UI框架 Juqery 后台框架</title>
      <link href="/js/jquery-ui-kuang-jia-juqery-hou-tai-kuang-jia/"/>
      <url>/js/jquery-ui-kuang-jia-juqery-hou-tai-kuang-jia/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="http://jui.org/">J-UI</a>框架<br><img src="/images/2016080114221201.png" alt="2016080114221201.png"></p></li><li><p><a href="http://www.miniui.com/demo/">MiniUI</a>框架<br><img src="/images/2016080114221202.png" alt="2016080114221202.png"></p></li><li><p><a href="http://www.ligerui.com/demo.html">Juquery LigerUI</a>框架<br><img src="/images/2016080114221203.png" alt="2016080114221203.png"></p></li><li><p><a href="http://www.layui.com/demo/auxiliar.html">layerUI</a><br><img src="/images/2016080114221204.png" alt="2016080114221204.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可输入的 Combox(DropDownList)</title>
      <link href="/js/ke-shu-ru-de-combox-dropdownlist/"/>
      <url>/js/ke-shu-ru-de-combox-dropdownlist/</url>
      
        <content type="html"><![CDATA[<p>aspx页面中需要可以输入的combox，在网上找了一个js的插件，效果图如下：<br><img src="/images/2016072210571501.png" alt="2016072210571501.png"></p><p>前台代码</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; CodeBehind&#x3D;&quot;InputComBox.aspx.cs&quot; Inherits&#x3D;&quot;School.Web.TestDemo.InputComBox&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;&lt;head runat&#x3D;&quot;server&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;    &lt;title&gt;可输入的combox&lt;&#x2F;title&gt;    &lt;link type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&#x2F;Scripts&#x2F;jquery-1.10.4&#x2F;jquery-ui.min.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;Scripts&#x2F;jquery-1.10.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;Scripts&#x2F;jquery-1.10.4&#x2F;jquery-ui.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;        .appcusser li a &#123;            width: 32px;            background: url(&#x2F;Images&#x2F;pro_down.gif);            float: left;            display: block;            height: 33px;            line-height: 30px;            text-align: center;            color: #2b7fbf;            font-weight: bold;            margin-right: 5px;        &#125;         .appcusser li span &#123;            display: block;            float: left;            width: 100px;            text-align: right;            padding-right: 5px;            color: #666;        &#125;        .appcusser li label &#123;            display: block;            float: left;            line-height: 28px;            margin-right: 5px;        &#125;         ul, li &#123;            list-style: none;        &#125;         .custom-combobox &#123;            position: relative;            display: inline-block;        &#125;         .custom-combobox-toggle &#123;            position: absolute;            top: 5px;            bottom: 0;            left: 160px;            top: 0;            padding: 0;            height: 32px;            &#x2F;* 支持： IE7 *&#x2F;            *height: 1.7em;            *top: 0.1em;        &#125;         .custom-combobox-input &#123;            margin: 0;            padding: 0.3em;            background-color: #fff;            background-image: none;            color: #333;            height: 22px;            width: 150px;        &#125;         .hideA &#123;            background: #f3f3f3;        &#125;         .clear &#123;            clear: both;            height: 0;            overflow: hidden;        &#125;    &lt;&#x2F;style&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        (function ($) &#123;            $.widget(&quot;custom.combobox&quot;, &#123;                _create: function () &#123;                    this.wrapper &#x3D; $(&quot;&lt;span&gt;&quot;)                      .addClass(&quot;custom-combobox&quot;)                      .insertAfter(this.element);                     this.element.hide();                    this._createAutocomplete();                    this._createShowAllButton();                &#125;,                 _createAutocomplete: function () &#123;                    var selected &#x3D; this.element.children(&quot;:selected&quot;),                      value &#x3D; selected.val() ? selected.text() : &quot;&quot;;                     this.input &#x3D; $(&quot;&lt;input&gt;&quot;)                      .appendTo(this.wrapper)                      .val(value)                      .attr(&quot;id&quot;, &quot;btnShowPro&quot;)                      .addClass(&quot;custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left&quot;)                        .addClass(&quot; validate[required,maxSize[200]]&quot;)                      .autocomplete(&#123;                          delay: 0,                          minLength: 0,                          source: $.proxy(this, &quot;_source&quot;)                      &#125;)                      .tooltip(&#123;                          tooltipClass: &quot;ui-state-highlight&quot;                      &#125;);                     this._on(this.input, &#123;                        autocompleteselect: function (event, ui) &#123;                            ui.item.option.selected &#x3D; true;                            this._trigger(&quot;select&quot;, event, &#123;                                item: ui.item.option                            &#125;);                        &#125;,                         autocompletechange: &quot;_removeIfInvalid&quot;                    &#125;);                &#125;,                 _createShowAllButton: function () &#123;                    var input &#x3D; this.input,                      wasOpen &#x3D; false;                     $(&quot;&lt;a&gt;&quot;)                      .attr(&quot;tabIndex&quot;, -1)                      &#x2F;&#x2F;.attr(&quot;title&quot;, &quot;aShow&quot;)                      .attr(&quot;id&quot;, &quot;aShow&quot;)                      &#x2F;&#x2F;.tooltip()                      .appendTo(this.wrapper)                      .button(&#123;                          &#x2F;&#x2F;icons: &#123;                          &#x2F;&#x2F;    primary: &quot;ui-icon-triangle-1-s&quot;                          &#x2F;&#x2F;&#125;,                          text: false                      &#125;)                      .removeClass(&quot;ui-corner-all&quot;)                      .addClass(&quot;custom-combobox-toggle ui-corner-right&quot;)                      .mousedown(function () &#123;                          wasOpen &#x3D; input.autocomplete(&quot;widget&quot;).is(&quot;:visible&quot;);                      &#125;)                      .click(function () &#123;                          input.focus();                           &#x2F;&#x2F; 如果已经可见则关闭                          if (wasOpen) &#123;                              return;                          &#125;                           &#x2F;&#x2F; 传递空字符串作为搜索的值，显示所有的结果                          input.autocomplete(&quot;search&quot;, &quot;&quot;);                      &#125;);                &#125;,                 _source: function (request, response) &#123;                    var matcher &#x3D; new RegExp($.ui.autocomplete.escapeRegex(request.term), &quot;i&quot;);                    response(this.element.children(&quot;option&quot;).map(function () &#123;                        var text &#x3D; $(this).text();                        if (this.value &amp;&amp; (!request.term || matcher.test(text)))                            return &#123;                                label: text,                                value: text,                                option: this                            &#125;;                    &#125;));                &#125;,                  _removeIfInvalid: function (event, ui) &#123;                     &#x2F;&#x2F; 选择一项，不执行其他动作                    if (ui.item) &#123;                        return;                    &#125;                     &#x2F;&#x2F; 搜索一个匹配（不区分大小写）                    var value &#x3D; this.input.val(),                      valueLowerCase &#x3D; value.toLowerCase(),                      valid &#x3D; false;                    this.element.children(&quot;option&quot;).each(function () &#123;                        if ($(this).text().toLowerCase() &#x3D;&#x3D;&#x3D; valueLowerCase) &#123;                            this.selected &#x3D; valid &#x3D; true;                            return false;                        &#125;                    &#125;);                     &#x2F;&#x2F; 找到一个匹配，不执行其他动作                    if (valid) &#123;                        return;                    &#125;                     &#x2F;&#x2F; 移除无效的值                    &#x2F;&#x2F;this.input                    &#x2F;&#x2F;  .val(&quot;&quot;)                    &#x2F;&#x2F;  .attr(&quot;title&quot;, value + &quot; didn&#39;t match any item&quot;)                    &#x2F;&#x2F;  .tooltip(&quot;open&quot;);                    this.element.val(&quot;&quot;);                    this._delay(function () &#123;                        this.input.tooltip(&quot;close&quot;).attr(&quot;title&quot;, &quot;&quot;);                    &#125;, 2500);                    &#x2F;&#x2F;this.input.data(&quot;ui-autocomplete&quot;).term &#x3D; &quot;&quot;;                &#125;,                 _destroy: function () &#123;                    this.wrapper.remove();                    this.element.show();                &#125;            &#125;);        &#125;)(jQuery);         $(function () &#123;            $(&quot;#&lt;%&#x3D;ddlName.ClientID%&gt;&quot;).combobox();            $(&quot;#toggle&quot;).click(function () &#123;                $(&quot;#&lt;%&#x3D;ddlName.ClientID%&gt;&quot;).toggle();            &#125;);        &#125;);    &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form id&#x3D;&quot;form1&quot; runat&#x3D;&quot;server&quot;&gt;        &lt;div&gt;            &lt;ul class&#x3D;&quot;appcusser&quot;&gt;                &lt;li&gt;                    &lt;span&gt;&lt;asp:TextBox ID&#x3D;&quot;txtID&quot; runat&#x3D;&quot;server&quot; Width&#x3D;&quot;80&quot;&gt;&lt;&#x2F;asp:TextBox&gt;&lt;&#x2F;span&gt;                    &lt;label&gt;&lt;asp:DropDownList ID&#x3D;&quot;ddlName&quot; runat&#x3D;&quot;server&quot; CssClass&#x3D;&quot;app_txt2 fl&quot;&gt;&lt;&#x2F;asp:DropDownList&gt;&lt;&#x2F;label&gt;                    &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;                &lt;&#x2F;li&gt;                &lt;li&gt;                    &lt;asp:Button ID&#x3D;&quot;btnSeach&quot; Text&#x3D;&quot;查询&quot; runat&#x3D;&quot;server&quot; &#x2F;&gt;                &lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.UI;using System.Web.UI.WebControls; namespace School.Web.TestDemo&#123;    public partial class InputComBox : System.Web.UI.Page    &#123;        protected void Page_Load(object sender, EventArgs e)        &#123;            string tID &#x3D; txtID.Text.Trim();            &#x2F;&#x2F;if (!IsPostBack)            &#x2F;&#x2F;&#123;                if (string.IsNullOrEmpty(tID))                &#123;                    BindDrop();                    ddlName.Items.Insert(0, new ListItem(&quot; &quot;, &quot;&quot;));                &#125;                else                &#123;                    BindDrop();                    int id &#x3D; 0;                    int.TryParse(tID, out id);                    Bind(id);                &#125;            &#x2F;&#x2F;&#125;        &#125;         public void Bind(int id)        &#123;            Student student &#x3D; InitData().SingleOrDefault(s &#x3D;&gt; s.ID &#x3D;&#x3D; id);            if (student !&#x3D; null)            &#123;                if (ddlName.Items.Contains(new ListItem(student.userName))) &#x2F;&#x2F;判断ddlName下拉列表中是否存在该值，存在则赋值，不存在则插入ddlName下拉列表中                &#123;                    ddlName.SelectedValue &#x3D; student.userName;                &#125;                else                &#123;                    ddlName.Items.Insert(0, new ListItem(txtID.Text.Trim()));                &#125;            &#125;            else            &#123;                ddlName.Items.Insert(0, new ListItem(txtID.Text.Trim()));            &#125;        &#125;         public void BindDrop()        &#123;            ddlName.DataSource &#x3D; InitData();            ddlName.DataTextField &#x3D; &quot;userName&quot;; &#x2F;&#x2F;ddlName中DataTextField和DataValueField设置为同一个值，在查询是否存在该值是才可以；或者new ListItem(&quot;text&quot;, &quot;value&quot;)设置text、value值不一样            ddlName.DataValueField &#x3D; &quot;userName&quot;;            ddlName.DataBind();        &#125;          public List&lt;Student&gt; InitData()        &#123;            List&lt;Student&gt; listStudent &#x3D; new List&lt;Student&gt;();            for (int i &#x3D; 1; i &lt; 11; i++)            &#123;                Student student &#x3D; new Student();                 student.ID &#x3D; i;                student.userName &#x3D; &quot;学生&quot; + i;                student.passWord &#x3D; &quot;123456&quot;;                student.Age &#x3D; i + 20;                student.Address &#x3D; &quot;北京市顺义区天竺镇&quot; + i + &quot;区&quot;;                listStudent.Add(student);            &#125;            return listStudent;        &#125;    &#125;      public class Student    &#123;        public int ID &#123; get; set; &#125;        public string userName &#123; get; set; &#125;         public string passWord &#123; get; set; &#125;         public int Age &#123; get; set; &#125;         public string Address &#123; get; set; &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery 用法总结</title>
      <link href="/js/jquery-yong-fa-zong-jie/"/>
      <url>/js/jquery-yong-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<ol><li>用Jquery给框架内的父页面传值</li></ol><p> parent.$(“#middle”).contents().find(“#hidChecker”).val(“test的大幅度发”);   middle frame框架的id   hidChecker 控件的id</p><ol start="2"><li>Jquery中attr和prop的区别</li></ol><p>对于html中元素自带的属性（如：id、name等）用prop</p><p>对于html中元素没有自己自定义的属性用attr</p><ol start="3"><li>Jquery获取table中td的值</li></ol><p>$(“#t1 tr”).eq(1).find(“td”).eq(2).html().trim() t1是table的id</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nvelocity中格式化金钱和日期</title>
      <link href="/c-winform/nvelocity-zhong-ge-shi-hua-jin-qian-he-ri-qi/"/>
      <url>/c-winform/nvelocity-zhong-ge-shi-hua-jin-qian-he-ri-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;格式化金钱(  9,999.00)function formatCurrency(num) &#123;    num &#x3D; num.toString().replace(&#x2F;\$|\,&#x2F;g, &#39;&#39;);    if (isNaN(num))        num &#x3D; &quot;0&quot;;    sign &#x3D; (num &#x3D;&#x3D; (num &#x3D; Math.abs(num)));    num &#x3D; Math.floor(num * 100 + 0.50000000001);    cents &#x3D; num % 100;    num &#x3D; Math.floor(num &#x2F; 100).toString();    if (cents &lt; 10)        cents &#x3D; &quot;0&quot; + cents;    for (var i &#x3D; 0; i &lt; Math.floor((num.length - (1 + i)) &#x2F; 3) ; i++)        num &#x3D; num.substring(0, num.length - (4 * i + 3)) + &#39;,&#39; +        num.substring(num.length - (4 * i + 3));    return (((sign) ? &#39;&#39; : &#39;-&#39;) + num + &#39;.&#39; + cents);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在html页面里面格式化金额</p><p>例如在span标签里</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;span&gt; &lt;script&gt;var money &#x3D;formatCurrency(999999.0); document.write(money)&lt;&#x2F;script&gt; &lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出内容 999,999.00</p><p>格式化日期</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;格式化日期 fmt是格式化格式Date.prototype.pattern &#x3D; function (fmt) &#123;    var o &#x3D; &#123;        &quot;M+&quot;: this.getMonth() + 1, &#x2F;&#x2F;月份                 &quot;d+&quot;: this.getDate(), &#x2F;&#x2F;日                 &quot;h+&quot;: this.getHours() % 12 &#x3D;&#x3D; 0 ? 12 : this.getHours() % 12, &#x2F;&#x2F;小时                 &quot;H+&quot;: this.getHours(), &#x2F;&#x2F;小时                 &quot;m+&quot;: this.getMinutes(), &#x2F;&#x2F;分                 &quot;s+&quot;: this.getSeconds(), &#x2F;&#x2F;秒                 &quot;q+&quot;: Math.floor((this.getMonth() + 3) &#x2F; 3), &#x2F;&#x2F;季度                 &quot;S&quot;: this.getMilliseconds() &#x2F;&#x2F;毫秒             &#125;;    var week &#x3D; &#123;        &quot;0&quot;: &quot;&#x2F;u65e5&quot;,        &quot;1&quot;: &quot;&#x2F;u4e00&quot;,        &quot;2&quot;: &quot;&#x2F;u4e8c&quot;,        &quot;3&quot;: &quot;&#x2F;u4e09&quot;,        &quot;4&quot;: &quot;&#x2F;u56db&quot;,        &quot;5&quot;: &quot;&#x2F;u4e94&quot;,        &quot;6&quot;: &quot;&#x2F;u516d&quot;    &#125;;    if (&#x2F;(y+)&#x2F;.test(fmt)) &#123;        fmt &#x3D; fmt.replace(RegExp.$1, (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));    &#125;    if (&#x2F;(E+)&#x2F;.test(fmt)) &#123;        fmt &#x3D; fmt.replace(RegExp.$1, ((RegExp.$1.length &gt; 1) ? (RegExp.$1.length &gt; 2 ? &quot;&#x2F;u661f&#x2F;u671f&quot; : &quot;&#x2F;u5468&quot;) : &quot;&quot;) + week[this.getDay() + &quot;&quot;]);    &#125;    for (var k in o) &#123;        if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) &#123;            fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length &#x3D;&#x3D; 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));        &#125;    &#125;    return fmt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;span&gt;&lt;script&gt;var date &#x3D; new Date(Date.parse(&#39;$opr.OrderList.ol_OrderTime&#39;.replace(&#x2F;-&#x2F;g, &quot;&#x2F;&quot;))); document.write(date.pattern(&quot;yyyy年MM月dd日&quot;));&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式化日期</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 对Date的扩展，将 Date 转化为指定格式的String&#x2F;&#x2F; 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， &#x2F;&#x2F; 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) &#x2F;&#x2F; 例子： &#x2F;&#x2F; (new Date()).Format(&quot;yyyy-MM-dd hh:mm:ss.S&quot;) &#x3D;&#x3D;&gt; 2006-07-02 08:09:04.423 &#x2F;&#x2F; (new Date()).Format(&quot;yyyy-M-d h:m:s.S&quot;)      &#x3D;&#x3D;&gt; 2006-7-2 8:9:4.18 Date.prototype.Format &#x3D; function (fmt) &#123; &#x2F;&#x2F;author: meizz     var o &#x3D; &#123;        &quot;M+&quot;: this.getMonth() + 1, &#x2F;&#x2F;月份         &quot;d+&quot;: this.getDate(), &#x2F;&#x2F;日         &quot;h+&quot;: this.getHours(), &#x2F;&#x2F;小时         &quot;m+&quot;: this.getMinutes(), &#x2F;&#x2F;分         &quot;s+&quot;: this.getSeconds(), &#x2F;&#x2F;秒         &quot;q+&quot;: Math.floor((this.getMonth() + 3) &#x2F; 3), &#x2F;&#x2F;季度         &quot;S&quot;: this.getMilliseconds() &#x2F;&#x2F;毫秒     &#125;;    if (&#x2F;(y+)&#x2F;.test(fmt)) fmt &#x3D; fmt.replace(RegExp.$1, (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));    for (var k in o)    if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length &#x3D;&#x3D; 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));    return fmt;&#125;调用： var time1 &#x3D; new Date().Format(&quot;yyyy-MM-dd&quot;);var time2 &#x3D; new Date().Format(&quot;yyyy-MM-dd HH:mm:ss&quot;);&lt;script language&#x3D;&quot;javascript&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt; &lt;!-- &#x2F;** * 对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)    可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) * eg: * (new    Date()).pattern(&quot;yyyy-MM-dd hh:mm:ss.S&quot;)&#x3D;&#x3D;&gt; 2006-07-02 08:09:04.423       * (new Date()).pattern(&quot;yyyy-MM-dd E HH:mm:ss&quot;) &#x3D;&#x3D;&gt; 2009-03-10 二 20:09:04       * (new Date()).pattern(&quot;yyyy-MM-dd EE hh:mm:ss&quot;) &#x3D;&#x3D;&gt; 2009-03-10 周二 08:09:04       * (new Date()).pattern(&quot;yyyy-MM-dd EEE hh:mm:ss&quot;) &#x3D;&#x3D;&gt; 2009-03-10 星期二 08:09:04       * (new Date()).pattern(&quot;yyyy-M-d h:m:s.S&quot;) &#x3D;&#x3D;&gt; 2006-7-2 8:9:4.18       *&#x2F;        Date.prototype.pattern&#x3D;function(fmt) &#123;             var o &#x3D; &#123;             &quot;M+&quot; : this.getMonth()+1, &#x2F;&#x2F;月份             &quot;d+&quot; : this.getDate(), &#x2F;&#x2F;日             &quot;h+&quot; : this.getHours()%12 &#x3D;&#x3D; 0 ? 12 : this.getHours()%12, &#x2F;&#x2F;小时             &quot;H+&quot; : this.getHours(), &#x2F;&#x2F;小时             &quot;m+&quot; : this.getMinutes(), &#x2F;&#x2F;分             &quot;s+&quot; : this.getSeconds(), &#x2F;&#x2F;秒             &quot;q+&quot; : Math.floor((this.getMonth()+3)&#x2F;3), &#x2F;&#x2F;季度             &quot;S&quot; : this.getMilliseconds() &#x2F;&#x2F;毫秒             &#125;;             var week &#x3D; &#123;             &quot;0&quot; : &quot;&#x2F;u65e5&quot;,             &quot;1&quot; : &quot;&#x2F;u4e00&quot;,             &quot;2&quot; : &quot;&#x2F;u4e8c&quot;,             &quot;3&quot; : &quot;&#x2F;u4e09&quot;,             &quot;4&quot; : &quot;&#x2F;u56db&quot;,             &quot;5&quot; : &quot;&#x2F;u4e94&quot;,             &quot;6&quot; : &quot;&#x2F;u516d&quot;            &#125;;             if(&#x2F;(y+)&#x2F;.test(fmt))&#123;                 fmt&#x3D;fmt.replace(RegExp.$1, (this.getFullYear()+&quot;&quot;).substr(4 - RegExp.$1.length));             &#125;             if(&#x2F;(E+)&#x2F;.test(fmt))&#123;                 fmt&#x3D;fmt.replace(RegExp.$1, ((RegExp.$1.length&gt;1) ? (RegExp.$1.length&gt;2 ? &quot;&#x2F;u661f&#x2F;u671f&quot; : &quot;&#x2F;u5468&quot;) : &quot;&quot;)+week[this.getDay()+&quot;&quot;]);             &#125;             for(var k in o)&#123;                 if(new RegExp(&quot;(&quot;+ k +&quot;)&quot;).test(fmt))&#123;                     fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length&#x3D;&#x3D;1) ? (o[k]) : ((&quot;00&quot;+ o[k]).substr((&quot;&quot;+ o[k]).length)));                 &#125;             &#125;             return fmt;         &#125;            var date &#x3D; new Date();      window.alert(date.pattern(&quot;yyyy-MM-dd hh:mm:ss&quot;));&#x2F;&#x2F; --&gt;&lt;&#x2F;script&gt;Date.prototype.format &#x3D; function (mask) &#123;     var d &#x3D; this;    var zeroize &#x3D; function (value, length) &#123;            if (!length) length &#x3D; 2;            value &#x3D; String(value);            for (var i &#x3D; 0, zeros &#x3D; &#39;&#39;; i &lt; (length - value.length); i++) &#123;                zeros +&#x3D; &#39;0&#39;;            &#125;            return zeros + value;        &#125;;    return mask.replace(&#x2F;&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|&#x2F;b ( ? : d &#123;        1, 4    &#125; | m &#123;        1, 4    &#125; | yy( ? : yy) ? | ([hHMstT]) &#x2F; 1 ? | [lLZ]) &#x2F; b &#x2F; g, function ($0) &#123;        switch ($0) &#123;        case &#39;d&#39;:            return d.getDate();        case &#39;dd&#39;:            return zeroize(d.getDate());        case &#39;ddd&#39;:            return [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thr&#39;, &#39;Fri&#39;, &#39;Sat&#39;][d.getDay()];        case &#39;dddd&#39;:            return [&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;][d.getDay()];        case &#39;M&#39;:            return d.getMonth() + 1;        case &#39;MM&#39;:            return zeroize(d.getMonth() + 1);        case &#39;MMM&#39;:            return [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;][d.getMonth()];        case &#39;MMMM&#39;:            return [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;, &#39;April&#39;, &#39;May&#39;, &#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;, &#39;October&#39;, &#39;November&#39;, &#39;December&#39;][d.getMonth()];        case &#39;yy&#39;:            return String(d.getFullYear()).substr(2);        case &#39;yyyy&#39;:            return d.getFullYear();        case &#39;h&#39;:            return d.getHours() % 12 || 12;        case &#39;hh&#39;:            return zeroize(d.getHours() % 12 || 12);        case &#39;H&#39;:            return d.getHours();        case &#39;HH&#39;:            return zeroize(d.getHours());        case &#39;m&#39;:            return d.getMinutes();        case &#39;mm&#39;:            return zeroize(d.getMinutes());        case &#39;s&#39;:            return d.getSeconds();        case &#39;ss&#39;:            return zeroize(d.getSeconds());        case &#39;l&#39;:            return zeroize(d.getMilliseconds(), 3);        case &#39;L&#39;:            var m &#x3D; d.getMilliseconds();            if (m &gt; 99) m &#x3D; Math.round(m &#x2F; 10);            return zeroize(m);        case &#39;tt&#39;:            return d.getHours() &lt; 12 ? &#39;am&#39; : &#39;pm&#39;;        case &#39;TT&#39;:            return d.getHours() &lt; 12 ? &#39;AM&#39; : &#39;PM&#39;;        case &#39;Z&#39;:            return d.toUTCString().match(&#x2F;[A-Z]+$&#x2F;);            &#x2F;&#x2F; Return quoted strings with the surrounding quotes removed              default:            return $0.substr(1, $0.length - 2);        &#125;    &#125;);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式化日期参考 <a href="http://www.cnblogs.com/zhangpengshou/archive/2012/07/19/2599053.html">http://www.cnblogs.com/zhangpengshou/archive/2012/07/19/2599053.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 环境下安装MongoDB</title>
      <link href="/mongodb/windows-huan-jing-xia-an-zhuang-mongodb/"/>
      <url>/mongodb/windows-huan-jing-xia-an-zhuang-mongodb/</url>
      
        <content type="html"><![CDATA[<p>mongoDB下载地址 <a href="https://www.mongodb.org/">https://www.mongodb.org/</a></p><p>在mongoDB官网下载windows版本的mongoDB后解压出来（本文以解压到D盘为例）</p><p>在解压出来的MongoDB文件夹下创建data文件夹，然后在data文件夹下创建log和db两个文件夹</p><p>在log文件夹下创建一个空的mongodb.log文件</p><p><img src="/images/2015110315271501.png" alt="2015110315271501.png"><br>然后在mongodb文件夹下创建mongo.config文件</p><p>在mongo.config文件中加入下面两行内容</p><p>dbpath&#x3D;D:\mongodb\data\db                    mongodb数据文件夹<br>logpath&#x3D;D:\mongodb\data\log\mongodb.log     mongodb的日志记录文件</p><p>然后将mongodb加入window服务中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off  @echo ---------------------welcome to use mongod auto run tools--------------  @echo. <span class="token operator">&amp;</span> pause  @echo ---------------------正在关闭冗余进程，骚等----------------------------   taskkill /im mongod.exe /f   @echo --------------------冗余进程执行完毕，服务器正在启动，骚等-------------start D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>mongod.exe <span class="token parameter variable">--install</span> <span class="token parameter variable">--logpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>data<span class="token punctuation">\</span>log<span class="token punctuation">\</span>mongodb.log <span class="token parameter variable">--dbpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>data<span class="token punctuation">\</span>db@echo ---------------------按任意键启动服务-------------@echo. <span class="token operator">&amp;</span> pause@echo ---------------------正在启动服务，骚等----------------------------net start <span class="token string">"MongoDB"</span>@echo. <span class="token operator">&amp;</span> pause <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的内容复制出来保存到一个bat文件中，然后运行该bat文件就可以将mongodb服务加入windows中</p><p>然后在服务中启动MongoDB服务，安装成功后输入<a href="http://localhost:27017/">http://localhost:27017/</a>  如下图表示安装成功。<br><img src="/images/2015110315271502.png" alt="2015110315271502.png"></p><p>设置服务名称将上面标红的修改成如下代码即可</p><p>start D:\mongodb\bin\mongod.exe –install –logpath&#x3D;D:\mongodb\data\log\mongodb.log –dbpath&#x3D;D:\mongodb\data\db –serviceName “MongoDB” –serviceDisplayName “MongoDB”</p><p>卸载MongoDB服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off  @echo ---------------------welcome to use mongod Remove tools--------------  @echo. <span class="token operator">&amp;</span> pause@echo ---------------------正在关闭冗余进程，骚等----------------------------   taskkill /im mongod.exe /f  @echo --------------------冗余进程执行完毕，服务器正在启动，骚等-------------  start D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>mongod.exe <span class="token parameter variable">--remove</span>  <span class="token parameter variable">--serviceName</span> <span class="token string">"MongoDB"</span> <span class="token parameter variable">--logpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>data<span class="token punctuation">\</span>log<span class="token punctuation">\</span>mongodb.log <span class="token parameter variable">--dbpath</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>mongodb<span class="token punctuation">\</span>data<span class="token punctuation">\</span>db@echo. <span class="token operator">&amp;</span> pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的内容复制出来保存到一个bat文件中运行文件就可以卸载MongoDB服务</p><p>net start “MongoDB” 启动mongodb服务</p><p>net stop “MongoDB” 停止mongodb服务</p><p>有关于安装参数的说明：</p><p>–dbpath 是数据文件所在目录</p><p>–logpath 是日志文件所在文件路径，此参数必须为文件，不能为文件目录，否则会导致安装失败</p><p>以上两个参数必须设置</p><p>–logappend 日志以追加的方式写入</p><p>–directoryperdb 为每个数据库建立单独的目录</p><p>–bind_ip 绑定服务器IP，此参数为安全起见建议使用127.0.0.1，因为如果不设置的话，远程是可以连接的</p><p>–port  端口号</p><p>–install 以服务形式安装</p><p>如果需要删除 MongoDB 服务请使用 mongod –remove</p><p> –mongo ip:port&#x2F;dbname 连接到远程服务器的mongodb，如果不加后面的参数，则默认连接到本地的test库 </p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 发送邮件</title>
      <link href="/c-winform/csharp-fa-song-you-jian/"/>
      <url>/c-winform/csharp-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 邮件群发&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strMyEmail&quot;&gt;发送人邮件名&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strMyPass&quot;&gt;发送人密码&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strMySmtp&quot;&gt;发送人邮箱Smtp地址&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strToEmail&quot;&gt;接收人邮件名&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strSubject&quot;&gt;发送主题&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strContent&quot;&gt;发送内容&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strIsHTML&quot;&gt;是否为html&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;strFileArray&quot;&gt;发送上传的路径&lt;&#x2F;param&gt;public static bool SendEmails(string strMyEmail, string trMyPass, string strMySmtp, List&lt;string&gt; strToEmail, string trSubject, string strContent, bool strIsHTML, string[] trFileArray)&#123;    try    &#123;        MailMessage message &#x3D; new MailMessage();        message.From &#x3D; new MailAddress(strMyEmail);        foreach (string item in strToEmail)        &#123;            message.To.Add(new MailAddress(item));&#x2F;&#x2F;接收人邮箱        &#125;        &#x2F;&#x2F;message.To.Add(new MailAddress(strMyEmail));        message.Subject &#x3D; strSubject;&#x2F;&#x2F;主题        message.Body &#x3D; strContent;&#x2F;&#x2F;发送内容         message.IsBodyHtml &#x3D; strIsHTML;        if (strFileArray !&#x3D; null)        &#123;            for (int i &#x3D; 0; i &lt; strFileArray.Length; i++)            &#123;                                 Attachment data &#x3D; new Attachment(strFileArray[i], MediaTypeNames.Application.Octet);                ContentDisposition disposition &#x3D; data.ContentDisposition;                disposition.CreationDate &#x3D; System.IO.File.GetCreationTime(strFileArray[i]);                disposition.ModificationDate &#x3D; System.IO.File.GetLastWriteTime(strFileArray[i]);                disposition.ReadDate &#x3D; System.IO.File.GetLastAccessTime(strFileArray[i]);                               message.Attachments.Add(data);            &#125;        &#125;        SmtpClient client &#x3D; new SmtpClient(strMySmtp, 25);        client.Credentials &#x3D; new System.Net.NetworkCredential(strMyEmail, strMyPass);        client.Send(message);        return true;    &#125;    catch (Exception)    &#123;        return false;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 连接 Exchange 发送邮件</title>
      <link href="/c-winform/csharp-lian-jie-exchange-fa-song-you-jian/"/>
      <url>/c-winform/csharp-lian-jie-exchange-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<p>C#连接Exchange 发送邮件代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; exchange群发邮件&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;credentialUserName&quot;&gt;exchange用户名 [example: est]&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;credentialUserPwd&quot;&gt;exchange用户密码&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;fromEmail&quot;&gt;发送人地址 [example: est@allbring.com]&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;recipientEmail&quot;&gt;收件人地址&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;domainName&quot;&gt;邮件域名 [example: mail.allbring.om]&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;subjectName&quot;&gt;邮件主题&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;bodyVal&quot;&gt;邮件内容&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;isHtml&quot;&gt;是否为html&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;fileArray&quot;&gt;发送上传的路径&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;&#x2F;&#x2F;&#x2F; 开发人员：ZJpublic static bool SendExchangeEmails(string redentialUserName, string credentialUserPwd, string romEmail, List&lt;string&gt; recipientEmail, string domainName, tring subjectName, string bodyVal, bool isHtml, string[] ileArray)&#123;    try    &#123;        MailMessage message &#x3D; new MailMessage();        MailAddress fromAddress &#x3D; new MailAddress(fromEmail);        foreach (string item in recipientEmail)        &#123;            message.To.Add(item);        &#125;        message.From &#x3D; fromAddress;        message.Subject &#x3D; subjectName;        message.Body &#x3D; bodyVal;        message.IsBodyHtml &#x3D; isHtml;        if (fileArray !&#x3D; null)        &#123;            for (int i &#x3D; 0; i &lt; fileArray.Length; i++)            &#123;                &#x2F;&#x2F;为邮件创建文件附件                Attachment attr &#x3D; new Attachment(fileArray[i], MediaTypeNames.Application.Octet);                &#x2F;&#x2F;添加邮件时间戳信息                ContentDisposition conDispositon &#x3D; attr.ContentDisposition;                conDispositon.CreationDate &#x3D; System.IO.File.GetCreationTime(fileArray[i]);&#x2F;&#x2F;文件的创建日期                conDispositon.ModificationDate &#x3D; System.IO.File.GetLastWriteTime(fileArray[i]);&#x2F;&#x2F;文件的修改日期                conDispositon.ReadDate &#x3D; System.IO.File.GetLastAccessTime(fileArray[i]);&#x2F;&#x2F;文件的读取日期                &#x2F;&#x2F;给邮件添加附件                message.Attachments.Add(attr);            &#125;        &#125;        SmtpClient smtpClient &#x3D; new SmtpClient();        smtpClient.Timeout &#x3D; 50000;        smtpClient.Host &#x3D; domainName;        smtpClient.Port &#x3D; 25;        smtpClient.UseDefaultCredentials &#x3D; false;        smtpClient.Credentials &#x3D; new System.Net.NetworkCredential(credentialUserName, credentialUserPwd);        smtpClient.EnableSsl &#x3D; true;        smtpClient.DeliveryMethod &#x3D; SmtpDeliveryMethod.Network;        smtpClient.Send(message);        smtpClient.Dispose();        return true;    &#125;    catch (Exception)    &#123;        return false;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果exchange服务器只做了证书，在发送邮件的机器上也要安装证书邮件才能发送出去。</strong></p><p>参考地址：<a href="https://social.technet.microsoft.com/Forums/en-US/d37c7e8a-6d42-498a-bad4-5eb0ab7e9d40/connecting-to-exchange-server-using-c-to-send-an-email?forum=exchangesvrdevelopment">https://social.technet.microsoft.com/Forums/en-US/d37c7e8a-6d42-498a-bad4-5eb0ab7e9d40/connecting-to-exchange-server-using-c-to-send-an-email?forum=exchangesvrdevelopment</a></p><p><a href="http://www.systemnetmail.com/faq/2.4.aspx">http://www.systemnetmail.com/faq/2.4.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ztree 默认展开二级菜单</title>
      <link href="/js/ztree-mo-ren-zhan-kai-er-ji-cai-dan/"/>
      <url>/js/ztree-mo-ren-zhan-kai-er-ji-cai-dan/</url>
      
        <content type="html"><![CDATA[<p>在初始加载树形控件的时候调用zTree的expandNode (node, expandFlag, sonSign, focus, callbackFlag)方法</p><p><strong>node</strong>：树形节点<br><strong>expandFlag</strong>:是否展开节点<br><strong>sonSign</strong>：是否展开其子孙节点<br><strong>focus</strong>：展开或折叠节点后是否设置焦点<br><strong>callbackFlag</strong>：这行该方法是否触发回调函数</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var zNodes &#x3D; &quot;&quot;; var setting &#x3D; &#123;    check: &#123;        enable: true    &#125;,    data: &#123;&#x2F;&#x2F;数据加载        keep: &#123;            parent: true,            leaf: true        &#125;,        simpleData: &#123;            enable: true,            idKey: &quot;Id&quot;,            pIdKey: &quot;Pid&quot;,        &#125;,        key: &#123;            name: &quot;Name&quot;        &#125;    &#125;&#125;; function Inint() &#123;&#x2F;&#x2F;初始化加载节点    $.ajax(&#123;        global: true,        async: false,        cache: false,        dataType: &quot;json&quot;,        url: &#39;..&#x2F;Ajax&#x2F;test.ashx&#39;,        type: &quot;post&quot;,        &#x2F;&#x2F;data: &#123; &quot;roleId&quot;: GetQueryString(&quot;roleId&quot;) &#125;,        success: function (data) &#123;            zNodes &#x3D; data;        &#125;    &#125;);&#125;; $(function () &#123;    Inint(); &#x2F;&#x2F;加载数据    $.fn.zTree.init($(&quot;#zTree&quot;), setting, zNodes);    var treeObj &#x3D; $.fn.zTree.getZTreeObj(&quot;zTree&quot;);    var nodes &#x3D; treeObj.getNodes();    for (var i &#x3D; 0; i &lt; nodes.length; i++) &#123; &#x2F;&#x2F;设置节点展开        treeObj.expandNode(nodes[i], true, false, true);    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;control&quot; style&#x3D;&quot;overflow: auto; height:270px;&quot;&gt;            &lt;ul id&#x3D;&quot;zTree&quot;&gt;            &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JqGrid查询数据为空时给表格添加提示信息</title>
      <link href="/js/jqgrid-cha-xun-shu-ju-wei-kong-shi-gei-biao-ge-tian-jia-ti-shi-xin-xi/"/>
      <url>/js/jqgrid-cha-xun-shu-ju-wei-kong-shi-gei-biao-ge-tian-jia-ti-shi-xin-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2015102214551501.png" alt="2015102214551501.png"><br>在JqGrid的loadComplete事件中添加下面的代码就可以实现上图的效果</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">loadComplete: function () &#123;    var rowNum &#x3D; $(&quot;#purchaserPersonManage&quot;).jqGrid(&#39;getGridParam&#39;, &#39;records&#39;); &#x2F;&#x2F;获取数据总条数    if (rowNum &#x3D;&#x3D; 0)&#x2F;&#x2F;没有数据则添加提示    &#123;        if ($(&quot;#norecords&quot;).html() &#x3D;&#x3D; null) &#123;            $(&quot;#purchaserPersonManage&quot;).parent().append(&quot;&lt;pre&gt;&lt;div id&#x3D;&#39;norecords&#39; style&#x3D;&#39;margin:10px;color:red;font-size:16px;&#39;&gt;未找到此产品！&lt;&#x2F;div&gt;&lt;&#x2F;pre&gt;&quot;);        &#125;        $(&quot;#norecords&quot;).show();&#x2F;&#x2F;显示提示信息    &#125;    else &#123;        $(&quot;#norecords&quot;).hide();&#x2F;&#x2F;隐藏提示信息    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery 获取table中的td元素的值</title>
      <link href="/js/jquery-huo-qu-table-zhong-de-td-yuan-su-de-zhi/"/>
      <url>/js/jquery-huo-qu-table-zhong-de-td-yuan-su-de-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;table id&#x3D;&quot;t1&quot;&gt;&lt;tr&gt;&lt;td&gt;1-1&lt;&#x2F;td&gt;&lt;td&gt;1-2&lt;&#x2F;td&gt;&lt;td&gt;1-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2-1&lt;&#x2F;td&gt;&lt;td&gt;2-2&lt;&#x2F;td&gt;&lt;td&gt;2-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;table id&#x3D;&quot;t2&quot;&gt;&lt;tr&gt;&lt;td&gt;1-1&lt;&#x2F;td&gt;&lt;td&gt;1-2&lt;&#x2F;td&gt;&lt;td&gt;1-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2-1&lt;&#x2F;td&gt;&lt;td&gt;2-2&lt;&#x2F;td&gt;&lt;td&gt;2-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">$(&quot;#t1 tr&quot;).eq(1).find(&quot;td&quot;).eq(2).html().trim()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断上传文件是否是图片文件</title>
      <link href="/c-winform/pan-duan-shang-chuan-wen-jian-shi-fou-shi-tu-pian-wen-jian/"/>
      <url>/c-winform/pan-duan-shang-chuan-wen-jian-shi-fou-shi-tu-pian-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>方法一：用image对象判断是否为图片</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 判断文件是否为图片&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;path&quot;&gt;文件的完整路径&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;返回结果&lt;&#x2F;returns&gt;public Boolean IsImage(string path)&#123;try&#123; System.Drawing.Image img &#x3D; System.Drawing.Image.FromFile(path); return true;&#125;catch (Exception e)&#123; return false;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二，判断文件头</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 根据文件头判断上传的文件类型&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filePath&quot;&gt;filePath是文件的完整路径 &lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;返回true或false&lt;&#x2F;returns&gt;private bool IsPicture(string filePath)&#123;try&#123; FileStream fs &#x3D; new FileStream(filePath, FileMode.Open, FileAccess.Read); BinaryReader reader &#x3D; new BinaryReader(fs); string fileClass; byte buffer; buffer &#x3D; reader.ReadByte(); fileClass &#x3D; buffer.ToString(); buffer &#x3D; reader.ReadByte(); fileClass +&#x3D; buffer.ToString(); reader.Close(); fs.Close(); if (fileClass &#x3D;&#x3D; &quot;255216&quot; || fileClass &#x3D;&#x3D; &quot;7173&quot; || fileClass &#x3D;&#x3D; &quot;13780&quot; || fileClass &#x3D;&#x3D; &quot;6677&quot;) &#x2F;&#x2F;255216是jpg;7173是gif;6677是BMP,13780是PNG;7790是exe,8297是rar  &#123; return true; &#125; else &#123; return false; &#125;&#125;catch&#123; return false;&#125;&#125;public enum FileExtension&#123;    JPG &#x3D; 255216,    GIF &#x3D; 7173,    BMP &#x3D; 6677,    PNG &#x3D; 13780,    COM &#x3D; 7790,    EXE &#x3D; 7790,    DLL &#x3D; 7790,    RAR &#x3D; 8297,    ZIP &#x3D; 8075,    XML &#x3D; 6063,    HTML &#x3D; 6033,    ASPX &#x3D; 239187,    CS &#x3D; 117115,    JS &#x3D; 119105,    TXT &#x3D; 210187,    SQL &#x3D; 255254,    BAT &#x3D; 64101,    BTSEED &#x3D; 10056,    RDP &#x3D; 255254,    PSD &#x3D; 5666,    PDF &#x3D; 3780,    CHM &#x3D; 7384,    LOG &#x3D; 70105,    REG &#x3D; 8269,    HLP &#x3D; 6395,    DOC &#x3D; 208207,    XLS &#x3D; 208207,    DOCX &#x3D; 208207,    XLSX &#x3D; 208207,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery ValidationEngine 修改验证提示框的位置</title>
      <link href="/js/jquery-validationengine-xiu-gai-yan-zheng-ti-shi-kuang-de-wei-zhi/"/>
      <url>/js/jquery-validationengine-xiu-gai-yan-zheng-ti-shi-kuang-de-wei-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt;  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;  &lt;meta name&#x3D;&quot;Generator&quot; content&#x3D;&quot;EditPlus®&quot;&gt;  &lt;meta name&#x3D;&quot;Author&quot; content&#x3D;&quot;&quot;&gt;  &lt;meta name&#x3D;&quot;Keywords&quot; content&#x3D;&quot;&quot;&gt;  &lt;meta name&#x3D;&quot;Description&quot; content&#x3D;&quot;&quot;&gt;  &lt;title&gt;自定义验证框位置&lt;&#x2F;title&gt;  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;ValidationEngine&#x2F;css&#x2F;validationEngine.jquery.css&quot;&#x2F;&gt;  &lt;script src&#x3D;&quot;ValidationEngine&#x2F;js&#x2F;jquery-1.8.2.min.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;script src&#x3D;&quot;ValidationEngine&#x2F;js&#x2F;jquery.validationEngine.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;script src&#x3D;&quot;ValidationEngine&#x2F;js&#x2F;languages&#x2F;jquery.validationEngine-zh_CN.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        jQuery(document).ready(function () &#123;            jQuery(&quot;#frmJquery&quot;).validationEngine(&#123;                onFormSuccess: function () &#123;                    return false;                &#125;,                onFormFailure: function () &#123;                    return false;                &#125;            &#125;);            jQuery(&quot;#frmJquery&quot;).validationEngine(&#39;attach&#39;, &#123;                relative: true,                overflownDIV: &quot;#divPostion&quot;,                promptPosition: &quot;bottomLeft&quot; &#x2F;&#x2F;验证弹出框的位置，topRight,topLeft,bottomRight,bottomLeft,centerRight,centerLeft,inline            &#125;);        &#125;)        function showMsg(msg)        &#123;            layer.msg(msg, &#123; time: 1000 &#125;);        &#125;    &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;div id&#x3D;&quot;divPostion&quot;&gt; &lt;form id&#x3D;&quot;frmJquery&quot;&gt;  姓名：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txtName&quot; class&#x3D;&quot;validate[required]&quot;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;  手机：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txtPhone&quot; class&#x3D;&quot;validate[custom[phone]]&quot;&gt;  &lt;form&gt;  &lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ztree 获取最下级的子节点内容</title>
      <link href="/js/ztree-huo-qu-zui-xia-ji-de-zi-jie-dian-nei-rong/"/>
      <url>/js/ztree-huo-qu-zui-xia-ji-de-zi-jie-dian-nei-rong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt;  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;  &lt;meta name&#x3D;&quot;Generator&quot; content&#x3D;&quot;EditPlus®&quot;&gt;  &lt;meta name&#x3D;&quot;Author&quot; content&#x3D;&quot;&quot;&gt;  &lt;meta name&#x3D;&quot;Keywords&quot; content&#x3D;&quot;&quot;&gt;  &lt;meta name&#x3D;&quot;Description&quot; content&#x3D;&quot;&quot;&gt;  &lt;title&gt;Ztree&lt;&#x2F;title&gt;  &lt;link href&#x3D;&quot;zTreeStyle.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.4.4.min.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery.ztree.all-3.5.min.js&quot;&gt;&lt;&#x2F;script&gt;   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;                &#x2F;&#x2F;获取页面中的参数        function GetQueryString(name) &#123;            var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);            var r &#x3D; window.location.search.substr(1).match(reg);            if (r !&#x3D; null)                return unescape(r[2]);            return &quot;&quot;;        &#125;        var zNodes&#x3D;[&#123;&quot;key&quot;:null,&quot;Id&quot;:0,&quot;Pid&quot;:-1,&quot;Name&quot;:&quot;测试平台&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:1,&quot;Pid&quot;:0,&quot;Name&quot;:&quot;模块1&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:7,&quot;Id&quot;:6,&quot;Pid&quot;:1,&quot;Name&quot;:&quot;模块1-功能1&quot;,&quot;checked&quot;:true&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:7,&quot;Pid&quot;:1,&quot;Name&quot;:&quot;模块1-功能2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:8,&quot;Pid&quot;:1,&quot;Name&quot;:&quot;模块1-功能3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:9,&quot;Pid&quot;:1,&quot;Name&quot;:&quot;模块1-功能4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:10,&quot;Pid&quot;:1,&quot;Name&quot;:&quot;模块1-功能5&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:2,&quot;Pid&quot;:0,&quot;Name&quot;:&quot;模块2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:7,&quot;Id&quot;:11,&quot;Pid&quot;:2,&quot;Name&quot;:&quot;模块2-功能1&quot;,&quot;checked&quot;:true&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:12,&quot;Pid&quot;:2,&quot;Name&quot;:&quot;模块2-功能2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:13,&quot;Pid&quot;:2,&quot;Name&quot;:&quot;模块2-功能3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:14,&quot;Pid&quot;:2,&quot;Name&quot;:&quot;模块2-功能4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:15,&quot;Pid&quot;:2,&quot;Name&quot;:&quot;模块2-功能5&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:3,&quot;Pid&quot;:0,&quot;Name&quot;:&quot;模块3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:7,&quot;Id&quot;:16,&quot;Pid&quot;:3,&quot;Name&quot;:&quot;模块3-功能1&quot;,&quot;checked&quot;:true&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:17,&quot;Pid&quot;:3,&quot;Name&quot;:&quot;模块3-功能2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:18,&quot;Pid&quot;:3,&quot;Name&quot;:&quot;模块3-功能3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:19,&quot;Pid&quot;:3,&quot;Name&quot;:&quot;模块3-功能4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:20,&quot;Pid&quot;:3,&quot;Name&quot;:&quot;模块3-功能5&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:4,&quot;Pid&quot;:0,&quot;Name&quot;:&quot;模块4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:7,&quot;Id&quot;:21,&quot;Pid&quot;:4,&quot;Name&quot;:&quot;模块4-功能1&quot;,&quot;checked&quot;:true&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:22,&quot;Pid&quot;:4,&quot;Name&quot;:&quot;模块4-功能2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:23,&quot;Pid&quot;:4,&quot;Name&quot;:&quot;模块4-功能3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:24,&quot;Pid&quot;:4,&quot;Name&quot;:&quot;模块4-功能4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:25,&quot;Pid&quot;:4,&quot;Name&quot;:&quot;模块4-功能5&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:5,&quot;Pid&quot;:0,&quot;Name&quot;:&quot;模块5&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:7,&quot;Id&quot;:26,&quot;Pid&quot;:5,&quot;Name&quot;:&quot;模块5-功能1&quot;,&quot;checked&quot;:true&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:27,&quot;Pid&quot;:5,&quot;Name&quot;:&quot;模块5-功能2&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:28,&quot;Pid&quot;:5,&quot;Name&quot;:&quot;模块5-功能3&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:29,&quot;Pid&quot;:5,&quot;Name&quot;:&quot;模块5-功能4&quot;,&quot;checked&quot;:false&#125;,&#123;&quot;key&quot;:null,&quot;Id&quot;:30,&quot;Pid&quot;:5,&quot;Name&quot;:&quot;模块5-功能5&quot;,&quot;checked&quot;:false&#125;];        var setting &#x3D; &#123;            check: &#123;                enable: true            &#125;,            data: &#123;&#x2F;&#x2F;数据加载                keep: &#123;                    parent: true,                    leaf: true                &#125;,                simpleData: &#123;                    enable: true,                    idKey: &quot;Id&quot;,                    pIdKey: &quot;Pid&quot;                &#125;,                key: &#123;                    name: &quot;Name&quot;                &#125;            &#125;        &#125;;        function Inint() &#123;&#x2F;&#x2F;初始化加载节点            $.ajax(&#123;                global: true,                async: false,                cache: false,                dataType: &quot;json&quot;,                url: &#39;ajax&#x2F;test.ashx&#39;, &#x2F;&#x2F;通过一般处理程序生成数据                type: &quot;post&quot;,                data:&#123;&quot;roleId&quot;:GetQueryString(&quot;roleId&quot;)&#125;,                success: function (data) &#123;                    zNodes &#x3D; data;                &#125;            &#125;);        &#125;;        $(function () &#123;            &#x2F;&#x2F;Inint();            var treeObj &#x3D;$.fn.zTree.init($(&quot;#powerTree&quot;), setting, zNodes);            treeObj.expandAll(true);                    &#125;);        jQuery().ready(function () &#123;            $(&quot;#btnTest&quot;).click(function () &#123;                var treeObj &#x3D; $.fn.zTree.getZTreeObj(&quot;powerTree&quot;);                var nodes &#x3D; treeObj.getCheckedNodes(true);                var txt &#x3D; &quot;&quot;;                for (var i &#x3D; 0; i &lt; nodes.length; i++) &#123;                    if (nodes[i].isParent) &#123;                        &#x2F;&#x2F;txt.replace(nodes[i].Name, &quot;&quot;);                    &#125; else &#123;                        txt +&#x3D; nodes[i].Id+&quot;-&quot;+nodes[i].Name + &quot;,&quot;;                    &#125;                &#125;                txt &#x3D; txt.replace(&quot;null,&quot;, &quot;&quot;); &#x2F;&#x2F;替换选择父节点的id                txt &#x3D; txt.substring(0, txt.length - 1);                alert(txt);                &#x2F;&#x2F;var strCheckNodes &#x3D; JSON.stringify(checkNodes);            &#125;);        &#125;);    &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt;    &lt;div&gt;        &lt;ul id&#x3D;&quot;powerTree&quot; class&#x3D;&quot;ztree&quot;&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;    &lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;btnTest&quot; id&#x3D;&quot;btnTest&quot; value&#x3D;&quot;测试节点&quot; &#x2F;&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">namespace ajax&#123;    &#x2F;&#x2F;&#x2F; &lt;summary&gt;    &#x2F;&#x2F;&#x2F; Sys_Role_PowerAllot 的摘要说明    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;    public class Test : IHttpHandler    &#123;        public void ProcessRequest(HttpContext context)        &#123;                        string roleId &#x3D; context.Request[&quot;roleId&quot;];                            List&lt;Sys_Module&gt; list &#x3D; new List&lt;Sys_Module&gt;();                for (int i &#x3D; 0; i &lt; 5; i++)                &#123;                    Sys_Module s &#x3D; new Sys_Module();                    s.Sys_Module_Id &#x3D; i+1;                    s.sm_ParentId &#x3D; i - i;                    s.sm_Name &#x3D; &quot;模块&quot; + (i + 1);                    List&lt;Sys_Function&gt; funs &#x3D; new List&lt;Sys_Function&gt;();                    for (int j &#x3D; 0; j &lt; 5; j++)                    &#123;                        Sys_Function fun &#x3D; new Sys_Function();                        if (j &#x3D;&#x3D; 0)                        &#123;                            fun.Sys_Function_Id &#x3D; j + (i + 1) * 5 + 1;                            fun.sf_Description &#x3D; s.sm_Name + &quot;-功能&quot; + (j + 1);                            fun.sf_AuthorityIndex &#x3D; 7;                            funs.Add(fun);                        &#125;                        fun.Sys_Function_Id &#x3D; j + (i + 1) * 5 + 1;                        fun.sf_Description &#x3D; s.sm_Name + &quot;-功能&quot; + (j + 1);                                                funs.Add(fun);                    &#125;                    s.Functions &#x3D; funs;                    list.Add(s);                &#125;                                BindFunction(allModules, roleId);                            &#125;        &#125;        private string GetAuthorityStr(string nodes)        &#123;            &#x2F;&#x2F;string[] checkNodes &#x3D; nodes.Split(&#39;,&#39;);            &#x2F;&#x2F;int[] intNodes &#x3D; Array.ConvertAll&lt;string, int&gt;(checkNodes, delegate(string s) &#123; return int.Parse(s); &#125;);            &#x2F;&#x2F;ArrayList arrNodes &#x3D; new ArrayList(intNodes);            &#x2F;&#x2F;arrNodes.Sort();            &#x2F;&#x2F;int maxNodeId &#x3D; Convert.ToInt32(arrNodes[arrNodes.Count - 1]);            &#x2F;&#x2F;string sr_AuthorityString &#x3D; string.Empty;            &#x2F;&#x2F;List&lt;string&gt; list &#x3D; new List&lt;string&gt;();            &#x2F;&#x2F;for (int i &#x3D; 0; i &lt; maxNodeId+1; i++)            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    list.Add(&quot;0&quot;);            &#x2F;&#x2F;&#125;            &#x2F;&#x2F;for (int i &#x3D; 0; i &lt; intNodes.Length; i++)            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    list[intNodes[i]] &#x3D; &quot;1&quot;;            &#x2F;&#x2F;&#125;            &#x2F;&#x2F;sr_AuthorityString &#x3D; string.Join(&quot;&quot;, list.ToArray());            &#x2F;&#x2F;sr_AuthorityString &#x3D; sr_AuthorityString.PadRight(1024, &#39;0&#39;);            string[] checkNodes &#x3D; nodes.Split(&#39;,&#39;);            string sr_AuthorityString &#x3D; string.Empty;            sr_AuthorityString&#x3D; sr_AuthorityString.PadRight(1024, &#39;0&#39;);            for (int i &#x3D; 0; i &lt; checkNodes.Length; i++)            &#123;                sr_AuthorityString &#x3D; sr_AuthorityString.Remove(Convert.ToInt32(checkNodes[i])-1, 1).Insert(Convert.ToInt32(checkNodes[i])-1, &quot;1&quot;);            &#125;            return sr_AuthorityString;        &#125;        public string BindFunction(List&lt;Sys_Module&gt; modules,string roleId)        &#123;            List&lt;TreeData&gt; funTree &#x3D; new List&lt;TreeData&gt;();            TreeData treeRoot &#x3D; new TreeData();            treeRoot.Id &#x3D; 0;            treeRoot.Pid &#x3D; -1;            treeRoot.Name &#x3D; &quot;测试平台&quot;;            char[] cauth &#x3D; &#123; &#125;;            &#x2F;&#x2F;Sys_Role_Logic roleLogic &#x3D; new Sys_Role_Logic();            &#x2F;&#x2F;if (!string.IsNullOrEmpty(roleId))            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    Sys_Role role &#x3D; roleLogic.GetModel(Convert.ToInt32(roleId));            &#x2F;&#x2F;    string authorityStr &#x3D; role.sr_AuthorityString.Substring(0, role.sr_AuthorityString.LastIndexOf(&quot;1&quot;)+1);            &#x2F;&#x2F;    &#x2F;&#x2F;string authorityStr &#x3D; &quot;000000100100100000001000100000000000000&quot;;            &#x2F;&#x2F;    cauth&#x3D; authorityStr.ToArray();                           &#x2F;&#x2F;&#125;            funTree.Add(treeRoot);            for (int i &#x3D; 0; i &lt; modules.Count; i++)            &#123;                AddNodes(funTree, modules[i], treeRoot.Id, cauth);            &#125;            return JsonHelper.SerializeObject(funTree);        &#125;              public List&lt;TreeData&gt; AddNodes(List&lt;TreeData&gt; trees, Sys_Module module, int pid, char [] authorityStr)        &#123;            TreeData tree &#x3D; new TreeData();            tree.Id &#x3D; module.Sys_Module_Id;            tree.Name &#x3D; module.sm_Name;            if (pid &#x3D;&#x3D; 0)                tree.Pid &#x3D; module.sm_ParentId;            else                tree.Pid &#x3D; pid;            trees.Add(tree);            foreach (Sys_Function fun in module.Functions)            &#123;                trees.Add(AddFunNodes(fun, tree.Id,authorityStr));            &#125;            return trees;        &#125;        public TreeData AddFunNodes(Sys_Function fun, int pid, char [] authorityStr)        &#123;            TreeData tree &#x3D; new TreeData();            tree.Id &#x3D; fun.Sys_Function_Id;            tree.Pid &#x3D; pid;            tree.Name &#x3D; fun.sf_Description;            tree.key &#x3D; fun.sf_AuthorityIndex;            int funAuthorityIndex &#x3D; Convert.ToInt32(fun.sf_AuthorityIndex - 1);            if (funAuthorityIndex &lt; authorityStr.Length)            &#123;                if (authorityStr[funAuthorityIndex] &#x3D;&#x3D; &#39;1&#39;)                &#123;                    tree.@checked &#x3D; true;                &#125;                else                &#123;                    tree.@checked &#x3D; false;                &#125;            &#125;                        return tree;        &#125;               public bool IsReusable        &#123;            get            &#123;                return false;            &#125;        &#125;    &#125;    public class TreeData    &#123;        public int? key &#123; get; set; &#125;        public int Id &#123; get; set; &#125;        public int? Pid &#123; get; set; &#125;        public string Name &#123; get; set; &#125;        public bool  @checked &#123; get; set; &#125;    &#125;    public class Sys_Function    &#123;    public int Sys_Function_Id&#123;get;set;&#125;    public string sf_Description&#123;get;set;&#125;    public int sf_AuthorityIndex&#123;get;set;&#125;    &#125;    public class Sys_Module    &#123;    public int Sys_Module_Id&#123;get;set;&#125;    public int sm_ParentId&#123;get;set;&#125;    public string sm_Name&#123;get;set;&#125;    public List&lt;Sys_Function&gt; Functions&#123;get;set;&#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 Office project 2013 时提示找不到 Office.zh-cn&#92;OfficeLR.cab</title>
      <link href="/tools/an-zhuang-office-project-2013-shi-ti-shi-zhao-bu-dao-officelr.cab/"/>
      <url>/tools/an-zhuang-office-project-2013-shi-ti-shi-zhao-bu-dao-officelr.cab/</url>
      
        <content type="html"><![CDATA[<p>昨天在安装project 时总是弹出下图中的提示框，在网上搜索了很多办法但是没有解决这个问题。<br><img src="/images/2015050516281801.jpg" alt="2015050516281801.jpg"><br>后来进入到office.zh-cn的文件夹中，在officemui.msi文件中右键卸载，然后在重新安装project就可以了。<br><img src="/images/2015050516281802.jpg" alt="2015050516281802.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Ext 创建树</title>
      <link href="/js/shi-yong-ext-chuang-jian-shu/"/>
      <url>/js/shi-yong-ext-chuang-jian-shu/</url>
      
        <content type="html"><![CDATA[<p>ext使用的是ext3.4.0版本</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.0 Transitional&#x2F;&#x2F;EN&quot;&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Hello-Ext&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;ext&#x2F;resources&#x2F;css&#x2F;ext-all.css&quot; &#x2F;&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;ext&#x2F;adapter&#x2F;ext&#x2F;ext-base.js&quot; &gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;ext&#x2F;ext-all.js&quot; &gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;win.js&quot; &gt;&lt;&#x2F;script&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; &gt;        &#x2F;*Ext.onReady(function () &#123;            var win &#x3D; new Ext.Window(&#123;                width: 600,                height: 500,                title: &quot;测试窗口&quot;,                buttons: [&#123; text: &quot;确定&quot; &#125;, &#123;text:&quot;取消&quot;&#125;]            &#125;);            win.show();        &#125;);*&#x2F;    &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ext创建树的脚本</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">function ShowWindow() &#123;    &#x2F;&#x2F;调用button的on方法设置监听函数    var btn &#x3D; new Ext.Button(&#123;        text: &quot;创建一个窗口&quot;    &#125;);    btn.on(&quot;click&quot;, ShowMinWindow);    var win &#x3D; new Ext.Window(&#123;        width: 500,        height: 300,        title: &quot;My Ext Window&quot;,        maximizable: true,        minimizable: true,        maximize: function () &#123; win.hide(); &#125;,        buttons: [&#123; text: &quot;创建一个带数的窗口&quot;,            listeners: &#123;                click: function () &#123;                    var tree &#x3D; new Ext.tree.TreePanel(&#123;                        width: 500,                        height: 300,                        title: &quot;树的测试&quot;,                        root: new Ext.tree.AsyncTreeNode(&#123;                            text: &quot;子节点1&quot;,                            children: [&#123; text: &quot;子节点11&quot;, children: [&#123; text: &quot;子节点111&quot;, leaf: true&#125;] &#125;, &#123; text: &quot;子节点2&quot;, leaf: true&#125;]                        &#125;)                    &#125;);                    var w1 &#x3D; new Ext.Window(&#123;                        width: 300,                        height: 400,                        title: &quot;树&quot;,                        items: [tree]                    &#125;);                    &#x2F;&#x2F;w1.add(tree);                    w1.show();                &#125;            &#125;        &#125;, btn]    &#125;);    win.show();&#125;function ShowMinWindow() &#123;    var win &#x3D; new Ext.Window(&#123;        width:200,        height: 100,        title:&quot;弹出窗口&quot;    &#125;);    win.show();&#125;Ext.onReady(ShowWindow);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图<br><img src="/images/2014122514251601.jpg" alt="2014122514251601.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC 路由检测组件 Routing Debugger</title>
      <link href="/mvc/mvc-lu-you-jian-ce-zu-jian-routing-debugger/"/>
      <url>/mvc/mvc-lu-you-jian-ce-zu-jian-routing-debugger/</url>
      
        <content type="html"><![CDATA[<p>组件下载地址 <a href="http://haacked.com/archive/2008/03/13/url-routing-debugger.aspx/">haacked.com</a></p><ol><li>在mvc项目中引入组件</li><li>配置route规则</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static void RegisterRoutes(RouteCollection routes)        &#123;            &#x2F;&#x2F;routes.IgnoreRoute(&quot;&#123;resource&#125;.axd&#x2F;&#123;*pathInfo&#125;&quot;);            &#x2F;&#x2F;忽略About页面，不能将它已到mapRoute后面，改方法不是有Route组件提供是System.Web.Mvc下的方法            &#x2F;&#x2F;routes.IgnoreRoute(&quot;Home&#x2F;About&quot;);            routes.MapRoute(                &quot;Default&quot;, &#x2F;&#x2F; 路由名称                &quot;&#123;controller&#125;&#x2F;&#123;action&#125;&#x2F;&#123;id&#125;&quot;, &#x2F;&#x2F; 带有参数的 URL                new &#123; controller &#x3D; &quot;Home&quot;, action &#x3D; &quot;Index&quot;, id &#x3D; UrlParameter.Optional &#125;, &#x2F;&#x2F; 参数默认值                new &#123; controller&#x3D;@&quot;^\w+&quot;,action&#x3D;@&quot;^\w+&quot;&#125;            );            routes.MapRoute(                &quot;Filter&quot;, &#x2F;&#x2F; 路由名称                &quot;&#123;controller&#125;&#x2F;&#123;action&#125;&#x2F;&#123;id&#125;&quot;, &#x2F;&#x2F; 带有参数的 URL                new &#123; controller &#x3D; &quot;Filter&quot;, action &#x3D; &quot;Index&quot;, id &#x3D; UrlParameter.Optional &#125;, &#x2F;&#x2F; 参数默认值                new &#123; controller &#x3D; @&quot;^\w+&quot;, action &#x3D; @&quot;^\w+&quot; &#125;            );            routes.MapRoute(                &quot;car&quot;,                &quot;Car&#x2F;&#123;make&#125;&#x2F;&#123;pro&#125;&quot;,                new &#123;controller&#x3D;&quot;Car&quot;,action&#x3D;&quot;Index&quot;,id&#x3D;1&#125;                );            routes.MapRoute(                &quot;Archive&quot;,                &quot;Archive&#x2F;&#123;date&#125;&quot;,                new &#123; controller &#x3D; &quot;blog&quot;, action &#x3D; &quot;Archive&quot; &#125;,                new &#123;date&#x3D;@&quot;^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&quot; &#125;                );            routes.MapRoute(                    &quot;Book&quot;,                    &quot;Book&#x2F;Add&#x2F;&#123;name&#125;&quot;,                    new &#123; controller &#x3D; &quot;Book&quot;, action &#x3D; &quot;Add&quot; &#125;,                    new &#123; HttpMethod&#x3D;&quot;Post&quot;&#125;                );            routes.MapRoute(                &quot;Product&quot;,                &quot;Product&#x2F;&#123;*value&#125;&quot;,&#x2F;&#x2F;*表示匹配一切内容                new &#123;controller&#x3D;&quot;Product&quot;,action&#x3D;&quot;Index&quot; &#125;                );            &#x2F;*Dictionary&lt;string, object&gt; defaultRout &#x3D; new Dictionary&lt;string, object&gt;();            defaultRout[&quot;action&quot;] &#x3D; &quot;Index&quot;;            defaultRout[&quot;id&quot;] &#x3D; 0;            RouteValueDictionary defaultRouteValue &#x3D; new RouteValueDictionary(defaultRout);            RouteValueDictionary constrainRouteValue &#x3D; new RouteValueDictionary();            constrainRouteValue[&quot;controller&quot;] &#x3D; @&quot;\w+&quot;;            constrainRouteValue[&quot;id&quot;] &#x3D; @&quot;\d+&quot;;            Route route &#x3D; new Route(&quot;&#123;controller&#125;&#x2F;&#123;action&#125;&#x2F;&#123;id&#125;&quot;, defaultRouteValue, constrainRouteValue, new MvcRouteHandler());*&#x2F;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在Global.asax.cs代码中写入</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">protected void Application_Start()&#123;    AreaRegistration.RegisterAllAreas();    RegisterRoutes(RouteTable.Routes);    &#x2F;&#x2F;设为true表示url指向磁盘上的物理文件也会进行url routing处理，例如一个普通的html页面    RouteTable.Routes.RouteExistingFiles &#x3D; true;    RouteDebug.RouteDebugger.RewriteRoutesForTesting(RouteTable.Routes);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2014121014461601.jpg" alt="2014121014461601.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 序列化（Binary、Xml、Soap）</title>
      <link href="/c-winform/csharp-xu-lie-hua-binary-xml-soap/"/>
      <url>/c-winform/csharp-xu-lie-hua-binary-xml-soap/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.IO;using System.Xml.Serialization;using System.Runtime.Serialization.Formatters.Binary;using System.Runtime.Serialization.Formatters.Soap;namespace Serialization&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            Student stu &#x3D; new Student(&quot;张三&quot;, 30, &quot;登山&quot;);                        &#x2F;&#x2F;&#x2F;&#x2F;二进制序列化            &#x2F;&#x2F;BinaryFormatter bf &#x3D; new BinaryFormatter();            &#x2F;&#x2F;FileStream fs &#x3D; new FileStream(@&quot;D:\stu.ss&quot;, FileMode.Create);            &#x2F;&#x2F;bf.Serialize(fs, stu);            &#x2F;&#x2F;fs.Close();            &#x2F;&#x2F;&#x2F;&#x2F;二进制反序列化            &#x2F;&#x2F;BinaryFormatter bf &#x3D; new BinaryFormatter();            &#x2F;&#x2F;FileStream fs &#x3D; new FileStream(@&quot;D:\stu.ss&quot;, FileMode.Open);            &#x2F;&#x2F;Student student &#x3D; (Student)bf.Deserialize(fs);            &#x2F;&#x2F;student.method();            &#x2F;&#x2F;&#x2F;&#x2F;xml序列化            &#x2F;&#x2F;XmlSerializer xml &#x3D; new XmlSerializer(typeof(Student));            &#x2F;&#x2F;FileStream fs &#x3D; new FileStream(@&quot;D:\stu.xml&quot;,FileMode.Create);            &#x2F;&#x2F;xml.Serialize(fs, stu);            &#x2F;&#x2F;fs.Close();            &#x2F;&#x2F;&#x2F;&#x2F;xml反序列化            &#x2F;&#x2F;XmlSerializer xml &#x3D; new XmlSerializer(typeof(Student));            &#x2F;&#x2F;FileStream fs &#x3D; new FileStream(@&quot;D:\stu.xml&quot;, FileMode.Open);            &#x2F;&#x2F;Student student &#x3D; (Student)xml.Deserialize(fs);            &#x2F;&#x2F;student.method();            &#x2F;&#x2F;&#x2F;&#x2F;soap序列化            &#x2F;&#x2F;SoapFormatter soap &#x3D; new SoapFormatter();            &#x2F;&#x2F;FileStream fs &#x3D; new FileStream(@&quot;D:\stu.soap&quot;, FileMode.Create);            &#x2F;&#x2F;soap.Serialize(fs, stu);            &#x2F;&#x2F;fs.Close();            &#x2F;&#x2F;soap反序列化            SoapFormatter soap &#x3D; new SoapFormatter();            FileStream fs &#x3D; new FileStream(@&quot;D:\stu.soap&quot;, FileMode.Open);            Student student &#x3D; (Student)soap.Deserialize(fs);            student.method();                    &#125;    &#125;    [Serializable]    public class Person    &#123;        public Person()        &#123;        &#125;        public Person(string name, int age)        &#123;            this.Name &#x3D; name;            this.Age &#x3D; age;        &#125;        public string Name        &#123;            get;            set;        &#125;        public int Age        &#123;            get;            set;        &#125;    &#125;    [Serializable]    public class Student : Person    &#123;        public Student()        &#123;        &#125;        public Student(string name, int age, string hobby)            : base(name, age)        &#123;            this.Hobby &#x3D; hobby;        &#125;        public string Hobby        &#123;            get;            set;        &#125;        public void method()        &#123;            Console.WriteLine(&quot;大家好，我叫&#123;0&#125;，今年&#123;1&#125;岁，我喜欢&#123;2&#125;&quot;, this.Name, this.Age, this.Hobby);            &#x2F;&#x2F;Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mvc Action Filter</title>
      <link href="/mvc/mvc-action-filter/"/>
      <url>/mvc/mvc-action-filter/</url>
      
        <content type="html"><![CDATA[<p>mvc Action Filter中OnActionExecuting、OnActionExecuted、OnResultExecuting、OnResultExecuted的执行顺序</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.Mvc;using System.IO;namespace MvcApp.ActionFilters&#123;    public class SimpleFilterAttribute:ActionFilterAttribute    &#123;        public int ID &#123; get; set; &#125;        public override void OnActionExecuting(ActionExecutingContext filterContext)        &#123;            File.AppendAllText(@&quot;D:\ActionFilterTest.log&quot;, &quot;SimpleFilter &quot; + this.ID + &quot; OnActionExecuting! \r\n&quot;);        &#125;        public override void OnActionExecuted(ActionExecutedContext filterContext)        &#123;            File.AppendAllText(@&quot;D:\ActionFilterTest.log&quot;, &quot;SimpleFilter &quot; + this.ID + &quot; OnActionExecuted! \r\n&quot;);        &#125;        public override void OnResultExecuting(ResultExecutingContext filterContext)        &#123;            File.AppendAllText(@&quot;D:\ActionFilterTest.log&quot;, &quot;SimpleFilter &quot; + this.ID + &quot; OnResultExecuting! \r\n&quot;);        &#125;        public override void OnResultExecuted(ResultExecutedContext filterContext)        &#123;            File.AppendAllText(@&quot;D:\ActionFilterTest.log&quot;, &quot;SimpleFilter &quot; + this.ID + &quot; OnResultExecuted! \r\n&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[SimpleFilter(ID &#x3D; 1, Order &#x3D; 1)] public ActionResult Index() &#123;     ViewData[&quot;Message&quot;] &#x3D; &quot;Get the Filter Data!&quot;;     return View(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的执行的结果是<br><img src="/images/2014120514411101.jpg" alt="2014120514411101.jpg"><br>OnActionExecuted可以处理执行过程中的异常</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.Mvc;using System.Web.Routing;namespace MvcApp.ActionFilters&#123;    public class ErrorHandlingFilterAttribute:ActionFilterAttribute    &#123;        public override void OnActionExecuted(ActionExecutedContext filterContext)        &#123;            if (filterContext.Exception !&#x3D; null)            &#123;                filterContext.ExceptionHandled &#x3D; true;                &#x2F;&#x2F;Filter是Controllers的名称                filterContext.Result &#x3D; new RedirectToRouteResult(&quot;Filter&quot;, new RouteValueDictionary(new &#123; action &#x3D; &quot;OnError&quot; &#125;));            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个OnError的视图</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public ActionResult OnError()&#123;    ViewData[&quot;Title&quot;] &#x3D; &quot;OnError&quot;;    ViewData[&quot;Message&quot;] &#x3D; &quot;Error Page!&quot;;    return View();&#125;[ErrorHandlingFilter]public void RaiseError()&#123;    throw new Exception();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OnResultExecuting可以用于服务器端的压缩和客户端缓存</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.Mvc;using System.IO.Compression;namespace MvcApp.ActionFilters&#123;    public class CompressFilterAttribute:ActionFilterAttribute    &#123;        public override void OnResultExecuting(ResultExecutingContext filterContext)        &#123;            string accpetEncoding &#x3D; filterContext.HttpContext.Request.Headers[&quot;Accept-Encoding&quot;];            if (string.IsNullOrEmpty(accpetEncoding))                return;            var response &#x3D; filterContext.HttpContext.Response;            accpetEncoding&#x3D;accpetEncoding.ToUpperInvariant();            if (accpetEncoding.Contains(&quot;GZIP&quot;))            &#123;                response.AddHeader(&quot;content-encoding&quot;, &quot;gzip&quot;);                response.Filter &#x3D; new GZipStream(response.Filter, CompressionMode.Compress);            &#125;            else if (accpetEncoding.Contains(&quot;DEFLATE&quot;))            &#123;                response.AddHeader(&quot;content-encoding&quot;, &quot;deflate&quot;);                response.Filter &#x3D; new DeflateStream(response.Filter, CompressionMode.Compress);            &#125;                    &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个Compress的视图，可以压缩前后的大小</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[CompressFilter]public ActionResult Compress()&#123;    return View();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OnResultExecuting可以用于页面尾部输出信息和异常处理</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.Mvc;namespace MvcApp.ActionFilters&#123;    public class TraceFilterAttribute:ActionFilterAttribute    &#123;        public override void OnResultExecuting(ResultExecutingContext filterContext)        &#123;            filterContext.HttpContext.Items[&quot;Start&quot;] &#x3D; DateTime.Now;        &#125;        public override void OnResultExecuted(ResultExecutedContext filterContext)        &#123;            DateTime start &#x3D; (DateTime)filterContext.HttpContext.Items[&quot;Start&quot;];            TimeSpan ts &#x3D; DateTime.Now - start;            filterContext.HttpContext.Response.Write(&quot;&lt;hr &#x2F;&gt;&quot; + ts.ToString());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个Timing的视图</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[TraceFilter]public ActionResult Timing()&#123;    Random rdm &#x3D; new Random(DateTime.Now.Millisecond);    Thread.Sleep(rdm.Next(5) * 3000);    return View();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 样式分类</title>
      <link href="/html-css/css-yang-shi-fen-lei/"/>
      <url>/html-css/css-yang-shi-fen-lei/</url>
      
        <content type="html"><![CDATA[<p>CSS样式可以分为三大类：内联样式、内部样式表和外部样式表</p><ol><li>内联样式（样式写在html标签里，只对该标签的内容起作用）</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;span style&#x3D;&quot;color:red;font-size:48;&quot;&gt;Hello World!&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>内部样式（样式写在html的head标签之间，只对该html的内容起作用）</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;    &lt;head&gt;     &lt;title&gt;&lt;&#x2F;title&gt;    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;    body&#123;font-size:12px&#125;        &lt;&#x2F;style&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>外部样式（样式引用写在head标签之间，对引用该css文件的网页起作用）</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;    &lt;head&gt;     &lt;title&gt;&lt;&#x2F;title&gt;    &lt;link href&#x3D;&quot;common.css” rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;     &lt;&#x2F;head&gt;    &lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> css样式中#表示id选择器，.表示类选择器</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;font&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在html中id是不能重复的。</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d C# 创建 物体</title>
      <link href="/c-winform/unity3d-csharp-chuang-jian-wu-ti/"/>
      <url>/c-winform/unity3d-csharp-chuang-jian-wu-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using UnityEngine;using System.Collections;public class create : MonoBehaviour &#123;    &#x2F;&#x2F; Use this for initialization    public GameObject newObject;        void OnGUI()    &#123;        if(GUI.Button(new Rect(10,10,100,50),&quot;开始&quot;))        &#123;            &#x2F;&#x2F;创建游戏物体            GameObject instance  &#x3D; (GameObject)Instantiate(newObject,transform.position,transform.rotation);            &#x2F;&#x2F;获取move脚本中的变量run            GameObject.Find(&quot;3rd Person Controller&quot;).GetComponent&lt;move&gt;().run&#x3D;true;        &#125;    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using UnityEngine;using System.Collections;public class move : MonoBehaviour &#123;                public bool run&#x3D;false;    float speed &#x3D;5.0f;    &#x2F;&#x2F; Update is called once per frame    void Update () &#123;                if(run)        &#123;            &#x2F;&#x2F;获取sphere的transform            Transform tf &#x3D; GameObject.Find(&quot;Sphere&quot;).GetComponent&lt;SphereCollider&gt;().transform;                Transform ren &#x3D; GameObject.Find(&quot;3rd Person Controller&quot;).GetComponent&lt;CharacterController&gt;().transform;                    if(ren.position.x&gt;&#x3D;tf.position.x)        &#123;               &#x2F;&#x2F;控制物体移动               transform.Translate(Vector3.left,Camera.main.transform);               &#x2F;&#x2F;播放动画               animation.Play(&quot;run&quot;);        &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询脚本手册可以参考 <a href="http://game.ceeger.com/">unity3d圣典</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d 破解</title>
      <link href="/tools/unity3d-po-jie/"/>
      <url>/tools/unity3d-po-jie/</url>
      
        <content type="html"><![CDATA[<p>在官网上或者其他地方下载unity3d后</p><p>运行注册机，需要详细的设置可以点击edit<br><img src="/images/2014111411502601.jpg" alt="2014111411502601.jpg"><br><img src="/images/2014111411502602.jpg" alt="2014111411502602.jpg"></p><ol><li><p>点击browse，选择安装unity目录下的Editor文件夹</p></li><li><p>选择path，会提示Pathed</p></li><li><p>点击rand，生成序列号</p></li><li><p>点击cre lic，许可文件会自动在unity安装目录下生成。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS 配置asp.net 环境</title>
      <link href="/computer/iis-pei-zhi-asp.net-huan-jing/"/>
      <url>/computer/iis-pei-zhi-asp.net-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>打开Internet信息服务管理器，在左侧点击“应用程序池”，下面将以asp.net v4.0 程序池为例<br><img src="/images/2014110615091501.jpg" alt="2014110615091501.jpg"><br>在中间的“ASP.NET V4.0”上右键“高级选项”，展开“进程模型”，找“标识”选项，然后在“标识”选项的右侧单击弹出对话框，选择“LocalSystem”点击确定。<br><img src="/images/2014110615091502.jpg" alt="2014110615091502.jpg"><br><strong>注意</strong>64位机器只要将“启动32位应用程序”选项的值修改为true和标识改为LocalSystem就可以了，其他使用机器的默认配置。<br><img src="/images/2014110615091503.jpg" alt="2014110615091503.jpg"><br>然后部署服务</p><p>添加应用程序，在弹出的对话框中填写“别名”，即给要部署的服务起个名字；应用程序池选择我们配置好的“ASP.NET v4.0”；填写物理路径，即要部署服务文件所在磁盘上的位置。<br><img src="/images/2014110615091504.jpg" alt="2014110615091504.jpg"><br>如果有域名，可以选择“Default Web Site”网站后，点击右侧一栏的“编辑绑定”，在弹出的对话框中点击“编辑”弹出一个对话框，然后在对话框的主机名下填写域名，如果有端口冲突，在端口的一项中填写一个没有被占用的端口点击确定。<br><img src="/images/2014110615091505.jpg" alt="2014110615091505.jpg"><br>创建好应用程序后浏览aspnet网页的时候会提示身份验证的问题，只启用匿名验证即可<br><img src="/images/2014110615091506.jpg" alt="2014110615091506.jpg"><br><img src="/images/2014110615091507.jpg" alt="2014110615091507.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WCF rest 的帮助页面和缓存机制</title>
      <link href="/wcf/wcf-rest-de-bang-zhu-ye-mian-he-huan-cun-ji-zhi/"/>
      <url>/wcf/wcf-rest-de-bang-zhu-ye-mian-he-huan-cun-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>打开vs2010 在工具选项中选择扩展管理器——联机库 安装WCF REST Service Template 40(CS)模板</p><p>安装后新建wcf服务应用程序，删除默认建立的文件。</p><p>新建RestWcf4HelpPage.svc，代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Runtime.Serialization;using System.ServiceModel;using System.ServiceModel.Activation;using System.ServiceModel.Web;using System.Text;namespace RestWcf&#123;    [ServiceBehavior(IncludeExceptionDetailInFaults&#x3D;false)]    [AspNetCompatibilityRequirements(RequirementsMode &#x3D; AspNetCompatibilityRequirementsMode.Allowed)]    public class RestWcf4HelpPage : IRestWcf4HelpPage    &#123;        #region IRestWcf4HelpPage 成员        [WebGet(UriTemplate&#x3D;&quot;&#x2F;Rest&#x2F;Get&#x2F;&#123;id&#125;&quot;)]        public string GetData(string id)        &#123;            return &quot;Hello Rest GetData&quot;;        &#125;        [WebInvoke(UriTemplate&#x3D;&quot;&#x2F;Rest&#x2F;Add&#x2F;&#123;id&#125;&quot;,Method&#x3D;&quot;POST&quot;)]        public string AddData(string id)        &#123;            return &quot;Hello Rest AddData&quot;;        &#125;        [WebInvoke(UriTemplate &#x3D; &quot;&#x2F;Rest&#x2F;Update&#x2F;&#123;id&#125;&quot;, Method &#x3D; &quot;PUT&quot;)]        public string UpdateData(string id)        &#123;            return &quot;Hello Rest UpdateData&quot;;        &#125;        [WebInvoke(UriTemplate &#x3D; &quot;&#x2F;Rest&#x2F;Delete&#x2F;&#123;id&#125;&quot;, Method &#x3D; &quot;Delete&quot;)]        public string DeleteData(string id)        &#123;            return &quot;Hello Rest DeleteData&quot;;        &#125;        #endregion    &#125;    [XmlSerializerFormat]    [ServiceContract]    interface IRestWcf4HelpPage    &#123;        [OperationContract]        string GetData(string id);        [OperationContract]        string AddData(string id);        [OperationContract]        string UpdateData(string id);        [OperationContract]        string DeleteData(string id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在建立RestWcf4Cache.svc，代码如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Runtime.Serialization;using System.ServiceModel;using System.ServiceModel.Activation;using System.ServiceModel.Web;using System.Text;namespace RestWcf&#123;    [ServiceBehavior(IncludeExceptionDetailInFaults&#x3D;false)]    [AspNetCompatibilityRequirements(RequirementsMode &#x3D; AspNetCompatibilityRequirementsMode.Allowed)]    public class RestWcf4Cache:IRestWcf4Cache    &#123;        #region IRestWcf4Cache 成员        [AspNetCacheProfile(&quot;CacheFor10Senconds&quot;)]        [WebGet(UriTemplate &#x3D; &quot;&#x2F;Rest&#x2F;Get&#x2F;&#123;id&#125;&quot;)]        public string GetData(string id)        &#123;            return &quot;Hello Rest GetData &quot; + DateTime.Now.ToString();        &#125;        #endregion    &#125;    [ServiceContract]    interface IRestWcf4Cache    &#123;        [OperationContract]        string GetData(string id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在配置web.config文件，其中duration值缓存的有效时间。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.web</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilation</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">targetFramework</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caching</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputCacheSettings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputCacheProfiles</span> <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CacheFor10Senconds<span class="token punctuation">"</span></span> <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">varyByParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CacheFor30Senconds<span class="token punctuation">"</span></span> <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">varyByParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputCacheProfiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputCacheSettings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caching</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.web</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.serviceModel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>services</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf.RestWcf4HelpPage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpoint</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">behaviorConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf4HelpPageBehavior<span class="token punctuation">"</span></span>          <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webHttpBinding<span class="token punctuation">"</span></span> <span class="token attr-name">contract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf.IRestWcf4HelpPage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf.RestWcf4Cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpoint</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">behaviorConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf4CacheBehavior<span class="token punctuation">"</span></span>          <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webHttpBinding<span class="token punctuation">"</span></span> <span class="token attr-name">contract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf.IRestWcf4Cache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>services</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behaviors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpointBehaviors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behavior</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf4HelpPageBehavior<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webHttp</span> <span class="token attr-name">helpEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behavior</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behavior</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RestWcf4CacheBehavior<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webHttp</span> <span class="token attr-name">helpEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behavior</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>endpointBehaviors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceBehaviors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behavior</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceMetadata</span> <span class="token attr-name">httpGetEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceDebug</span> <span class="token attr-name">includeExceptionDetailInFaults</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behavior</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>serviceBehaviors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behaviors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceHostingEnvironment</span> <span class="token attr-name">aspNetCompatibilityEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name">multipleSiteBindingsEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.serviceModel</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span> <span class="token attr-name">runAllManagedModulesForAllRequests</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>帮助页面的效果如下图<br><img src="/images/2014110614561501.jpg" alt="2014110614561501.jpg"><br>get请求结果如下图<br><img src="/images/2014110614561502.jpg" alt="2014110614561502.jpg"><br>缓存效果如图,缓存的时间设置为10s，在10s内结果都是下图，超过时间后就是另一个结果了<br><img src="/images/2014110614561503.jpg" alt="2014110614561503.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> WCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 配置监听和本地网络服务</title>
      <link href="/mysql-sql-oracle/oracle-pei-zhi-jian-ting-he-ben-di-wang-luo-fu-wu/"/>
      <url>/mysql-sql-oracle/oracle-pei-zhi-jian-ting-he-ben-di-wang-luo-fu-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、配置监听"><a href="#一、配置监听" class="headerlink" title="一、配置监听"></a>一、配置监听</h3><p>在oracle的配置和移植工具中打开Net Configuration Assistant，然后点击下一步。<br><img src="/images/2014110514143301.jpg" alt="2014110514143301.jpg"><br>点击下一步，然后输入监听的名称点击下一步<br><img src="/images/2014110514143302.jpg" alt="2014110514143302.jpg"><br><img src="/images/2014110514143303.jpg" alt="2014110514143303.jpg"><br>点击下一步后如图<br><img src="/images/2014110514143304.jpg" alt="2014110514143304.jpg"><br>点击下一步如图<br><img src="/images/2014110514143305.jpg" alt="2014110514143305.jpg"><br>单击下一步如图<br><img src="/images/2014110514143306.jpg" alt="2014110514143306.jpg"><br>选择否，点击下一步<br><img src="/images/2014110514143307.jpg" alt="2014110514143307.jpg"></p><h3 id="二、配置网络服务"><a href="#二、配置网络服务" class="headerlink" title="二、配置网络服务"></a>二、配置网络服务</h3><p><img src="/images/2014110514143308.jpg" alt="2014110514143308.jpg"><br>点击下一步，然后输入输入名称<br><img src="/images/2014110514143309.jpg" alt="2014110514143309.jpg"><br><img src="/images/2014110514143310.jpg" alt="2014110514143310.jpg"><br>点击下一步<br><img src="/images/2014110514143311.jpg" alt="2014110514143311.jpg"><br>点击下一步，填写主机名（127.0.0.1表示本机，如果要连接其他机器就要填写连接机器的ip地址）<br><img src="/images/2014110514143312.jpg" alt="2014110514143312.jpg"><br>点击下一步<br><img src="/images/2014110514143313.jpg" alt="2014110514143313.jpg"><br>点击下一步，在弹出的对话框中输入用户名和密码<br><img src="/images/2014110514143314.jpg" alt="2014110514143314.jpg"><br>点击确定后看是否验证成功，成功后就直接下一步，到此服务配置完成</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7 IIS 局域网中无法访问网页</title>
      <link href="/computer/win7-iis-ju-yu-wang-zhong-wu-fa-fang-wen-wang-ye/"/>
      <url>/computer/win7-iis-ju-yu-wang-zhong-wu-fa-fang-wen-wang-ye/</url>
      
        <content type="html"><![CDATA[<p>安装好iis后，在局域网中无法浏览网页一，关闭防火墙即可</p><p>或者建立入站规则</p><p>打开控制面板——window防火墙——高级设置<br><img src="/images/2014110513531201.jpg" alt="2014110513531201.jpg"></p><p>在入站规则上右键新建入站规则，选择端口然后下一步<br><img src="/images/2014110513531202.jpg" alt="2014110513531202.jpg"></p><p>选择tcp和特定端口在端口上输入端口号（如80）<br><img src="/images/2014110513531203.jpg" alt="2014110513531203.jpg"><br>然后直接下一步，直到给输入名称的地方起一个便于自己记忆的名称即可。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Linq 查询数据库(DataSet)生成 Tree</title>
      <link href="/c-winform/csharp-linq-cha-xun-shu-ju-ku-dataset-sheng-cheng-tree/"/>
      <url>/c-winform/csharp-linq-cha-xun-shu-ju-ku-dataset-sheng-cheng-tree/</url>
      
        <content type="html"><![CDATA[<p>效果图如下<br><img src="/images/2014103013441201.jpg" alt="2014103013441201.jpg"></p><p>cs代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;namespace TreeView&#123;    public partial class FrmTreeView : Form    &#123;        bool isShow &#x3D; false;        public FrmTreeView()        &#123;            InitializeComponent();            tvTree.Nodes.Add(&quot;湖南省&quot;);        &#125;        private void tsmShowAdd_Click(object sender, EventArgs e)        &#123;            if (!isShow)            &#123;                DataSet ds &#x3D; DatabaseHelper.GetDataSet();                AddTreeNode(ds, &quot;cf0dbde5-14d6-44be-9f71-4e5d302afc99&quot;, tvTree.TopNode);                isShow &#x3D; true;            &#125;                   &#125;        private void AddTreeNode(DataSet ds,string fatherKey,TreeNode Nodes)        &#123;            var results &#x3D; from result in ds.Tables[0].AsEnumerable()                           where result.Field&lt;string&gt;(&quot;SYS_FATHERKEY&quot;) &#x3D;&#x3D; fatherKey                           select result;            foreach (var item in results)            &#123;                TreeNode node &#x3D; new TreeNode();                node.Text &#x3D; item.Field&lt;string&gt;(&quot;SYS_NAME&quot;);                                if (Nodes &#x3D;&#x3D; null)                &#123;                    tvTree.Nodes.Add(Nodes);                &#125;                else                &#123;                    Nodes.Nodes.Add(node);                &#125;                AddTreeNode(ds, item.Field&lt;string&gt;(&quot;SYS_KEY&quot;),node);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库表的结构如下<br><img src="/images/2014103013441202.jpg" alt="2014103013441202.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记本Win8 换Win7 设置 BIOS</title>
      <link href="/computer/bi-ji-ben-win8-huan-win7-she-zhi-bios/"/>
      <url>/computer/bi-ji-ben-win8-huan-win7-she-zhi-bios/</url>
      
        <content type="html"><![CDATA[<p>去年买了台笔记本，笔记本自带win8系统，想安装Win7折腾了好久都没有安装成功</p><p>后来在BIOS中找到了一个uefi&#x2F;legacy boot项，将原来的uefi only 修改为legacy only</p><p>重启电脑就可以安装win7系统了</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 中图片路径的设置</title>
      <link href="/silverlight/silverlight-zhong-tu-pian-lu-jing-de-she-zhi/"/>
      <url>/silverlight/silverlight-zhong-tu-pian-lu-jing-de-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>在Silverlight中图片的设置方法有几种<br><img src="/images/2014102114271201.jpg" alt="2014102114271201.jpg"><br>如上图在一个工程中有个images文件夹，buttons.xaml页面中的Image控件要引用一张图片</p><p>第一种方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">xaml: &lt;Image x:Name&#x3D;&quot;myImage&quot; Source&#x3D;&quot;&#x2F;SilverlightCreate;component&#x2F;images&#x2F;MyImage1.png&quot; &#x2F;&gt;code: myImage.Source &#x3D; new BitmapImage(new Uri(&quot;&#x2F;SilverlightCreate;component&#x2F;Images&#x2F;MyImage1.png&quot;, UriKind.Relative));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个Uri有如下3部分：</p><ul><li>&#x2F;SilverlightCreate 是Image所在的Assembly的名字，前面的”&#x2F;“是必须的。</li><li>“;component&#x2F;“是Assembly名字和在此Assembly下具体路径之间的分隔符，必须要有。</li><li>“images&#x2F;MyImage1.png” 就是所在Assembly中的路径。</li></ul><p>第二种方法</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">xaml: &lt;Image x:Name&#x3D;&quot;myImage&quot; Source&#x3D;&quot;images&#x2F;MyImage1.png&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章</p><p><a href="http://blogs.msdn.com/b/xusun/archive/2008/12/31/silverlight.aspx">http://blogs.msdn.com/b/xusun/archive/2008/12/31/silverlight.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS 2010 快捷键大全</title>
      <link href="/tools/vs-2010-kuai-jie-jian-da-quan/"/>
      <url>/tools/vs-2010-kuai-jie-jian-da-quan/</url>
      
        <content type="html"><![CDATA[<p>Ctrl+E,D —-格式化全部代码<br>Ctrl+E,F —-格式化选中的代码<br>CTRL + SHIFT + B生成解决方案<br>CTRL + F7 生成编译<br>CTRL + O 打开文件<br>CTRL + SHIFT + O打开项目<br>CTRL + SHIFT + C显示类视图窗口<br>F4 显示属性窗口<br>SHIFT + F4显示项目属性窗口<br>CTRL + SHIFT + E显示资源视图<br>F12 转到定义<br>CTRL + F12转到声明<br>CTRL + ALT + J对象浏览<br>CTRL + ALT + F1帮助目录<br>CTRL + F1 动态帮助<br>F1 帮助<br>SHIFT + F1当前窗口帮助<br>CTRL + ALT + F3帮助-搜索<br>SHIFT + ALT + ENTER全屏显示<br>CTRL + -向后定位<br>CTRL + SHIFT + -向前定位<br>CTRL + F4关闭文档窗口<br>CTRL + PAGE DOWN光标定位到窗口上方<br>CTRL + PAGE UP光标定位到窗口下方<br>CTRL + F6<br>CTRL + TAB下一个文档窗口<br>CTRL + SHIFT + F6<br>CTRL + SHIFT + TAB上一个文档窗口<br>ALT + F6下一个面板窗口<br>CTRL + K, CTRL + L取消remark<br>CTRL + K, CTRL + C注释选择的代码<br>CTRL + K, CTRL + U取消对选择代码的注释<br>CTRL + M, CTRL + O折叠代码定义<br>CTRL + M, CTRL + L展开代码定义<br>CTRL + DELETE删除至词尾<br>CTRL + BACKSPACE删除至词头<br>SHIFT + TAB取消制表符<br>CTRL + U转小写<br>CTRL + SHIFT + U转大写<br>CTRL + SHIFT + END选择至文档末尾<br>CTRL + SHIFT + HOME选择至文档末尾开始<br>SHIFT + END选择至行尾<br>SHIFT + HOME选择至行开始处<br>SHIFT + ALT + END垂直选择到最后尾<br>SHIFT + ALT + HOME垂直选择到最前面<br>CTRL + SHIFT + PAGE UP选择至本页前面<br>CTRL + SHIFT + PAGE DOWN选择至本页后面<br>CTRL + END文档定位到最后<br>CTRL + HOME文档定位到最前<br>CTRL + A全选<br>CTRL + W选择当前单词<br>CTRL + G转到…<br>CTRL + K, CTRL + P上一个标签<br>CTRL + K, CTRL + N下一个标签<br>ALT + F10调试-ApplyCodeChanges<br>CTRL + ALT+ Break停止调试<br>CTRL + SHIFT + F9 取消所有断点<br>CTRL + F9允许中断<br>CTRL + SHIFT + F5调试-重新开始<br>F5运行调试<br>CTRL + F5运行不调试<br>F10跨过程序执行<br>F11单步逐句执行<br>CTRL + J列出成员<br>CTRL + PAGE DOWN下一个视图<br>CTRL + B格式-粗体<br>CTRL + SHIFT + T格式-文字缩进<br><strong>调试快捷键</strong><br>F6: 生成解决方案<br>Ctrl+F6: 生成当前项目<br>F7: 查看代码<br>Shift+F7: 查看窗体设计器<br>F5: 启动调试<br>Ctrl+F5: 开始执行(不调试)<br>Shift+F5: 停止调试<br>Ctrl+Shift+F5: 重启调试<br>F9: 切换断点<br>Ctrl+F9: 启用&#x2F;停止断点<br>Ctrl+Shift+F9: 删除全部断点<br>F10: 逐过程<br>Ctrl+F10: 运行到光标处<br>F11: 逐语句<br><strong>编辑快捷键</strong><br>Shift+Alt+Enter: 切换全屏编辑<br>Ctrl+B,T &#x2F; Ctrl+K,K: 切换书签开关<br>Ctrl+B,N &#x2F; Ctrl+K,N: 移动到下一书签<br>Ctrl+B,P: 移动到上一书签<br>Ctrl+B,C: 清除全部标签<br>Ctrl+I: 渐进式搜索<br>Ctrl+Shift+I: 反向渐进式搜索<br>Ctrl+F: 查找<br>Ctrl+Shift+F: 在文件中查找<br>F3: 查找下一个<br>Shift+F3: 查找上一个<br>Ctrl+H: 替换<br>Ctrl+Shift+H: 在文件中替换<br>Alt+F12: 查找符号(列出所有查找结果)<br>Ctrl+Shift+V: 剪贴板循环<br>Ctrl+左右箭头键: 一次可以移动一个单词<br>Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。<br>Ctrl+Shift+L: 删除当前行<br>Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态<br>Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态<br>Ctrl+M,P: 停止大纲显示<br>Ctrl+E,S: 查看空白<br>Ctrl+E,W: 自动换行<br>Ctrl+G: 转到指定行<br>Shift+Alt+箭头键: 选择矩形文本<br>Alt+鼠标左按钮: 选择矩形文本<br>Ctrl+Shift+U: 全部变为大写<br>Ctrl+U: 全部变为小写<br><strong>代码快捷键</strong><br>Ctrl+J &#x2F; Ctrl+K,L: 列出成员<br>Ctrl+Shift+空格键 &#x2F; Ctrl+K,P: 参数信息<br>Ctrl+K,I: 快速信息<br>Ctrl+E,C &#x2F; Ctrl+K,C: 注释选定内容<br>Ctrl+E,U &#x2F; Ctrl+K,U: 取消选定注释内容<br>Ctrl+K,M: 生成方法存根<br>Ctrl+K,X: 插入代码段<br>Ctrl+K,S: 插入外侧代码<br>F12: 转到所调用过程或变量的定义<br>窗口快捷键<br>Ctrl+W,W: 浏览器窗口<br>Ctrl+W,S: 解决方案管理器<br>Ctrl+W,C: 类视图<br>Ctrl+W,E: 错误列表<br>Ctrl+W,O: 输出视图<br>Ctrl+W,P: 属性窗口<br>Ctrl+W,T: 任务列表<br>Ctrl+W,X: 工具箱<br>Ctrl+W,B: 书签窗口<br>Ctrl+W,U: 文档大纲<br>Ctrl+D,B: 断点窗口<br>Ctrl+D,I: 即时窗口<br>Ctrl+Tab: 活动窗体切换<br>Ctrl+Shift+N: 新建项目<br>Ctrl+Shift+O: 打开项目<br>Ctrl+Shift+S: 全部保存<br>Shift+Alt+C: 新建类<br>Ctrl+Shift+A: 新建项</p><p>转载至</p><p><a href="http://www.cnblogs.com/HelloMyWorld/archive/2013/02/20/2919443.html">http://www.cnblogs.com/HelloMyWorld/archive/2013/02/20/2919443.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 用DependencyProperty 自定义ImageButton控件 定义属性</title>
      <link href="/silverlight/silverlight-yong-dependencyproperty-zi-ding-yi-imagebutton-kong-jian-ding-yi-shu-xing/"/>
      <url>/silverlight/silverlight-yong-dependencyproperty-zi-ding-yi-imagebutton-kong-jian-ding-yi-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>为ImageButton自定义IconSource和Contents属性</p><p>xaml代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SilverlightCreate.SilverlightButtons&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;30&quot; d:DesignWidth&#x3D;&quot;100&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;Transparent&quot;&gt;        &lt;StackPanel x:Name&#x3D;&quot;myButton&quot; Orientation&#x3D;&quot;Horizontal&quot; &gt;            &lt;Image x:Name&#x3D;&quot;myImg&quot; Stretch&#x3D;&quot;None&quot;  &#x2F;&gt;            &lt;TextBlock x:Name&#x3D;&quot;myText&quot; VerticalAlignment&#x3D;&quot;Center&quot; FontSize&#x3D;&quot;13&quot; Padding&#x3D;&quot;5&quot; &#x2F;&gt;        &lt;&#x2F;StackPanel&gt;        &lt;Rectangle x:Name&#x3D;&quot;myRectangle&quot; Margin&#x3D;&quot;-3&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面开始自定义属性内容，自定义属性要用 依赖属性类 DependencyProperty</p><p>public static readonly DependencyProperty MyPropertyProperty &#x3D;<br>            DependencyProperty.Register(“MyProperty”, typeof(int), typeof(ownerclass), new UIPropertyMetadata(0));</p><p>DependencyProperty 的Register 方法中有四个参数，第一个是自定的属性，第二个自定义属性的参数类型，第三个是自定义属性所属类，第四个是属性元数据的实例，参数类型是PropertyMetadata。</p><p>使用vs2010的小技巧，生成依赖属性可以输入propdp，然后按两下Tab键，就会自动生成如下代码<br><img src="/images/2014102010561201.jpg" alt="2014102010561201.jpg"></p><p>cs代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;using System.Windows.Media.Imaging;namespace SilverlightCreate&#123;    public partial class SilverlightButtons : UserControl    &#123;        public SilverlightButtons()        &#123;            InitializeComponent();        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件文本        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public string Contents        &#123;            get &#123; return (string)GetValue(ContentsProperty); &#125;            set &#123; SetValue(ContentsProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件图片        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public ImageSource IconSource        &#123;            get &#123; return (ImageSource)GetValue(IconSourceProperty); &#125;            set &#123; SetValue(IconSourceProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件背景色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush ButtonBackGround        &#123;            get &#123; return (SolidColorBrush)GetValue(ButtonBackGroundProperty); &#125;            set &#123; SetValue(ButtonBackGroundProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件文字颜色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush FontColor        &#123;            get &#123; return (Brush)GetValue(FontColorProperty); &#125;            set &#123; SetValue(FontColorProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件边框默认颜色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush DefaultStroke        &#123;            get &#123; return (Brush)GetValue(DefaultStrokeProperty); &#125;            set &#123; SetValue(DefaultStrokeProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件边框高亮颜色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush HighLightStroke        &#123;            get &#123; return (Brush)GetValue(HighLightStrokeProperty); &#125;            set &#123; SetValue(HighLightStrokeProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件填充默认颜色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush DefaultFill        &#123;            get &#123; return (Brush)GetValue(DefaultFillProperty); &#125;            set &#123; SetValue(DefaultFillProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件填充高亮颜色        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public Brush HighLightFill        &#123;            get &#123; return (Brush)GetValue(HighLightFillProperty); &#125;            set &#123; SetValue(HighLightFillProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定义控件边框厚度        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public double StrokeThickness        &#123;            get &#123; return (double)GetValue(StrokeThicknessProperty); &#125;            set &#123; SetValue(StrokeThicknessProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定控件边框圆角x        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public double RadiusX        &#123;            get &#123; return (double)GetValue(RadiusXProperty); &#125;            set &#123; SetValue(RadiusXProperty, value); &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 自定控件边框圆角y        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        public double RadiusY        &#123;            get &#123; return (double)GetValue(RadiusYProperty); &#125;            set &#123; SetValue(RadiusYProperty, value); &#125;        &#125;        public static readonly DependencyProperty ContentsProperty &#x3D;             DependencyProperty.Register(&quot;Contents&quot;, typeof(string), typeof(SilverlightButtons), new PropertyMetadata(ContentsChanged));        private static void ContentsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    String NewValue &#x3D; e.NewValue as String;                    button.myText.Text &#x3D; NewValue;                &#125;            &#125;            else            &#123;                button.myText.Text &#x3D; String.Empty;            &#125;        &#125;        public static readonly DependencyProperty IconSourceProperty &#x3D;             DependencyProperty.Register(&quot;IconSource&quot;, typeof(ImageSource), typeof(SilverlightButtons), new PropertyMetadata(IconSourceSourceChanged));        private static void IconSourceSourceChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    ImageSource source &#x3D; e.NewValue as ImageSource;                    button.myImg.Source &#x3D; source;                &#125;            &#125;            else            &#123;                button.myImg.Source &#x3D; null;            &#125;        &#125;        public static readonly DependencyProperty ButtonBackGroundProperty &#x3D;             DependencyProperty.Register(&quot;ButtonBackGround&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(ButtonBackGroundChanged));        private static void ButtonBackGroundChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    SolidColorBrush brush &#x3D; e.NewValue as SolidColorBrush;                    button.myButton.Background &#x3D; brush;                &#125;            &#125;            else            &#123;                button.myButton.Background &#x3D; null;            &#125;        &#125;               public static readonly DependencyProperty FontColorProperty &#x3D;            DependencyProperty.Register(&quot;FontColor&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(FontColorChanged));        private static void FontColorChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;             SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    SolidColorBrush brush &#x3D; e.NewValue as SolidColorBrush;                    button.myText.Foreground &#x3D; brush;                &#125;            &#125;            else                button.myText.Foreground &#x3D; null;        &#125;                public static readonly DependencyProperty DefaultStrokeProperty &#x3D;            DependencyProperty.Register(&quot;DefaultStroke&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(DefaultStrokeChanged));        private static void DefaultStrokeChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.Stroke &#x3D; e.NewValue as Brush;                &#125;            &#125;            else            &#123;                button.myRectangle.Stroke &#x3D; new SolidColorBrush(Colors.Transparent);            &#125;        &#125;        public static readonly DependencyProperty HighLightStrokeProperty &#x3D;            DependencyProperty.Register(&quot;HighLightStroke&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(HighLightStrokeChanged));        private static void HighLightStrokeChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.Stroke &#x3D; e.NewValue as Brush;                &#125;            &#125;            else            &#123;                button.myRectangle.Stroke &#x3D; null;            &#125;        &#125;                public static readonly DependencyProperty DefaultFillProperty &#x3D;            DependencyProperty.Register(&quot;DefaultFill&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(DefaultFillChanged));        private static void DefaultFillChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.Fill &#x3D; e.NewValue as Brush;                &#125;            &#125;            else            &#123;                button.myRectangle.Fill &#x3D; new SolidColorBrush(Colors.Transparent);            &#125;        &#125;                public static readonly DependencyProperty HighLightFillProperty &#x3D;            DependencyProperty.Register(&quot;HighLightFill&quot;, typeof(Brush), typeof(SilverlightButtons), new PropertyMetadata(HighLightFillChanged));        private static void HighLightFillChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.Fill &#x3D; e.NewValue as Brush;                &#125;            &#125;            else            &#123;                button.myRectangle.Fill &#x3D; null;            &#125;        &#125;        public static readonly DependencyProperty StrokeThicknessProperty &#x3D;            DependencyProperty.Register(&quot;StrokeThickness&quot;, typeof(double), typeof(SilverlightButtons), new PropertyMetadata(StrokeThicknessChanged));        private static void StrokeThicknessChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.StrokeThickness &#x3D; Convert.ToDouble(e.NewValue);                &#125;            &#125;            else            &#123;                button.myRectangle.StrokeThickness &#x3D; 1;            &#125;        &#125;        public static readonly DependencyProperty RadiusXProperty &#x3D;            DependencyProperty.Register(&quot;RadiusX&quot;, typeof(double), typeof(SilverlightButtons), new PropertyMetadata(RadiusXChanged));        private static void RadiusXChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.RadiusX &#x3D; Convert.ToDouble(e.NewValue);                &#125;            &#125;            else            &#123;                button.myRectangle.RadiusX &#x3D; 0;            &#125;        &#125;        public static readonly DependencyProperty RadiusYProperty &#x3D;            DependencyProperty.Register(&quot;RadiusY&quot;, typeof(double), typeof(SilverlightButtons), new PropertyMetadata(RadiusYChanged));        private static void RadiusYChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)        &#123;            SilverlightButtons button &#x3D; sender as SilverlightButtons;            if (button !&#x3D; null)            &#123;                if (e.NewValue !&#x3D; null)                &#123;                    button.myRectangle.RadiusY &#x3D; Convert.ToDouble(e.NewValue);                &#125;            &#125;            else            &#123;                button.myRectangle.RadiusY &#x3D; 0;            &#125;        &#125;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义控件做好后就可以运用该控件了，如下图，鼠标移上去会出现边框<br><img src="/images/2014102010561202.jpg" alt="2014102010561202.jpg"></p><p>xaml代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SilverlightCreate.CustomControl&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    xmlns:custom&#x3D;&quot;clr-namespace:SilverlightCreate&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;#007F48&quot;&gt;        &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot; Height&#x3D;&quot;30&quot; HorizontalAlignment&#x3D;&quot;Center&quot;&gt;            &lt;custom:SilverlightButtons x:Name&#x3D;&quot;btnManyou&quot; Contents&#x3D;&quot;漫游&quot; FontColor&#x3D;&quot;White&quot; IconSource&#x3D;&quot;images&#x2F;tool_manyou.png&quot; ToolTipService.ToolTip&#x3D;&quot;漫游&quot;  Margin&#x3D;&quot;5&quot; MouseMove&#x3D;&quot;btnManyou_MouseMove&quot; MouseLeave&#x3D;&quot;btnManyou_MouseLeave&quot; &#x2F;&gt;            &lt;custom:SilverlightButtons x:Name&#x3D;&quot;btnDraw&quot; Contents&#x3D;&quot;重画&quot; FontColor&#x3D;&quot;White&quot; IconSource&#x3D;&quot;images&#x2F;tool_chonghua.png&quot; ToolTipService.ToolTip&#x3D;&quot;重画&quot; Margin&#x3D;&quot;5&quot; MouseMove&#x3D;&quot;btnDraw_MouseMove&quot; MouseLeave&#x3D;&quot;btnDraw_MouseLeave&quot; &#x2F;&gt;        &lt;&#x2F;StackPanel&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cs代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;namespace SilverlightCreate&#123;    public partial class CustomControl : UserControl    &#123;        public CustomControl()        &#123;            InitializeComponent();        &#125;        private void btnManyou_MouseMove(object sender, MouseEventArgs e)        &#123;            ShowBorder(btnManyou);        &#125;        private void btnManyou_MouseLeave(object sender, MouseEventArgs e)        &#123;            HideBorder(btnManyou);        &#125;        private void btnDraw_MouseMove(object sender, MouseEventArgs e)        &#123;            ShowBorder(btnDraw);        &#125;        private void btnDraw_MouseLeave(object sender, MouseEventArgs e)        &#123;            HideBorder(btnDraw);        &#125;        private void ShowBorder(SilverlightButtons button)        &#123;            button.StrokeThickness &#x3D; 1;            button.HighLightStroke &#x3D; new SolidColorBrush(Colors.White);            button.RadiusX &#x3D; 10;            button.RadiusY &#x3D; 10;        &#125;        private void HideBorder(SilverlightButtons button)        &#123;            button.StrokeThickness &#x3D; 0;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章</p><p><a href="https://social.msdn.microsoft.com/Forums/silverlight/en-US/630cade8-349d-410e-9039-3a4b74c56ac9/silverlight-4-custom-control-binding?forum=silverlightarchieve">https://social.msdn.microsoft.com/Forums/silverlight/en-US/630cade8-349d-410e-9039-3a4b74c56ac9/silverlight-4-custom-control-binding?forum=silverlightarchieve</a></p><p>相关文章</p><p><a href="http://www.cnblogs.com/yayx/archive/2008/06/03/1213126.html">http://www.cnblogs.com/yayx/archive/2008/06/03/1213126.html</a></p><p><a href="http://developer.51cto.com/art/201003/191692.htm">http://developer.51cto.com/art/201003/191692.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Jdk 环境配置和测试</title>
      <link href="/java/java-jdk-huan-jing-pei-zhi-he-ce-shi/"/>
      <url>/java/java-jdk-huan-jing-pei-zhi-he-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>测试jdk：1.6</p><p>安装完jdk1.6以后，在我的电脑中找到环境变量配置</p><p>在系统变量的Path 中输入 ;E:\Program Files (x86)\Java\jdk1.6.0_01\bin（路径根据自己安装的目录变化，注意，分号加在前面的话，光标要移到</p><p>path变量值得最后，分号在后（E:\Program Files (x86)\Java\jdk1.6.0_01\bin;）则将改路径直接放在path变量值的最前面）</p><p>然后新建class_path项，在值中输入 .;E:\Program Files (x86)\Java\jre1.6.0_01\lib</p><p>配置好后，在运行中输入cmd进入dos窗口</p><p>输入javac然后回车看是否出现参数列表,如下图<br><img src="/images/2014101816481201.png" alt="2014101816481201.png"></p><p>出现则说明成功了，然后在输入java -version 查看版本号。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 减小 Xap 的大小</title>
      <link href="/silverlight/silverlight-jian-xiao-xap-de-da-xiao/"/>
      <url>/silverlight/silverlight-jian-xiao-xap-de-da-xiao/</url>
      
        <content type="html"><![CDATA[<p>当Silverlight工程引用了很多dll后，加载的速度就会很慢，通过下面方式可以减小xap包的大小<br><img src="/images/2014101511231101.jpg" alt="2014101511231101.jpg"><br>勾选 “通过使用应用程序库缓存减小xap大小”，勾选此项后vs会自动将微软自身和外部引用不变的dll自动打包成zip压缩格式，<br><img src="/images/2014101511231102.jpg" alt="2014101511231102.jpg"><br>但这样也会产生很多这样的zip压缩文件，我们可以将这样zip压缩文件对应的dll压缩在一个zip压缩文件中，然后重新命名。</p><p>用winrar打开bin目录下的xap包查看AppManifest.xaml文件<br><img src="/images/2014101511231103.jpg" alt="2014101511231103.jpg"><br>将AppManifest.xaml文件解压出来，然后只保留&lt;Deployment.ExternalPart&gt;节点下的一行。</p><p>将source中的名称换成修改后的zip文件名（例如NewFile.zip）.</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight TreeView 带 checkbox和图片</title>
      <link href="/silverlight/silverlight-treeview-dai-checkbox-he-tu-pian/"/>
      <url>/silverlight/silverlight-treeview-dai-checkbox-he-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>前段时间做Silverlight TreeView 控件，但是要带checkbox和图片，在网上到处找相关的例子，效果图如下<br><img src="/images/2014101411321501.jpg" alt="2014101411321501.jpg"><br>xaml代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SlmenuTest.Tree&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    xmlns:common&#x3D;&quot;clr-namespace:System.Windows;assembly&#x3D;System.Windows.Controls&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot; xmlns:sdk&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&#x2F;sdk&quot;&gt;    &lt;UserControl.Resources&gt;        &lt;common:HierarchicalDataTemplate x:Key&#x3D;&quot;Level3Template&quot;&gt;            &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                &lt;Image Source&#x3D;&quot;&#123;Binding Icon&#125;&quot; Width&#x3D;&quot;16&quot; Height&#x3D;&quot;16&quot;&#x2F;&gt;                &lt;CheckBox &#x2F;&gt;                &lt;TextBlock Text&#x3D;&quot;&#123;Binding Name&#125;&quot;  Foreground&#x3D;&quot;Black&quot; &#x2F;&gt;            &lt;&#x2F;StackPanel&gt;        &lt;&#x2F;common:HierarchicalDataTemplate&gt;                &lt;common:HierarchicalDataTemplate x:Key&#x3D;&quot;Level2Template&quot; ItemsSource&#x3D;&quot;&#123;Binding Level3s&#125;&quot; ItemTemplate&#x3D;&quot;&#123;StaticResource Level3Template&#125;&quot;&gt;            &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                &lt;Image Source&#x3D;&quot;&#123;Binding Icon&#125;&quot; Width&#x3D;&quot;16&quot; Height&#x3D;&quot;16&quot;&#x2F;&gt;                &lt;CheckBox &#x2F;&gt;                &lt;TextBlock Text&#x3D;&quot;&#123;Binding Name&#125;&quot; Foreground&#x3D;&quot;Green&quot;&#x2F;&gt;            &lt;&#x2F;StackPanel&gt;        &lt;&#x2F;common:HierarchicalDataTemplate&gt;                &lt;common:HierarchicalDataTemplate x:Key&#x3D;&quot;Level1Template&quot; ItemsSource&#x3D;&quot;&#123;Binding Level2s&#125;&quot; ItemTemplate&#x3D;&quot;&#123;StaticResource Level2Template&#125;&quot;&gt;            &lt;StackPanel  Orientation&#x3D;&quot;Horizontal&quot;&gt;                &lt;Image Source&#x3D;&quot;&#123;Binding Icon&#125;&quot; &#x2F;&gt;                &lt;CheckBox &#x2F;&gt;                &lt;TextBlock Foreground&#x3D;&quot;Blue&quot; Text&#x3D;&quot;&#123;Binding Name&#125;&quot;&#x2F;&gt;            &lt;&#x2F;StackPanel&gt;        &lt;&#x2F;common:HierarchicalDataTemplate&gt;    &lt;&#x2F;UserControl.Resources&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;using System.Collections.ObjectModel;namespace SlmenuTest&#123;    public partial class Tree : UserControl    &#123;               public Tree()        &#123;            InitializeComponent();            InitTreeData();        &#125;        #region Data        private void InitTreeData()        &#123;            myTree.ItemsSource &#x3D; new ObservableCollection&lt;Level1&gt;            &#123;                new Level1                &#123;                    Name &#x3D; &quot;test1&quot;,                    Icon&#x3D;&quot;..&#x2F;images&#x2F;default.png&quot;,                    Level2s &#x3D;                     &#123;                         new Level2                        &#123;                            Name&#x3D;&quot;基础信息&quot;,                            Icon &#x3D; &quot;..&#x2F;images&#x2F;search.png&quot;,                            Level3s &#x3D;                             &#123;                                 new Level3 &#123; Name &#x3D; &quot;类别&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;computer.png&quot;&#125;,                                 new Level3 &#123; Name &#x3D; &quot;部门&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;computer_on.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;类别2&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;exit.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;部门2&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;edit.png&quot;&#125;                            &#125;                        &#125;,                        new Level2                        &#123;                            Name&#x3D;&quot;扩展信息&quot;,                            Icon&#x3D;&quot;..&#x2F;images&#x2F;search.png&quot;                        &#125;                    &#125;                &#125;,                new Level1                &#123;                    Name&#x3D;&quot;test2&quot;,                    Icon&#x3D;&quot;..&#x2F;images&#x2F;default.png&quot;,                    Level2s&#x3D;                    &#123;                        new Level2                        &#123;                            Name&#x3D;&quot;报表管理&quot;,                             Icon &#x3D; &quot;..&#x2F;images&#x2F;search.png&quot;,                            Level3s &#x3D;                             &#123;                                 new Level3 &#123; Name &#x3D; &quot;报表1&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;default.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;报表2&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;default.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;报表3&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;default.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;报表4&quot;,Icon&#x3D;&quot;..&#x2F;images&#x2F;default.png&quot;&#125;                            &#125;                        &#125;                    &#125;                &#125;,                new Level1                &#123;                    Name&#x3D;&quot;test3&quot;,                    Icon&#x3D;&quot;..&#x2F;images&#x2F;default.png&quot;,                    Level2s&#x3D;                    &#123;                        new Level2                        &#123;                            Name&#x3D;&quot;系统管理&quot;,                            Icon &#x3D; &quot;..&#x2F;images&#x2F;search.png&quot;,                            Level3s &#x3D;                             &#123;                                 new Level3 &#123; Name &#x3D; &quot;权限设置&quot; ,Icon &#x3D; &quot;..&#x2F;images&#x2F;default.png&quot;&#125;,                                new Level3 &#123; Name &#x3D; &quot;用户管理&quot; , Icon &#x3D; &quot;..&#x2F;images&#x2F;default.png&quot;&#125;                            &#125;                        &#125;                    &#125;                &#125;            &#125;;        &#125;        #endregion        private void myTree_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs&lt;object&gt; e)        &#123;            TreeViewItem item &#x3D; e.NewValue as TreeViewItem;                    &#125;           &#125;    public class Level1    &#123;        public Level1()        &#123;            Level2s &#x3D; new ObservableCollection&lt;Level2&gt;();        &#125;        public string Name &#123; get; set; &#125;        public string Icon &#123; get; set; &#125;        public ObservableCollection&lt;Level2&gt; Level2s &#123; get; set; &#125;    &#125;    public class Level2    &#123;        public Level2()        &#123;            Level3s &#x3D; new ObservableCollection&lt;Level3&gt;();        &#125;        public string Name &#123; get; set; &#125;        public string Icon &#123; get; set; &#125;        public ObservableCollection&lt;Level3&gt; Level3s &#123; get; set; &#125;    &#125;    public class Level3    &#123;        public string Name &#123; get; set; &#125;        public string Icon &#123; get; set; &#125;        &#x2F;&#x2F;public event EventHandler click;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种效果图如下<br><img src="/images/2014101411321502.jpg" alt="2014101411321502.jpg"><br>xaml 代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SLColorPickerDemo.Tree&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot; xmlns:sdk&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&#x2F;sdk&quot;&gt;    &lt;UserControl.Resources&gt;        &lt;Style x:Key&#x3D;&quot;RedItemStyle&quot; TargetType&#x3D;&quot;sdk:TreeViewItem&quot;&gt;            &lt;Setter Property&#x3D;&quot;HeaderTemplate&quot;&gt;                &lt;Setter.Value&gt;                    &lt;DataTemplate&gt;                        &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                            &lt;Image Source&#x3D;&quot;images&#x2F;default.png&quot;&#x2F;&gt;                            &lt;CheckBox &#x2F;&gt;                            &lt;TextBlock Text&#x3D;&quot;&#123;Binding&#125;&quot; Foreground&#x3D;&quot;Red&quot; FontStyle&#x3D;&quot;Italic&quot; &#x2F;&gt;                        &lt;&#x2F;StackPanel&gt;                    &lt;&#x2F;DataTemplate&gt;                &lt;&#x2F;Setter.Value&gt;            &lt;&#x2F;Setter&gt;            &lt;Setter Property&#x3D;&quot;IsExpanded&quot; Value&#x3D;&quot;False&quot; &#x2F;&gt;        &lt;&#x2F;Style&gt;    &lt;&#x2F;UserControl.Resources&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;White&quot;&gt;        &lt;sdk:TreeView Margin&#x3D;&quot;5&quot; Grid.Column&#x3D;&quot;0&quot; Grid.Row&#x3D;&quot;1&quot; Name&#x3D;&quot;tvTree&quot; SelectedItemChanged&#x3D;&quot;tvTree_SelectedItemChanged&quot; &#x2F;&gt;        &lt;Border BorderBrush&#x3D;&quot;Gray&quot; BorderThickness&#x3D;&quot;1&quot; Padding&#x3D;&quot;8&quot; Margin&#x3D;&quot;5&quot;&gt;            &lt;StackPanel x:Name&#x3D;&quot;DetailsPanel&quot; Margin&#x3D;&quot;4&quot; Width&#x3D;&quot;155&quot;&gt;                &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                    &lt;TextBlock Text&#x3D;&quot;版块ID: &quot; FontWeight&#x3D;&quot;Bold&quot;  &#x2F;&gt;                    &lt;TextBlock Text&#x3D;&quot;&#123;Binding ForumID&#125;&quot; &#x2F;&gt;                &lt;&#x2F;StackPanel&gt;                &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                    &lt;TextBlock Text&#x3D;&quot;版块名称: &quot; FontWeight&#x3D;&quot;Bold&quot;  &#x2F;&gt;                    &lt;TextBlock Text&#x3D;&quot;&#123;Binding ForumName&#125;&quot; &#x2F;&gt;                &lt;&#x2F;StackPanel&gt;                &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                    &lt;TextBlock Text&#x3D;&quot;版块信息: &quot; FontWeight&#x3D;&quot;Bold&quot; &#x2F;&gt;                    &lt;TextBlock x:Name&#x3D;&quot;DetailText&quot; TextWrapping&#x3D;&quot;Wrap&quot; Text&#x3D;&quot;&#123;Binding ForumName&#125;&quot;&#x2F;&gt;                &lt;&#x2F;StackPanel&gt;            &lt;&#x2F;StackPanel&gt;        &lt;&#x2F;Border&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Ink;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;using System.ComponentModel;namespace SLColorPickerDemo&#123;    public class ForumInfo : INotifyPropertyChanged    &#123;        public int ForumID &#123; get; set; &#125;        public int ParendID &#123; get; set; &#125;        public string ForumName &#123; get; set; &#125;        #region INotifyPropertyChanged 成员        public event PropertyChangedEventHandler PropertyChanged;        private void PropertyChaged(string propertyName)        &#123;            PropertyChangedEventHandler handle &#x3D; PropertyChanged;            if (handle !&#x3D; null)                handle.Invoke(this, new PropertyChangedEventArgs(propertyName));        &#125;        #endregion    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;using System.Collections.ObjectModel;namespace SLColorPickerDemo&#123;    public partial class Tree : UserControl    &#123;        List&lt;ForumInfo&gt; forumList &#x3D; new List&lt;ForumInfo&gt;();        public Tree()        &#123;            InitializeComponent();            forumList &#x3D; GetForumData();            AddTreeNode(0, null);        &#125;        private void AddTreeNode(int parentID, TreeViewItem treeViewItem)        &#123;            List&lt;ForumInfo&gt; result &#x3D; (from forumInfo in forumList                                      where forumInfo.ParendID &#x3D;&#x3D; parentID                                      select forumInfo).ToList&lt;ForumInfo&gt;();            if (result.Count &gt; 0)            &#123;                foreach (ForumInfo foruminfo in result)                &#123;                    TreeViewItem objTreeNode &#x3D; new TreeViewItem();                    objTreeNode.Header &#x3D; foruminfo.ForumName;                    objTreeNode.DataContext &#x3D; foruminfo;                    objTreeNode.ItemContainerStyle &#x3D; this.Resources[&quot;RedItemStyle&quot;] as Style;                    &#x2F;&#x2F;添加根节点                    if (treeViewItem &#x3D;&#x3D; null)                    &#123;                        tvTree.Items.Add(objTreeNode);                        &#x2F;&#x2F;tvTree.ItemContainerStyle &#x3D; this.Resources[&quot;TreeStyle&quot;] as Style;                    &#125;                    else                    &#123;                        treeViewItem.Items.Add(objTreeNode);                    &#125;                    AddTreeNode(foruminfo.ForumID, objTreeNode);                &#125;            &#125;        &#125;        public List&lt;ForumInfo&gt; GetForumData()        &#123;            List&lt;ForumInfo&gt; forumList &#x3D; new List&lt;ForumInfo&gt;();            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 1, ParendID &#x3D; 0, ForumName &#x3D; &quot;笔记本版块&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 2, ParendID &#x3D; 0, ForumName &#x3D; &quot;台式机版块&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 3, ParendID &#x3D; 1, ForumName &#x3D; &quot;Dell笔记本&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 4, ParendID &#x3D; 1, ForumName &#x3D; &quot;IBM笔记本&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 5, ParendID &#x3D; 4, ForumName &#x3D; &quot;IBM-T系列&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 6, ParendID &#x3D; 4, ForumName &#x3D; &quot;IBM-R系列&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 7, ParendID &#x3D; 2, ForumName &#x3D; &quot;联想台式机&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 8, ParendID &#x3D; 2, ForumName &#x3D; &quot;方正台式机&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 9, ParendID &#x3D; 2, ForumName &#x3D; &quot;HP台式机&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 10, ParendID &#x3D; 7, ForumName &#x3D; &quot;联想家悦H系列&quot; &#125;);            forumList.Add(new ForumInfo() &#123; ForumID &#x3D; 11, ParendID &#x3D; 7, ForumName &#x3D; &quot;联想IdeaCentre系列&quot; &#125;);            return forumList;        &#125;        private void tvTree_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs&lt;object&gt; e)        &#123;            TreeViewItem item &#x3D; e.NewValue as TreeViewItem;            ForumInfo fi &#x3D; item.DataContext as ForumInfo;            DetailsPanel.DataContext &#x3D; fi;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3DMAx Panda Directx Exporter 导出 X插件</title>
      <link href="/tools/3dmax-panda-directx-exporter-dao-chu-x-cha-jian/"/>
      <url>/tools/3dmax-panda-directx-exporter-dao-chu-x-cha-jian/</url>
      
        <content type="html"><![CDATA[<p>Panda Directx Exporter 下载地址</p><p><a href="http://www.andytather.co.uk/Panda/directxmax_downloads.aspx">http://www.andytather.co.uk/Panda/directxmax_downloads.aspx</a></p><p>将下载的文件解压后，放到3DS安装文件夹的plgin目录中。</p><p>fbx导出插件</p><p><a href="http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=10775855">http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=10775855</a></p><ol><li>3DS Max Objects选项卡<br>主要是输出数据类型的设置（注意在我的电脑上有些字母被遮住了，不知道原因，不过大致意思也能猜出）。</li></ol><p>Output Options：选择“Mesh difination”和“Materials”，不勾选“Inline”（这个我不懂），因为不使用骨骼动画，所以也不勾选“Bones”， Output Types：勾选“Geometric（几何体）”和“Dummy（虚拟体）”。</p><ol start="2"><li>Mesh选项卡<br>设置网格的选项。</li></ol><p>勾选“Mesh normals（需要导出法线）”和“Vertex colors”，Optmize mesh下拉菜单选择“Normal（法线）”，还可以选择“None（不作优化）”和“Optimized（已做优化）”。不选择“Mapping coordinares（纹理坐标）”，“Flip normals（翻转法线）”、“Use custom nromals（使用自定义法线）”和“Use local object space（使用模型坐标系，这会导致导出的文件丢失世界矩阵的信息）”。</p><ol start="3"><li>Animaton选项卡<br>关于模型动画的设置。</li></ol><p>因为这个例子中不使用动画，所以无需设置。<br>4. Textures&amp;.fx files选项卡<br>设置纹理和fx文件。</p><p>Texture Conversion：本例不使用纹理，所以选择“None”。</p><p>.fx Effect Files：因为不使用effect所以不勾选“Include .fx files（包含fx文件）”和“Include .fx parameters（包含fx参数）”，其实自己也不知道如何设置，但在《Professional XNA Game Programming》中的所有x文件都是包含fx的。<br>5. X File Settings选项卡<br>DX File Type：我选择“Text”，这样可以在文本编辑器中看到源文件，不选择“Binary（二进制）”和“Binary with Compression（压缩的二进制文件）” 。在《Professional XNA Game Programming》中的所有x文件都是二进制的，所以用文本编辑器打开后是乱码。</p><p>DX Frame：本例中不使用层次模型，所以选择“No Frame（不包含框架）”，不选择“Top frame only（将只输出顶部框架）”和“Sub frame hierarchy（输出子框架层次）”。</p><p>Coordinate System：不选择“Left Handed Axis（左手坐标系，选择此项会将Y和Z坐标互换）”。</p><p>Xfile Animation Options：本例不使用动画，所以不选择“Include Animation”，Type下拉菜单可选“Closed（动画封闭）”和“Open（动画开放）”。Pos.Quality可选择“Spline Positions（样条位置）”和“Linear Positions（线性位置）”。</p><p>设置完以上选项后点击确定保存文件，把它命名为“square.x”。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win2003 控制面板 打不开</title>
      <link href="/computer/win2003-kong-zhi-mian-ban-da-bu-kai/"/>
      <url>/computer/win2003-kong-zhi-mian-ban-da-bu-kai/</url>
      
        <content type="html"><![CDATA[<p>windown 2003 控制面板打不开</p><p>在运行框中输入regedit，进入注册表中的</p><p>HKEY_LOCAL_MACHINE&#x2F;SYSTEM\Current ControlSet\Control\NLS\Locale下找到</p><p>Default和“00000804”两项，分别修改值为0000049和1 。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight FullScreen 全屏</title>
      <link href="/silverlight/silverlight-fullscreen-quan-ping/"/>
      <url>/silverlight/silverlight-fullscreen-quan-ping/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;FullScreen.MainPage&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;White&quot;&gt;        &lt;Border HorizontalAlignment&#x3D;&quot;Left&quot; VerticalAlignment&#x3D;&quot;Top&quot; Padding&#x3D;&quot;10&quot; BorderThickness&#x3D;&quot;1&quot; CornerRadius&#x3D;&quot;4&quot; Background&#x3D;&quot;#7F000000&quot;&gt;            &lt;StackPanel&gt;                &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                    &lt;TextBlock Text&#x3D;&quot;总CPU占用：&quot; TextWrapping&#x3D;&quot;Wrap&quot; d:LayoutOverrides&#x3D;&quot;Height&quot; Foreground&#x3D;&quot;White&quot;&gt;&lt;&#x2F;TextBlock&gt;                    &lt;TextBlock x:Name&#x3D;&quot;txtCPULoad&quot; TextWrapping&#x3D;&quot;Wrap&quot; d:LayoutOverrides&#x3D;&quot;Height&quot; Foreground&#x3D;&quot;White&quot;&gt;&lt;&#x2F;TextBlock&gt;                &lt;&#x2F;StackPanel&gt;                &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;                    &lt;TextBlock Text&#x3D;&quot;当前CPU占用：&quot; TextWrapping&#x3D;&quot;Wrap&quot; d:LayoutOverrides&#x3D;&quot;Height&quot; Foreground&#x3D;&quot;White&quot;&gt;&lt;&#x2F;TextBlock&gt;                    &lt;TextBlock x:Name&#x3D;&quot;txtSLCPULoad&quot; TextWrapping&#x3D;&quot;Wrap&quot; d:LayoutOverrides&#x3D;&quot;Height&quot; Foreground&#x3D;&quot;White&quot;&gt;&lt;&#x2F;TextBlock&gt;                &lt;&#x2F;StackPanel&gt;            &lt;&#x2F;StackPanel&gt;        &lt;&#x2F;Border&gt;        &lt;Button Content&#x3D;&quot;正常&quot; Height&#x3D;&quot;47&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;152,123,0,0&quot; Name&#x3D;&quot;btnFull&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;68&quot; Click&#x3D;&quot;btnFull_Click&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;using System.Windows.Threading;namespace FullScreen&#123;    public partial class MainPage : UserControl    &#123;        Analytics myAnalytics;        public MainPage()        &#123;            InitializeComponent();            Loaded +&#x3D; new RoutedEventHandler(MainPage_Loaded);            Application.Current.Host.Content.FullScreenChanged +&#x3D; new EventHandler(Content_FullScreenChanged);        &#125;        void MainPage_Loaded(object sender, RoutedEventArgs e)        &#123;            myAnalytics &#x3D; new Analytics();            DispatcherTimer timer &#x3D; new DispatcherTimer();            timer.Interval &#x3D; TimeSpan.FromSeconds(1);            timer.Tick +&#x3D; new EventHandler(timer_Tick);            timer.Start();        &#125;        void timer_Tick(object sender, EventArgs e)        &#123;            txtCPULoad.Text &#x3D; myAnalytics.AverageProcessorLoad.ToString();            txtSLCPULoad.Text &#x3D; myAnalytics.AverageProcessLoad.ToString();        &#125;        void Content_FullScreenChanged(object sender, EventArgs e)        &#123;            var content &#x3D; Application.Current.Host.Content;            if (content.IsFullScreen)            &#123;                btnFull.Background &#x3D; new SolidColorBrush(Colors.Yellow);                LayoutRoot.Background &#x3D; new SolidColorBrush(Colors.Yellow);            &#125;            else            &#123;                btnFull.Background &#x3D; new SolidColorBrush(Colors.Red);                LayoutRoot.Background &#x3D; new SolidColorBrush(Colors.Red);            &#125;        &#125;        private void btnFull_Click(object sender, RoutedEventArgs e)        &#123;            var content &#x3D; Application.Current.Host.Content;            if (!content.IsFullScreen)            &#123;                content.IsFullScreen &#x3D; !content.IsFullScreen;                btnFull.Content &#x3D; &quot;还原&quot;;            &#125;            else            &#123;                content.IsFullScreen &#x3D; !content.IsFullScreen;                btnFull.Content &#x3D; &quot;全屏&quot;;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 鼠标双击 事件</title>
      <link href="/silverlight/silverlight-shu-biao-shuang-ji-shi-jian/"/>
      <url>/silverlight/silverlight-shu-biao-shuang-ji-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>Silverlight 双击事件例子</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;MouseDbClick.MainPage&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;White&quot;&gt;        &lt;ListBox Height&#x3D;&quot;100&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;12,12,0,0&quot; Name&#x3D;&quot;lbTest&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;namespace MouseDbClick&#123;    public partial class MainPage : UserControl,IMouseDbClick    &#123;        MouseDbClickHander hander &#x3D; null;        public MainPage()        &#123;            InitializeComponent();            hander &#x3D; new MouseDbClickHander(this);            lbTest.MouseLeftButtonDown +&#x3D; new MouseButtonEventHandler(lbTest_MouseLeftButtonDown);            lbTest.MouseLeftButtonUp +&#x3D; new MouseButtonEventHandler(lbTest_MouseLeftButtonUp);            string[] str &#x3D; &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot; &#125;;            lbTest.ItemsSource &#x3D; str;        &#125;        void lbTest_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)        &#123;            hander.OnMouseLeftButtonUp(sender, e);        &#125;        void lbTest_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)        &#123;            hander.OnMouseLeftButtonDown(sender, e);          &#125;        #region IMouseDbClick 成员        public void onMouseDbClick(object sender, MouseButtonEventArgs e)        &#123;            string msg &#x3D; lbTest.SelectedItem as string;            MessageBox.Show(msg);        &#125;        #endregion    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现双击的接口代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Ink;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;namespace MouseDbClick&#123;    public interface IMouseDbClick    &#123;        void onMouseDbClick(object sender, MouseButtonEventArgs e);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现双击的代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Net;using System.Windows;using System.Windows.Controls;using System.Windows.Documents;using System.Windows.Ink;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Animation;using System.Windows.Shapes;namespace MouseDbClick&#123;    public class MouseDbClickHander    &#123;        public DateTime lastClick &#x3D; DateTime.Now;        private bool firstClick &#x3D; false;        private IMouseDbClick _mouseDbClick;        &#x2F;&#x2F; Methods        public MouseDbClickHander(IMouseDbClick mouseDbclick)        &#123;            this._mouseDbClick &#x3D; mouseDbclick;        &#125;        public void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)        &#123;                    &#125;        public void OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)        &#123;            &#x2F;&#x2F;UIElement ui &#x3D; sender as UIElement;            TimeSpan span &#x3D; DateTime.Now - lastClick;            if (span.TotalMilliseconds &lt; 40 || firstClick &#x3D;&#x3D; false)            &#123;                firstClick &#x3D; true;                lastClick &#x3D; DateTime.Now;            &#125;            else            &#123;                this._mouseDbClick.onMouseDbClick(sender, e);                firstClick &#x3D; false;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到了Silverlight5.0后鼠标事件中有一个ClickCount属性，可以判断是否是双击。</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL datetime和smalldatetime区别</title>
      <link href="/silverlight/sql-datetime-he-smalldatetime-qu-bie/"/>
      <url>/silverlight/sql-datetime-he-smalldatetime-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>datetime 存储大小8个字节，精确到分后的3为小数，日期范围从1753 年 1 月 1 日到 9999 年 12 月 31 日；而</p><p>smalldatetime存储大小为4个字节，精确到分，日期范围从1900 年 1 月 1 日到 2079 年 6 月 6 日。<br><img src="/images/2014101115271001.jpg" alt="2014101115271001.jpg"><br><img src="/images/2014101115271002.jpg" alt="2014101115271002.jpg"></p><p>参考</p><p><a href="http://msdn.microsoft.com/zh-cn/library/ms187819%28v=sql.105%29.aspx">http://msdn.microsoft.com/zh-cn/library/ms187819%28v=sql.105%29.aspx</a><br><a href="http://msdn.microsoft.com/zh-cn/library/ms182418%28v=sql.105%29.aspx">http://msdn.microsoft.com/zh-cn/library/ms182418%28v=sql.105%29.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 用户代码未处理 TypeLoadException</title>
      <link href="/silverlight/silverlight-yong-hu-dai-ma-wei-chu-li-typeloadexception/"/>
      <url>/silverlight/silverlight-yong-hu-dai-ma-wei-chu-li-typeloadexception/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2014101017321301.jpg" alt="2014101017321301.jpg"><br>在Silverlight中动态创建Enum时，多次调用改方法出现上图所示错误，后来发现定义名称都是一样的，</p><p>在程序中声明全局变量去区别就可以了。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int num &#x3D; 1;private Type CreateEnum(List&lt;string&gt; lists,string enumName)&#123;    AppDomain app &#x3D; AppDomain.CurrentDomain;    AssemblyName aName &#x3D; new AssemblyName(&quot;SilverlightEnum&quot; + num);    AssemblyBuilder ab &#x3D; app.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run);    ModuleBuilder mb &#x3D; ab.DefineDynamicModule(aName.Name + &quot;Module&quot;);    EnumBuilder eb &#x3D; mb.DefineEnum(enumName, TypeAttributes.Public, typeof(System.Int32));    for (int i &#x3D; 0; i &lt; lists.Count; i++)    &#123;        eb.DefineLiteral(lists[i], i);    &#125;    num++;    return eb.CreateType();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 动态创建Enum</title>
      <link href="/silverlight/silverlight-dong-tai-chuang-jian-enum/"/>
      <url>/silverlight/silverlight-dong-tai-chuang-jian-enum/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private Type CreateEnum()&#123;   List&lt;string&gt; lists &#x3D; new List&lt;string&gt;();    lists.Add(&quot;男&quot;);    lists.Add(&quot;女&quot;);    AppDomain app &#x3D; AppDomain.CurrentDomain;    AssemblyName aName &#x3D; new    AssemblyName(&quot;EnumAssemble&quot;);    AssemblyBuilder ab &#x3D; app.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run);    ModuleBuilder mb &#x3D; ab.DefineDynamicModule(&quot;EnumModule&quot;);    EnumBuilder eb &#x3D; mb.DefineEnum(&quot;Sexs&quot;, TypeAttributes.Public, typeof(System.Int32));    for (int i &#x3D; 0; i &lt; lists.Count; i++)    &#123;        eb.DefineLiteral(lists[i], i);    &#125;    return eb.CreateType();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意如果要多次调用该方法，AssemblyName需要不同的名字，请参考 <a href="http://www.cnblogs.com/ZJ199012/p/4016434.html">http://www.cnblogs.com/ZJ199012/p/4016434.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>silverlight vs2010 需要缺少的web组件才能加载</title>
      <link href="/silverlight/silverlight-vs2010-xu-yao-que-shao-de-web-zu-jian-cai-neng-jia-zai/"/>
      <url>/silverlight/silverlight-vs2010-xu-yao-que-shao-de-web-zu-jian-cai-neng-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>在打开一个开源的Silverlight项目是遇到如图所示的问题，点击是后没有反应。<br><img src="/images/2014093014111301.png" alt="2014093014111301.png"><br>查了资料，需要安装微软的<a href="http://www.microsoft.com/web/downloads/platform.aspx">webpi</a>(Microsoft Web Platform Installer)</p><p>webpi的介绍资料 <a href="http://msdn.microsoft.com/zh-cn/dd767442.aspx">http://msdn.microsoft.com/zh-cn/dd767442.aspx</a></p><p>下载后直接安装IIS Express，安装完成后加载需要加载的项目，弹出下图对话框，点击是即可。<br><img src="/images/2014093014111302.jpg" alt="2014093014111302.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telerik RadPropertyGrid 设置显隐 Combox选择</title>
      <link href="/silverlight/telerik-radpropertygrid-she-zhi-xian-yin-combox-xuan-ze/"/>
      <url>/silverlight/telerik-radpropertygrid-she-zhi-xian-yin-combox-xuan-ze/</url>
      
        <content type="html"><![CDATA[<p>Telerik RadPropertyGrid 的排序按钮、搜索框和描述面板的显隐只要设置SortAndGroupButtons、SearchBox、DescriptionPanel的属性值改为Visibility.Collapsed就可以了。</p><p>RadPropertyGrid中的属性值设置成combox来选择，效果如下图：<br><img src="/images/2014092517311201.jpg" alt="2014092517311201.jpg"></p><p>界面代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SilverlightCreate.TelerikGrid&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    xmlns:telerik&#x3D;&quot;http:&#x2F;&#x2F;schemas.telerik.com&#x2F;2008&#x2F;xaml&#x2F;presentation&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;300&quot; d:DesignWidth&#x3D;&quot;400&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;White&quot;&gt;        &lt;telerik:RadPropertyGrid x:Name&#x3D;&quot;grid1&quot; Margin&#x3D;&quot;155,0,0,0&quot; AutoGeneratingPropertyDefinition&#x3D;&quot;grid1_AutoGeneratingPropertyDefinition&quot; LabelColumnWidth&#x3D;&quot;100&quot;&gt;        &lt;&#x2F;telerik:RadPropertyGrid&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial class TelerikGrid : UserControl&#123;    public TelerikGrid()    &#123;        InitializeComponent();        grid1.SortAndGroupButtonsVisibility &#x3D; Visibility.Collapsed;        grid1.SearchBoxVisibility &#x3D; Visibility.Collapsed;        grid1.DescriptionPanelVisibility &#x3D; Visibility.Collapsed;        this.grid1.Item &#x3D; new Employee()        &#123;            FirstName &#x3D; &quot;Sarah&quot;,            LastName &#x3D; &quot;Blake&quot;,            Occupation &#x3D; &quot;Supplied Manager&quot;,            StartingDate &#x3D; DateTime.Today,            IsMarried &#x3D; true,            sex &#x3D; Sexs.男        &#125;;            &#125;    private void grid1_AutoGeneratingPropertyDefinition(object sender, Telerik.Windows.Controls.Data.PropertyGrid.AutoGeneratingPropertyDefinitionEventArgs e)    &#123;        e.PropertyDefinition.GroupName &#x3D; &quot;Properties&quot;;    &#125;&#125;public class Employee&#123;    public string FirstName &#123; get; set; &#125;    public string LastName &#123; get; set; &#125;    public string Occupation &#123; get; set; &#125;    public DateTime StartingDate &#123; get; set; &#125;    public bool IsMarried &#123; get; set; &#125;    public Sexs sex &#123; get; set; &#125;&#125;public enum Sexs&#123;     男,    女&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7 桌面图标消失</title>
      <link href="/computer/win7-zhuo-mian-tu-biao-xiao-shi/"/>
      <url>/computer/win7-zhuo-mian-tu-biao-xiao-shi/</url>
      
        <content type="html"><![CDATA[<p>win7 桌面图标消失或任务栏也消失，可以按Ctrl+Shift+Esc键调出任务管理器，然后点击文件——新建任务，输入explorer。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 生成二维码</title>
      <link href="/c-winform/csharp-sheng-cheng-er-wei-ma/"/>
      <url>/c-winform/csharp-sheng-cheng-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<p>QrCode.net地址 <a href="http://qrcodenet.codeplex.com/">http://qrcodenet.codeplex.com</a></p><p>QrCode.net 是用C#编写生成二维码的项目，它支持C#、silverlight、winRT</p><p>新建一个winform程序后，引用Gma.QrCodeNet.Encoding.dll</p><p>然后在工具箱中添加一个选项卡，然后右键选择项，选择Gma.QrCodeNet.Encoding.dll，然后出现如图所示的控件<br><img src="/images/2014090216241301.png" alt="2014090216241301.png"><br>将两个控件拖入winform窗体中<br><img src="/images/2014090216241302.png" alt="2014090216241302.png"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private Color _lightModule &#x3D; Color.FromArgb(220, 100, 203, 50);    private Color _darkModule &#x3D; Color.FromArgb(170, 20, 250, 220);    public FrmQr()    &#123;        InitializeComponent();        qcicHello.DarkBrush &#x3D; new SolidBrush(_darkModule);        qcicHello.LightBrush &#x3D; new SolidBrush(_lightModule);        qcicHello.Text &#x3D; txtInput.Text.Trim();        qcgcHello.Text &#x3D; txtInput.Text.Trim();        ContrastCal();    &#125;    private void btnSave_Click(object sender, EventArgs e)    &#123;        SaveFileDialog saveFileDialog &#x3D; new SaveFileDialog();        saveFileDialog.Filter &#x3D; @&quot;PNG (*.png)|*.png|Bitmap (*.bmp)|*.bmp|Encapsuled PostScript (*.eps)|*.eps|SVG (*.svg)|*.svg&quot;;        saveFileDialog.FileName &#x3D; Path.GetFileName(GetFileNameProposal());        saveFileDialog.DefaultExt &#x3D; &quot;png&quot;;        if (saveFileDialog.ShowDialog() !&#x3D; DialogResult.OK)        &#123;            return;        &#125;        if (saveFileDialog.FileName.EndsWith(&quot;eps&quot;))        &#123;            BitMatrix matrix &#x3D; qcgcHello.GetQrMatrix();            &#x2F;&#x2F; 初始化 the EPS renderer            var renderer &#x3D; new EncapsulatedPostScriptRenderer(                new FixedModuleSize(6, QuietZoneModules.Two), &#x2F;&#x2F; Modules size is 6&#x2F;72th inch (72 points &#x3D; 1 inch)                new FormColor(Color.Black), new FormColor(Color.White));            using (var file &#x3D; File.Open(saveFileDialog.FileName, FileMode.CreateNew))            &#123;                renderer.WriteToStream(matrix, file);            &#125;        &#125;        else if (saveFileDialog.FileName.EndsWith(&quot;svg&quot;))        &#123;            BitMatrix matrix &#x3D; qcgcHello.GetQrMatrix();            &#x2F;&#x2F; 初始化 EPS renderer            var renderer &#x3D; new SVGRenderer(                new FixedModuleSize(6, QuietZoneModules.Two), &#x2F;&#x2F; Modules size is 6&#x2F;72th inch (72 points &#x3D; 1 inch)                new FormColor(Color.FromArgb(150, 200, 200, 210)), new FormColor(Color.FromArgb(200, 255, 155, 0)));            using (var file &#x3D; File.OpenWrite(saveFileDialog.FileName))            &#123;                renderer.WriteToStream(matrix, file, false);            &#125;        &#125;        else        &#123;            GraphicsRenderer gRender &#x3D; new GraphicsRenderer(new FixedModuleSize(30, QuietZoneModules.Four));            BitMatrix matrix &#x3D; qcgcHello.GetQrMatrix();            using (FileStream stream &#x3D; new FileStream(saveFileDialog.FileName, FileMode.Create))            &#123;                gRender.WriteToStream(matrix, ImageFormat.Png, stream, new Point(600, 600));            &#125;        &#125;    &#125;    private void txtInput_TextChanged(object sender, EventArgs e)    &#123;        qcicHello.Text &#x3D; txtInput.Text.Trim();        qcgcHello.Text &#x3D; txtInput.Text.Trim();    &#125;    private string GetFileNameProposal()    &#123;        return txtInput.Text.Length &gt; 10 ? txtInput.Text.Substring(0, 10) : txtInput.Text;    &#125;    private void ContrastCal()    &#123;        SolidBrush darkmoduleBrush &#x3D; qcicHello.DarkBrush as SolidBrush;        SolidBrush lightmoduleBrush &#x3D; qcicHello.LightBrush as SolidBrush;        Color darkmodule &#x3D; darkmoduleBrush &#x3D;&#x3D; null ? _darkModule : darkmoduleBrush.Color;        Color lightmodule &#x3D; lightmoduleBrush &#x3D;&#x3D; null ? _lightModule : lightmoduleBrush.Color;        Contrast ctrast &#x3D; ColorContrast.GetContrast(new FormColor(lightmodule), new FormColor(darkmodule));        label1.Text &#x3D; ctrast.Ratio.ToString();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urlScan 配置阻止sql注入</title>
      <link href="/mysql-sql-oracle/urlscan-pei-zhi-zu-zhi-sql-zhu-ru/"/>
      <url>/mysql-sql-oracle/urlscan-pei-zhi-zu-zhi-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>工具<br><a href="http://download.microsoft.com/download/2/1/9/219764e5-533b-4ce7-95fe-d4e3b98eafea/urlscan_v31_x64.msi">urlscan_v31_x64</a><br><a href="http://download.microsoft.com/download/c/7/a/c7a411ed-1c0f-48c1-90e5-6d3a1ca054c1/urlscan_v31_x86.msi">urlscan_v31_x86</a></p><p>URLScan是一个IIS下的ISAPI 筛选器，它能够限制服务器将要处理的HTTP请求的类型。通过阻止特定的 HTTP 请求，URLScan 筛选器可以阻止可能有害的请求到达服务器并造成危害，urlScan 3.1支持IIS6、IIS7。</p><p>URLScan配置文件在 C:\Windows\System32\inetsrv\urlscan</p><p>下面是配置文件的说明</p><p>UseAllowVerbs&#x3D;1<br>; 允许的请求的HTTP类型;<br>; 如果设置为 1，则[AllowVerbs]生效;<br>; 如果设置为 0，则[AllowVerbs]生效。</p><p>UseAllowExtensions&#x3D;0<br>; 允许请求的后缀类型;<br>; 如果设置为 0，则[DenyExtensions]生效;<br>; 如果设置为 1，则[AllowExtensions]生效。</p><p>NormalizeUrlBeforeScan&#x3D;1<br>; 扫描标准化URL之前。</p><p>VerifyNormalization&#x3D;1<br>; 查证标准化URL。</p><p>AllowHighBitCharacters&#x3D;1<br>; 如果设置为 1，将允许URL中存在所有字节;<br>; 如果设置为 0，含有非ASCII字符的URL将拒绝(如UTF8或者MBCS)。</p><p>AllowDotInPath&#x3D;0<br>; 如果设置为0，则URLScan 拒绝所有包含多个句点 (.) 的请求。</p><p>RemoveServerHeader&#x3D;0<br>;设置为1可隐藏服务器信息。</p><p>EnableLogging&#x3D;1<br>; 开启日志记录</p><p>PerProcessLogging&#x3D;0<br>; 如果设置为0，为每个进程创建日志文件。</p><p>AllowLateScanning&#x3D;0<br>; 如果设置为 0，则 URLScan 作为高优先级筛选器运行。</p><p>PerDayLogging&#x3D;1<br>; 如果设置为 1，则URLScan每天创建一个新的日志文件。</p><p>UseFastPathReject&#x3D;0<br>; 如果设置为 1，则 URLScan 忽略 RejectResponseUrl 设置并立即向浏览器返回 404 错误信息。<br>; 如果设置为 0，则 URLScan 使用 RejectResponseUrl 设置来返回请求。</p><p>LogLongUrls&#x3D;0<br>; 这个属性是UrlScan 3.0及以后的弃用。UrlScan禁止3.0及以后总是包括完整的日志文件的URL。</p><p>UnescapeQueryString&#x3D;1<br>;如果设置为1，UrlScan将执行两个传递查询字符串扫描后与原始查询字符串和一次unescaping<br>;如果设置为0，UrlScan禁止只会看看原始客户端发送的查询字符串</p><p>RejectResponseUrl&#x3D;<br>; 设置用于返回的Url路径</p><p>AlternateServerName&#x3D;<br>; 如果将 RemoveServerHeader设为0，此可自定义服务器关信息。<br>; 如果将 RemoveServerHeader设为1，则此选项将被忽略。</p><p>[AlwaysAllowedUrls]<br>;<br>; 这里列出的url将永远是显式地允许UrlScan禁止并将绕过所有UrlScan禁止检查。列出的url必须用“&#x2F;”字符。例如:<br>;<br>;   &#x2F;SampleURL.htm<br>;</p><p>[DenyUrlSequences]<br>;<br>; 如果任何字符序列列在这里出现在任何的URL请求,该请求将被拒绝。<br>;</p><dl><dt>..  ; 不允许目录遍历<br>.&#x2F;  ; 不允许拖点目录名称<br>\   ; 不允许反斜杠的URL</dt><dd>; 不允许交替流的访问<br>%   ; 不允许正常化后溢出<br>&amp;   ; 不允许多个CGI进程在单个请求中运行</dd></dl><p>在参数中过滤sql注入的一些关键字</p><p>[DenyQueryStringSequences]<br>;<br>;如果任何字符序列这里列出在查询字符串中出现任何请求,该请求将被拒绝。<br>;</p><p>下面是一些常用的关键字就不一一列举了</p><p><strong>&lt;**    ; 常用的脚本注入攻击<br>**&gt;</strong>    ;<br><strong>–</strong>   ;<br>delete ;<br>select ;</p><p>注意：设置好这些以后需要重启一下iis，urlscan才能生效</p><p> 最近有看到了一个防止注入的软件</p><p>地址 <a href="http://www.safedog.cn/install_desc_website.html">http://www.safedog.cn/install_desc_website.html</a></p><p>说明文档 <a href="http://www.safedog.cn/download/software/safedogwz_Windows_Help.pdf">http://www.safedog.cn/download/software/safedogwz_Windows_Help.pdf</a></p><p>参考 <a href="http://blog.csdn.net/huwei2003/article/details/6259757">http://blog.csdn.net/huwei2003/article/details/6259757</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 中防止sql注入</title>
      <link href="/web/web-zhong-fang-zhi-sql-zhu-ru/"/>
      <url>/web/web-zhong-fang-zhi-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class SqlInject:Page &#123;     &#x2F;&#x2F;检测到注入后的处理方式: 0:仅警告；1：警告+记录；2：警告+自定义错误页面；3：警告+记录+自定义错误页面       private const int _type &#x3D; 0;     private const string errRedirectPage &#x3D; &quot;&#x2F;err.aspx&quot;;     &#x2F;&#x2F;如果记录注入信息，那么请设置：errMDBpath：数据库路径       private const string errMDBpath &#x3D; &quot;&#x2F;SqlInject.mdb&quot;;     &#x2F;&#x2F;过滤特征字符       &#x2F;&#x2F;过滤特征字符       private static string StrKeyWord &#x3D; ConfigurationManager.AppSettings[&quot;SqlKeyWord&quot;]; &#x2F;&#x2F;@&quot;select|insert|delete|from|count(|drop table|update|truncate|asc(|mid(|char(|xp_cmdshell|exec|master|net local group administrators|net user|or|and&quot;;       private static string StrRegex &#x3D; ConfigurationManager.AppSettings[&quot;SqlRegex&quot;];  &#x2F;&#x2F;@&quot;;|&#x2F;|(|)|[|]|&#123;|&#125;|%|@|*|&#39;|!&quot;; &#x2F;&#x2F; 原始过滤条件：【-|;|,|&#x2F;|(|)|[|]|&#123;|&#125;|%|@|*|&#39;|!】       private HttpRequest request;     public SqlInject(System.Web.HttpRequest _request)     &#123;         this.request &#x3D; _request;     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F;检测SQL注入及记录、显示出错信息       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       public void CheckSqlInject()     &#123;         bool isInject &#x3D; false;         if (CheckRequestQuery() || CheckRequestForm())         &#123;             isInject &#x3D; true;         &#125;         else         &#123;             return;         &#125;         switch (_type)         &#123;             case 0:                 ShowErr();                 break;             case 1:                 ShowErr();                 SaveToMdb();                 break;             case 2:                 ShowErr();                 string temp;                 System.Web.HttpContext.Current.Response.Write(&quot;&lt;script&gt;setTimeout(\&quot;&quot; + &quot;location.href&#x3D;&#39;&quot; + errRedirectPage + &quot;&#39;&quot; + &quot;\&quot;,5000)&lt;&#x2F;script&gt;&quot;);                 break;             case 3:                 ShowErr();                 SaveToMdb();                 System.Web.HttpContext.Current.Response.Write(&quot;&lt;script&gt;setTimeout(\&quot;&quot; + &quot;location.href&#x3D;&#39;&quot; + errRedirectPage + &quot;&#39;&quot; + &quot;\&quot;,5000)&lt;&#x2F;script&gt;&quot;);                 break;             default:                 break;         &#125;         System.Web.HttpContext.Current.Response.End();     &#125;     private void SaveToMdb()     &#123;         OleDbConnection conn &#x3D; new OleDbConnection(&quot;Provider&#x3D;Microsoft.JET.OLEDB.4.0;Data Source&#x3D;&quot; + Server.MapPath(errMDBpath));         conn.Open();         OleDbCommand cmd &#x3D; conn.CreateCommand();         cmd.CommandText &#x3D; &quot;insert into [Record] (sIP,sDate,sPath) values (&#39;&quot; +              request.ServerVariables[&quot;REMOTE_ADDR&quot;].ToString() + &quot;&#39;,&#39;&quot; +              DateTime.Now + &quot;&#39;,&#39;&quot; + request.ServerVariables[&quot;URL&quot;].ToLower() + RelaceSingleQuotes(request.QueryString.ToString()) + &quot;&#39;)&quot;;         int code &#x3D; cmd.ExecuteNonQuery();         if (code &#x3D;&#x3D; 1)             HttpContext.Current.Response.Write(&quot;&lt;br&gt;****以上信息已记录至日志数据库****&quot;);         else             HttpContext.Current.Response.Write(&quot;&lt;br&gt;日志数据库出错&quot;);         conn.Close();     &#125;     private string RelaceSingleQuotes(string _url)     &#123;         string URL &#x3D; _url.Replace(&quot;&#39;&quot;, &quot;单引号&quot;);         return URL;     &#125;     private void ShowErr()     &#123;         &#x2F;&#x2F;string msg &#x3D; @&quot;&lt;font color&#x3D;red&gt;请不要尝试未授权之入侵检测！&lt;&#x2F;font&gt;&quot; + @&quot;&lt;br&gt;&lt;br&gt;&quot;;           &#x2F;&#x2F;msg +&#x3D; @&quot;操作IP：&quot; + request.ServerVariables[&quot;REMOTE_ADDR&quot;] + @&quot;&lt;br&gt;&quot;;           &#x2F;&#x2F;msg +&#x3D; @&quot;操作时间：&quot; + DateTime.Now + @&quot;&lt;br&gt;&quot;;           &#x2F;&#x2F;msg +&#x3D; @&quot;页面：&quot; + request.ServerVariables[&quot;URL&quot;].ToLower() + request.QueryString.ToString() + @&quot;&lt;br&gt;&quot;;           &#x2F;&#x2F;msg +&#x3D; @&quot;&lt;a href&#x3D;&#39;#&#39; onclick&#x3D;&#39;javascript:window.close()&#39;&gt;关闭&lt;&#x2F;a&gt;&quot;;           &#x2F;&#x2F;System.Web.HttpContext.Current.Response.Clear();           &#x2F;&#x2F;System.Web.HttpContext.Current.Response.Write(msg);           HttpContext.Current.Response.Write(&quot;&lt;script&gt;alert(&#39;请不要尝试未授权之入侵检测！&#39;);javascript:history.go(-1);&lt;&#x2F;script&gt;&quot;);     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F; 特征字符       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       public static string KeyWord     &#123;         get         &#123;             return StrKeyWord;         &#125;     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F; 特征符号       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       public static string RegexString     &#123;         get         &#123;             return StrRegex;         &#125;     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F;检查字符串中是否包含Sql注入关键字       &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_key&quot;&gt;被检查的字符串&lt;&#x2F;param&gt;       &#x2F;&#x2F;&#x2F; &lt;returns&gt;如果包含注入true;否则返回false&lt;&#x2F;returns&gt;       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       private static bool CheckKeyWord(string _key)     &#123;         string[] pattenString &#x3D; StrKeyWord.Split(&#39;|&#39;);         string[] pattenRegex &#x3D; StrRegex.Split(&#39;|&#39;);         foreach (string sqlParam in pattenString)         &#123;             if (_key.Contains(sqlParam + &quot; &quot;) || _key.Contains(&quot; &quot; + sqlParam))             &#123;                 return true;             &#125;         &#125;         foreach (string sqlParam in pattenRegex)         &#123;             if (_key.Contains(sqlParam))             &#123;                 return true;             &#125;         &#125;         return false;     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F;检查URL中是否包含Sql注入       &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_request&quot;&gt;当前HttpRequest对象&lt;&#x2F;param&gt;       &#x2F;&#x2F;&#x2F; &lt;returns&gt;如果包含注入true;否则返回false&lt;&#x2F;returns&gt;       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       public bool CheckRequestQuery()     &#123;         if (request.QueryString.Count &gt; 0)         &#123;             foreach (string sqlParam in this.request.QueryString)             &#123;                 if (sqlParam &#x3D;&#x3D; &quot;__VIEWSTATE&quot;) continue;                 if (sqlParam &#x3D;&#x3D; &quot;__EVENTVALIDATION&quot;) continue;                 if (CheckKeyWord(request.QueryString[sqlParam].ToLower()))                 &#123;                     return true;                 &#125;             &#125;         &#125;         return false;     &#125;     &#x2F;&#x2F;&#x2F;&lt;summary&gt;       &#x2F;&#x2F;&#x2F;检查提交的表单中是否包含Sql注入       &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_request&quot;&gt;当前HttpRequest对象&lt;&#x2F;param&gt;       &#x2F;&#x2F;&#x2F; &lt;returns&gt;如果包含注入true;否则返回false&lt;&#x2F;returns&gt;       &#x2F;&#x2F;&#x2F;&lt;&#x2F;summary&gt;       public bool CheckRequestForm()     &#123;         if (request.Form.Count &gt; 0)         &#123;             foreach (string sqlParam in this.request.Form)             &#123;                 if (sqlParam &#x3D;&#x3D; &quot;__VIEWSTATE&quot;) continue;                 if (sqlParam &#x3D;&#x3D; &quot;__EVENTVALIDATION&quot;) continue;                 if (CheckKeyWord(request.Form[sqlParam]))                 &#123;                     return true;                 &#125;             &#125;         &#125;         return false;     &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web编程中都有被sql注入的风险，要防止sql注入，最基本就是从编写代码的时候开始防护</p><p>在web.config中加入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlKeyWord<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select|insert|delete|from|count(|drop table|update|truncate|asc(|mid(|char(|xp_cmdshell|exec|master|net local group administrators|net user|or|and<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlRegex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>;|(|)|[|]|&#123;|&#125;|%|@|*|'|!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Global文件中加入</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">void Application_BeginRequest(object sender, EventArgs e)&#123;    &#x2F;&#x2F;防SQL注入代码       SqlInject myCheck &#x3D; new SqlInject(this.Request);    myCheck.CheckSqlInject();  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于软件方面的防护，微软官方给了一个UrlScan的工具</p><p><a href="http://download.microsoft.com/download/c/7/a/c7a411ed-1c0f-48c1-90e5-6d3a1ca054c1/urlscan_v31_x86.msi">urlScanx86</a><br><a href="http://download.microsoft.com/download/2/1/9/219764e5-533b-4ce7-95fe-d4e3b98eafea/urlscan_v31_x64.msi">urlScanx64</a></p><p>安装完软件后要重启一下iis才能生效</p><p>转载自 <a href="http://netsecurity.51cto.com/art/201301/375797_1.htm">http://netsecurity.51cto.com/art/201301/375797_1.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#读取Oracle Spatial的sdo_geometry</title>
      <link href="/mysql-sql-oracle/csharp-du-qu-oracle-spatial-de-sdo-geometry/"/>
      <url>/mysql-sql-oracle/csharp-du-qu-oracle-spatial-de-sdo-geometry/</url>
      
        <content type="html"><![CDATA[<p>oracle的sdo_geometry中内置get_wkt和get_wkb两个方法。</p><p>以数据库表geoms为例，此表中有id和geometry两列</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">try&#123;    OracleConnection con &#x3D; new OracleConnection(conStr);    OracleCommand cmd &#x3D; new OracleCommand(@&quot;SELECT sdo_geometry.get_wkt(geometry) FROM geoms WHERE id&#x3D; 1902 &quot;, con);    con.Open();    OracleDataReader read &#x3D; cmd.ExecuteReader();    if (read.Read())    &#123;        string geo &#x3D; ((OracleClob)read.GetOracleValue(0)).Value;        MessageBox.Show(geo);    &#125;&#125;catch (Exception ex)&#123;    throw;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询出的结果如下所示<br>POINT (113.3293658 23.14338586)<br>POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))</p><p>wkt和wkb介绍</p><p>wkt(OGC well-known text)和wkb(OGC well-known binary)是OGC制定的空间数据的组织规范，wkt是以文本形式描述，wkb是以二进制形式描述。<br>使用wkt和wkb能够很好到和其他系统进行数据交换，目前大部分支持空间数据存储的数据库构造空间数据都采用这两种方式。<br>wkt的组织结构如下：</p><p>Geometry type     Text description     Comment<br>ST_Point     ‘point empty’     empty point<br>ST_Point     ‘point z empty’     empty point with z-coordinate<br>ST_Point     ‘point m empty’     empty point with measure<br>ST_Point     ‘point zm empty’     empty point with z-coordinate and measure<br>ST_Point     ‘point ( 10.05 10.28 )’     point<br>ST_Point     ‘point z( 10.05 10.28 2.51 )’     point with z-coordinate<br>ST_Point     ‘point m( 10.05 10.28 4.72 )’     point with measure<br>ST_Point     ‘point zm(10.05 10.28 2.51 4.72 )’     point with z-coordinate and measure<br>ST_LineString     ‘linestring empty’     empty linestring<br>ST_LineString     ‘linestring z empty’     empty linestring with z-coordinates<br>ST_LineString     ‘linestring m empty’     empty linestring with measures<br>ST_LineString     ‘linestring zm empty’     empty linestring with z-coordinates and measures<br>ST_LineString     ‘linestring (10.05 10.28 , 20.95 20.89 )’     linestring<br>ST_LineString     ‘linestring z(10.05 10.28 3.09, 20.95 31.98 4.72, 21.98 29.80 3.51 )’     linestring with z-coordinates<br>ST_LineString     ‘linestring m(10.05 10.28 5.84, 20.95 31.98 9.01, 21.98 29.80 12.84 )’     linestring with measures<br>ST_LineString     ‘linestring zm(10.05 10.28 3.09 5.84, 20.95 31.98 4.72 9.01, 21.98 29.80 3.51 12.84)’     linestring with z-coordinates and measures<br>ST_Polygon     ‘polygon empty’     empty polygon<br>ST_Polygon     ‘polygon z empty’     empty polygon with z-coordinates<br>ST_Polygon     ‘polygon m empty’     empty polygon with measures<br>ST_Polygon     ‘polygon zm empty’     empty polygon with z-coordinates and measures<br>ST_Polygon     ‘polygon ((10 10, 10 20, 20 20, 20 15, 10 10))’     polygon<br>ST_Polygon     ‘polygon z((10 10 3, 10 20 3, 20 20 3, 20 15 4, 10 10 3))’     polygon with z-coordinates<br>ST_Polygon     ‘polygon m((10 10 8, 10 20 9, 20 20 9, 20 15 9, 10 10 8 ))’     polygon with measures<br>ST_Polygon     ‘polygon zm((10 10 3 8, 10 20 3 9, 20 20 3 9, 20 15 4 9, 10 10 3 8 ))’     polygon with z-coordinates and measures<br>ST_MultiPoint     ‘multipoint empty’     empty multipoint<br>ST_MultiPoint     ‘multipoint z empty’     empty multipoint with z-coordinates<br>ST_MultiPoint     ‘multipoint m empty’     empty multipoint with measures<br>ST_MultiPoint     ‘multipoint zm empty’     empty multipoint with z-coordinates and measures<br>ST_MultiPoint     ‘multipoint (10 10, 20 20)’     multipoint with two points<br>ST_MultiPoint     ‘multipoint z(10 10 2, 20 20 3)’     multipoint with z-coordinates<br>ST_MultiPoint     ‘multipoint m(10 10 4, 20 20 5)’     multipoint with measures<br>ST_MultiPoint     ‘multipoint zm(10 10 2 4, 20 20 3 5)’     multipoint with z-coordinates and measures<br>ST_MultiLineString     ‘multilinestring empty’     empty multilinestring<br>ST_MultiLineString     ‘multilinestring z empty’     empty multilinestring with z-coordinates<br>ST_MultiLineString     ‘multilinestring m empty’     empty multilinestring with measures<br>ST_MultiLineString     ‘multilinestring zm empty’     empty multilinestring with z-coordinates and measures<br>ST_MultiLineString     ‘multilinestring ((10.05 10.28 , 20.95 20.89 ),( 20.95 20.89, 31.92 21.45))’     multilinestring<br>ST_MultiLineString     ‘multilinestring z((10.05 10.28 3.4, 20.95 20.89 4.5),( 20.95 20.89 4.5, 31.92 21.45 3.6))’     multilinestring with z-coordinates<br>ST_MultiLineString     ‘multilinestring m((10.05 10.28 8.4, 20.95 20.89 9.5), (20.95 20.89 9.5, 31.92 21.45 8.6))’     multilinestring with measures<br>ST_MultiLineString     ‘multilinestring zm((10.05 10.28 3.4 8.4, 20.95 20.89 4.5 9.5), (20.95 20.89 4.5 9.5, 31.92 21.45 3.6 8.6))’     multilinestring with z-coordinates and measures<br>ST_MultiPolygon     ‘multipolygon empty’     empty multipolygon<br>ST_MultiPolygon     ‘multipolygon z empty’     empty multipolygon with z-coordinates<br>ST_MultiPolygon     ‘multipolygon m empty’     empty multipolygon with measures<br>ST_MultiPolygon     ‘multipolygon zm empty’     empty<br>ST_MultiPolygon     ‘multipolygon (((10 10, 10 20, 20 20, 20 15 , 10 10), (50 40, 50 50, 60 50, 60 40, 50 40)))’     multipolygon<br>ST_MultiPolygon     ‘multipolygon z(((10 10 7, 10 20 8, 20 20 7, 20 15 5, 10 10 7), (50 40 6, 50 50 6, 60 50 5, 60 40 6, 50 40 6)))’     multipolygon with z-coordinates<br>ST_MultiPolygon     ‘multipolygon m(((10 10 2, 10 20 3, 20 20 4, 20 15 5, 10 10 2), (50 40 7, 50 50 3, 60 50 4, 60 40 5, 50 40 7)))’     multipolygon with measures<br>ST_MultiPolygon     ‘multipolygon zm(((10 10 7 2, 10 20 8 3, 20 20 7 4, 20 15 5 5, 10 10 7 2), (50 40 6 7, 50 50 6 3, 60 50 5 4, 60 40 6 5, 50 40 6 7)))’     multipolygon with z-coordinates and measures</p><p>wkb的组织结构如下：<br>基本类型定义：<br>byte : 1 byte<br>uint32 : 32 bit unsigned integer  (4 bytes)<br>double : double precision number (8 bytes)<br>Building Blocks : Point, LinearRing<br>Point {<br>double x;<br>double y;<br>};<br>LinearRing   {<br>uint32 numPoints;<br>Point points[numPoints];<br>}<br>enum wkbGeometryType {<br>wkbPoint &#x3D; 1,<br>wkbLineString &#x3D; 2,<br>wkbPolygon &#x3D; 3,<br>wkbMultiPoint &#x3D; 4,<br>wkbMultiLineString &#x3D; 5,<br>wkbMultiPolygon &#x3D; 6,<br>wkbGeometryCollection &#x3D; 7<br>};<br>enum wkbByteOrder {<br>wkbXDR &#x3D; 0,     Big Endian<br>wkbNDR &#x3D; 1     Little Endian<br>};<br>WKBPoint {<br>byte    byteOrder;<br>uint32   wkbType;       1<br>Point    point;<br>}<br>WKBLineString {<br>byte    byteOrder;<br>uint32   wkbType;      2<br>uint32   numPoints;<br>Point    points[numPoints];<br>}<br>WKBPolygon {<br>byte    byteOrder;<br>uint32   wkbType;      3<br>uint32   numRings;<br>LinearRing  rings[numRings];<br>}<br>WKBMultiPoint {<br>byte    byteOrder;<br>uint32   wkbType;          4<br>uint32   num_wkbPoints;<br>WKBPoint   WKBPoints[num_wkbPoints];<br>}<br>WKBMultiLineString {<br>byte    byteOrder;<br>uint32   wkbType;      5<br>uint32   num_wkbLineStrings;<br>WKBLineString WKBLineStrings[num_wkbLineStrings];<br>}<br>wkbMultiPolygon {<br>byte    byteOrder;       </p><p>uint32   wkbType;      6<br>uint32   num_wkbPolygons;<br>WKBPolygon  wkbPolygons[num_wkbPolygons];<br>}<br>WKBGeometry  {<br>union {<br>WKBPoint      point;<br>WKBLineString    linestring;<br>WKBPolygon     polygon;<br>WKBGeometryCollection collection;<br>WKBMultiPoint    mpoint;<br>WKBMultiLineString  mlinestring;<br>WKBMultiPolygon   mpolygon;<br>}<br>};<br>WKBGeometryCollection {<br>byte    byte_order;<br>uint32   wkbType;      7<br>uint32   num_wkbGeometries;<br>WKBGeometry  wkbGeometries[num_wkbGeometries]<br>}<br>下面是一个point(1,1) 使用WKB存储的例子：<br>0101000000000000000000F03F000000000000F03F<br>这个2进制流可以按照WKBPoint的结构进行拆分：<br>Byte order : 01<br>WKB type   : 01000000<br>X          : 000000000000F03F<br>Y          : 000000000000F03F<br>byte order要么为0，要么为1，0为使用little-endian编码(NDR)，1为使用big-endian编码(XDR)。<br>WKB type 是几何类型，在wkbGeometryType中定义. 值为1-7，分别对应 Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection.<br>x,y为点的坐标值，为double类型。</p><p>sdo_geometry的详细介绍</p><p>在ArcGIS中通过SDE存储空间数据到Oracle中有多种存储方式，分别有：二进制Long Raw 、ESRI的ST_Geometry以及基于Oracle Spatial的SDO_Geometry等等。 <a href="http://www.cnblogs.com/upDOoGIS/archive/2009/05/20/1469871.html">UpDooGIS原创</a></p><p>关于这几种方式的各自的优缺点不是主要的探讨的方向，这些我们可以通ArcGIS中的ArcGIS Server Help得到相关的帮助。这里主要是学习关于基Oracle Spatial的存储方式，通过这种存储方式几何列Shape的字段类型mdsys.sde_geometry类型。</p><p>Oracle Spatial定义的SDO_GEOMETRY类型为：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TYPE sdo_geometry AS OBJECT (    SDO_GTYPE   NUMBER,  &#x2F;&#x2F;前面字符串为字段名；后面字符串为字段类型    SDO_SRID    NUMBER,    SDO_POINT    SDO_POINT_TYPE,    SDO_ELEM_INFO    SDO_ELEM_INFO_ARRAY,    SDO_ORDINATES    SDO_ORDINATE_ARRAY);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中sdo_geometry AS OBJECT ，标识该类型为对象类型。开始我们可以想它为ArcObjects中的Geometry对象（本来要素的shape字段中的对象就是Geometry），而不要理解他是怎么样组织的。至于该类型中SDO_POINT_TYPE、SDO_ELEM_INFO_ARRAY、 SDO_ORDINATE_ARRAY也Oracle Spatial自定义的类型和 sdo_geometry 是一样的。</p><p>现在对sdo_geometry 类型中的各个参数简单的介绍：</p><ol><li><p>SDO_GTYPE ：表示要存储的几何类型，如点线面。它是通过 NUMBER类型来表达的；</p></li><li><p>SDO_SRID ：几何的空间参考坐标系，类型也为 NUMBER；</p></li><li><p>SDO_POINT ：如果几何类型点类型的话，就是存储点坐标，否则为空。oracle自定义的SDO_POINT_TYPE类型；</p></li><li><p>SDO_ELEM_INFO ：定义要如何理解SDO_ORDINATES中的坐标串的；</p></li><li><p>SDO_ORDINATES ：存储实际坐标的，以X、Y以及不同点之间都是逗号隔开；</p></li></ol><p>  下面将详细介绍这些字段参数的含义</p><h3 id="一、SDO-GTYPE"><a href="#一、SDO-GTYPE" class="headerlink" title="一、SDO_GTYPE"></a>一、SDO_GTYPE</h3><p>   SDO_GTYPE值是有四位数字组成的，它们的格式为：dltt 。 </p><p>   其中，d 表示几何的维数。如二维、三维对应的d&#x3D;2和d&#x3D;3；</p><p>   l 定义了LRS。一般l&#x3D;0；</p><p>   tt 定义了地理对象的类型。现在使用从00到07，如tt&#x3D;01代表为单点；</p><p>下面就是t&#x3D;2的二维几何类型，SDO_GTYPE参数值具体，如 <strong>图1</strong>：<br><img src="/images/2014062615231201.jpg" alt="2014062615231201.jpg"></p><h3 id="二、SDO-SRID"><a href="#二、SDO-SRID" class="headerlink" title="二、SDO_SRID"></a>二、SDO_SRID</h3><p>SDO_SRID定义了空间坐标参考系统。如果SDO_SRID为null，则没有指定标系统，如果SDO_SRID不为null，那么它的值必须在在 MDSYS.S_SRS 表中的 SRID 列有对应的值，而且它的值必须插入SER_SDO_GEOM_METADATA视图中。MDSYS.CS_SRS 表参考 <strong>图3</strong><br><img src="/images/2014062615231202.jpg" alt="2014062615231202.jpg"></p><h3 id="三、-SDO-POINT"><a href="#三、-SDO-POINT" class="headerlink" title="三、 SDO_POINT"></a>三、 SDO_POINT</h3><p>SDO_POINT类型的构造方法为：sdo_point_type(x,y,z)，其中x,y,类型为Double和Int都可<br>SDO_POINT字段定义为含有X、Y、Z属性的SDO_POINT_TYPE类型。如几何类型为点类型的话，SDO_ELEM_INFO 和SDO_ORDINATES对应值都为Null，SDO_POINT 不为空。其它情况下，SDO_POINT会被patial所忽略即设为 Null。如果这个层只有点对象，那么推荐你将保存在SDO_POINT属性中。 SDO_POINT_TYPE类型的定义如下：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TYPE sdo_point_type AS OBJECT (     X    NUMBER,  &#x2F;&#x2F;X坐标值     Y    NUMBER,  &#x2F;&#x2F;y坐标值     Z    NUMBER); &#x2F;&#x2F;z坐标值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、SDO-ELEM-INFO"><a href="#四、SDO-ELEM-INFO" class="headerlink" title="四、SDO_ELEM_INFO"></a>四、SDO_ELEM_INFO</h3><p>SDO_ELEM_INFO类型的构造方法为：sdo_elem_info_array（a,b.c)，其a,b.c为Number类型。<br>SDO_ELEM_INFO是理解和掌握SDO_Geometry的重点和难点，DO_ELEM_INFO 定义了如何理解SDO_ORDINATES中的坐标字符串属性。<br>SDO_ELEM_INFO每三个数字组合为一个SDO_ELEM_INFO属性单元（具体可结合下面的例子理解）。<br>每个SDO_ELEM_INFO属性单元由：SDO_STARTING_OFFSET、SDO_ETYPE SDO_INTERPRETATION 组成。下面介绍一下这三个数字的具体含义：</p><h5 id="4-1、SDO-STARTING-OFFSET：声明了组成当前几何片段的第一个坐标在SDO-ORDINATES数组中的坐标序号。坐标序号是从1开-始起算的而非从0开始。这里的SDO-ORDINATES就是sdo-geometry-中的坐标序列，坐标序列是已逗号隔开的数字，具体的计算如：sdo-ordinate-array-1-4-6-7-8-9-中如果以’6’开始几何片段-的话，坐标序号SDO-STARTING-OFFSET-3。（具体参考下面的例子理解）"><a href="#4-1、SDO-STARTING-OFFSET：声明了组成当前几何片段的第一个坐标在SDO-ORDINATES数组中的坐标序号。坐标序号是从1开-始起算的而非从0开始。这里的SDO-ORDINATES就是sdo-geometry-中的坐标序列，坐标序列是已逗号隔开的数字，具体的计算如：sdo-ordinate-array-1-4-6-7-8-9-中如果以’6’开始几何片段-的话，坐标序号SDO-STARTING-OFFSET-3。（具体参考下面的例子理解）" class="headerlink" title="4.1、SDO_STARTING_OFFSET：声明了组成当前几何片段的第一个坐标在SDO_ORDINATES数组中的坐标序号。坐标序号是从1开 始起算的而非从0开始。这里的SDO_ORDINATES就是sdo_geometry 中的坐标序列，坐标序列是已逗号隔开的数字，具体的计算如：sdo_ordinate_array(1,4,6,7,8,9)中如果以’6’开始几何片段 的话，坐标序号SDO_STARTING_OFFSET&#x3D;3。（具体参考下面的例子理解）"></a>4.1、SDO_STARTING_OFFSET：声明了组成当前几何片段的第一个坐标在SDO_ORDINATES数组中的坐标序号。坐标序号是从1开 始起算的而非从0开始。这里的SDO_ORDINATES就是sdo_geometry 中的坐标序列，坐标序列是已逗号隔开的数字，具体的计算如：sdo_ordinate_array(1,4,6,7,8,9)中如果以’6’开始几何片段 的话，坐标序号SDO_STARTING_OFFSET&#x3D;3。（具体参考下面的例子理解）</h5><h5 id="4-2、SDO-ETYPE-：声明元素的类型。可结合-SDO-STARTING-OFFSET和SDO-ETYPE-表来理解"><a href="#4-2、SDO-ETYPE-：声明元素的类型。可结合-SDO-STARTING-OFFSET和SDO-ETYPE-表来理解" class="headerlink" title="4.2、SDO_ETYPE ：声明元素的类型。可结合 SDO_STARTING_OFFSET和SDO_ETYPE 表来理解."></a>4.2、SDO_ETYPE ：声明元素的类型。可结合 SDO_STARTING_OFFSET和SDO_ETYPE 表来理解.</h5><p>SDO_ETYPE 值 &#x3D; 1, 2, 1003,或2003，说明几何为简单的几何类型。可以全部按SDO_ELEM_INFO 属性单元【即三个以逗号隔开的数】来理解sdo_ordinate_array中的坐标序列。</p><p>特别说明：SDO_ETYPE 值 &#x3D; 1003 ，假如几何类型为面，则表示为外多边形环（以逆时针顺序）</p><p>SDO_ETYPE 值 &#x3D; 2003 ，假如几何类型为面，则表示为内多边形环（以顺时针顺序）</p><p>SDO_ETYPE 值 &#x3D; 4,1005或2005，说明几何为组合元素，往往第一个三数字组不是SDO_ELEM_INFO 属性单元，而是为了说明组合元素的信息。具体可以参见下面 复杂多义线 和 复杂多边形 的例子。</p><h5 id="4-3、SDO-INTERPRETATION：有两种可能的意思，依赖地SDO-ETYPE是否是组合元素。如果SDO-ETYPE-值-4-1005或2005，标识的是有多少组合部分，具体参考-复杂多义线-和-复杂多边形-的例子。如果SDO-ETYPE-值-1-2-1003-或2003，标识决定了元素坐标队列的翻译顺序。"><a href="#4-3、SDO-INTERPRETATION：有两种可能的意思，依赖地SDO-ETYPE是否是组合元素。如果SDO-ETYPE-值-4-1005或2005，标识的是有多少组合部分，具体参考-复杂多义线-和-复杂多边形-的例子。如果SDO-ETYPE-值-1-2-1003-或2003，标识决定了元素坐标队列的翻译顺序。" class="headerlink" title="4.3、SDO_INTERPRETATION：有两种可能的意思，依赖地SDO_ETYPE是否是组合元素。如果SDO_ETYPE 值 &#x3D; 4,1005或2005，标识的是有多少组合部分，具体参考 复杂多义线 和 复杂多边形 的例子。如果SDO_ETYPE 值 &#x3D; 1, 2, 1003,或2003，标识决定了元素坐标队列的翻译顺序。"></a>4.3、SDO_INTERPRETATION：有两种可能的意思，依赖地SDO_ETYPE是否是组合元素。如果SDO_ETYPE 值 &#x3D; 4,1005或2005，标识的是有多少组合部分，具体参考 复杂多义线 和 复杂多边形 的例子。如果SDO_ETYPE 值 &#x3D; 1, 2, 1003,或2003，标识决定了元素坐标队列的翻译顺序。</h5><p>SDO_STARTING_OFFSET和SDO_ETYPE 表  如下<strong>图4:</strong><br><img src="/images/2014062615231203.jpg" alt="2014062615231203.jpg"></p><h3 id="五、SDO-ORDINATES"><a href="#五、SDO-ORDINATES" class="headerlink" title="五、SDO_ORDINATES"></a>五、SDO_ORDINATES</h3><p>SDO_ORDINATES类型的构造方法为：sdo_ordinate_array(x1,y1,x2,y2,……)，其中x1,y1类型等为Double和Int都可。</p><p>SDO_ORDINATES存储的是空间对象的几何节点坐标序列，用逗号将X、Y、Z以及不同点之间隔开，该字段性质：长 度&#x3D;1048576的数字Number类型。如果几何为二维的情况，存储的序列为{Y1, X2, Y2, X3, Y3, X4, Y4……}格式；几何为三维坐标的话，如三维坐标的多边形它的存储的序列为{X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4, X1, Y1, Z1}格式。坐标序列中的数据必须都合法且不为空。具体坐标的组合成几何的结合SDO_ELEM_INFO来理解。</p><h3 id="六、参考例子"><a href="#六、参考例子" class="headerlink" title="六、参考例子"></a>六、参考例子</h3><h5 id="6-1、矩形"><a href="#6-1、矩形" class="headerlink" title="6.1、矩形"></a>6.1、矩形</h5><p>矩形的具体几何形状和坐标，如下图：<br><img src="/images/2014062615231204.gif" alt="2014062615231204.gif"><br>用SDO_GEOMETRY定义该矩形，如何确定sdo_geometry()构造方法中的各个参数值。详细解释如下：</p><p>SDO_GTYPE &#x3D; 2003；2003中的2表示二维数据，2003中的3表示表示多边形。具体参考 图1</p><pre><code>SDO_SRID = NULL；SDO_POINT = NULL；SDO_ELEM_INFO = (1, 1003, 3).；在属性单元SDO_ELEM_INFO （1,1003,3）中的最后一个3表示该几何为矩形，具体参考 图4 。</code></pre><p>—因为它是矩形且为二维所以它的构造方法为：sdo_point_type（坐下坐标，右上坐标）。</p><pre><code>SDO_ORDINATES = (1,1, 5,7). 定义了具体的坐下坐标和右上坐标的坐标序列。</code></pre><p>例子：用SQL 命令插入一个矩形：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">INSERT INTO beniy388 VALUES(   1,          &#x2F;&#x2F;其他的属性字段的值   &#39;UpDooGIS&#39;,    &#x2F;&#x2F;其他的属性字段的值   MDSYS.SDO_GEOMETRY(  &#x2F;&#x2F;几何字段SDO_GEOMETRY的值               2003,  -- 二维多边形               NULL,               NULL,               MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,3), -- 一个矩形(1003为逆时针方向)               MDSYS.SDO_ORDINATE_ARRAY(1,1, 5,7) -- 只需要两点  ) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-2、有岛多边形"><a href="#6-2、有岛多边形" class="headerlink" title="6.2、有岛多边形"></a>6.2、有岛多边形</h5><p>有岛多边形的具体几何形状和坐标，如下图：<br><img src="/images/2014062615231205.gif" alt="2014062615231205.gif"></p><p>用SDO_GEOMETRY定义该多边形，如何确定sdo_geometry()构造方法中的各个参数值。详细解释如下：  </p><p>SDO_GTYPE &#x3D; 2003；—2003中的2表示二维数据，2003中的3表示表示多边形。具体参考 图1</p><pre><code>SDO_SRID = NULL；SDO_POINT = NULL；SDO_ELEM_INFO = (1,1003,1, 19,2003,1)； ---有两个三元组SDO_ELEM_INFO属性元素。具体参考 图4---其中1003表明对应的坐标序列组成的几何A为外多边形环(顺时针)；而2003表明对应的坐标序列组成的几何B为内多边形环(逆时针)。---19 表示几何B坐标序列开始的位置，也就是说从19开始的几何坐标组成几何B，而1到18组成几何A。SDO_ORDINATES = (10,10, 10,14, 6,10, 14,10)；---坐标系列 </code></pre><p>例子：用SQL 命令插入一个有岛的多边形：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">INSERT INTO beniy388 VALUES          10,                   &#x2F;&#x2F;其他的属性字段的值         &#39;UpDooGIS&#39;,       &#x2F;&#x2F;其他的属性字段的值          MDSYS.SDO_GEOMETRY(  &#x2F;&#x2F;几何字段SDO_GEOMETRY的值                     2003,                     NULL,                     NULL,                     MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1, 19,2003,1), -- 有岛多边形                     MDSYS.SDO_ORDINATE_ARRAY(2,4, 4,3, 10,3, 13,5, 13,9, 11,13, 5,13, 2,11, 2,4,7,5, 7,10, 10,10, 10,5, 7,5)         ));  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-3、复杂多义线"><a href="#6-3、复杂多义线" class="headerlink" title="6.3、复杂多义线"></a>6.3、复杂多义线</h5><p>下图描述的是一个由一条直线和一条曲线构成的复杂多义线。图中出现了4个点，(10,10)和(10,14)点表示的是直线 ；10,14), (10,6), 和 (14,10) 描述的是圆弧曲线：<br><img src="/images/2014062615231206.gif" alt="2014062615231206.gif"></p><p>用SDO_GEOMETRY定义该复杂多义线，如何确定sdo_geometry()构造方法中的各个参数值。详细解释如下：</p><p>SDO_GTYPE &#x3D; 2002；2002中的2表示二维数据，第二个2表示表示一条或多条直线段。具体参考 图1。</p><pre><code>DO_SRID = NULL；SDO_POINT = NULL；SDO_ELEM_INFO = (1,4,2, 1,2,1, 3,2,2). ---有三个三元组，其中后两个是SDO_ELEM_INFO属性元素三元组，前一个为表述组合。具体参考 图4。---第一个三元组【1,4,2】，根据4可以得到是个描述三元组，2表示有两个几何元素组成，即后两个三元组描述各自的几何A和几何B。---第二个三元组【1,2,1】，为SDO_ELEM_INFO属性元素三元组，它描述的是几何A。根据 图4可以得到它是一条直线段，且该直线段的最后一个节点还是下一个几何B的开始点，即几何A和几何B有几何节点重合。---第二个三元组【3,2,2】，为SDO_ELEM_INFO属性元素三元组，它描述的是几何B。根据 图4可以得到它是一条曲线段，该几何B的起点和几何A终点节点重合。SDO_ORDINATES = (10,10, 10,14, 6,10, 14,10)；---坐标系列例子：用SQL 命令插入一个复杂多义线：</code></pre><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">INSERT INTO beniy388 VALUES(      11,                   &#x2F;&#x2F;其他的属性字段的值     &#39;UpDooGIS&#39;,       &#x2F;&#x2F;其他的属性字段的值      MDSYS.SDO_GEOMETRY(  &#x2F;&#x2F;几何字段SDO_GEOMETRY的值                 2002,                 NULL,                 NULL,                 MDSYS.SDO_ELEM_INFO_ARRAY(1,4,2, 1,2,1, 3,2,2), -- 复杂多义线                 MDSYS.SDO_ORDINATE_ARRAY(10,10, 10,14, 6,10, 14,10)     ));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SDO-FILTER"><a href="#SDO-FILTER" class="headerlink" title="SDO_FILTER"></a>SDO_FILTER</h5><p>格式：<br>SDO_FILTER(geometry1, geometry2, params);</p><p>描述：<br>    通过空间索引，根据给定的几何要素检索出具有空间相互关系的空间对象。这里的空间关系是指两个几何不分离，即Non-disjoint。【disjoint：表示两个几何的边和内部都不相交】</p><pre><code>这个Sdo_Filter执行只是初始的空间过滤操作；二次的过滤操作将由SDO_RELATE操作子完成，它能确定空间对象的相交关系。</code></pre><p>参数：</p><p>geometry1： 指需要查询表中几何列，该几何列务必已经建立空间索引。该列的数据类型为：MDSYS.SDO_GEOMETRY。</p><p>geometry2： 它值的可以是表中的几何，也可以是具体的几何对象（包括关联的几何对象变量、通过SDO_GEOMETRY构造函数的几何对象）。该列的数据类型也为：MDSYS.SDO_GEOMETRY。</p><p>params：  决定操作子的行为。数据类型为VARCHAR2。</p><p>该params具体有以下几种：</p><p>querytype: 有效的查询类型有：WINDOW和JOIN.。这是个必须的参数。</p><pre><code>querytype =’ WINDOW’建议大部分情况下是使用该参数的。WINDOW’表明查询将执行表中所有候选geometry1，与geometry2进行比较。也就是说WINDOW将单个geometry1和所有的geometry2进行空间关系操作，并比较是否满足空间关系。querytype =’ JOIN’很少用到。当你想比较该geometry1几何列和另外geometry2表中的几何列的话可使用JOIN。使用JOIN表明该geometry2必须建立的几何索引（具体参考使用说明）。</code></pre><p>idxtab1【可选】：如果存在多个空间索引表，它指的是geometry1空间索引表对应的表名。</p><p>idxtab2【可选】：如果存在多个空间索引表，它指的是geometry1空间索引表对应的表名。只有当querytype &#x3D;’ JOIN’才可以使用该参数。</p><p>返回值：</p><p>表达式SDO_FILTER(arg1, arg2, arg3) &#x3D; ‘TRUE’中的True表明两个几何空间关系为：不相离；否则为False。</p><p>使用说明</p><p>这个SDO_FILTER操作子必须用在Where子句中，在sql语句中使用该格式：SDO_FILTER(arg1, arg2,arg3) &#x3D; ‘TRUE’.。</p><p>如果querytype &#x3D;’ WINDOW’。 geometry2可以来自一个表，也可以来自具体的几何对象（包括关联的几何对象变量、通过SDO_GEOMETRY构造函数的几何对象）。</p><p>1、如果2个或大于2的geometry2几何将在SDO_FILTER中使用的话，geometry2将在from语句的第一个参数。</p><p>如果querytype &#x3D;’ JOIN’。</p><p>1、geometry2必须来自于表；</p><p>2、为了更好的执行SQL语句，geometry1和geometry2应该使用相同的空间索引类型（R树或者二叉树）；如果是二叉树他们应该有相同的sdo_level值。geometry1和geometry2不是相同的索引类型，geometry2将按照geometry1索引类型重新构建索引，这样SQL语句的性能就大打折扣。</p><p>如果geometry1和geometry2是基于不同的坐标参考系统的话，为了   执行操作geometry2将被临时的转换为geometry1的坐标系统。</p><p>举例：</p><ol><li>从Polygons表中选择出满足一定条件的GID。该条件为：选择出的GID对应的几何与query_polys表中GID&#x3D;1的几何不相离。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT A.gidFROM Polygons A, query_polys BWHERE B.gid &#x3D; 1AND SDO_FILTER(A.Geometry, B.Geometry, ’querytype &#x3D; WINDOW’) &#x3D; ’TRUE’;&#x2F;&#x2F;&#x2F;其中A.Geometry为Polygons表几何列的列名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>也是从Polygons表中选择出满足一定条件的GID。不过查询几何被存储到aGeom变量中。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">Select A.GidFROM Polygons AWHERE SDO_FILTER(A.Geometry, :aGeom, ’querytype&#x3D;WINDOW’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>也是从Polygons表中选择出满足一定条件的GID。查询几何为sdo_geometry构造函数构造的几何。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">Select A.GidFROM Polygons AWHERE SDO_FILTER(A.Geometry, mdsys.sdo_geometry(2003,NULL,NULL,mdsys.sdo_elem_info_array(1,1003,3),mdsys.sdo_ordinate_array(x1,y1,x2,y2)),’querytype&#x3D;WINDOW’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>从Polygons表中选择出满足一定条件的GID，当Polygons表的候选几何与任意一个query_polys的几何对象不相离都将GID选择出。因为多个query_polys中的几何将涉及到（参考使用说明）geometry2将被放到from的第一个参数。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT &#x2F;*+ ORDERED *&#x2F;A.gidFROM query_polys B, polygons AWHERE SDO_FILTER(A.Geometry, B.Geometry, ’querytype &#x3D; WINDOW’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>从Polygons表中选择出满足一定条件的GID，当Polygons表的候选几何与任意一个query_polys的几何对象不相离都将GID选择出。在这个例子中QUERY_POLYS.GEOMETRY几何列务必建立了空间索引。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT A.gidFROM Polygons A, query_polys BWHERESDO_FILTER(A.Geometry, B.Geometry, ’querytype &#x3D; JOIN’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SDO-RELATE"><a href="#SDO-RELATE" class="headerlink" title="SDO_RELATE"></a>SDO_RELATE</h4><p>格式：</p><p>SDO_RELATE(geometry1, geometry2, params);</p><p>描述：</p><p>通过空间索引，根据给定的几何要素（如一个多边形）检索出与其有特殊空间关系的几何要素。这个空间关系包括九种：Touch, OVERLAPBDYDisjoint, OVERLAPBDYIntersect, Equal,Inside, CoveredBy, Contains, Covers, AnyInteract, On.。具体图形标识如下：</p><p>这个操作子相当于同时执行了第一步（SDO_FILTER的功能）和第二步过滤操作</p><p>参数和关键字：</p><p>geometry1： 指需要查询表中几何列，该几何列务必已经建立空间索引。该列的数据类型为：MDSYS.SDO_GEOMETRY。</p><p>geometry2： 它值的可以是表中的几何，也可以是具体的几何对象（包括关联的几何对象变量、通过SDO_GEOMETRY构造函数的几何对象）。该列的数据类型也为：MDSYS.SDO_GEOMETRY。</p><p>params： 决定操作子的行为。数据类型为VARCHAR2。</p><p>该params具体有以下几种：</p><p>Mask：指定了空间关系。这是个必须的参数。有九种关系如上图所示，多种空间关系可以组合：例如：’mask&#x3D;inside+touch’;</p><p>Querytype：可以参考SDO_FILTER中的介绍，在此不累赘。</p><p>idxtab1和idxtab2 ：可以参考SDO_FILTER中的介绍，在此不累赘。</p><p>返回值：</p><p>表达式SDO_RELATE(geometry1,geometry2, ’mask &#x3D; <some_mask_val> ,querytype &#x3D; <some_querytype>’) &#x3D; ’TRUE’中的True是指两个几何对象满足<some_mask_val>条件。否则为Flase。</p><p>举例：</p><p>这里的所有要求条件和SDO_FILTER例子一样</p><ol><li>从Polygons表中选择出满足一定条件的GID。该条件为：选择出的GID对应的几何与query_polys表中GID&#x3D;1的有任何相交关系。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT A.gidFROM Polygons A, query_polys BWHERE B.gid &#x3D; 1AND SDO_RELATE(A.Geometry, B.Geometry,’mask&#x3D;ANYINTERACT querytype&#x3D;WINDOW’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>也是从Polygons表中选择出满足一定条件的GID。不过查询几何被存储到aGeom变量中。</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">Select A.GidFROM Polygons AWHERE SDO_RELATE(A.Geometry, :aGeom, ’mask&#x3D;ANYINTERACT querytype&#x3D;WINDOW’)&#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的例子里类似，这里也不累赘。</p><p>下面给出两个操作子结合的SQL语句</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT name boat_name &#x2F;&#x2F;选择在定义矩形内的所有小船FROM mylake tWHERE feature_id &#x3D; 12AND SDO_FILTER(t.shape, mdsys.sdo_geometry(2003,NULL,NULL,    mdsys.sdo_elem_info_array(1,1003,1),    mdsys.sdo_ordinate_array(2,2, 5,2, 5,5, 2,5, 2,2)),    &#39;querytype&#x3D;WINDOW&#39;) &#x3D; &#39;TRUE&#39;AND SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL,    mdsys.sdo_elem_info_array(1,1003,1),    mdsys.sdo_ordinate_array(2,2, 5,2, 5,5, 2,5, 2,2)),    &#39;masktype&#x3D;INSIDE querytype&#x3D;WINDOW&#39;) &#x3D; &#39;TRUE&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SDO-WITHIN-DISTANCE"><a href="#SDO-WITHIN-DISTANCE" class="headerlink" title="SDO_WITHIN_DISTANCE"></a>SDO_WITHIN_DISTANCE</h4><p>格式：</p><p>SDO_WITHIN_DISTANCE(geometry1, aGeom, params);</p><p>描述：</p><p>通过空间索引，检索出距离给定几何对象（可以是具体的多边形、点等）的一定范围内的所有空间对象。</p><p>参数和关键字：</p><p>geometry1：一个表中几何列的列名。这列的几何对象如果是在给定对象aGeom的一定范围之内的话，将被检索出来。这个geometry1对应的几何列务必创建空间索引。</p><p>该列的数据类型为：MDSYS.SDO_GEOMETRY。</p><p>aGeom：值根据这个对象和一定距离去检索geometry1。它可以是一个表的几何列（包含对象的变量），也可以是一个具体的几何对象（如通过SDO_GEOMETRY构造函数的几何对象）。</p><p>该列的数据类型为：MDSYS.SDO_GEOMETRY。</p><p>PARAMS：决定操作子的行为。数据类型为VARCHAR2。</p><p>该params具体有以下几种：</p><p><strong>Distance</strong>：指距离长度，这是个必须的参数。如果指定过滤的几何有关联的参考坐标，这个距离的单位就是参考坐标的单位。数据类型为Number。</p><p><strong>idxtab1</strong>：可以参考SDO_FILTER中的介绍，在此不累赘。</p><p><strong>Querytype</strong>：设置为’querytype&#x3D;FILTER’将执行第一步过滤操作。如果querytype没有指定第一步和第二步过滤操作将执行（默认为该种情况）。数据类型为VARCHAR2。</p><p><strong>Unit</strong>：指定距离单位。例如：unit&#x3D;’KM’.具体的单位SDO_UNIT 值来之MDSYS.SDO_DIST_UNITS 表。数据类型为Number。默认的单位适合具体的数据关联的，例如数据是投影数据的话，单位为M.</p><p>返回值：</p><p>表达式SDO_WITHIN_DISTANCE(arg1, arg2, arg3) &#x3D; ’TRUE’，为True将返回一定距离子内的所有要素。</p><p>举例：</p><ol><li>得到距离矩形为10单位之内的所有POLYGONS几何的GID</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT A.GIDFROM POLYGONS AWHERESDO_WITHIN_DISTANCE(A.Geometry, mdsys.sdo_geometry(2003,NULL,NULL,mdsys.sdo_elem_info_array(1,1003,3),mdsys.sdo_ordinate_array(x1,y1,x2,y2)),’distance &#x3D; 10’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>得到距离 Query_Points中GID &#x3D; 1对应的几何 为10单位之内的所有POLYGONS几何的GID</li></ol><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT A.GIDFROM POLYGONS A, Query_Points BWHERE B.GID &#x3D; 1 ANDSDO_WITHIN_DISTANCE(A.Geometry, B.Geometry, ’distance &#x3D; 10’) &#x3D; ’TRUE’;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考以下文章</p><p><a href="http://book.51cto.com/art/200910/157414.htm">http://book.51cto.com/art/200910/157414.htm</a></p><p><a href="http://blog.sina.com.cn/s/blog_00ccd2400101c2x8.html">http://blog.sina.com.cn/s/blog_00ccd2400101c2x8.html</a></p><p><a href="http://www.cnblogs.com/upDOoGIS/archive/2009/05/20/1469871.html">http://www.cnblogs.com/upDOoGIS/archive/2009/05/20/1469871.html</a></p><p><a href="http://www.cnblogs.com/upDOoGIS/archive/2009/05/31/1493115.html">http://www.cnblogs.com/upDOoGIS/archive/2009/05/31/1493115.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle11g安装报错Environment variable:&quot;PATH&quot;</title>
      <link href="/mysql-sql-oracle/oracle11g-an-zhuang-bao-cuo-environment-variable/"/>
      <url>/mysql-sql-oracle/oracle11g-an-zhuang-bao-cuo-environment-variable/</url>
      
        <content type="html"><![CDATA[<p>Environment variable: “PATH” - This test checks whether the length of the environment variable “PATH” does not exceed the recommended length.<br>预期值<br> : 1023<br>实际值<br> : 1245</p><p> PRVF-3929 : Adding the Oracle binary location to the PATH environment variable will exceed the OS length limit of [ “1023” ] for the variable<br>-Action:  Ensure that the sum of the lengths of your current PATH environment variable and that of “%ORACLE_HOME%&#x2F;bin;”<br> does not exceed the operating system limit. Restart the installer after correcting the setting for environment variable.</p><p>这样的问题就是环境变量字符太长了，多剪切一些出来，等安装完oracle后在把那些剪切出来环境变量在粘贴回去。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 密码框 Focus</title>
      <link href="/silverlight/silverlight-mi-ma-kuang-focus/"/>
      <url>/silverlight/silverlight-mi-ma-kuang-focus/</url>
      
        <content type="html"><![CDATA[<p>在做一个例子是需要运行起来后焦点默认设置在密码框上，在网上查了资料</p><p>自己找到一种方法,此方法在oob模式下管用</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public Login()&#123;    InitializeComponent();        txtLoginName.Text &#x3D; &quot;admin&quot;;    &#x2F;&#x2F; 设置焦点在密码框上    Dispatcher.BeginInvoke(() &#x3D;&gt; &#123; txtLoginPwd.Focus(); &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网上找到的另一种方法</p><ol><li>想在Silverlight首次启动让某个文本框获取焦点，使用Loaded事件中txt.Focus()是不起做用的，要完成这功能只要添加一句代码即可:</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void LayoutRoot_Loaded(object sender, RoutedEventArgs e)&#123;    HtmlPage.Plugin.Invoke(&quot;focus&quot;);    txtName.Focus();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在程序中为了方便用户，在一个文本框中按回车后跳到别一个文本框或其它控件，我们可以对原有的TextBox进行扩充，添加一个NextControl的属性用于保存下一个控件的名字,</li></ol><p>另外为了方便我加了一个ToNextControl的事件，这样用起来更加方便，代码如下:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">namespace HahaMan.SLTools.Controls&#123;    public class MyTextBox:TextBox    &#123;        &#x2F;&#x2F;事件        public event EventHandler ToNextControl;        private string nextControl&#x3D;&quot;&quot;;        &#x2F;&#x2F;用于保存下一个控件的名字        public string NextControl        &#123;            get &#123; return nextControl; &#125;            set &#123; nextControl &#x3D; value; &#125;        &#125;        protected override void OnKeyDown(KeyEventArgs e)        &#123;            base.OnKeyDown(e);            if (e.Key &#x3D;&#x3D; Key.Enter)&#x2F;&#x2F;如果是回车            &#123;                if (ToNextControl !&#x3D; null)&#x2F;&#x2F;如果自己写了事件处理程序                &#123;                    ToNextControl(this, e);&#x2F;&#x2F;调用事件                &#125;                else                &#123;                    &#x2F;&#x2F;如果没有指定事件                    if (nextControl !&#x3D; null &amp;&amp; nextControl.Length &gt; 0)                    &#123;                         &#x2F;&#x2F;查找下一个控件                        Control c &#x3D; (this.Parent as Panel).FindName(nextControl) as Control;                        if (c !&#x3D; null)                        &#123;                            c.Focus();                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法一:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;my:MyTextBox Height&#x3D;&quot;23&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;786,152,0,0&quot; Name&#x3D;&quot;txtName&quot; &lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;NextControl&#x3D;&quot;txtPwd&quot;&lt;&#x2F;span&gt; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &#x2F;&gt;            &lt;my:MyTextBox Height&#x3D;&quot;23&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;786,205,0,0&quot; Name&#x3D;&quot;txtPwd&quot;  &lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;NextControl&#x3D;&quot;btnLogin&quot;&lt;&#x2F;span&gt; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &#x2F;&gt;            &lt;Button Content&#x3D;&quot;登录&quot; Height&#x3D;&quot;23&quot; Margin&#x3D;&quot;763,259,0,0&quot; Name&#x3D;&quot;btnLogin&quot; VerticalAlignment&#x3D;&quot;Top&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Width&#x3D;&quot;56&quot; Click&#x3D;&quot;btnLogin_Click&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用方法二:<br>xaml代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;my:MyTextBox Height&#x3D;&quot;23&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;786,152,0,0&quot; Name&#x3D;&quot;txtName&quot;  VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;ToNextControl&#x3D;&quot;toNextControl&quot;&lt;&#x2F;span&gt; &#x2F;&gt;            &lt;my:MyTextBox Height&#x3D;&quot;23&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;786,205,0,0&quot; Name&#x3D;&quot;txtPwd&quot;   VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;ToNextControl&#x3D;&quot;toNextControl&quot;&lt;&#x2F;span&gt; &#x2F;&gt;            &lt;Button Content&#x3D;&quot;登录&quot; Height&#x3D;&quot;23&quot; Margin&#x3D;&quot;763,259,0,0&quot; Name&#x3D;&quot;btnLogin&quot; VerticalAlignment&#x3D;&quot;Top&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Width&#x3D;&quot;56&quot; Click&#x3D;&quot;btnLogin_Click&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cs代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void toNextControl(object sender, EventArgs e)&#123;    if (sender &#x3D;&#x3D; txtName) txtPwd.Focus();    if (sender &#x3D;&#x3D; txtPwd) btnLogin.Focus();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网上找的方法转载至 <a href="http://blog.csdn.net/lijun7788/article/details/8087773">http://blog.csdn.net/lijun7788/article/details/8087773</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 登陆界面</title>
      <link href="/silverlight/silverlight-deng-lu-jie-mian/"/>
      <url>/silverlight/silverlight-deng-lu-jie-mian/</url>
      
        <content type="html"><![CDATA[<p>界面代码，效果如下图<br><img src="/images/2014050814221501.jpg" alt="2014050814221501.jpg"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;ElecDemoTelerikSL.Login&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    xmlns:sdk&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&#x2F;sdk&quot;    xmlns:my&#x3D;&quot;clr-namespace:Drawsee.Sl.AppBase.UserManage.UI;assembly&#x3D;Drawsee.Sl.AppBase&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;800&quot; d:DesignWidth&#x3D;&quot;1200&quot;&gt;        &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; ScrollViewer.HorizontalScrollBarVisibility&#x3D;&quot;Disabled&quot; ScrollViewer.VerticalScrollBarVisibility&#x3D;&quot;Disabled&quot;&gt;        &lt;Grid.Background&gt;            &lt;LinearGradientBrush EndPoint&#x3D;&quot;0.5,1&quot; StartPoint&#x3D;&quot;0.5,0&quot;&gt;                &lt;GradientStop Color&#x3D;&quot;#FF007CC3&quot;&#x2F;&gt;                &lt;GradientStop Color&#x3D;&quot;#FF93CAE2&quot; Offset&#x3D;&quot;1&quot;&#x2F;&gt;            &lt;&#x2F;LinearGradientBrush&gt;        &lt;&#x2F;Grid.Background&gt;        &lt;StackPanel HorizontalAlignment&#x3D;&quot;Center&quot; VerticalAlignment&#x3D;&quot;Center&quot;&gt;            &lt;TextBlock Text&#x3D;&quot;登陆测试&quot; FontSize&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Center&quot; Margin&#x3D;&quot;0,0,0,20&quot; &#x2F;&gt;        &lt;Grid Width&#x3D;&quot;600&quot; Height&#x3D;&quot;300&quot;&gt;            &lt;Rectangle Fill&#x3D;&quot;#50000000&quot; RadiusX&#x3D;&quot;10&quot; RadiusY&#x3D;&quot;10&quot; Margin&#x3D;&quot;10,10,-10,-15&quot; &#x2F;&gt;            &lt;Image Source&#x3D;&quot;images&#x2F;elec_background.jpg&quot; Height&#x3D;&quot;300&quot; HorizontalAlignment&#x3D;&quot;Center&quot; Name&#x3D;&quot;imageBackground&quot; Stretch&#x3D;&quot;Fill&quot; VerticalAlignment&#x3D;&quot;Center&quot; Width&#x3D;&quot;600&quot;&gt;                &lt;Image.Clip&gt;                    &lt;RectangleGeometry RadiusX&#x3D;&quot;12&quot; RadiusY&#x3D;&quot;12&quot; Rect&#x3D;&quot;0,0,600,300&quot; &#x2F;&gt;                &lt;&#x2F;Image.Clip&gt;             &lt;&#x2F;Image&gt;            &lt;Border BorderBrush&#x3D;&quot;#80000000&quot; BorderThickness&#x3D;&quot;1&quot; CornerRadius&#x3D;&quot;10&quot; &gt;            &lt;&#x2F;Border&gt;            &lt;Grid Margin&#x3D;&quot;358,124,29,42&quot;&gt;                &lt;Rectangle  Stretch&#x3D;&quot;Fill&quot; Fill&#x3D;&quot;#4FFFFFFF&quot; RadiusX&#x3D;&quot;20&quot; RadiusY&#x3D;&quot;20&quot; &#x2F;&gt;                &lt;sdk:Label Content&#x3D;&quot;登录名：&quot; Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Name&#x3D;&quot;lblLoginName&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;60&quot; Margin&#x3D;&quot;11,20,0,0&quot; &#x2F;&gt;                &lt;sdk:Label Content&#x3D;&quot;密   码：&quot; Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Name&#x3D;&quot;lblLoginPwd&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;60&quot; Margin&#x3D;&quot;11,58,0,0&quot; &#x2F;&gt;                &lt;TextBox Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Name&#x3D;&quot;txtLoginName&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; Margin&#x3D;&quot;77,17,0,0&quot; &#x2F;&gt;                &lt;PasswordBox Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot;  Margin&#x3D;&quot;77,55,0,0&quot; Name&#x3D;&quot;txtLoginPwd&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;120&quot; &#x2F;&gt;                &lt;Button Content&#x3D;&quot;登陆&quot; Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Name&#x3D;&quot;btnLogin&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;75&quot; Margin&#x3D;&quot;22,95,0,0&quot; Click&#x3D;&quot;btnLogin_Click&quot; &#x2F;&gt;                &lt;Button Content&#x3D;&quot;取消&quot; Height&#x3D;&quot;24&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Name&#x3D;&quot;btnCancel&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;75&quot; Margin&#x3D;&quot;122,95,0,0&quot; &#x2F;&gt;                &lt;&#x2F;Grid&gt;        &lt;&#x2F;Grid&gt;        &lt;&#x2F;StackPanel&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial class Login : UserControl&#123;    public Login()    &#123;        InitializeComponent();                txtLoginName.Text &#x3D; &quot;admin&quot;;    &#125;    private void btnLogin_Click(object sender, RoutedEventArgs e)    &#123;        string loginName &#x3D;txtLoginName.Text.Trim();        string loginPwd &#x3D;txtLoginPwd.Password.Trim();        if (loginName.Equals(&quot;admin&quot;) &amp;&amp; loginName.Equals(&quot;admin&quot;))            this.Content &#x3D; new MainPage(); &#x2F;&#x2F;跳转到主页面        else            MessageBox.Show(&quot;登陆失败！&quot;, &quot;提示&quot;, MessageBoxButton.OKCancel);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主页面xaml</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;SilverlightCreate.MainTest&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    xmlns:sdk&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&#x2F;sdk&quot;    xmlns:my&#x3D;&quot;clr-namespace:SilverlightCreate&quot;    mc:Ignorable&#x3D;&quot;d&quot;    d:DesignHeight&#x3D;&quot;800&quot; d:DesignWidth&#x3D;&quot;1800&quot;  &gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; VerticalAlignment&#x3D;&quot;Stretch&quot;&gt;        &lt;Grid&gt;            &lt;Grid.RowDefinitions&gt;                &lt;RowDefinition Height&#x3D;&quot;80&quot;&gt;&lt;&#x2F;RowDefinition&gt;                &lt;RowDefinition Height&#x3D;&quot;*&quot;&gt;&lt;&#x2F;RowDefinition&gt;            &lt;&#x2F;Grid.RowDefinitions&gt;            &lt;Grid Grid.Row&#x3D;&quot;0&quot; &gt;                &lt;Grid.Background&gt;                    &lt;LinearGradientBrush &gt;                        &lt;GradientStop Color&#x3D;&quot;#FF007CC3&quot; Offset&#x3D;&quot;0.5&quot; &#x2F;&gt;                        &lt;GradientStop Color&#x3D;&quot;#FFa9dcfa&quot; Offset&#x3D;&quot;1&quot; &#x2F;&gt;                    &lt;&#x2F;LinearGradientBrush&gt;                &lt;&#x2F;Grid.Background&gt;                                &lt;HyperlinkButton Content&#x3D;&quot;操作说明&quot; HorizontalAlignment&#x3D;&quot;Right&quot; VerticalAlignment&#x3D;&quot;Bottom&quot; Foreground&#x3D;&quot;AliceBlue&quot; NavigateUri&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; TargetName&#x3D;&quot;_blank&quot; FontSize&#x3D;&quot;16&quot; IsTabStop&#x3D;&quot;False&quot; Height&#x3D;&quot;24&quot; Name&#x3D;&quot;hlbHelp&quot; Width&#x3D;&quot;68&quot; Margin&#x3D;&quot;0,0,0,12&quot; &#x2F;&gt;                &lt;my:ToolBar HorizontalAlignment&#x3D;&quot;Right&quot; Margin&#x3D;&quot;0,33,100,0&quot; Padding&#x3D;&quot;2&quot; x:Name&#x3D;&quot;toolBar1&quot; VerticalAlignment&#x3D;&quot;Top&quot; &#x2F;&gt;            &lt;&#x2F;Grid&gt;            &lt;Grid x:Name&#x3D;&quot;GridMain&quot; Grid.Row&#x3D;&quot;1&quot;&gt;                &lt;Grid.ColumnDefinitions&gt;                    &lt;ColumnDefinition Width&#x3D;&quot;290&quot; &#x2F;&gt;                    &lt;ColumnDefinition Width&#x3D;&quot;5&quot; &#x2F;&gt;                    &lt;ColumnDefinition Width&#x3D;&quot;665*&quot; &#x2F;&gt;                &lt;&#x2F;Grid.ColumnDefinitions&gt;                &lt;Grid Grid.Column&#x3D;&quot;0&quot; x:Name&#x3D;&quot;system&quot;&gt;                                        &lt;Border BorderBrush&#x3D;&quot;LightGray&quot; BorderThickness&#x3D;&quot;1&quot; CornerRadius&#x3D;&quot;0&quot; &#x2F;&gt;                &lt;&#x2F;Grid&gt;                &lt;sdk:GridSplitter Grid.Column&#x3D;&quot;1&quot; HorizontalAlignment&#x3D;&quot;Center&quot; VerticalAlignment&#x3D;&quot;Stretch&quot; Background&#x3D;&quot;#FF027DC3&quot;&gt;&lt;&#x2F;sdk:GridSplitter&gt;                &lt;Grid Grid.Column&#x3D;&quot;2&quot;&gt;                    &lt;Grid x:Name&#x3D;&quot;GridFrame&quot;&gt;                        &lt;Border BorderBrush&#x3D;&quot;LightGray&quot; BorderThickness&#x3D;&quot;1&quot; CornerRadius&#x3D;&quot;0&quot;&gt;                                                    &lt;&#x2F;Border&gt;                    &lt;&#x2F;Grid&gt;                &lt;&#x2F;Grid&gt;            &lt;&#x2F;Grid&gt;        &lt;&#x2F;Grid&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Telerik StyleMananger 改变Silverlight Button样式</title>
      <link href="/silverlight/shi-yong-telerik-stylemananger-gai-bian-silverlight-button-yang-shi/"/>
      <url>/silverlight/shi-yong-telerik-stylemananger-gai-bian-silverlight-button-yang-shi/</url>
      
        <content type="html"><![CDATA[<p>Telerik 支持更改以下控件样式</p><ul><li>System.Windows.Button</li><li>System.Windows.ScrollViewer</li><li>System.Windows.CheckBox</li><li>System.Windows.TextBox</li><li>System.Windows.RadioButton</li><li>System.Windows.ListBox</li><li>System.Windows.PasswordBox</li><li>System.Windows.RepeatButton</li><li>System.Windows.Tooltip</li></ul><p>需要在App.Xaml中的修改，红色是添加的代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;Application xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;             xmlns:telerik&#x3D;&quot;http:&#x2F;&#x2F;schemas.telerik.com&#x2F;2008&#x2F;xaml&#x2F;presentation&quot;             x:Class&#x3D;&quot;TestDemo.App&quot;             &gt;    &lt;Application.Resources&gt;        &lt;Style TargetType&#x3D;&quot;Button&quot;&#x2F;&gt;    &lt;&#x2F;Application.Resources&gt;&lt;&#x2F;Application&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在后台程序中修改，其中红色是需要添加的代码</p> <pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public App()&#123;    this.Startup +&#x3D; this.Application_Startup;    this.Exit +&#x3D; this.Application_Exit;    this.UnhandledException +&#x3D; this.Application_UnhandledException;    StyleManager.ApplicationTheme &#x3D; new Windows7Theme();    InitializeComponent();   StyleManager.SetBasedOn(((Style)Current.Resources[typeof(Button)]), StyleManager.ApplicationTheme);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight Telerik 学习之主题的设置</title>
      <link href="/silverlight/silverlight-telerik-xue-xi-zhi-zhu-ti-de-she-zhi/"/>
      <url>/silverlight/silverlight-telerik-xue-xi-zhi-zhu-ti-de-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>Telerik控件版本：RadControls for Silverlight Q1 2013</p><p>当前的Telerik Silverlight 控件支持以下主题</p><p>Office Black - 这是默认主题，无需加载其它任何dll文件。</p><p>Office Blue - 引用 Telerik.Windows.Themes.Office_Blue.dll。</p><p>Office Silver - 引用 Telerik.Windows.Themes.Office_Silver.dll。</p><p>Summer - 引用 Telerik.Windows.Themes.Summer.dll。</p><p>Transparent - 引用 Telerik.Windows.Themes.Transparent.dll。</p><p>Vista - 引用 Telerik.Windows.Themes.Vista.dll。</p><p>Windows 7 - 引用 Telerik.Windows.Themes.Windows7.dll。</p><p>Window 8 - 引用Telerik.Windows.Themes.Windows8.dll。</p><p>Windows8 Touch -引用Telerik.Windows.Themes.Windows8Touch。</p><p>Metro(obsolete) - 引用Telerik.Windows.Themes.Metro.dll。应该替换成windows8主题。</p><p>创建一个Silverlight工程，引用需要的dll</p><p>Common Styling Theming Setting Built In Theme 010</p><p>下图是Windows8 Touch的效果<br><img src="/images/2014042817431201.png" alt="2014042817431201.png"></p><ol><li>设置特定的XAML内置样式（这样只改变指定控件样式）</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;Test.MainPage&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:telerik&#x3D;&quot;clr-namespace:Telerik.Windows.Controls;assembly&#x3D;Telerik.Windows.Controls&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot;&gt;        &lt;telerik:RadTabControl x:Name&#x3D;&quot;tab1&quot;  telerik:StyleManager.Theme&#x3D;&quot;Windows8Touch&quot;&gt;            &lt;telerik:RadTabItem Header&#x3D;&quot;导航一&quot;&gt;&lt;&#x2F;telerik:RadTabItem&gt;            &lt;telerik:RadTabItem Header&#x3D;&quot;导航二&quot;&gt;&lt;&#x2F;telerik:RadTabItem&gt;            &lt;telerik:RadTabItem Header&#x3D;&quot;导航三&quot;&gt;&lt;&#x2F;telerik:RadTabItem&gt;        &lt;&#x2F;telerik:RadTabControl&gt;     &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者通过后台代码控制 StyleManager.SetTheme( tab1, new VistaTheme() );</p><ol start="2"><li>设置应用程序内置主题后台代码（这样影响的是页面控件的样式）</li></ol><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial class MainPage : UserControl&#123;    public MainPage()    &#123;        StyleManager.ApplicationTheme &#x3D; new Windows8TouchTheme();        InitializeComponent();    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public partial class App : Application&#123;    public App()    &#123;        this.Startup +&#x3D; this.Application_Startup;        this.Exit +&#x3D; this.Application_Exit;        this.UnhandledException +&#x3D; this.Application_UnhandledException;        StyleManager.ApplicationTheme &#x3D; new Windows8TouchTheme();        InitializeComponent();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>自定义主题</li></ol><p>如果觉得这些样式满足不了要求可以自己定义一些主题</p><p>创建一个自定义主题类</p><p>然后在自定义主题类的构造函数中指定source</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">[ThemeLocation( ThemeLocation.BuiltIn )]public class CustomTheme : Telerik.Windows.Controls.Theme&#123;&#125;public CustomTheme()&#123;    this.Source &#x3D; new Uri( &quot;&#x2F;Telerik.Windows.Themes.CustomTheme;component&#x2F;themes&#x2F;Generic.xaml&quot;, UriKind.Relative );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章 <a href="http://www.telerik.com/help/silverlight/common-styling-apperance-setting-theme.html">http://www.telerik.com/help/silverlight/common-styling-apperance-setting-theme.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制更新客户端Silverlight XAP 文件</title>
      <link href="/silverlight/qiang-zhi-geng-xin-ke-hu-duan-silverlight-xap-wen-jian/"/>
      <url>/silverlight/qiang-zhi-geng-xin-ke-hu-duan-silverlight-xap-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>在发布程序更新的时候访问的总是原来的程序，猜想应该是缓存的原因。在网上查找方法</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;silverlightControlHost&quot;&gt;        &lt;object data&#x3D;&quot;data:application&#x2F;x-silverlight-2,&quot; type&#x3D;&quot;application&#x2F;x-silverlight-2&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot;&gt;          &lt;param name&#x3D;&quot;source&quot; value&#x3D;&quot;ClientBin&#x2F;ElecDemoSl.xap?&lt;%&#x3D;Guid.NewGuid().ToString() %&gt;&quot;&#x2F;&gt;          &lt;param name&#x3D;&quot;onError&quot; value&#x3D;&quot;onSilverlightError&quot; &#x2F;&gt;          &lt;param name&#x3D;&quot;background&quot; value&#x3D;&quot;white&quot; &#x2F;&gt;          &lt;param name&#x3D;&quot;minRuntimeVersion&quot; value&#x3D;&quot;5.0.61118.0&quot; &#x2F;&gt;          &lt;param name&#x3D;&quot;autoUpgrade&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;          &lt;param name&#x3D;&quot;enableGPUAcceleration&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;          &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;149156&amp;v&#x3D;5.0.61118.0&quot; style&#x3D;&quot;text-decoration:none&quot;&gt;               &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;161376&quot; alt&#x3D;&quot;获取 Microsoft Silverlight&quot; style&#x3D;&quot;border-style:none&quot;&#x2F;&gt;          &lt;&#x2F;a&gt;        &lt;&#x2F;object&gt;        &lt;iframe id&#x3D;&quot;_sl_historyFrame&quot; style&#x3D;&quot;visibility:hidden;height:0px;width:0px;border:0px&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面代码中添加绿色的代码就可以了。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;param name&#x3D;&quot;source&quot; value&#x3D;&quot;ClientBin&#x2F;ElecDemoSl.xap?&lt;%&#x3D;Guid.NewGuid().ToString() %&gt;&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下方法通过网上查找</p><p>另一个解决方案,我更喜欢甚至包括检查XAP创建日期,并附加参数name &#x3D;“Source”来源</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;object data&#x3D;&quot;data:application&#x2F;x-silverlight-2,&quot; type&#x3D;&quot;application&#x2F;x-silverlight-2&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot;&gt;&lt;%    string strSourceFile &#x3D; @&quot;ClientBin&#x2F;SilverlightApplication2.xap&quot;;    string param;    if (System.Diagnostics.Debugger.IsAttached)        param &#x3D; &quot;&lt;param name&#x3D;\&quot;source\&quot; value&#x3D;\&quot;&quot; + strSourceFile + &quot;\&quot; &#x2F;&gt;&quot;;    else    &#123;        string xappath &#x3D; HttpContext.Current.Server.MapPath(@&quot;&quot;) + @&quot;\&quot; + strSourceFile;        DateTime xapCreationDate &#x3D; System.IO.File.GetLastWriteTime(xappath);        param &#x3D; &quot;&lt;param name&#x3D;\&quot;source\&quot; value&#x3D;\&quot;&quot; + strSourceFile + &quot;?ignore&#x3D;&quot;                + xapCreationDate.ToString() + &quot;\&quot; &#x2F;&gt;&quot;;    &#125;    Response.Write(param);%&gt;&lt;param name&#x3D;&quot;onError&quot; value&#x3D;&quot;onSilverlightError&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章</p><p><a href="http://www.codeproject.com/Articles/143414/Prevent-your-Silverlight-XAP-File-from-Caching-in">http://www.codeproject.com/Articles/143414/Prevent-your-Silverlight-XAP-File-from-Caching-in</a></p><p><a href="http://kevinfan.blog.51cto.com/1037293/933181/">http://kevinfan.blog.51cto.com/1037293/933181/</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sandcastle Help File Builder 生成NET帮助文档</title>
      <link href="/c-winform/sandcastle-help-file-builder-sheng-cheng-net-bang-zhu-wen-dang/"/>
      <url>/c-winform/sandcastle-help-file-builder-sheng-cheng-net-bang-zhu-wen-dang/</url>
      
        <content type="html"><![CDATA[<p>Sandcastle是微软提供的一个根据XML注释和DLL文件生成帮助文件的工具，目前是在CodePlex上的一个开源项目，可以去这里下载：<a href="http://sandcastle.codeplex.com/">Sandcastle</a></p><p>Sandcastle生成的输出结果具有以下特点：<br>Ø         类似于MSDN布局的界面。<br>Ø         自动生成索引项、内容项目表、主题块和页面布局，提高一致性和熟悉程度。<br>Ø         自动生成语法宣称部分。<br>Ø         自动生成继承表。<br>Ø         代码彩色化。<br>Ø         提供多种风格和语言选择，终端用户可从中选择自己最喜欢的形式。<br>Ø         输出结果以HTML和CSS形式显示，微软承诺将来提供更多选择。</p><p><a href="http://shfb.codeplex.com/">SHFB</a>(Sandcastle Help File Builder)是Sandcastle的GUI（图形用户界面）版本，Sandcastle 本身是一个console的程序。</p><ol><li>下载完shfb后解压安装，本文用的是SHFBGuidedInstaller_1980，双击“SandcastleInstaller.exe”运行<br><img src="/images/2013123017521201.jpg" alt="2013123017521201.jpg"></li><li>看见此界面后直接next，不用管什么配置<br><img src="/images/2013123017521202.jpg" alt="2013123017521202.jpg"></li><li>安装完成后在vs中可以找到“Documentation”模板，如果没有找到在下载的文件中找到“SHFBVisualStudioPackage_1980.vsix”重新安装一下<br><img src="/images/2013123017521203.jpg" alt="2013123017521203.jpg"><br>安装成功后会弹出下图对话框。<br><img src="/images/2013123017521204.jpg" alt="2013123017521204.jpg"></li><li>新建项目选择“Sandcastle Help File Builder Project”,在新建的项目上右键选择生成文档的格式类型<br><img src="/images/2013123017521205.jpg" alt="2013123017521205.jpg"></li><li>在“Visibility”中选择过滤哪些不需要的选项，然后直接点击“Close”就可以了。<br><img src="/images/2013123017521206.jpg" alt="2013123017521206.jpg"></li><li>在项目工程有右键属性，然后在”生成“中勾选”XML文档文件“，这个不勾选那个方法的说明将不会在生成的帮助文档中显示。<br><img src="/images/2013123017521207.jpg" alt="2013123017521207.jpg"><br><img src="/images/2013123017521208.jpg" alt="2013123017521208.jpg"></li></ol><p>如果点击”Build“的时候报错，注意查看下面的输出日志。</p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doxygen简介</title>
      <link href="/qt/doxygen-jian-jie/"/>
      <url>/qt/doxygen-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一．什么是Doxygen"><a href="#一．什么是Doxygen" class="headerlink" title="一．什么是Doxygen?"></a>一．什么是Doxygen?</h1><pre><code>  Doxygen 是一个程序的文件产生工具，可将程序中的特定批注转换成为说明文件。通常我们在写程序时，或多或少都会写上批注，但是对于其它人而言，要直接探索程序里的批注，与打捞铁达尼号同样的辛苦。大部分有用的批注都是属于针对函式，类别等等的说明。所以，如果能依据程序本身的结构，将批注经过处理重新整理成为一个纯粹的参考手册，对于后面利用您的程序代码的人而言将会减少许多的负担。不过，反过来说，整理文件的工作对于您来说，就是沉重的负担。</code></pre><p>Doxygen 就是在您写批注时，稍微按照一些它所制订的规则。接着，他就可以帮您产生出漂亮的文档了。</p><p>因此，Doxygen 的使用可分为两大部分。首先是特定格式的批注撰写，第二便是利用Doxygen的工具来产生文档。</p><p>目前Doxygen可处理的程序语言包含：</p><ul><li>C&#x2F;C++</li><li>Java</li><li>IDL (Corba, Microsoft及KDE-DCOP类型)</li></ul><p>而可产生出来的文档格式有：</p><ul><li>HTML</li><li>XML</li><li>LaTeX</li><li>RTF</li><li>Unix Man Page</li></ul><p>而其中还可衍生出不少其它格式。HTML可以打包成CHM格式，而LaTeX可以透过一些工具产生出PS或是PDF文档。</p><h1 id="二．安装Doxygen"><a href="#二．安装Doxygen" class="headerlink" title="二．安装Doxygen"></a>二．安装Doxygen</h1><h4 id="1-1-安装-Doxygen-1-8-2-Windows"><a href="#1-1-安装-Doxygen-1-8-2-Windows" class="headerlink" title="1.1 安装 Doxygen 1.8.2(Windows)"></a>1.1 安装 <a href="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.2-setup.exe">Doxygen 1.8.2(Windows)</a></h4><h4 id="1-2-安装-graphviz-2-28-0-Windows"><a href="#1-2-安装-graphviz-2-28-0-Windows" class="headerlink" title="1.2 安装 graphviz 2.28.0(Windows)"></a>1.2 安装 <a href="http://www.graphviz.org/Download.php">graphviz 2.28.0(Windows)</a></h4><pre><code>graphviz 是一个由AT&amp;T实验室启动的开源工具包，用于绘制DOT语言脚本描述的图形。Doxygen 使用 graphviz 自动生成类之间和文件之间的调用关系图，如不需要此功能可不安装该工具包。</code></pre><h4 id="1-3-安装-html-help-workshop-1-32"><a href="#1-3-安装-html-help-workshop-1-32" class="headerlink" title="1.3 安装 html help workshop 1.32"></a>1.3 安装 <a href="http://dl.pconline.com.cn/html_2/1/87/id=1917&pn=0&linkPage=1.html">html help workshop 1.32</a></h4><pre><code>Doxygen 使用这个工具可以生成 CHM 格式的文档。</code></pre><h1 id="三．Doxygen的配置"><a href="#三．Doxygen的配置" class="headerlink" title="三．Doxygen的配置"></a>三．Doxygen的配置</h1><pre><code>Doxygen 产生文档可以分为三个步骤。一是在程序代码中加上符合Doxygen所定义批注格式。二是使用Doxywizard进行配置。三是使用Doxygen来产生批注文档。Doxygen 1.7.4 主界面如下图 1 所示。</code></pre><p> 说明：1，Doxygen 工作目录，就是用来存放配置文件的目录。</p><pre><code>   2，递归搜索源文件目录需要选上。      选择 wizard 标签下的 Output Topics      相关配置说明如下图 2 所示。      选择 wizard 标签下的 Diagrams Topics      相关配置说明如下图 3 所示。      说明：如果选择这个选项之前需要先安装了 Graphviz 工具包。      选择 expert 标签下的 Project Topics      相关配置说明如下图 4 所示。      说明：编码格式，UTF-8是首选。如果需要显示中文则选择GB2313.      TAB_SIZE 主要是帮助文件中代码的缩进尺寸，譬如@code和@endcode段代码的排版，建议设置成4。      OPTIMIZE_OUTPUT_FOR_C 这个选项选择后，生成文档的一些描述性名称发生变化，主要是符合C习惯。如果      是纯C代码，建议选择。      SUBGROUPING这个选项选择后，输出将会按类型分组。      选择 expert 标签下的 Build      Build页面，这个页面是生成帮助信息中比较关键的配置页面：</code></pre><p>EXTRACT_ALL 表示：输出所有的函数，但是private和static函数不属于其管制。</p><p>EXTRACT_PRIVATE 表示：输出private函数。</p><p>EXTRACT_STATIC 表示：输出static函数。同时还有几个EXTRACT，相应查看文档即可。</p><p>HIDE_UNDOC_MEMBERS 表示：那些没有使用doxygen格式描述的文档（函数或类等）就不显示了。当然，如果EXTRACT_ALL被启用，那么这个标志其实是被忽略的。</p><p>INTERNAL_DOCS 主要指：是否输出注解中的@internal部分。如果没有被启动，那么注解中所有的@internal部分都</p><p>将在目标帮助中不可见。</p><p>CASE_SENSE_NAMES 表示：是否关注大小写名称，注意，如果开启了，那么所有的名称都将被小写。对于C&#x2F;C++这种</p><p>字母相关的语言来说，建议永远不要开启。</p><p>HIDE_SCOPE_NAMES 表示：域隐藏，建议永远不要开启。</p><p>SHOW_INCLUDE_FILES 表示：是否显示包含文件，如果开启，帮助中会专门生成一个页面，里面包含所有包含文件的列</p><p>表。</p><p>INLINE_INFO ：如果开启，那么在帮助文档中，inline函数前面会有一个inline修饰词来标明。</p><p>SORT_MEMBER_DOCS ：如果开启，那么在帮助文档列表显示的时候，函数名称会排序，否则按照解释的顺序显</p><p>示。</p><p>GENERATE_TODOLIST ：是否生成TODOLIST页面，如果开启，那么包含在@todo注解中的内容将会单独生成并显</p><p>示在一个页面中，其他的GENERATE选项同。</p><p>SHOW_USED_FILES ：是否在函数或类等的帮助中，最下面显示函数或类的来源文件。</p><p>SHOW_FILES ：是否显示文件列表页面，如果开启，那么帮助中会存在一个一个文件列表索引页面。<br>选择 expert 标签下的 Input Topics<br>相关配置说明如下图 5 所示。</p><p>说明：输入的源文件的编码，要与源文件的编码格式相同。如果源文件不是UTF-8编码最好转一下。<br>选择 expert 标签下的 HTML Topics<br>相关配置说明如下图 6 所示。</p><p>说明：1，CHM_FILE文件名需要加上后缀（xx.chm）。<br>      2，如果在 Wizard 的 Output Topics 中选择了 prepare for compressed HTML (.chm)选项，此处就会要求选择 hhc.exe 程序的位置。在 windows help workshop 安装目录下可以找到 hhc.exe。<br>     3，为了解决DoxyGen生成的CHM文件的左边树目录的中文变成了乱码，CHM_INDEX_ENCODING中输入GB2312即可。<br>     4，GENERATE_CHI 表示索引文件是否单独输出，建议关闭。否则每次生成两个文件，比较麻烦。<br>     5，TOC_EXPAND 表示是否在索引中列举成员名称以及分组（譬如函数，枚举）名称。<br>选择 Run 标签<br>相关配置说明如下图 7 所示。</p><p>   点击 Run doxygen 按钮， Doxygen 就会从源代码中抓取符合规范的注释生成你定制的格式的文档。</p><h1 id="四．撰写正确格式的批注"><a href="#四．撰写正确格式的批注" class="headerlink" title="四．撰写正确格式的批注"></a>四．撰写正确格式的批注</h1><p>并非所有程序代码中的批注都会被Doxygen 所处理。您必需依照正确的格式撰写。原则上，Doxygen 仅处理与程序结构相关的批注，如Function，Class ，档案的批注等。对于Function内部的批注则不做处理。Doxygen可处理下面几种类型的批注。</p><p>JavaDoc类型：</p><p>&#x2F;**</p><ul><li>… 批注 …<br> *&#x2F;</li></ul><p>Qt类型：</p><p>&#x2F;*!</p><ul><li>… 批注 …<br> *&#x2F;</li></ul><p>单行型式的批注：</p><p>&#x2F;&#x2F;&#x2F; … 批注 …</p><p>或   </p><p>&#x2F;&#x2F;! … 批注 …</p><p>要使用哪种型态完全看自己的喜好。以笔者自己来说，大范围的注解我会使用JavaDoc 型的。单行的批注则使用”&#x2F;&#x2F;&#x2F;“ 的类型。</p><p>此外，由于Doxygen 对于批注是视为在解释后面的程序代码。也就是说，任何一个批注都是在说明其后的程序代码。如果要批注前面的程式码则需用下面格式的批注符号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/*<span class="token operator">!</span><span class="token operator">&lt;</span> <span class="token punctuation">..</span>. 批注 <span class="token punctuation">..</span>. *//**<span class="token operator">&lt;</span> <span class="token punctuation">..</span>. 批注 <span class="token punctuation">..</span>. *///<span class="token operator">!</span><span class="token operator">&lt;</span> <span class="token punctuation">..</span>. 批注 <span class="token punctuation">..</span>.///<span class="token operator">&lt;</span> <span class="token punctuation">..</span>. 批注 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个方式并不适用于任何地方，只能用在class 的member或是function的参数上。<br>举例来说，若我们有下面这样的class。</p><pre><code>class MyClass &#123;    public:        int member1 ;        int member2:        void member_function();&#125;;</code></pre><p>加上批注后，就变成这样：</p><pre><code>/** * 我的自订类别说明 ... */class MyClass &#123;    public:        int member1 ; ///&lt; 第一个member说明 ...        int member2:  ///&lt; 第二个member说明 ...        int member_function(int a, int b);&#125;;/** * 自订类别的member_funtion说明 ... * * @param a 参数a的说明 * @param b 参数b的说明 * * @return 传回a+b。 */int MyClass::member_function( int a, int b )&#123;    return a+b ;&#125;</code></pre><p>当 您使用Doxygen 产生说明文档时，Doxygen 会帮您parsing 您的程式码。并且依据程序结构建立对应的文件。然后再将您的批注，依据其位置套入于正确的地方。您可能已经注意到，除了一般文字说明外，还有一些其它特别 的指令，像是@param及@return 等。这正是Doxygen 另外一个重要的部分，因为一个类别或是函式其实都有固定几个要说明的部分。为了让Doxygen 能够判断，所有我们就必需使用这些指令，来告诉Doxygen 后面的批注是在说明什么东西。Doxygen 在处理时，就会帮您把这些部分做特别的处理或是排版。甚至是制作参考连结。</p><p>首先，我们先说明在Doxygen 中对于类别或是函数批注的一个特定格式。</p><pre><code>/** * class或function的简易说明... * * class或function的详细说明... * ... */</code></pre><p>上 面这个例子要说的是，在Doxygen 处理一个class 或是function注解时，会先判断第一行为简易说明。这个简易说明将一直到空一行的出现。或是遇到第一个”.” 为止。之后的批注将会被视为详细说明。两者的差异在于Doxygen 在某些地方只会显示简易说明，而不显示详细说明。如：class 或function的列表。<br>另一种比较清楚的方式是指定@brief的指令。这将会明确的告诉Doxygen，何者是简易说明。例如：</p><pre><code>/** * @brief class或function的简易说明... * * class或function的详细说明... * ... */</code></pre><p>除了这个class 及function外，Doxygen 也可针对档案做说明，条件是该批注需置于档案的前面。主要也是利用一些指令，通常这部分注解都会放在档案的开始地方。如：</p><pre><code>/*! \file myfile.h    \brief 档案简易说明    详细说明.       \author 作者信息*/</code></pre><p>如您所见，档案批注约略格式如上，请别被”&quot; 所搞混。其实，”&quot; 与”@” 都是一样的，都是告诉Doxygen 后面是一个指令。两种在Doxygen 都可使用。笔者自己比较偏好使用”@”。<br>接着我们来针对一些常用的指令做说明：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>@file</td><td>档案的批注说明。</td></tr><tr><td>@author</td><td>作者的信息</td></tr><tr><td>@brief</td><td>用于class 或function的批注中，后面为class 或function的简易说明。</td></tr><tr><td>@param</td><td>格式为 @param arg_name 参数说明 主要用于函式说明中，后面接参数的名字，然后再接关于该参数的说明。</td></tr><tr><td>@return</td><td>后面接函数传回值的说明。用于function的批注中。说明该函数的传回值。</td></tr><tr><td>@retval</td><td>格式为 @retval value 传回值说明 主要用于函式说明中，说明特定传回值的意义。所以后面要先接一个传回值。然后在放该传回值的说明。</td></tr></tbody></table><p>Doxygen 所支持的指令很多，有些甚至是关于输出排版的控制。您可从Doxygen的使用说明中找到详尽的说明。<br>下面我们准备一组example.h 及example.cpp 来说明Doxygen 批注的使用方式：</p><p>example.h:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;** * @file 本范例的include档案。 * * 这个档案只定义example这个class。 * * @author garylee@localhost *&#x2F;       #define EXAMPLE_OK  0   &#x2F;&#x2F;&#x2F;&lt; 定义EXAMPLE_OK的宏为0。&#x2F;** * @brief Example class的简易说明 * * 本范例说明Example class。 * 这是一个极为简单的范例。 * *&#x2F;class Example &#123;    private:        int var1 ; &#x2F;&#x2F;&#x2F;&lt; 这是一个private的变数    public:        int var2 ; &#x2F;&#x2F;&#x2F;&lt; 这是一个public的变数成员。        int var3 ; &#x2F;&#x2F;&#x2F;&lt; 这是另一个public的变数成员。        void ExFunc1(void);        int ExFunc2(int a, char b);        char *ExFunc3(char *c) ;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example.cpp:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;** * @file 本范例的程序代码档案。 * * 这个档案用来定义example这个class的 * member function。 * * @author garylee@localhost *&#x2F;&#x2F;** * @brief ExFunc1的简易说明 * * ExFunc1没有任何参数及传回值。 *&#x2F;void Example::ExFunc1(void)&#123;    &#x2F;&#x2F; empty funcion.&#125;&#x2F;** * @brief ExFunc2的简易说明 * * ExFunc3()传回两个参数相加的值。 * * @param a 用来相加的参数。 * @param b 用来相加的参数。 * @return 传回两个参数相加的结果。 *&#x2F;int ExFunc2(int a, char b)&#123;    return (a+b);&#125;&#x2F;** * @brief ExFunc3的简易说明 * * ExFunc3()只传回参数输入的指标。 * * @param c 传进的字符指针。 * @retval NULL 空字符串。 * @retval !NULL 非空字符串。 *&#x2F;char * ExFunc2(char * c)&#123;    return c;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS文档自动生成</title>
      <link href="/c-winform/vs-wen-dang-zi-dong-sheng-cheng/"/>
      <url>/c-winform/vs-wen-dang-zi-dong-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<p>(发现，Sandcastle主要是用于C#项目。里面的注释都是XML格式的。不太适合VC的。最终还是得用Doxygen)</p><h2 id="一、Sandcastle简介："><a href="#一、Sandcastle简介：" class="headerlink" title="一、Sandcastle简介："></a>一、Sandcastle简介：</h2><p>Sandcastle(CodeName)是微软出的用于编译发布组件（Assembly）信息的一个工具，其前身为发布VS2005之前，MS内部开发了一个用于生成帮助文档的工具。</p><h2 id="二、Sandcastle与NDoc的简单比较："><a href="#二、Sandcastle与NDoc的简单比较：" class="headerlink" title="二、Sandcastle与NDoc的简单比较："></a>二、Sandcastle与NDoc的简单比较：</h2><p>NDoc是.Net2003下的文档生成工具，它是一个开源的东东。目前已经停止开发，最新版本不支持2.0。</p><p>它们都是通过反射和Xslt技术，从dll文件及其注释（编译时加&#x2F;doc参数得到）中得到一个完整的帮助文档，文档格式可以是html或chm甚至是任何自定义的格式。</p><p>当前Sandcastle最新版本是June CTP，使用的方式仍然是命令行，不提供GUI支持；而且官方网站上给出的使用说明：其只能支持单一的dll，对于Solution仍然没有任何说明。</p><h2 id="三、如何利用Sandcastle自动生成-NET2-0开发帮助文档"><a href="#三、如何利用Sandcastle自动生成-NET2-0开发帮助文档" class="headerlink" title="三、如何利用Sandcastle自动生成.NET2.0开发帮助文档"></a>三、如何利用Sandcastle自动生成.NET2.0开发帮助文档</h2><p>A．软件安装准备工作：(下载网站：<a href="http://shfb.codeplex.com/">http://shfb.codeplex.com/</a>）</p><h4 id="1、-必备软件：HtmlHelpWorkshop-exe-网上到处都有；如果本机已经安装就无需理会；"><a href="#1、-必备软件：HtmlHelpWorkshop-exe-网上到处都有；如果本机已经安装就无需理会；" class="headerlink" title="1、 必备软件：HtmlHelpWorkshop.exe 网上到处都有；如果本机已经安装就无需理会；"></a>1、 必备软件：HtmlHelpWorkshop.exe 网上到处都有；如果本机已经安装就无需理会；</h4><h4 id="2、下载该软件，网址：http-shfb-codeplex-com"><a href="#2、下载该软件，网址：http-shfb-codeplex-com" class="headerlink" title="2、下载该软件，网址：http://shfb.codeplex.com/"></a>2、下载该软件，网址：<a href="http://shfb.codeplex.com/">http://shfb.codeplex.com/</a></h4><pre><code>         解压找到文件夹InstallResources；可找到两个安装包Sandcastle_2710.msi；SandcastleHelpFileBuilder_1950.msi</code></pre><h4 id="3、开始安装，需要装两个软件（最好默认安装到C-下）"><a href="#3、开始安装，需要装两个软件（最好默认安装到C-下）" class="headerlink" title="3、开始安装，需要装两个软件（最好默认安装到C:\下）"></a>3、开始安装，需要装两个软件（最好默认安装到C:\下）</h4><pre><code>         先安装Sandcastle_2710.msi；        后安装SandcastleHelpFileBuilder_1950.msi</code></pre><h4 id="4、安装完毕后，在程序中可以找到“Sandcastle-Help-File-Builder-GUI”执行文件，运行：（里面已经新建了一个工程-7）"><a href="#4、安装完毕后，在程序中可以找到“Sandcastle-Help-File-Builder-GUI”执行文件，运行：（里面已经新建了一个工程-7）" class="headerlink" title="4、安装完毕后，在程序中可以找到“Sandcastle Help File Builder GUI”执行文件，运行：（里面已经新建了一个工程-7）"></a>4、安装完毕后，在程序中可以找到“Sandcastle Help File Builder GUI”执行文件，运行：（里面已经新建了一个工程-7）</h4><p>使用步骤：</p><h5 id="1、点击“File”–-New-Project-–-弹出对话框，输入工程名称，比如：AA，点击保存"><a href="#1、点击“File”–-New-Project-–-弹出对话框，输入工程名称，比如：AA，点击保存" class="headerlink" title="1、点击“File”–&gt; New Project –&gt;弹出对话框，输入工程名称，比如：AA，点击保存"></a>1、点击“File”–&gt; New Project –&gt;弹出对话框，输入工程名称，比如：AA，点击保存</h5><h5 id="2、见AA工程如下图"><a href="#2、见AA工程如下图" class="headerlink" title="2、见AA工程如下图"></a>2、见AA工程如下图</h5><h5 id="3、点击“右边AA”下面“Documentation-Source”，点击右键Add，选择我们开发项目已经编译好的dll和xml文件（注意：项目编译-必须输出-xml文件，方法见下面解说）"><a href="#3、点击“右边AA”下面“Documentation-Source”，点击右键Add，选择我们开发项目已经编译好的dll和xml文件（注意：项目编译-必须输出-xml文件，方法见下面解说）" class="headerlink" title="3、点击“右边AA”下面“Documentation Source”，点击右键Add，选择我们开发项目已经编译好的dll和xml文件（注意：项目编译                  必须输出 xml文件，方法见下面解说）"></a>3、点击“右边AA”下面“Documentation Source”，点击右键Add，选择我们开发项目已经编译好的dll和xml文件（注意：项目编译                  必须输出 xml文件，方法见下面解说）</h5><h5 id="4、配置相关属性"><a href="#4、配置相关属性" class="headerlink" title="4、配置相关属性;"></a>4、配置相关属性;</h5><pre><code>    ①、FrameworkVersion --- 选择对应项目的.net版本(目前支到4.0)    ②、ProjectSummary     ---  项目说明-编译后的hm--Title属性名称    ③、HtmlHelpName       ---   输出chm文件的名称    ④、HelpTitle                  ---   文件标题说明    ⑤、HelpFileFormat      ---   选择HtmlHelp1    ⑥、Language               ---   默认选中“英语（美）”    ⑦、CopyrightText        ---   你的版权说明    ⑧、DocumentInheritedFrameworkMembers   ---- alse    true&lt;将屏蔽继承过来的自带的一些方法说明&gt;    ⑨、DocumentInheritedMembers                       --- false    true&lt;将屏蔽继承过来的自带的一些方法说明&gt;    ⑩、OutputPath            ---  输出chm的文件夹    其他属性可默认....</code></pre><h5 id="5、点击“Bulid-the-help-file”按钮进行编译操作，"><a href="#5、点击“Bulid-the-help-file”按钮进行编译操作，" class="headerlink" title="5、点击“Bulid the help file”按钮进行编译操作，"></a>5、点击“Bulid the help file”按钮进行编译操作，</h5><p> 解说：项目生成输出xml文件操作—》点击项目属性，弹出对话—生成–勾选中 输出XML文档文件，下次编译即可输出xml文件</p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT 商业版调用activex插件</title>
      <link href="/qt/qt-shang-ye-ban-diao-yong-activex-cha-jian/"/>
      <url>/qt/qt-shang-ye-ban-diao-yong-activex-cha-jian/</url>
      
        <content type="html"><![CDATA[<p>搭建好qt项目后</p><p>在main.cpp中写入如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;test.h&quot;#include &lt;QtWidgets&#x2F;QApplication&gt;#include &lt;QAxWidget&gt;#include &lt;QString&gt;int main(int argc, char *argv[])&#123;    QApplication a(argc, argv);    QAxWidget *map&#x3D;new QAxWidget(0,0);    map-&gt;resize(1000,800);    map-&gt;setControl(QString::fromUtf8(&quot;&#123;C54A9308-CECF-42F4-85DD-96F8AD9A67C6&#125;&quot;));    map-&gt;dynamicCall(&quot;openTerrain(string,string,string,string)&quot;,&quot;http:&#x2F;&#x2F;www.drawsee.com&#x2F;service20&#x2F;TerrainService&#x2F;TerrainService.asmx&#x2F;&quot;,&quot;China&quot;,&quot;http:&#x2F;&#x2F;www.drawsee.com&#x2F;service20&#x2F;TerrainImageService&#x2F;TerrainImageService.asmx&#x2F;&quot;,&quot;earthnew&quot;);    map-&gt;show();    &#x2F;&#x2F;test w;    &#x2F;&#x2F;w.show();    return a.exec();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C54A9308-CECF-42F4-85DD-96F8AD9A67C6是地图插件的id这个是个标识。</p><p>其中openTerrain是打开地图的方法。</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 页面跳转方式</title>
      <link href="/html-css/html-ye-mian-tiao-zhuan-fang-shi/"/>
      <url>/html-css/html-ye-mian-tiao-zhuan-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>网页的跳转在很多时候都非常的有用，下面的是两个简单的例子。仅供参考。</p><h3 id="一、用meta里直接写刷新语句：5秒后跳转到百度"><a href="#一、用meta里直接写刷新语句：5秒后跳转到百度" class="headerlink" title="一、用meta里直接写刷新语句：5秒后跳转到百度"></a>一、用meta里直接写刷新语句：5秒后跳转到百度</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;    &lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;5;url&#x3D;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;    &lt;title&gt;跳转测试&lt;&#x2F;title&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;    测试：html网页自动跳转代码    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、用javascript的window-location-href方法实现跳转"><a href="#二、用javascript的window-location-href方法实现跳转" class="headerlink" title="二、用javascript的window.location.href方法实现跳转"></a>二、用javascript的window.location.href方法实现跳转</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;script language&#x3D;&quot;javascript&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt; &#x2F;&#x2F; 方式一 直接跳转window.location.href&#x3D;&#39;hello.html&#39;;&#x2F;&#x2F; 方式二 定时跳转setTimeout(&quot;javascript:location.href&#x3D;&#39;hello.html&#39;&quot;, 5000); 以上两种任选其一&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 连接字符串</title>
      <link href="/mysql-sql-oracle/oracle-lian-jie-zi-fu-chuan/"/>
      <url>/mysql-sql-oracle/oracle-lian-jie-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p>方式一：</p><p>data source&#x3D;(DESCRIPTION&#x3D;(ADDRESS_LIST&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;IP)(PORT&#x3D;1521)))(CONNECT_DATA&#x3D;(SERVICE_NAME&#x3D;服务器)));Persist Security Info&#x3D;True;user id&#x3D;用户名;password&#x3D;密码;</p><p>方式二：<br>data source&#x3D;ip&#x2F;服务名;user id&#x3D;用户名;password&#x3D;密码;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将GPT转换成MBR</title>
      <link href="/computer/jiang-gpt-zhuan-huan-cheng-mbr/"/>
      <url>/computer/jiang-gpt-zhuan-huan-cheng-mbr/</url>
      
        <content type="html"><![CDATA[<p>准备一个pe启动盘</p><h5 id="1-单击”运行“在弹出来的窗口输入cmd回车"><a href="#1-单击”运行“在弹出来的窗口输入cmd回车" class="headerlink" title="1.单击”运行“在弹出来的窗口输入cmd回车"></a>1.单击”运行“在弹出来的窗口输入cmd回车</h5><h5 id="2-在输入“diskpart”回车"><a href="#2-在输入“diskpart”回车" class="headerlink" title="2.在输入“diskpart”回车"></a>2.在输入“diskpart”回车</h5><h5 id="3-在输入“list-disk”显示硬盘信息，查看那个盘是gpt分区类型"><a href="#3-在输入“list-disk”显示硬盘信息，查看那个盘是gpt分区类型" class="headerlink" title="3.在输入“list disk”显示硬盘信息，查看那个盘是gpt分区类型"></a>3.在输入“list disk”显示硬盘信息，查看那个盘是gpt分区类型</h5><h5 id="4-输入“select-disk-0”，表示选中磁盘0，这个看具体情况。"><a href="#4-输入“select-disk-0”，表示选中磁盘0，这个看具体情况。" class="headerlink" title="4.输入“select disk 0”，表示选中磁盘0，这个看具体情况。"></a>4.输入“select disk 0”，表示选中磁盘0，这个看具体情况。</h5><h5 id="5-输入“clean”清楚当前所选磁盘。"><a href="#5-输入“clean”清楚当前所选磁盘。" class="headerlink" title="5.输入“clean”清楚当前所选磁盘。"></a>5.输入“clean”清楚当前所选磁盘。</h5><h5 id="6-输入“convert-mbr”将gpt转换成mbr格式的了。"><a href="#6-输入“convert-mbr”将gpt转换成mbr格式的了。" class="headerlink" title="6.输入“convert mbr”将gpt转换成mbr格式的了。"></a>6.输入“convert mbr”将gpt转换成mbr格式的了。</h5><p>扩展知识：convert命令的其它用法：</p><p>convert  basic     -将磁盘从动态转换为基本。</p><p>convert  dynamic  -将磁盘从基本转换为动态。</p><p>convert  gpt      -将磁盘从MBR转换为GPT。</p><p>convert  mbr     -将磁盘从GPT转换为MBR</p><p>convert X：&#x2F;FS:NTFS(X：是所要转化的分区盘符)</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT LCDNumber使用</title>
      <link href="/qt/qt-lcdnumber-shi-yong/"/>
      <url>/qt/qt-lcdnumber-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>新建一个QT工程</p><p>然后在cpp文件中写入代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;hello.h&quot;#include &lt;qthread.h&gt;#include &lt;QVariant&gt;#include &lt;qstring.h&gt;Hello::Hello(QWidget *parent)    : QDialog(parent)&#123;        ui.setupUi(this);        ui.slider-&gt;setRange(0,1000);    connect(ui.slider,SIGNAL(valueChanged(int)),ui.lcd,SLOT(display(int)));&#125;Hello::~Hello()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拉动滑块就可以改变lcdnumber中的数值。</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows QT 商业版 试用</title>
      <link href="/qt/windows-qt-shang-ye-ban-shi-yong/"/>
      <url>/qt/windows-qt-shang-ye-ban-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>You’re about to evaluate Qt Enterprise - the cross-platform application and UI framework used to develop world-leading applications such as Skype , Adobe  Photoshop  Elements, and Google  Earth, as well as millions of embedded devices.</p><p>GETTING STARTED</p><ol><li>Use the links below to download your evaluation</li><li>Install the items you need with the online installer</li><li>Start using Qt!</li></ol><p>GET THE MOST OUT OF YOUR EVALUATION</p><ol><li>Try the Qt Creator IDE and the Qt development tools.</li><li>Dive into the rich Qt documentation - You have full access to extensive Qt documentation and examples included in your evaluation.</li><li>Discover the Qt Enterprise Resource Center - Find training material, on-demand webinars, whitepapers, and newsletters to get started with your Qt project at <a href="http://qt.digia.com/Resource-Center/">http://qt.digia.com/Resource-Center/</a></li><li>Stay tuned with product news on our Qt Blog - Get the latest updates, tips and tricks from Qt Experts at blog.qt.digia.com.</li><li>Write your own code - The best way to experience Qt is to start using it. Modifying and running the examples with the Qt Creator IDE is a great way to discover what’s possible with Qt.</li><li>Stay in touch with the Qt team - We are here to help you through the evaluation process and are available to answer your questions and concerns.</li></ol><p>TERMS OF YOUR EVALUATION</p><p>Your evaluation allows you to try Qt Enterprise for the next 30 days, ending on 2013-12-01.</p><p>Please note that the usage is restricted to the evaluation only. See the User Licensing Agreement included in each package for details.</p><p>WHERE TO DOWNLOAD YOUR EVALUATION</p><p>Qt Online Installer for Windows Host<br><a href="http://dist.qt.digia.com/developer/qt_online/qt-enterprise-windows-x86-1.4.0-2-online.exe">http://dist.qt.digia.com/developer/qt_online/qt-enterprise-windows-x86-1.4.0-2-online.exe</a></p><p>Additional download: Visual Studio Add-In<br><a href="http://dist.qt.digia.com/developer/qt_online/qt-vs-addin-1.2.2.exe">http://dist.qt.digia.com/developer/qt_online/qt-vs-addin-1.2.2.exe</a></p><p>HOW TO INSTALL</p><p>To install the Qt evaluation package, you need to enter the following information:</p><p>Name: xxxxxx<br>Company name: xxxxxx<br>Qt4 License Key: xxxxxx<br>Qt5 License Key: xxxxxx</p><p>注册试用版地址 <a href="http://qt.digia.com/Try-Qt-Now/">http://qt.digia.com/Try-Qt-Now/</a></p><p>这个用户注册的信息可以随便填写</p><p>We hope you enjoy your Qt evaluation. If you have any questions during your evaluation period, or would like to try our Qt support offering as part of your evaluation process, please let us know via our contact form, <a href="http://qt.digia.com/About-us/Contact-us/">http://qt.digia.com/About-us/Contact-us/</a>. We are happy to help.</p><p>Please note: The Qt evaluation process requires that you are informed when your 30-day evaluation license expires.  You will receive a short mail with that information in 30 days.</p><p>–<br>Best regards,<br>Team Qt<br>Get tips and tricks on developing with Qt: <a href="http://blog.qt.digia.com/">http://blog.qt.digia.com/</a><br>Twitter: @QtbyDigia<br>Contact Us: <a href="http://qt.digia.com/About-us/Contact-us/">http://qt.digia.com/About-us/Contact-us/</a></p><p>Join us at Qt Developer Days 2013 - The Premier Qt Event of the Year<br>Oct 7 - 9 Berlin, Germany | Nov 6 - 8 San Francisco, CA, USA<br>New to Qt? Decision maker? Not too techie? <em>New tracks this year</em> ‘Starter Edition’ - Berlin | ‘Why Qt’ - San Francisco<br><a href="http://qt.digia.com/qtdeveloperdays/">http://qt.digia.com/qtdeveloperdays/</a></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT 简单的计算器例子</title>
      <link href="/qt/qt-jian-dan-de-ji-suan-qi-li-zi/"/>
      <url>/qt/qt-jian-dan-de-ji-suan-qi-li-zi/</url>
      
        <content type="html"><![CDATA[<p>开发工具：vs2010、qt5.1</p><h4 id="1使用vs新建工程，Base-Class-选择QDialog"><a href="#1使用vs新建工程，Base-Class-选择QDialog" class="headerlink" title="1使用vs新建工程，Base Class 选择QDialog"></a>1使用vs新建工程，Base Class 选择QDialog</h4><p><img src="/images/2013103014542301.jpg" alt="2013103014542301.jpg"><br><img src="/images/2013103014542302.jpg" alt="2013103014542302.jpg"><br>注意：项目的路径最好是英文的，中文可能会报错。</p><h4 id="2新建项目后双击打开“hello-ui”文件，摆放控件（和vs摆放控件一样），摆放完成后直接保存退出。"><a href="#2新建项目后双击打开“hello-ui”文件，摆放控件（和vs摆放控件一样），摆放完成后直接保存退出。" class="headerlink" title="2新建项目后双击打开“hello.ui”文件，摆放控件（和vs摆放控件一样），摆放完成后直接保存退出。"></a>2新建项目后双击打开“hello.ui”文件，摆放控件（和vs摆放控件一样），摆放完成后直接保存退出。</h4><p><img src="/images/2013103014542303.jpg" alt="2013103014542303.jpg"></p><h4 id="3-双击打开“hello-h”文件，往里面添加代码"><a href="#3-双击打开“hello-h”文件，往里面添加代码" class="headerlink" title="3.双击打开“hello.h”文件，往里面添加代码"></a>3.双击打开“hello.h”文件，往里面添加代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef HELLO_H#define HELLO_H#include &lt;QtWidgets&#x2F;QDialog&gt;#include &quot;ui_hello.h&quot;class Hello : public QDialog&#123;    Q_OBJECTpublic:    Hello(QWidget *parent &#x3D; 0);    ~Hello();signals:public    slots:    void btnOK();    void btnAdd();private:    Ui::HelloClass ui;&#125;;#endif &#x2F;&#x2F; HELLO_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-打开“hello-cpp”文件，添加代码"><a href="#4-打开“hello-cpp”文件，添加代码" class="headerlink" title="4.打开“hello.cpp”文件，添加代码"></a>4.打开“hello.cpp”文件，添加代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;hello.h&quot;#include &lt;qthread.h&gt;#include &lt;QVariant&gt;#include &lt;qstring.h&gt;Hello::Hello(QWidget *parent)    : QDialog(parent)&#123;        ui.setupUi(this);    ui.leResult-&gt;setEnabled(false);    connect(ui.pbOK,SIGNAL(clicked()),this,SLOT(btnAdd()));    connect(ui.pbExit,SIGNAL(clicked()),this,SLOT(close()));&#125;Hello::~Hello()&#123;&#125;void Hello::btnOK()&#123;    ui.pbOK-&gt;setText(&quot;Cancel&quot;);    QThread::sleep(2);    connect(ui.pbOK,SIGNAL(clicked()),this,SLOT(close()));&#125;void Hello::btnAdd()&#123;    QString num1 &#x3D; ui.leNum1-&gt;text();    QString num2 &#x3D; ui.leNum2-&gt;text();    double result;    switch(ui.cbOper-&gt;currentIndex())    &#123;        case 0:            result &#x3D; num1.toDouble() + num2.toDouble();            break;        case 1:            result &#x3D;num1.toDouble() - num2.toDouble();            break;        case 2:            result &#x3D; num1.toDouble() * num2.toDouble();            break;        case 3:            result &#x3D; num1.toDouble() &#x2F; num2.toDouble();            break;    &#125;    ui.leResult-&gt;setText(QString::number(result));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下搭建QT环境</title>
      <link href="/c-winform/windows-xia-da-jian-qt-huan-jing/"/>
      <url>/c-winform/windows-xia-da-jian-qt-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>必须软件</p><p><a href="http://yunpan.cn/QbTKe5j7A9J9d">qt-windows-opensource-5.1.1-msvc2010-x86-offline</a></p><p><a href="http://yunpan.cn/QbTKXdMtwF6zI">qt-vs-addin-1.2.2-opensource</a> 支持vs2008、2010、2012安装完成后vs开发工具会出现<br><img src="/images/2013102215451201.png" alt="2013102215451201.png"></p><p>安装qt 5.1.1后打开vs工具选择qt5—qt opitons 弹出一个窗口，然偶点击add，填写版本号及路径，然后点击确定。<br><img src="/images/2013102215451202.png" alt="2013102215451202.png"></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 创建 ImageButton</title>
      <link href="/silverlight/silverlight-chuang-jian-imagebutton/"/>
      <url>/silverlight/silverlight-chuang-jian-imagebutton/</url>
      
        <content type="html"><![CDATA[<p>这几天一直在折腾怎么在silverlight 按钮上添加图片，直接向imagebutton那样设置成属性可以直接更改，最后到处查找资料终于搞出一个imagebutton了。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;Style x:Key&#x3D;&quot;ButtonStyle1&quot; TargetType&#x3D;&quot;Button&quot;&gt;    &lt;Setter Property&#x3D;&quot;Background&quot; Value&#x3D;&quot;#FF1F3B53&quot;&#x2F;&gt;    &lt;Setter Property&#x3D;&quot;Foreground&quot; Value&#x3D;&quot;#FF000000&quot;&#x2F;&gt;    &lt;Setter Property&#x3D;&quot;Padding&quot; Value&#x3D;&quot;3&quot;&#x2F;&gt;    &lt;Setter Property&#x3D;&quot;BorderThickness&quot; Value&#x3D;&quot;1&quot;&#x2F;&gt;    &lt;Setter Property&#x3D;&quot;BorderBrush&quot;&gt;        &lt;Setter.Value&gt;            &lt;LinearGradientBrush EndPoint&#x3D;&quot;0.5,1&quot; StartPoint&#x3D;&quot;0.5,0&quot;&gt;                &lt;GradientStop Color&#x3D;&quot;#FFA3AEB9&quot; Offset&#x3D;&quot;0&quot;&#x2F;&gt;                &lt;GradientStop Color&#x3D;&quot;#FF8399A9&quot; Offset&#x3D;&quot;0.375&quot;&#x2F;&gt;                &lt;GradientStop Color&#x3D;&quot;#FF718597&quot; Offset&#x3D;&quot;0.375&quot;&#x2F;&gt;                &lt;GradientStop Color&#x3D;&quot;#FF617584&quot; Offset&#x3D;&quot;1&quot;&#x2F;&gt;            &lt;&#x2F;LinearGradientBrush&gt;        &lt;&#x2F;Setter.Value&gt;    &lt;&#x2F;Setter&gt;    &lt;Setter Property&#x3D;&quot;Template&quot;&gt;        &lt;Setter.Value&gt;            &lt;ControlTemplate TargetType&#x3D;&quot;Button&quot;&gt;                &lt;Grid&gt;                    &lt;VisualStateManager.VisualStateGroups&gt;                        &lt;VisualStateGroup x:Name&#x3D;&quot;CommonStates&quot;&gt;                            &lt;VisualState x:Name&#x3D;&quot;Normal&quot;&#x2F;&gt;                            &lt;VisualState x:Name&#x3D;&quot;MouseOver&quot;&gt;                                &lt;Storyboard&gt;                                    &lt;DoubleAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;1&quot; Storyboard.TargetProperty&#x3D;&quot;Opacity&quot; Storyboard.TargetName&#x3D;&quot;BackgroundAnimation&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#F2FFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#CCFFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#7FFFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                &lt;&#x2F;Storyboard&gt;                            &lt;&#x2F;VisualState&gt;                            &lt;VisualState x:Name&#x3D;&quot;Pressed&quot;&gt;                                &lt;Storyboard&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#FF6DBDD1&quot; Storyboard.TargetProperty&#x3D;&quot;(Border.Background).(SolidColorBrush.Color)&quot; Storyboard.TargetName&#x3D;&quot;Background&quot;&#x2F;&gt;                                    &lt;DoubleAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;1&quot; Storyboard.TargetProperty&#x3D;&quot;Opacity&quot; Storyboard.TargetName&#x3D;&quot;BackgroundAnimation&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#D8FFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#C6FFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#8CFFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                    &lt;ColorAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;#3FFFFFFF&quot; Storyboard.TargetProperty&#x3D;&quot;(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)&quot; Storyboard.TargetName&#x3D;&quot;BackgroundGradient&quot;&#x2F;&gt;                                &lt;&#x2F;Storyboard&gt;                            &lt;&#x2F;VisualState&gt;                            &lt;VisualState x:Name&#x3D;&quot;Disabled&quot;&gt;                                &lt;Storyboard&gt;                                    &lt;DoubleAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;.55&quot; Storyboard.TargetProperty&#x3D;&quot;Opacity&quot; Storyboard.TargetName&#x3D;&quot;DisabledVisualElement&quot;&#x2F;&gt;                                &lt;&#x2F;Storyboard&gt;                            &lt;&#x2F;VisualState&gt;                        &lt;&#x2F;VisualStateGroup&gt;                        &lt;VisualStateGroup x:Name&#x3D;&quot;FocusStates&quot;&gt;                            &lt;VisualState x:Name&#x3D;&quot;Focused&quot;&gt;                                &lt;Storyboard&gt;                                    &lt;DoubleAnimation Duration&#x3D;&quot;0&quot; To&#x3D;&quot;1&quot; Storyboard.TargetProperty&#x3D;&quot;Opacity&quot; Storyboard.TargetName&#x3D;&quot;FocusVisualElement&quot;&#x2F;&gt;                                &lt;&#x2F;Storyboard&gt;                            &lt;&#x2F;VisualState&gt;                            &lt;VisualState x:Name&#x3D;&quot;Unfocused&quot;&#x2F;&gt;                        &lt;&#x2F;VisualStateGroup&gt;                    &lt;&#x2F;VisualStateManager.VisualStateGroups&gt;                    &lt;Border x:Name&#x3D;&quot;Background&quot; BorderBrush&#x3D;&quot;&#123;TemplateBinding BorderBrush&#125;&quot; BorderThickness&#x3D;&quot;&#123;TemplateBinding BorderThickness&#125;&quot; Background&#x3D;&quot;White&quot; CornerRadius&#x3D;&quot;3&quot;&gt;                        &lt;Grid Background&#x3D;&quot;&#123;TemplateBinding Background&#125;&quot; Margin&#x3D;&quot;1&quot;&gt;                            &lt;Border x:Name&#x3D;&quot;BackgroundAnimation&quot; Background&#x3D;&quot;#FF448DCA&quot; Opacity&#x3D;&quot;0&quot;&#x2F;&gt;                            &lt;Rectangle x:Name&#x3D;&quot;BackgroundGradient&quot;&gt;                                &lt;Rectangle.Fill&gt;                                    &lt;LinearGradientBrush EndPoint&#x3D;&quot;.7,1&quot; StartPoint&#x3D;&quot;.7,0&quot;&gt;                                        &lt;GradientStop Color&#x3D;&quot;#FFFFFFFF&quot; Offset&#x3D;&quot;0&quot;&#x2F;&gt;                                        &lt;GradientStop Color&#x3D;&quot;#F9FFFFFF&quot; Offset&#x3D;&quot;0.375&quot;&#x2F;&gt;                                        &lt;GradientStop Color&#x3D;&quot;#E5FFFFFF&quot; Offset&#x3D;&quot;0.625&quot;&#x2F;&gt;                                        &lt;GradientStop Color&#x3D;&quot;#C6FFFFFF&quot; Offset&#x3D;&quot;1&quot;&#x2F;&gt;                                    &lt;&#x2F;LinearGradientBrush&gt;                                &lt;&#x2F;Rectangle.Fill&gt;                            &lt;&#x2F;Rectangle&gt;                        &lt;&#x2F;Grid&gt;                    &lt;&#x2F;Border&gt;                    &lt;ContentPresenter x:Name&#x3D;&quot;contentPresenter&quot; ContentTemplate&#x3D;&quot;&#123;TemplateBinding ContentTemplate&#125;&quot; Margin&#x3D;&quot;4,3,0,3&quot; VerticalAlignment&#x3D;&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot; HorizontalAlignment&#x3D;&quot;Left&quot;&gt;                        &lt;Image Height&#x3D;&quot;32&quot; Source&#x3D;&quot;&#123;TemplateBinding Content&#125;&quot; Stretch&#x3D;&quot;Fill&quot; Width&#x3D;&quot;32&quot;&#x2F;&gt;                    &lt;&#x2F;ContentPresenter&gt;                    &lt;Rectangle x:Name&#x3D;&quot;DisabledVisualElement&quot; Fill&#x3D;&quot;#FFFFFFFF&quot; IsHitTestVisible&#x3D;&quot;false&quot; Opacity&#x3D;&quot;0&quot; RadiusY&#x3D;&quot;3&quot; RadiusX&#x3D;&quot;3&quot;&#x2F;&gt;                    &lt;Rectangle x:Name&#x3D;&quot;FocusVisualElement&quot; IsHitTestVisible&#x3D;&quot;false&quot; Margin&#x3D;&quot;1&quot; Opacity&#x3D;&quot;0&quot; RadiusY&#x3D;&quot;2&quot; RadiusX&#x3D;&quot;2&quot; Stroke&#x3D;&quot;#FF6DBDD1&quot; StrokeThickness&#x3D;&quot;1&quot;&#x2F;&gt;                    &lt;TextBlock TextWrapping&#x3D;&quot;Wrap&quot; TextAlignment&#x3D;&quot;Center&quot; Text&#x3D;&quot;&#123;TemplateBinding Tag&#125;&quot; Height&#x3D;&quot;24&quot; VerticalAlignment&#x3D;&quot;Center&quot; HorizontalAlignment&#x3D;&quot;Center&quot;&#x2F;&gt;                &lt;&#x2F;Grid&gt;            &lt;&#x2F;ControlTemplate&gt;        &lt;&#x2F;Setter.Value&gt;    &lt;&#x2F;Setter&gt;&lt;&#x2F;Style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的做好的style样式放入UserControl.Resources标签中，到时候直接放一个按钮直接引用该样式即可</p><p>例如：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;Button x:Name&#x3D;&quot;btn1&quot; Content&#x3D;&quot;&#x2F;FrameTest;component&#x2F;images&#x2F;Normal.png&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Height&#x3D;&quot;38&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;122&quot; Style&#x3D;&quot;&#123;StaticResource ButtonStyle1&#125;&quot; Tag&#x3D;&quot;ImageButton&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/2013071914243501.jpg" alt="2013071914243501.jpg"><br>搞到这里就算完成了，如果大家有什么更好的方法欢迎和我交流！</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Siverlight5 3D 中文环境搭建</title>
      <link href="/silverlight/siverlight5-3d-zhong-wen-huan-jing-da-jian/"/>
      <url>/silverlight/siverlight5-3d-zhong-wen-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-测试环境"><a href="#一-测试环境" class="headerlink" title="一.测试环境"></a>一.测试环境</h2><p>　　vs2010旗舰版</p><p>　　win7 64位旗舰版</p><h2 id="二-必备工具"><a href="#二-必备工具" class="headerlink" title="二.必备工具"></a>二.必备工具</h2><h4 id="1-vs2010-旗舰版"><a href="#1-vs2010-旗舰版" class="headerlink" title="1.vs2010 旗舰版"></a>1.vs2010 旗舰版</h4><h4 id="2-vs2010-sp1-补丁"><a href="#2-vs2010-sp1-补丁" class="headerlink" title="2.vs2010 sp1 补丁"></a>2.<a href="http://203.212.2.147/download.microsoft.com/download/E/B/A/EBA0A152-F426-47E6-9E3F-EFB686E3CA20/VS2010SP1dvd1.iso">vs2010 sp1 补丁</a></h4><h4 id="3-silverlight5-tools-也可以去silverlight官网下载"><a href="#3-silverlight5-tools-也可以去silverlight官网下载" class="headerlink" title="3.silverlight5 tools 也可以去silverlight官网下载"></a>3.<a href="http://www.microsoft.com/en-us/download/details.aspx?id=28358">silverlight5 tools</a> 也可以去<a href="http://www.microsoft.com/silverlight">silverlight官网</a>下载</h4><p>　　　　注意：现在的 silverlight5 tools 没有支持中文的，可以先用winrar解压出来，然后将ParameterInfo.xml中的1033全部替换成2052，然后在安装。具体操作请参考<a href="http://www.silverlightchina.net/html/tips/2011/1227/12878.html">http://www.silverlightchina.net/html/tips/2011/1227/12878.html</a></p><h4 id="4-Silverlight-Toolkit-December-2011-for-Silverlight-5-在官网也可以找到-http-msdn-microsoft-com-en-us-silverlight-bb187452"><a href="#4-Silverlight-Toolkit-December-2011-for-Silverlight-5-在官网也可以找到-http-msdn-microsoft-com-en-us-silverlight-bb187452" class="headerlink" title="4.Silverlight Toolkit (December 2011) for Silverlight 5 在官网也可以找到 http://msdn.microsoft.com/en-us/silverlight/bb187452"></a>4.<a href="http://silverlight.codeplex.com/releases/view/78435">Silverlight Toolkit (December 2011) for Silverlight 5</a> 在官网也可以找到 <a href="http://msdn.microsoft.com/en-us/silverlight/bb187452">http://msdn.microsoft.com/en-us/silverlight/bb187452</a></h4><h2 id="三-搭建环境"><a href="#三-搭建环境" class="headerlink" title="三.搭建环境"></a>三.搭建环境</h2><h4 id="1-在必备工具中执行第3、4步后就会在C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-1033中找到Silverlight-Unit-Test-Project、Silverlight3dApp、-Silverlight3dLib这三个模板（如果是64bit系统则在C-Program-Files-x86-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-1033中）。将这三个模板文件拷贝到vs2010-安装路径的2052目录下默认的安装的路径是C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-2052（比如我的vs2010安装在D盘，这路径在D-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-2052），如果是64bit系统这在Program-Files-x86-文件夹下。"><a href="#1-在必备工具中执行第3、4步后就会在C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-1033中找到Silverlight-Unit-Test-Project、Silverlight3dApp、-Silverlight3dLib这三个模板（如果是64bit系统则在C-Program-Files-x86-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-1033中）。将这三个模板文件拷贝到vs2010-安装路径的2052目录下默认的安装的路径是C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-2052（比如我的vs2010安装在D盘，这路径在D-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-ProjectTemplates-CSharp-Silverlight-2052），如果是64bit系统这在Program-Files-x86-文件夹下。" class="headerlink" title="1.在必备工具中执行第3、4步后就会在C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\1033中找到Silverlight Unit Test Project、Silverlight3dApp、　　　　　　Silverlight3dLib这三个模板（如果是64bit系统则在C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\1033中）。将这三个模板文件拷贝到vs2010　　　      安装路径的2052目录下默认的安装的路径是C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\2052（比如我的vs2010安装在D盘，这路径在D:\Program  　　　　Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\2052），如果是64bit系统这在Program Files (x86)文件夹下。"></a>1.在必备工具中执行第3、4步后就会在C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\1033中找到Silverlight Unit Test Project、Silverlight3dApp、　　　　　　Silverlight3dLib这三个模板（如果是64bit系统则在C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\1033中）。将这三个模板文件拷贝到vs2010　　　      安装路径的2052目录下默认的安装的路径是C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\2052（比如我的vs2010安装在D盘，这路径在D:\Program  　　　　Files\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Silverlight\2052），如果是64bit系统这在Program Files (x86)文件夹下。</h4><p><img src="/images/2013062617141501.jpg" alt="2013062617141501.jpg"></p><h4 id="2-通过cmd命令（vista及以上系统，记得要“以管理员身份运行”，在搜索栏中输入cmd，然后在搜索的结果中右键-以管理员身份运行）安装模板文件-先要在dos界面中打开vs安装的默认路径中的C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-在执行以下命令。"><a href="#2-通过cmd命令（vista及以上系统，记得要“以管理员身份运行”，在搜索栏中输入cmd，然后在搜索的结果中右键-以管理员身份运行）安装模板文件-先要在dos界面中打开vs安装的默认路径中的C-Program-Files-Microsoft-Visual-Studio-10-0-Common7-IDE-在执行以下命令。" class="headerlink" title="2.通过cmd命令（vista及以上系统，记得要“以管理员身份运行”，在搜索栏中输入cmd，然后在搜索的结果中右键 以管理员身份运行）安装模板文件(先要在dos界面中打开vs安装的默认路径中的C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE)在执行以下命令。"></a>2.通过cmd命令（vista及以上系统，记得要“以管理员身份运行”，在搜索栏中输入cmd，然后在搜索的结果中右键 以管理员身份运行）安装模板文件(先要在dos界面中打开vs安装的默认路径中的C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE)在执行以下命令。</h4><p><img src="/images/2013062617141502.jpg" alt="2013062617141502.jpg"></p><h5 id="2-1-执行devenv-setup-命令。"><a href="#2-1-执行devenv-setup-命令。" class="headerlink" title="2.1 执行devenv &#x2F;setup 命令。"></a>2.1 执行devenv &#x2F;setup 命令。</h5><h5 id="2-2-执行devenv-installvstemplates-命令。"><a href="#2-2-执行devenv-installvstemplates-命令。" class="headerlink" title="2.2 执行devenv &#x2F;installvstemplates 命令。"></a>2.2 执行devenv &#x2F;installvstemplates 命令。</h5><p>安装的快慢取决于机器的性能，如果慢就多等会。执行完这几步后就会多出三项<br><img src="/images/2013062617141503.jpg" alt="2013062617141503.jpg"></p><h4 id="3-新建3D项目，直接弹出错误窗口“创建子项目-Silverlight3dAppContent-时遇到问题。无法找到指定的模板。请检查完整路径是否正确”。可以看看这篇文章http-bbs-silverlightchina-net-forum-php-mod-viewthread-tid-13149"><a href="#3-新建3D项目，直接弹出错误窗口“创建子项目-Silverlight3dAppContent-时遇到问题。无法找到指定的模板。请检查完整路径是否正确”。可以看看这篇文章http-bbs-silverlightchina-net-forum-php-mod-viewthread-tid-13149" class="headerlink" title="3.新建3D项目，直接弹出错误窗口“创建子项目 Silverlight3dAppContent 时遇到问题。无法找到指定的模板。请检查完整路径是否正确”。可以看看这篇文章http://bbs.silverlightchina.net/forum.php?mod=viewthread&amp;tid=13149"></a>3.新建3D项目，直接弹出错误窗口“创建子项目 Silverlight3dAppContent 时遇到问题。无法找到指定的模板。请检查完整路径是否正确”。可以看看这篇文章<a href="http://bbs.silverlightchina.net/forum.php?mod=viewthread&tid=13149">http://bbs.silverlightchina.net/forum.php?mod=viewthread&amp;tid=13149</a></h4><p><img src="/images/2013062617141504.jpg" alt="2013062617141504.jpg"><br>在百度、谷歌上查找原因，原来是需要安装<a href="http://www.microsoft.com/en-us/download/details.aspx?id=23714">XNA Game Studio 4.0</a> （微软链接地址<a href="http://www.microsoft.com/en-us/download/details.aspx?id=23714%EF%BC%89">http://www.microsoft.com/en-us/download/details.aspx?id=23714）</a></p><h4 id="4-安装完这些后终于可以创建silverlight-3D项目了，在按F6生成解决方案是报错了-Error-1-Compile-error-2147024770-0-0-error-Unknown-compile-error-check-flags-against-DX-version-。在去查找原因，缺少dx的那个文件，去下载一个dx，directx-Jun2010-redist-exe-（http-www-microsoft-com-en-us-download-details-aspx-id-8109），安装这个dx后就没有问题了，可能xp环境没有这个问题。"><a href="#4-安装完这些后终于可以创建silverlight-3D项目了，在按F6生成解决方案是报错了-Error-1-Compile-error-2147024770-0-0-error-Unknown-compile-error-check-flags-against-DX-version-。在去查找原因，缺少dx的那个文件，去下载一个dx，directx-Jun2010-redist-exe-（http-www-microsoft-com-en-us-download-details-aspx-id-8109），安装这个dx后就没有问题了，可能xp环境没有这个问题。" class="headerlink" title="4.安装完这些后终于可以创建silverlight 3D项目了，在按F6生成解决方案是报错了(Error 1 Compile error -2147024770 　　(0, 0): error : Unknown compile error (check flags against DX version))。在去查找原因，缺少dx的那个文件，去下载一个dx，directx_Jun2010_redist.exe （http://www.microsoft.com/en-us/download/details.aspx?id=8109），安装这个dx后就没有问题了，可能xp环境没有这个问题。"></a>4.安装完这些后终于可以创建silverlight 3D项目了，在按F6生成解决方案是报错了(Error 1 Compile error -2147024770 　　(0, 0): error : Unknown compile error (check flags against DX version))。在去查找原因，缺少dx的那个文件，去下载一个dx，directx_Jun2010_redist.exe （<a href="http://www.microsoft.com/en-us/download/details.aspx?id=8109%EF%BC%89%EF%BC%8C%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AAdx%E5%90%8E%E5%B0%B1%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98%E4%BA%86%EF%BC%8C%E5%8F%AF%E8%83%BDxp%E7%8E%AF%E5%A2%83%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E3%80%82">http://www.microsoft.com/en-us/download/details.aspx?id=8109），安装这个dx后就没有问题了，可能xp环境没有这个问题。</a></h4><p><img src="/images/2013062617141505.jpg" alt="2013062617141505.jpg"></p><h4 id="5-silverlight项目配置"><a href="#5-silverlight项目配置" class="headerlink" title="5.silverlight项目配置"></a>5.silverlight项目配置</h4><h5 id="5-1-在Silverlight项目属性中，选中“允许在浏览器外运行应用程序“和”在浏览器内运行时需要提升的信任“，这时项目的Properties目录下-将产生对应的OutOfBrowserSettings-xml和InBrowserSettings-xml两个文件，而后续步骤的设置将改变这两个文-件的内容"><a href="#5-1-在Silverlight项目属性中，选中“允许在浏览器外运行应用程序“和”在浏览器内运行时需要提升的信任“，这时项目的Properties目录下-将产生对应的OutOfBrowserSettings-xml和InBrowserSettings-xml两个文件，而后续步骤的设置将改变这两个文-件的内容" class="headerlink" title="5.1.在Silverlight项目属性中，选中“允许在浏览器外运行应用程序“和”在浏览器内运行时需要提升的信任“，这时项目的Properties目录下 将产生对应的OutOfBrowserSettings.xml和InBrowserSettings.xml两个文件，而后续步骤的设置将改变这两个文 件的内容"></a>5.1.在Silverlight项目属性中，选中“允许在浏览器外运行应用程序“和”在浏览器内运行时需要提升的信任“，这时项目的Properties目录下 将产生对应的OutOfBrowserSettings.xml和InBrowserSettings.xml两个文件，而后续步骤的设置将改变这两个文 件的内容</h5><h5 id="5-2、点击“浏览器外设置”，勾选“使用GPU加速”与“在浏览器之外运行时需要提升的信任”-，以保证使用GPU加速，如果此两项不选，则会出现RenderModeReason-GPUAccelerationDisabled的情况。"><a href="#5-2、点击“浏览器外设置”，勾选“使用GPU加速”与“在浏览器之外运行时需要提升的信任”-，以保证使用GPU加速，如果此两项不选，则会出现RenderModeReason-GPUAccelerationDisabled的情况。" class="headerlink" title="5.2、点击“浏览器外设置”，勾选“使用GPU加速”与“在浏览器之外运行时需要提升的信任” ，以保证使用GPU加速，如果此两项不选，则会出现RenderModeReason.GPUAccelerationDisabled的情况。"></a>5.2、点击“浏览器外设置”，勾选“使用GPU加速”与“在浏览器之外运行时需要提升的信任” ，以保证使用GPU加速，如果此两项不选，则会出现RenderModeReason.GPUAccelerationDisabled的情况。</h5><p><img src="/images/2013062617141506.jpg" alt="2013062617141506.jpg"></p><p>将app设置为启动项目，运行后效果如图<br><img src="/images/2013062617141507.jpg" alt="2013062617141507.jpg"></p><p>注意在网页中运行</p><p>  必须在网页中添加这个是允许gpu加速。</p>  <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;param name&#x3D;&quot;enableGPUAcceleration&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VC++ 查询数据（SQL）</title>
      <link href="/c-c/vc-cha-xun-shu-ju-sql/"/>
      <url>/c-c/vc-cha-xun-shu-ju-sql/</url>
      
        <content type="html"><![CDATA[<p>使用VC++创建一个基于对话框的MFC应用程序</p><p>在stdafx.h头文件中引入 msado15.dll文件</p><p>#import “C:\Program Files\Common Files\System\ado\msado15.dll” no_namespace rename(“EOF”,”adoEOF”)文件的路径</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void CADODlg::OnBnClickedBtnquery()&#123;    &#x2F;&#x2F; TODO: 在此添加控件通知处理程序代码    CoInitialize(NULL);    _ConnectionPtr pConn(__uuidof(Connection));    _RecordsetPtr pRst(__uuidof(Recordset));    _CommandPtr pCmd(__uuidof(Command));    pConn-&gt;ConnectionString&#x3D;&quot;Provider&#x3D;SQLOLEDB.1;Server&#x3D;.;DATABASE&#x3D;Users;UID&#x3D;sa;PWD&#x3D;***;&quot;;    pConn-&gt;Open(&quot;&quot;,&quot;&quot;,&quot;&quot;,adConnectUnspecified);    &#x2F;&#x2F;pRst&#x3D;pConn-&gt;Execute(&quot;select * from [User]&quot;,NULL,adCmdText);    &#x2F;&#x2F;pRst-&gt;Open(&quot;select * from [User]&quot;,_variant_t((IDispatch*)pConn),adOpenDynamic,adLockOptimistic,adCmdText);    pCmd-&gt;put_ActiveConnection(_variant_t((IDispatch*)pConn));    pCmd-&gt;CommandText&#x3D;&quot;select * from [User]&quot;;    pRst&#x3D;pCmd-&gt;Execute(NULL,NULL,adCmdText);    while(!pRst-&gt;adoEOF)    &#123;        ((CListBox*)GetDlgItem(IDC_LIST1))-&gt;AddString((_bstr_t)pRst-&gt;GetCollect(&quot;Name&quot;));        pRst-&gt;MoveNext();    &#125;    pRst-&gt;Close();    pConn-&gt;Close();    pCmd.Release();    pRst.Release();    pConn.Release();    CoUninitialize();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ExtJs 4.0 视频教程代码</title>
      <link href="/js/extjs-4.0-shi-pin-jiao-cheng-dai-ma/"/>
      <url>/js/extjs-4.0-shi-pin-jiao-cheng-dai-ma/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.uspcat.com/?fromuid=13092">http://www.uspcat.com/?fromuid=13092</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ext智能提示</title>
      <link href="/js/ext-zhi-neng-ti-shi/"/>
      <url>/js/ext-zhi-neng-ti-shi/</url>
      
        <content type="html"><![CDATA[<p>Java： spket   <a href="http://www.spket.com/">http://www.spket.com/</a></p><p>VS ： EXT.NET <a href="http://www.ext.net/">http://www.ext.net/</a></p><p>具体操作参考 <a href="http://blog.163.com/lfsyhuangaigang@126/blog/static/77436670201211240313741/">http://blog.163.com/lfsyhuangaigang@126/blog/static/77436670201211240313741/</a></p><p><a href="http://blog.csdn.net/tianxiaode/article/details/7662912">http://blog.csdn.net/tianxiaode/article/details/7662912</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识扩展（线程SQL、SMTP、POP3、反射）</title>
      <link href="/c-winform/zhi-shi-kuo-zhan-xian-cheng-sql-smtp-pop3-fan-she/"/>
      <url>/c-winform/zhi-shi-kuo-zhan-xian-cheng-sql-smtp-pop3-fan-she/</url>
      
        <content type="html"><![CDATA[<p>C#线程中安全的使访问示例</p><p>刚学C#线程的朋友有可以在不知道如何在线程里调用，访问控件，，我给大家一个示例代码，，，以后可以当模板用</p><p><a href="http://blog.csdn.net/ssihc0/archive/2010/10/29/5974016.aspx">http://blog.csdn.net/ssihc0/archive/2010/10/29/5974016.aspx</a></p><p>c# 后台线程和前台线程</p><p>后台线程和前面线程的最大区别在于，后台线程不会阻止进程中止，，当属于某个进程的所有前台线程都中止了，，，，公共语言运行库就会结束该进程，所有剩余后台线程都会停止且不会完成。</p><p><a href="http://blog.csdn.net/ssihc0/archive/2010/02/23/5320532.aspx#1581510">http://blog.csdn.net/ssihc0/archive/2010/02/23/5320532.aspx#1581510</a></p><p>sql语句开远程终端+建用户+2003添加远程桌面组用户</p><p>没有技术含量,纯属一次偶然中的方便, 代码在查询分析器上可以一步完成以上操作,在2003和XP实验已经成功. 代码如下:</p><p><a href="http://blog.csdn.net/ssihc0/archive/2011/01/18/6150262.aspx">http://blog.csdn.net/ssihc0/archive/2011/01/18/6150262.aspx</a></p><p>C# SMTP与POP3应用编程</p><p><a href="http://wenku.baidu.com/view/983bcf39376baf1ffc4fadfd.html">http://wenku.baidu.com/view/983bcf39376baf1ffc4fadfd.html</a></p><p>SMTP与POP3编程</p><p><a href="http://wenku.baidu.com/view/d1f594b169dc5022aaea0015.html">http://wenku.baidu.com/view/d1f594b169dc5022aaea0015.html</a></p><p> C#怎样测试SmtpClient客户端是否成功连接SmtpServer？</p><p><a href="http://blog.csdn.net/zjfei/archive/2009/11/10/4795875.aspx">http://blog.csdn.net/zjfei/archive/2009/11/10/4795875.aspx</a></p><p>C#连接GMail的SMTP服务器发邮件的代码</p><p><a href="http://www.xwooo.com/LabView_303.html">http://www.xwooo.com/LabView_303.html</a></p><p>使用C#进行SMTP协议客户端开发心得－－连接篇</p><p><a href="http://www.xinfengit.com/200907/1566621.html">http://www.xinfengit.com/200907/1566621.html</a></p><p>了解POP3协议,使用简单的代码监控pop3邮箱,或者不用代码,直接使用telnet</p><p><a href="http://blog.csdn.net/SkyGG/archive/2004/08/04/60736.aspx">http://blog.csdn.net/SkyGG/archive/2004/08/04/60736.aspx</a></p><p>POP3 命令简介</p><p><a href="http://wenku.baidu.com/view/ec3bc969a98271fe910ef936.html">http://wenku.baidu.com/view/ec3bc969a98271fe910ef936.html</a></p><p>C#将字符串拼接后再转成对象输出其值，将一个string的字符串转成一个对象变量，反射</p><p><a href="http://www.javaeye.com/topic/247406">http://www.javaeye.com/topic/247406</a></p><p>Winform c# listview行高的设置</p><p><a href="http://blog.csdn.net/hfzsjz/archive/2008/11/06/3241533.aspx">http://blog.csdn.net/hfzsjz/archive/2008/11/06/3241533.aspx</a></p><p>Oracle、SQL Server中如何锁定DB和解锁DB</p><p><a href="http://tech.ccidnet.com/art/1105/20080805/1533621_1.html">http://tech.ccidnet.com/art/1105/20080805/1533621_1.html</a></p><p>来自于：<a href="http://blog.csdn.net/chong4r/article/details/6156186">http://blog.csdn.net/chong4r/article/details/6156186</a></p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 下载|ORACLE 官网下载地址（支持win7/win2008）</title>
      <link href="/mysql-sql-oracle/oracle-guan-wang-xia-zai-di-zhi/"/>
      <url>/mysql-sql-oracle/oracle-guan-wang-xia-zai-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>使用迅雷等下载工具复制下面的链接地址就可以直接下载</p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for Microsoft Windows (32-bit)</p><p>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/10201_database_win32.zip">http://download.oracle.com/otn/nt/oracle10g/10201/10201_database_win32.zip</a><br>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/10201_client_win32.zip">http://download.oracle.com/otn/nt/oracle10g/10201/10201_client_win32.zip</a><br>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/10201_clusterware_win32.zip">http://download.oracle.com/otn/nt/oracle10g/10201/10201_clusterware_win32.zip</a><br>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/10201_gateways_win32.zip">http://download.oracle.com/otn/nt/oracle10g/10201/10201_gateways_win32.zip</a></p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for Microsoft Windows (x64)</p><p>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip">http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip</a><br>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_client.zip">http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_client.zip</a><br>  <a href="http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_clusterware.zip">http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_clusterware.zip</a></p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for Linux x86</p><p>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_database_linux32.zip">http://download.oracle.com/otn/linux/oracle10g/10201/10201_database_linux32.zip</a><br>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_client_linux32.zip">http://download.oracle.com/otn/linux/oracle10g/10201/10201_client_linux32.zip</a><br>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_gateways_linux32.zip">http://download.oracle.com/otn/linux/oracle10g/10201/10201_gateways_linux32.zip</a></p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for Linux x86-64</p><p>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_database_linux_x86_64.cpio.gz">http://download.oracle.com/otn/linux/oracle10g/10201/10201_database_linux_x86_64.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_client_linux_x86_64.cpio.gz">http://download.oracle.com/otn/linux/oracle10g/10201/10201_client_linux_x86_64.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_clusterware_linux_x86_64.cpio.gz">http://download.oracle.com/otn/linux/oracle10g/10201/10201_clusterware_linux_x86_64.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/linux/oracle10g/10201/10201_gateways_linux_x86_64.cpio.gz">http://download.oracle.com/otn/linux/oracle10g/10201/10201_gateways_linux_x86_64.cpio.gz</a></p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for AIX5L</p><p>  <a href="http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_database.cpio.gz">http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_database.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_client.cpio.gz">http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_client.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_cluster.cpio.gz">http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_cluster.cpio.gz</a><br>  <a href="http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_gateways.cpio.gz">http://download.oracle.com/otn/aix/oracle10g/10201/10gr2_aix5l64_gateways.cpio.gz</a></p><p>Oracle Database 10g Release 2 (10.2.0.2) Enterprise&#x2F;Standard Edition for Solaris Operating System (x86)</p><p>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10202/10202_database_solx86.zip">http://download.oracle.com/otn/solaris/oracle10g/10202/10202_database_solx86.zip</a><br>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10202/10202_client_solx86.zip">http://download.oracle.com/otn/solaris/oracle10g/10202/10202_client_solx86.zip</a><br>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10202/10202_clusterware_solx86.zip">http://download.oracle.com/otn/solaris/oracle10g/10202/10202_clusterware_solx86.zip</a></p><p>Oracle Database 10g Release 2 (10.2.0.1.0) Enterprise&#x2F;Standard Edition for Solaris Operating System (x86-64)</p><p>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_database_solx86_64.zip">http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_database_solx86_64.zip</a><br>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_client_solx86_64.zip">http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_client_solx86_64.zip</a><br>  <a href="http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_clusterware_solx86_64.zip">http://download.oracle.com/otn/solaris/oracle10g/10201/x8664/10201_clusterware_solx86_64.zip</a></p><p>Oracle 10g (10.2.0.3) 支持vista，win7和2008</p><p>32bit</p><p><a href="http://download.oracle.com/otn/nt/oracle10g/10203/10203_vista_w2k8_x86_production_db.zip">http://download.oracle.com/otn/nt/oracle10g/10203/10203_vista_w2k8_x86_production_db.zip</a></p><p>64bit</p><p><a href="http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip">http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip</a></p><p>官网网站 <a href="http://www.oracle.com/technetwork/cn/database/10203vista-088351-zhs.html">http://www.oracle.com/technetwork/cn/database/10203vista-088351-zhs.html</a></p><p>Oracle Database 11g Release 2 Client (11.2.0.1.0) for Microsoft Windows<br>32bit<br><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_client.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_client.zip</a></p><p>64bit</p><p><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_client.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_client.zip</a></p><p>Oracle Database 11g Release 2 (11.2.0.1.0) for Microsoft Windows<br>32bit<br><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_database_1of2.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_database_1of2.zip</a><br><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_database_2of2.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win32_11gR2_database_2of2.zip</a></p><p>64bit<br><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_1of2.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_1of2.zip</a><br><a href="http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_2of2.zip">http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_2of2.zip</a></p><p>Oracle Database 12c 第 2 版(12.2.0.1.0)</p><p>window 64bit</p><p><a href="https://download.oracle.com/otn/nt/oracle12c/122010/winx64_12201_database.zip">https://download.oracle.com/otn/nt/oracle12c/122010/winx64_12201_database.zip</a></p><p>参考了</p><p><a href="http://www.cnblogs.com/wangdetian168/archive/2011/03/01/1968155.html">http://www.cnblogs.com/wangdetian168/archive/2011/03/01/1968155.html</a></p><p><a href="http://www.cnblogs.com/ZJ199012/archive/2012/03/21/2410275.html">http://www.cnblogs.com/ZJ199012/archive/2012/03/21/2410275.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle 11g 客户端 连接数据库</title>
      <link href="/mysql-sql-oracle/oracle-11g-ke-hu-duan-lian-jie-shu-ju-ku/"/>
      <url>/mysql-sql-oracle/oracle-11g-ke-hu-duan-lian-jie-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<p>安装oracle高版本的数据库后，在使用vs2005的oracleClient会提示只支持8.0什么的，oracle官方提供了一个Oracle.DataAccess.dll去做数据的操作，11g的客户端安装后在product\11.2.0\client_2\ODP.NET\bin\2.x文件夹下。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在IIS中部署WCF服务出现authentication mode=windows</title>
      <link href="/wcf/zai-iis-zhong-bu-shu-wcf-fu-wu-chu-xian-authentication-mode-windows/"/>
      <url>/wcf/zai-iis-zhong-bu-shu-wcf-fu-wu-chu-xian-authentication-mode-windows/</url>
      
        <content type="html"><![CDATA[<p>现在IIS中创建应用程序，还有问题把C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\machine.config文件中的allowDefinition &#x3D; “MachineToApplication” 修改成 allowDefinition &#x3D; “Everywhere”</p>]]></content>
      
      
      <categories>
          
          <category> WCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
            <tag> WCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WCF返回xml</title>
      <link href="/wcf/wcf-fan-hui-xml/"/>
      <url>/wcf/wcf-fan-hui-xml/</url>
      
        <content type="html"><![CDATA[<p>这次出差的时候要用wcf服务返回xml，但是返回xml后微软在外面包装了一层，将BodyStyle &#x3D; WebMessageBodyStyle.Bare可以去掉外面的一层包装，可是返回的还是一个字符串，后来终于找到解决办法了。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public XmlElement XmlStringToXmlDoc(string xmlString)&#123;      XmlDocument xmlDoc &#x3D; new XmlDocument();      xmlDoc.LoadXml(xmlString);      return xmlDoc.DocumentElement;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果大家有什么好的方法可以交流……</p>]]></content>
      
      
      <categories>
          
          <category> WCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Earth无法连接到服务器</title>
      <link href="/other/google-earth-wu-fa-lian-jie-dao-fu-wu-qi/"/>
      <url>/other/google-earth-wu-fa-lian-jie-dao-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>最近要在Google Earth上截取图片，哪知道打开Google Earth直接提示无法连接到服务器，直接去网上搜索，大家都说在C:\Windows\System32\drivers\etc 找到Hosts文件，然后用记事本打开，将203.208.46.30 kh.google.com复制进去就可以打开了，这样试了可是不管用，无奈啊！</p><p>不过还好后来终于找到了一个将74.125.39.99   kh.google.com和72.14.203.101 <a href="http://www.panoramio.com/">www.panoramio.com</a>  复制到上面说的Hosts文件中，不过这个方法打开比较慢，追求速度的就别试了。<br><img src="/images/2012112915112353.jpg" alt="2012112915112353.jpg"></p><p>注意：</p><p>这个ip地址就是通过Dos中的PING命令得到的，在dos界面中输入ping kh.google.com即可。</p><p><a href="http://www.godeyes.cn/html/2012/03/29/google_earth_13006.html">http://www.godeyes.cn/html/2012/03/29/google_earth_13006.html</a> 大家可以看看这个文章</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ext入门(Window、Panel、Viewport、Grid、Form、TreePanel)</title>
      <link href="/js/ext-ru-men-window-panel-viewport-grid-form-treepanel/"/>
      <url>/js/ext-ru-men-window-panel-viewport-grid-form-treepanel/</url>
      
        <content type="html"><![CDATA[<p>在Window、Panel、Viewport、Grid、Form、TreePanel这些组件中Window是用show方法显示出来，Viewport不需要指定renderTo，其他的都需要指定。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;WindowExt.onReady(function()&#123;    var win &#x3D; new Ext.Window(        &#123;            width:500,            height:400,            title:&#39;第一个窗体&#39;,            buttons:[&#123;text:&quot;确定&quot;&#125;,&#123;text:&quot;取消&quot;&#125;]        &#125;);        win.show();&#125;);&#x2F;&#x2F;PanelExt.onReady(function()&#123;    var panel &#x3D; new Ext.Panel(&#123;        width:500,        height:200,        title:&quot;面板头部Header&quot;,        html:&#39;&lt;h1&gt;面板主区域&lt;&#x2F;h1&gt;&#39;,        &#x2F;&#x2F;autoLoad:&#123;url:&#39;index.html&#39;&#125;,        tbar:[&#123;pressed:true,text:&#39;刷新&#39;&#125;],        bbar:[&#123;text:&#39;底部工具栏bottomtoolbar&#39;&#125;],        buttons:[&#123;text:&quot;按钮位于footer&quot;&#125;]    &#125;);        panel.render(&#39;test&#39;); &#x2F;&#x2F;渲染到id为test的div上    alert(panel.el.dom.innerHTML);    alert(panel.el.dom.outerHTML);    alert(document.body.innerHTML);    panel.body.update(        &quot;&lt;h1&gt;&lt;font color&#x3D;&#39;blue&#39;&gt;EXT 主面板&lt;&#x2F;font&gt;&lt;&#x2F;h1&gt;&quot;,true,function()&#123;&#125;    );    panel.load(&#123;        url:&#39;index.html&#39;,        params:&#123;name:&quot;daxia&quot;,pwd:&quot;123&quot;&#125;,        scope: this,        discardUrl: false,        nocache: false,        text: &quot;正在加载，请稍候...&quot;,        timeout: 30,        scripts: true    &#125;);&#125;);&#x2F;&#x2F;Panel中renderTo、applyTo、contentEl的区别renderTo和applyTo是把板渲染到制定的div的节点上，contentEl是配置选项来把页面中的某一个IV 的内容作为面板的内容Ext.onReady(function()&#123;    var panel &#x3D; new Ext.Panel(&#123;        title:&#39;面板&#39;,        width:500,        height:300,        renderTo:&#39;c&#39;,        contentEl:&#39;tt&#39;    &#125;);    alert(document.body.innerHTML);&#125;);&#x2F;&#x2F;ViewPort&#x2F;&#x2F;简单的viewport面板，不需要在制定renderToExt.onReady(function()&#123;    new Ext.Viewport(&#123;        layout:&#39;fit&#39;,        items:[&#123;            title:&#39;Viewport面板&#39;,            html:&#39;面板body&#39;,            bbar:[&#123;text:&#39;按钮1&#39;&#125;,&#123;text:&#39;按钮2&#39;&#125;]        &#125;]    &#125;);&#125;);Ext.onReady(function()&#123;    new Ext.Viewport(&#123;        enableTabScroll:true,        layout:&#39;border&#39;,        items:[        &#123;            title:&#39;面板&#39;,            region:&#39;north&#39;,            height:200,            html:&#39;&lt;h1&gt;网站后台管理系统&lt;&#x2F;h1&gt;&#39;        &#125;        ,&#123;            title:&#39;菜单&#39;,            region:&#39;west&#39;,            width:300,            collapsible:true,            html:&#39;菜单栏&#39;        &#125;,        &#123;            xtype:&#39;tabpanel&#39;,            region:&#39;center&#39;,            items:[&#123;title:&#39;面板1&#39;&#125;,&#123;title:&#39;面板2&#39;&#125;]        &#125;]    &#125;);&#125;);&#x2F;&#x2F;对话框function confirmDialog()&#123;    Ext.Msg.confirm(&#39;提示&#39;,&#39;是否要删除&#39;,function(button)&#123;        alert(&quot;选择的结构：&quot;+(button&#x3D;&#x3D;&#39;yes&#39;?&#39;是&#39;:&#39;否&#39;));    &#125;);&#125;function inputDialog()&#123;    Ext.MessageBox.prompt(&quot;输入你的名字&quot;,&quot;请输入你的名字:&quot;,function(button,text)&#123;    if(button&#x3D;&#x3D;&quot;ok&quot;)&#123;    alert(&quot;输入的名字:&quot;+text);    &#125;    else alert(&quot;你放弃输入 !&quot;);    &#125;);&#125;var t&#x3D;0;function progress()&#123;    t&#x3D;0;    var msgbox &#x3D; Ext.Msg.progress(&#39;请稍后&#39;,&#39;保存数据&#39;,&#39;请稍候，正在保存数据......&#39;);    updateProgress();&#125;function updateProgress()&#123;    t+&#x3D;0.1;    Ext.Msg.updateProgress(t);    if(t&gt;1)        Ext.Msg.hide();    else        updateProgress.defer(1000);        &#125;function doSave(button,text)&#123;    if(button&#x3D;&quot;yes&quot;)    &#123;        progress();    &#125;    else if(button&#x3D;&#x3D;&quot;no&quot;)    &#123;　　&#x2F;&#x2F;不保存数据    &#125;    else    &#123;        &#x2F;&#x2F;取消当前操作    &#125;&#125;function save()&#123;    Ext.Msg.show(&#123;        title:&#39;保存数据&#39;,        msg:&#39;是否要保存修改的数据？&#39;,        buttons:Ext.Msg.YESNOCANCEL,        fn:doSave,        icon:Ext.MessageBox.QUESTION    &#125;);&#125;&#x2F;&#x2F;TabPanelExt.onReady(function()&#123;    var i&#x3D;0;    var tab &#x3D; new Ext.TabPanel(&#123;        renderTo:&#39;tt&#39;,        width:500,        height:300,        enableTabScroll:true,        activeTab:true,        bbar:[&#123;text:&#39;添加&#39;,handler:function()&#123;            tab.add(&#123;title:&#39;新面板&#39;+i++,closable:true,html:&#39;this is the new &#39;+i+&#39; Panel！&#39;&#125;);        &#125;        &#125;],        items:[&#123;title:&#39;面板1&#39;,html:&#39;this is first Tabpanel!&#39;&#125;,&#123;closable:true,title:&#39;面板2&#39;,html:&#39;this is second TabPanel!&#39;&#125;,&#123;closable:true,title:&#39;面板3&#39;,html:&#39;this is third TabPanel!&#39;&#125;]    &#125;);&#125;);&#x2F;&#x2F;GridExt.onReady(function()&#123;    var data &#x3D;[        [1, &#39;EasyJWeb&#39;, &#39;EasyJF&#39;,&#39;www.easyjf.com&#39;],        [2, &#39;jfox&#39;, &#39;huihoo&#39;,&#39;www.huihoo.org&#39;],        [3, &#39;jdon&#39;, &#39;jdon&#39;,&#39;www.jdon.com&#39;],        [4, &#39;springside&#39;,&#39;springside&#39;,&#39;www.springside.org.cn&#39;]    ];    var store &#x3D; new Ext.data.SimpleStore(&#123;data:data,fields:[&#39;id&#39;,&#39;name&#39;,&#39;organization&#39;,&#39;homepage&#39;]&#125;);    var grid &#x3D; new Ext.grid.GridPanel(&#123;        renderTo:&#39;tt&#39;,        title:&#39;中国Java开源产品及团队&#39;,        height:150,        width:600,        columns:[&#123;header:&#39;项目名称&#39;,dataIndex:&#39;name&#39;&#125;,            &#123;header:&#39;开发团队&#39;,dataIndex:&#39;organization&#39;&#125;,            &#123;header:&#39;网址&#39;,dataIndex:&#39;homepage&#39;&#125;        ],        store:store,        autoExpandColumn:2    &#125;);&#125;);&#x2F;&#x2F;TreePanelExt.onReady(function()&#123;    var root &#x3D; new Ext.tree.TreeNode(&#123;        id:&#39;root&#39;,        text:&#39;树的根&#39;    &#125;);    root.appendChild(new Ext.tree.TreeNode(&#123;        id:&#39;c1&#39;,        text:&#39;子节点&#39;    &#125;)    );    var tree &#x3D; new Ext.tree.TreePanel(&#123;        renderTo:&#39;test&#39;,        width:100,        root:root    &#125;);&#125;);&#x2F;&#x2F;formExt.onReady(function()&#123;    var f &#x3D; new Ext.form.FormPanel(&#123;        renderTo:&#39;test&#39;,        width:300,        height:200,        title:&#39;用户信息录入&#39;,        labelWidth:60,        labelAlign:&#39;right&#39;,        frame:true,        defaults:&#123;xtype:&#39;textfield&#39;,width:180&#125;,        items:[            &#123;name:&#39;username&#39;,fieldLabel:&#39;姓名&#39;&#125;,            &#123;name:&#39;password&#39;,fieldLabel:&#39;密码&#39;,inputType:&#39;password&#39;&#125;,            &#123;name:&#39;email&#39;,fieldLabel:&#39;电子邮件&#39;&#125;,            &#123;xtype:&#39;textarea&#39;,name:&#39;intro&#39;,fieldLabel:&#39;简介&#39;&#125;        ],        buttons:[&#123;text:&#39;提交&#39;,handler:function()&#123;            f.form.submit(&#123;                waitTitle:&#39;请稍候&#39;,                waitMsg:&#39;正在提交表单数据，请稍候......&#39;            &#125;);        &#125;&#125;,        &#123;text:&#39;重置&#39;,handler:function()&#123;            f.form.reset();        &#125;        &#125;]    &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IE和FireFox下的JS调试工具</title>
      <link href="/html-css/ie-he-firefox-xia-de-js-diao-shi-gong-ju/"/>
      <url>/html-css/ie-he-firefox-xia-de-js-diao-shi-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>IE下的JS调试工具Companion.JS这是一个IE的插件并且要和Microsoft ScriptDebugger结合起来使用</p><p>Companion.JS 下载地址 <a href="http://www.my-debugbar.com/wiki/CompanionJS/HomePage">http://www.my-debugbar.com/wiki/CompanionJS/HomePage</a></p><p>具体使用方法为：</p><h5 id="1、先下载Companion-JS安装文件，然后安装"><a href="#1、先下载Companion-JS安装文件，然后安装" class="headerlink" title="1、先下载Companion.JS安装文件，然后安装"></a>1、先下载Companion.JS安装文件，然后安装</h5><h5 id="2、下载安装Microsoft-Script-Debugger，如果您的机器已经安装过了就可以免过这一步"><a href="#2、下载安装Microsoft-Script-Debugger，如果您的机器已经安装过了就可以免过这一步" class="headerlink" title="2、下载安装Microsoft Script Debugger，如果您的机器已经安装过了就可以免过这一步"></a>2、下载安装Microsoft Script Debugger，如果您的机器已经安装过了就可以免过这一步</h5><h5 id="3、打开IE菜单“工具”–“Internet选项”–“高级”，找到“禁用脚本调试-Internet-Explorer-”和“禁用脚本调试-其他-”，将两个选项前面的对钩都去掉，然后重启IE"><a href="#3、打开IE菜单“工具”–“Internet选项”–“高级”，找到“禁用脚本调试-Internet-Explorer-”和“禁用脚本调试-其他-”，将两个选项前面的对钩都去掉，然后重启IE" class="headerlink" title="3、打开IE菜单“工具”–“Internet选项”–“高级”，找到“禁用脚本调试(Internet Explorer)”和“禁用脚本调试(其他)”，将两个选项前面的对钩都去掉，然后重启IE"></a>3、打开IE菜单“工具”–“Internet选项”–“高级”，找到“禁用脚本调试(Internet Explorer)”和“禁用脚本调试(其他)”，将两个选项前面的对钩都去掉，然后重启IE</h5><h5 id="4、在Ie中输入：http-www-my-debugbar-com-wiki-uploads-CompanionJS-dummy-htm，然后点击click-me链接，如果左上角弹出一个小错误提示或下面控制台出现了错误信息提示，就说明您已经安装成功了"><a href="#4、在Ie中输入：http-www-my-debugbar-com-wiki-uploads-CompanionJS-dummy-htm，然后点击click-me链接，如果左上角弹出一个小错误提示或下面控制台出现了错误信息提示，就说明您已经安装成功了" class="headerlink" title="4、在Ie中输入：http://www.my-debugbar.com/wiki/uploads/CompanionJS/dummy.htm，然后点击click me链接，如果左上角弹出一个小错误提示或下面控制台出现了错误信息提示，就说明您已经安装成功了"></a>4、在Ie中输入：<a href="http://www.my-debugbar.com/wiki/uploads/CompanionJS/dummy.htm">http://www.my-debugbar.com/wiki/uploads/CompanionJS/dummy.htm</a>，然后点击click me链接，如果左上角弹出一个小错误提示或下面控制台出现了错误信息提示，就说明您已经安装成功了</h5><p>提示：Microsoft Script Debugger下载可到MS官网(需要经过MS的操作系统正版验证)：<a href="http://www.microsoft.com/downloads/details.aspx?displaylang=zh-cn&amp;FamilyID=E606E71F-BA7F-471E-A57D-F2216D81EC3D#filelist">http://www.microsoft.com/downloads/details.aspx?displaylang=zh-cn&amp;FamilyID=E606E71F-BA7F-471E-A57D-F2216D81EC3D#filelist</a>或到baidu里输入“Microsoft Script Debugger 下载”寻找一下。</p><p>FireFox下的JS调试工具 FireBug</p><p>FireBug 下载地址 <a href="http://getfirebug.com/">http://getfirebug.com/</a></p><p>具体使用方法为：</p><p>1.直接点击网页右边的“Install Firebug” 按钮安装，安装成功后重启浏览器</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建 Excel 表格</title>
      <link href="/c-winform/chuang-jian-excel-biao-ge/"/>
      <url>/c-winform/chuang-jian-excel-biao-ge/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;创建excelpublic void CreateExcel(string tableName, string tableType , List&lt;HNFatherAddress&gt; list)&#123;    object missing &#x3D; System.Reflection.Missing.Value;    MSExcel.Application app &#x3D; new MSExcel.Application();    app.Application.Workbooks.Add(true);    MSExcel.Workbook book &#x3D; (MSExcel.Workbook)app.ActiveWorkbook;    MSExcel.Worksheet sheet &#x3D; (MSExcel.Worksheet)book.ActiveSheet;    &#x2F;&#x2F;第一行    sheet.Cells[1, 1] &#x3D; &quot;table&quot;;    sheet.Cells[1, 2] &#x3D; tableName;    sheet.Cells[1, 3] &#x3D; tableType;    &#x2F;&#x2F;第二行    sheet.Cells[2, 1] &#x3D; &quot;编号&quot;;    sheet.Cells[2, 2] &#x3D; &quot;地址&quot;;    sheet.Cells[2, 3] &#x3D; &quot;类型&quot;;    int count &#x3D; 2;    foreach (HNFatherAddress item in list)    &#123;        count &#x3D; count + 1;        sheet.Cells[count, 1] &#x3D; &quot;num&quot;;        sheet.Cells[count, 2] &#x3D; item.FatherName;        sheet.Cells[count, 3] &#x3D; item.FatherType;            &#125;    &#x2F;&#x2F;保存    SaveFileDialog save &#x3D; new SaveFileDialog();    save.Filter &#x3D; &quot;Excel(*.xls)|*.xls&quot;;    save.ShowDialog();    string savePath &#x3D; save.FileName;    book.SaveCopyAs(savePath);    book.Close(false, missing, missing);    app.Quit();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Access 获取数据库表名和字段名</title>
      <link href="/c-winform/access-huo-qu-shu-ju-ku-biao-ming-he-zi-duan-ming/"/>
      <url>/c-winform/access-huo-qu-shu-ju-ku-biao-ming-he-zi-duan-ming/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;获取Access数据库表的字段名public List&lt;string&gt; GetTableFieldNameList(string TableName)&#123;    string conStr &#x3D; &quot;provider&#x3D;microsoft.jet.oledb.4.0;&quot;;    conStr +&#x3D; @&quot;data source&#x3D;&quot; + 数据库的路径（例如：&quot;D:\\data\\test.mdb&quot;）    List&lt;string&gt; list &#x3D; new List&lt;string&gt;();    OleDbConnection con &#x3D; new OleDbConnection(conStr);    try    &#123;        con.Open();        using (OleDbCommand cmd &#x3D; new OleDbCommand())        &#123;            cmd.CommandText &#x3D; &quot;SELECT TOP 1 * FROM [&quot; + TableName + &quot;]&quot;;            cmd.Connection &#x3D; con;            OleDbDataReader dr &#x3D; cmd.ExecuteReader();            for (int i &#x3D; 0; i &lt; dr.FieldCount; i++)            &#123;                list.Add(dr.GetName(i));            &#125;        &#125;        return list;    &#125;    catch (Exception e)    &#123; throw e; &#125;    finally    &#123;        if (con.State &#x3D;&#x3D; ConnectionState.Open)            con.Close();        con.Dispose();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;获取Access数据库表名集合public ArrayList GetTableNameList(string filePath)&#123;    string conStr &#x3D; &quot;provider&#x3D;microsoft.jet.oledb.4.0;&quot;;    conStr +&#x3D; @&quot;data source&#x3D;&quot; + filePath;    ArrayList tableList &#x3D; new ArrayList();    OleDbConnection con &#x3D; new OleDbConnection(conStr);    try    &#123;        con.Open();        &#x2F;&#x2F;第一种方法        &#x2F;*DataRow [] rows &#x3D; con.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null).Select();        for (int i &#x3D; 0; i &lt; rows.Length; i++)        &#123;            if (!rows[i][&quot;TABLE_NAME&quot;].ToString().Contains(&quot;MSys&quot;))            &#123;                tableList.Add(rows[i][&quot;TABLE_NAME&quot;].ToString());            &#125;        &#125;        return tableList;*&#x2F;        &#x2F;&#x2F;第二种方法        DataTable dt &#x3D; con.GetSchema(&quot;Tables&quot;);        foreach (DataRow row in dt.Rows)        &#123;            if (row[3].ToString() &#x3D;&#x3D; &quot;TABLE&quot;)                tableList.Add(row[2].ToString());        &#125;        return tableList;    &#125;    catch (Exception e)    &#123;         throw e;     &#125;    finally     &#123;         if (con.State &#x3D;&#x3D; ConnectionState.Open)            con.Close();        con.Dispose();     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加Access数据库的的字段名</p><p>alter table tableName add column 字段名 int</p>]]></content>
      
      
      <categories>
          
          <category> C#/WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#/WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight引用WCF 修改配置</title>
      <link href="/silverlight/silverlight-yin-yong-wcf-xiu-gai-pei-zhi/"/>
      <url>/silverlight/silverlight-yin-yong-wcf-xiu-gai-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>可以修改*.xap文件中的ServiceReferences.ClientConfig将服务的地址改过来即可</p><p>注：*.xap可以用winrar解压，ServiceReferences.ClientConfig中有</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>client</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpoint</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.2.160/AppService/AppService.svc<span class="token punctuation">"</span></span>        <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basicHttpBinding<span class="token punctuation">"</span></span> <span class="token attr-name">bindingConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BasicHttpBinding_IDatabaseService<span class="token punctuation">"</span></span>        <span class="token attr-name">contract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DrawseeAppService.IDatabaseService<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BasicHttpBinding_IDatabaseService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpoint</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.2.160/AppService/AppService.svc<span class="token punctuation">"</span></span>        <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basicHttpBinding<span class="token punctuation">"</span></span> <span class="token attr-name">bindingConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BasicHttpBinding_IUserManageService<span class="token punctuation">"</span></span>        <span class="token attr-name">contract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DrawseeAppService.IUserManageService<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BasicHttpBinding_IUserManageService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>client</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其中的 <a href="http://192.168.2.160/AppService/AppService.svc%E6%94%B9%E6%88%90%E4%BD%A0%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80%E3%80%82">http://192.168.2.160/AppService/AppService.svc改成你现在的服务地址。</a></p><h3 id="第二种-动态调用服务"><a href="#第二种-动态调用服务" class="headerlink" title="第二种 动态调用服务"></a>第二种 动态调用服务</h3><p>1.删除ServiceReferences.ClientConfig文件</p><p>2.新建一个类</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static DatabaseServiceClient GetDynamicClient()    &#123;        BasicHttpBinding binding &#x3D; new BasicHttpBinding(            Application.Current.Host.Source.Scheme.Equals(            &quot;https&quot;, StringComparison.InvariantCultureIgnoreCase) ?            BasicHttpSecurityMode.Transport : BasicHttpSecurityMode.None);        binding.MaxReceivedMessageSize &#x3D; int.MaxValue;        binding.MaxBufferSize &#x3D; int.MaxValue;        return new DatabaseServiceClient(binding, new EndpointAddress(new Uri(Application.Current.Host.Source, &quot;..&#x2F;AppService.svc&quot;)));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在要调用的地方 DatabaseServiceClient client &#x3D; 类名.GetDynamicClient();</p><p>其它的和原来调用wcf服务都一样。</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL把数据从一张表中导入另一张表</title>
      <link href="/mysql-sql-oracle/sql-ba-shu-ju-cong-yi-zhang-biao-zhong-dao-ru-ling-yi-zhang-biao/"/>
      <url>/mysql-sql-oracle/sql-ba-shu-ju-cong-yi-zhang-biao-zhong-dao-ru-ling-yi-zhang-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="1、对于已存在的表"><a href="#1、对于已存在的表" class="headerlink" title="1、对于已存在的表"></a>1、对于已存在的表</h3><p>insert into table_target(字段1,字段2….)<br>select (字段1,字段2….) from table_source</p><h3 id="2、对于尚未建立的表"><a href="#2、对于尚未建立的表" class="headerlink" title="2、对于尚未建立的表"></a>2、对于尚未建立的表</h3><p>select  (字段1,字段2….)  into table_target<br>from table_source</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight ToolBar(工具条)</title>
      <link href="/silverlight/silverlight-toolbar-gong-ju-tiao/"/>
      <url>/silverlight/silverlight-toolbar-gong-ju-tiao/</url>
      
        <content type="html"><![CDATA[<p>前段时间为搞silverlight 工具条很烦，幸运的是后来在网上找到第三方控件了，还有简单的代码示例。和大家分享一下</p><p><a href="http://www.devcomponents.com/dotnetbarsilverlight/download.aspx">http://www.devcomponents.com/dotnetbarsilverlight/download.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight 在IIS5.1或6.0下部署</title>
      <link href="/silverlight/silverlight-zai-iis5.1-huo-6.0-xia-bu-shu/"/>
      <url>/silverlight/silverlight-zai-iis5.1-huo-6.0-xia-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>首先要在IIS的MIME类型中添加这几个类型</p><p> .xap application&#x2F;x-silverlight-app<br> .xaml application&#x2F;xaml+xml<br> .xbap application&#x2F;x-ms-xbap</p><p>在就是看是否安装了.netframework</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Siverlight调用服务提示无法跨域访问</title>
      <link href="/silverlight/siverlight-diao-yong-fu-wu-ti-shi-wu-fa-kua-yu-fang-wen/"/>
      <url>/silverlight/siverlight-diao-yong-fu-wu-ti-shi-wu-fa-kua-yu-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>添加2个xml</p><p>ClientAccessPolicy.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access-policy</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cross-domain-access</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>allow-from</span> <span class="token attr-name">http-request-headers</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>domain</span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>allow-from</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grant-to</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">include-subpaths</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grant-to</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policy</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cross-domain-access</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>access-policy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>crossdomain.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">cross-domain-policy</span> <span class="token name">SYSTEM</span> <span class="token string">"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cross-domain-policy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>allow-access-from</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>allow-http-request-headers-from</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">headers</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cross-domain-policy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体请参考：<a href="http://msdn.microsoft.com/en-us/library/cc645032%28VS.95%29.aspx">http://msdn.microsoft.com/en-us/library/cc645032%28VS.95%29.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight contextMenu 拖拽</title>
      <link href="/silverlight/silverlight-contextmenu-tuo-zhuai/"/>
      <url>/silverlight/silverlight-contextmenu-tuo-zhuai/</url>
      
        <content type="html"><![CDATA[<p><a href="https://silverlight.codeplex.com/releases/view/43528">Silverlight4 toolkit</a> 提供了ContextMenu和MenuItem控件来实现右键菜单,下面是效果图<br><img src="/images/2012050716493147.jpg" alt="2012050716493147.jpg"></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;Canvas x:Name&#x3D;&quot;LayoutRoot&quot;&gt;&lt;Border Height&#x3D;&quot;30&quot; Name&#x3D;&quot;bType&quot; Width&#x3D;&quot;90&quot; Canvas.Left&#x3D;&quot;96&quot; BorderThickness&#x3D;&quot;1&quot; BorderBrush&#x3D;&quot;Gray&quot; Background&#x3D;&quot;Transparent&quot; MouseLeftButtonDown&#x3D;&quot;Border_MouseLeftButtonDown&quot; MouseMove&#x3D;&quot;Border_MouseMove&quot; MouseLeftButtonUp&#x3D;&quot;mouseLeftUp&quot;&gt;             &lt;sdk:Label Name&#x3D;&quot;lbSencond&quot; HorizontalAlignment&#x3D;&quot;Center&quot; Content&#x3D;&quot;类型&quot; &#x2F;&gt;             &lt;my:ContextMenuService.ContextMenu&gt;                 &lt;my:ContextMenu Name&#x3D;&quot;TypeMenu&quot; Background&#x3D;&quot;Transparent&quot;&gt;                     &lt;my:MenuItem Header&#x3D;&quot;植物&quot; Click&#x3D;&quot;TypeMenu_Click&quot;&gt;                         &lt;my:MenuItem.Icon&gt;                             &lt;Image Width&#x3D;&quot;16&quot; Height&#x3D;&quot;16&quot; Source&#x3D;&quot;images&#x2F;zhiwu.jpg&quot; &#x2F;&gt;                         &lt;&#x2F;my:MenuItem.Icon&gt;                     &lt;&#x2F;my:MenuItem&gt;                     &lt;my:Separator &#x2F;&gt;                     &lt;my:MenuItem Header&#x3D;&quot;动物&quot; Click&#x3D;&quot;TypeMenu_Click&quot;&gt;                         &lt;my:MenuItem.Icon&gt;                             &lt;Image Width&#x3D;&quot;16&quot; Height&#x3D;&quot;16&quot; Source&#x3D;&quot;images&#x2F;dongwu.jpg&quot; &#x2F;&gt;                         &lt;&#x2F;my:MenuItem.Icon&gt;                     &lt;&#x2F;my:MenuItem&gt;                 &lt;&#x2F;my:ContextMenu&gt;             &lt;&#x2F;my:ContextMenuService.ContextMenu&gt;         &lt;&#x2F;Border&gt; &lt;&#x2F;Canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是cs代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private bool isDrag;private Point startPoint;private Point endPoint; public MainPage()&#123;    InitializeComponent();  &#125;      private void TypeMenu_Click(object sender, RoutedEventArgs e)&#123;    MenuItem item &#x3D; (MenuItem)sender;    switch (item.Header.ToString())    &#123;        case&quot;动物&quot;:            MessageBox.Show(item.Header.ToString());            break;        case&quot;植物&quot;:            MessageBox.Show(&quot;类型是植物&quot;);            break;        default:            break;    &#125;    TypeMenu.IsOpen &#x3D; false;&#125; private void mouseLeftUp(object sender, MouseButtonEventArgs e)&#123;    isDrag &#x3D; false; &#125; private void Border_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)&#123;    Point p &#x3D; e.GetPosition(LayoutRoot);    SetDrag(p, bType);&#125; private void Border_MouseMove(object sender, MouseEventArgs e)&#123;    if (isDrag)    &#123;        endPoint &#x3D; e.GetPosition(LayoutRoot);               Position(endPoint, bType);    &#125;&#125; private void Position(Point end, UIElement uiName)&#123;    &#x2F;&#x2F;计算X、Y轴起始点与终止点之间的相对偏移量    double x &#x3D; end.X - startPoint.X;    double y &#x3D; end.Y - startPoint.Y;     Point positon &#x3D; new Point((double)Canvas.GetLeft(uiName), (double)Canvas.GetTop(uiName));    positon.X +&#x3D; x;    positon.Y +&#x3D; y;     Canvas.SetLeft(uiName, positon.X);    Canvas.SetTop(uiName, positon.Y);    startPoint &#x3D; end;&#125; private void SetDrag(Point start, UIElement uiName)&#123;    isDrag &#x3D; true;    startPoint &#x3D; start;    uiName.CaptureMouse();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览Silverlight5 3D例子后打开以前的项目运行不起来</title>
      <link href="/silverlight/liu-lan-silverlight5-3d-li-zi-hou-da-kai-yi-qian-de-xiang-mu-yun-xing-bu-qi-lai/"/>
      <url>/silverlight/liu-lan-silverlight5-3d-li-zi-hou-da-kai-yi-qian-de-xiang-mu-yun-xing-bu-qi-lai/</url>
      
        <content type="html"><![CDATA[<p>只需卸载所有的Silverlight sdk然后在重新安装一遍就好了。</p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>silverlight中嵌入html、swf、pdf</title>
      <link href="/silverlight/silverlight-zhong-qian-ru-html-swf-pdf/"/>
      <url>/silverlight/silverlight-zhong-qian-ru-html-swf-pdf/</url>
      
        <content type="html"><![CDATA[<p>使用HtmlHost小组件就方便多了</p><p>网站：<a href="http://www.divelements.co.uk/silverlight/tools.aspx">http://www.divelements.co.uk/silverlight/tools.aspx</a></p><p>下载：<a href="http://www.divelements.co.uk/silverlight/SilverlightTools.1.0.2.">http://www.divelements.co.uk/silverlight/SilverlightTools.1.0.2.</a>zip</p><p>1、基本特性</p><p>组件所在命名空间：</p><p>Divelements.SilverlightTools</p><p>组件常用属性：</p><p>SourceUri：显示在该组件中的内容的URI。</p><p>SourceHtml：用该组件显示的超文本内容。</p><p>Document：显示在该组件中的内容的HTML。</p><p>组件常用事件：</p><p>DocumentReady：当在该组件中的内容的HTML加载完毕后触发该事件。</p><p>注：该组件在windowless下才能正常工作</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;form id&#x3D;&quot;form1&quot; runat&#x3D;&quot;server&quot; style&#x3D;&quot;height:100%&quot;&gt;   &lt;div id&#x3D;&quot;silverlightControlHost&quot;&gt;       &lt;object data&#x3D;&quot;data:application&#x2F;x-silverlight-2,&quot; type&#x3D;&quot;application&#x2F;x-silverlight-2&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot;&gt;         &lt;param name&#x3D;&quot;source&quot; value&#x3D;&quot;ClientBin&#x2F;testMap.xap&quot;&#x2F;&gt;         &lt;param name&#x3D;&quot;onError&quot; value&#x3D;&quot;onSilverlightError&quot; &#x2F;&gt;         &lt;param name&#x3D;&quot;background&quot; value&#x3D;&quot;white&quot; &#x2F;&gt;         &lt;param name&#x3D;&quot;minRuntimeVersion&quot; value&#x3D;&quot;4.0.60310.0&quot; &#x2F;&gt;         &lt;param name&#x3D;&quot;autoUpgrade&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;         &lt;param name&#x3D;&quot;windowless&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;         &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;149156&amp;v&#x3D;4.0.60310.0&quot; style&#x3D;&quot;text-decoration:none&quot;&gt;              &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;161376&quot; alt&#x3D;&quot;获取 Microsoft Silverlight&quot; style&#x3D;&quot;border-style:none&quot;&#x2F;&gt;         &lt;&#x2F;a&gt;       &lt;&#x2F;object&gt;&lt;iframe id&#x3D;&quot;_sl_historyFrame&quot; style&#x3D;&quot;visibility:hidden;height:0px;width:0px;border:0px&quot;&gt;&lt;&#x2F;iframe&gt;              &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个controlHtmlHost.xaml页面</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;navigation:Page x:Class&#x3D;&quot;testMap.ControlHtmlHost&quot;           xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;           xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;           xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;           xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;           mc:Ignorable&#x3D;&quot;d&quot;           xmlns:navigation&#x3D;&quot;clr-namespace:System.Windows.Controls;assembly&#x3D;System.Windows.Controls.Navigation&quot;           d:DesignWidth&#x3D;&quot;640&quot; d:DesignHeight&#x3D;&quot;480&quot;           Title&#x3D;&quot;ControlHtmlHost Page&quot; xmlns:divtools&#x3D;&quot;clr-namespace:Divelements.SilverlightTools;assembly&#x3D;Divelements.SilverlightTools&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot;&gt;        &lt;divtools:HtmlHost Name&#x3D;&quot;htmlHost&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;navigation:Page&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainPage.xaml页面</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&lt;UserControl x:Class&#x3D;&quot;testMap.MainPage&quot;    xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;    xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;    xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;    mc:Ignorable&#x3D;&quot;d&quot; xmlns:my&#x3D;&quot;clr-namespace:Drawsee.Sl.Kernel.Controls;assembly&#x3D;Drawsee.Sl.Kernel&quot; xmlns:my1&#x3D;&quot;clr-namespace:Drawsee.Sl.AppBase.Database.UI;assembly&#x3D;Drawsee.Sl.AppBase&quot; xmlns:sdk&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&#x2F;sdk&quot; Height&#x3D;&quot;535&quot; Width&#x3D;&quot;783&quot; xmlns:divtools&#x3D;&quot;clr-namespace:Divelements.SilverlightTools;assembly&#x3D;Divelements.SilverlightTools&quot;&gt;    &lt;Grid x:Name&#x3D;&quot;LayoutRoot&quot; Background&#x3D;&quot;White&quot;&gt;        &lt;Grid Height&#x3D;&quot;316&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;173,39,0,0&quot; Name&#x3D;&quot;Container&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;600&quot;&gt;            &lt;divtools:HtmlHost HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;339,131,0,0&quot; Name&#x3D;&quot;htmlHost1&quot; VerticalAlignment&#x3D;&quot;Top&quot; &#x2F;&gt;        &lt;&#x2F;Grid&gt;        &lt;Button Content&#x3D;&quot;btnHtml&quot; Height&#x3D;&quot;23&quot; HorizontalAlignment&#x3D;&quot;Left&quot; Margin&#x3D;&quot;696,500,0,0&quot; Name&#x3D;&quot;btnLoad&quot; VerticalAlignment&#x3D;&quot;Top&quot; Width&#x3D;&quot;75&quot; Click&#x3D;&quot;btnLoad_Click&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;UserControl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainPage.xaml.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void btnLoad_Click(object sender, RoutedEventArgs e)     &#123;         GetRichContent(&quot;index.htm&quot;, UriKind.Relative); &#x2F;&#x2F;&quot;&quot;内可以写swf、html和pdf文件     &#125;     private void GetRichContent(string uri, UriKind uriKind)     &#123;         Content.Children.Clear();         ControlHtmlHost chtml &#x3D; new ControlHtmlHost();         HtmlHost hh &#x3D; chtml.FindName(&quot;htmlHost&quot;) as HtmlHost;         hh.SourceUri &#x3D; new Uri(uri, uriKind);         Content.Children.Add(chtml);     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silverlight DataGrid</title>
      <link href="/silverlight/silverlight-datagrid/"/>
      <url>/silverlight/silverlight-datagrid/</url>
      
        <content type="html"><![CDATA[<p>直接把查询出的数据赋予Silverlight datagrid 用把AutoGenerateColumns&#x3D;”True”才可以显示数据。</p><p>Silverlight多线程 <a href="http://www.360doc.com/content/11/0912/17/7304817_147699415.shtml">http://www.360doc.com/content/11/0912/17/7304817_147699415.shtml</a></p><p>Silverlight DataGrid 用法 <a href="http://www.360doc.com/content/12/0301/18/5054188_190898289.shtml">http://www.360doc.com/content/12/0301/18/5054188_190898289.shtml</a></p><p>　　　　　　　　　　　　<a href="http://www.silverlightchina.net/html/tips/2011/1104/11507.html">http://www.silverlightchina.net/html/tips/2011/1104/11507.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Silverlight </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silverlight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 下载地址和win7上安装出现的问题</title>
      <link href="/mysql-sql-oracle/oracle-xia-zai-di-zhi-he-win7-shang-an-zhuang-chu-xian-de-wen-ti/"/>
      <url>/mysql-sql-oracle/oracle-xia-zai-di-zhi-he-win7-shang-an-zhuang-chu-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>支持vista，win7和2008 32bit  <a href="http://download.oracle.com/otn/nt/oracle10g/10203/10203_vista_w2k8_x86_production_db.zip">http://download.oracle.com/otn/nt/oracle10g/10203/10203_vista_w2k8_x86_production_db.zip</a></p><p>64bit <a href="http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip">http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip</a></p><p>错误1：</p><p>正在检查操作系统要求…<br>要求的结果: 5.0,5.1,5.2,6.0 之一<br>实际结果: 6.1<br>检查完成。此次检查的总体结果为: 失败 &lt;&lt;&lt;&lt;<br>问题: Oracle Database 10g 未在当前操作系统中经过认证。<br>建议案: 确保在正确的平台上安装软件。</p><p>解决方案：</p><h3 id="1、db-Disk1-stage-prereq-db-和-db-Disk1-stage-prereq-db-prereqs-db-中找到refhost-xml，然后在适当位置（在CERTIFIED-SYSTEMS节点中）添加以下内容，注意括号配对"><a href="#1、db-Disk1-stage-prereq-db-和-db-Disk1-stage-prereq-db-prereqs-db-中找到refhost-xml，然后在适当位置（在CERTIFIED-SYSTEMS节点中）添加以下内容，注意括号配对" class="headerlink" title="1、db\Disk1\stage\prereq\db 和 db\Disk1\stage\prereq\db_prereqs\db 中找到refhost.xml，然后在适当位置（在CERTIFIED_SYSTEMS节点中）添加以下内容，注意括号配对"></a>1、db\Disk1\stage\prereq\db 和 db\Disk1\stage\prereq\db_prereqs\db 中找到refhost.xml，然后在适当位置（在CERTIFIED_SYSTEMS节点中）添加以下内容，注意括号配对</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Microsoft Windows 7--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VERSION</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6.1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、在安装目录中搜索oraparam-ini，找到以下相似内容，然后修改为"><a href="#2、在安装目录中搜索oraparam-ini，找到以下相似内容，然后修改为" class="headerlink" title="2、在安装目录中搜索oraparam.ini，找到以下相似内容，然后修改为"></a>2、在安装目录中搜索oraparam.ini，找到以下相似内容，然后修改为</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#You can customise error message shown for failure, provide value for CERTIFIED_VERSION_FAILURE_MESSAGE</span><span class="token comment">#Windows=5.0,5.1,5.2,6.0,6.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在适当位置添加（在下面或有相似的节点）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#[Windows-6.1-required]</span><span class="token comment">#Minimum display colours for OUI to run</span><span class="token assign-left variable">MIN_DISPLAY_COLORS</span><span class="token operator">=</span><span class="token number">256</span><span class="token comment">#Minimum CPU speed required for OUI</span><span class="token comment">#CPU=300</span><span class="token comment">#[Windows-6.1-optional]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误二：</p><p>正在检查网络配置要求…<br>检查完成。此次检查的总体结果为: 失败 &lt;&lt;&lt;&lt;<br>问题: 安装检测到系统的主 IP 地址是 DHCP 分配的地址。<br>建议案: Oracle 支持在具有 DHCP 分配的 IP 地址的系统上进行安装。但在安装之前, 必须将 Microsoft LoopBack Adapter 配置为系统的主网络适配器。有关在配置有 DHCP 的系统上安装软件的详细信息, 请参阅 Installation Guide。</p><p>解决方案：</p><h5 id="1、开始-运行，输入hdwwiz-exe-win7系统-打开硬件添加界面；xp系统中点击控制面板，然后点击添加硬件"><a href="#1、开始-运行，输入hdwwiz-exe-win7系统-打开硬件添加界面；xp系统中点击控制面板，然后点击添加硬件" class="headerlink" title="1、开始-运行，输入hdwwiz.exe(win7系统)打开硬件添加界面；xp系统中点击控制面板，然后点击添加硬件"></a>1、开始-运行，输入hdwwiz.exe(win7系统)打开硬件添加界面；xp系统中点击控制面板，然后点击添加硬件</h5><h5 id="2、选择-手动从列表选择的硬件添加"><a href="#2、选择-手动从列表选择的硬件添加" class="headerlink" title="2、选择 手动从列表选择的硬件添加"></a>2、选择 手动从列表选择的硬件添加</h5><h5 id="3、选择”网络适配器”"><a href="#3、选择”网络适配器”" class="headerlink" title="3、选择”网络适配器”"></a>3、选择”网络适配器”</h5><h5 id="4、左边选择”Microsoft”，右边选择”Microsoft-Loopback-Adapter”下一步，确定"><a href="#4、左边选择”Microsoft”，右边选择”Microsoft-Loopback-Adapter”下一步，确定" class="headerlink" title="4、左边选择”Microsoft”，右边选择”Microsoft Loopback Adapter”下一步，确定"></a>4、左边选择”Microsoft”，右边选择”Microsoft Loopback Adapter”下一步，确定</h5><h5 id="5、打开网络连接那里的”更改适配器设置”，给新添加的假网卡”Microsoft-Loopback-Adapter”随便配置一个IP"><a href="#5、打开网络连接那里的”更改适配器设置”，给新添加的假网卡”Microsoft-Loopback-Adapter”随便配置一个IP" class="headerlink" title="5、打开网络连接那里的”更改适配器设置”，给新添加的假网卡”Microsoft Loopback Adapter”随便配置一个IP"></a>5、打开网络连接那里的”更改适配器设置”，给新添加的假网卡”Microsoft Loopback Adapter”随便配置一个IP</h5><p>可以参考</p><p><a href="http://www.slyar.com/">http://www.slyar.com</a></p><p><a href="http://www.duote.com/tech/4/11925.html">http://www.duote.com/tech/4/11925.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 连接字符串</title>
      <link href="/mysql-sql-oracle/sql-lian-jie-zi-fu-chuan/"/>
      <url>/mysql-sql-oracle/sql-lian-jie-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;sql server 身份验证 连接字符串 private string ConnectionStrSqlServer &#x3D; “server&#x3D;服务器名称;database&#x3D;数据库名称;uid&#x3D;登录名称;pwd&#x3D;登录密码;”;</p><p>&#x2F;&#x2F;windows 身份验证连接字符串 private string ConnectionStrWindows &#x3D; “server&#x3D;服务器名称;database&#x3D;数据库名称;Trusted_Connection&#x3D;SSPI;”;</p><p>&#x2F;&#x2F; 在 C# 代码中用 SqlClient 的方式访问 SQL Server 2008 数据库</p><p>&#x2F;&#x2F; .NET Framework Data Provider for SQL Server 标准写法<br>Data Source&#x3D;. 或者ip地址(需要允许远程连接);Initial Catalog&#x3D;DataBase;User Id&#x3D;UserName;Password&#x3D;pwd;</p><p>&#x2F;&#x2F; .NET Framework Data Provider for SQL Server 另一种标准写法<br>Server&#x3D;. 或者ip地址(需要允许远程连接);Database&#x3D;DataBase;User ID&#x3D;UserName;Password&#x3D;pwd;Trusted_Connection&#x3D;False;</p><p>&#x2F;&#x2F; .NET Framework Data Provider for SQL Server 信任连接写法<br>Data Source&#x3D;. 或者ip地址(需要允许远程连接);Initial Catalog&#x3D;DataBase;Integrated Security&#x3D;SSPI;</p><p>&#x2F;&#x2F; .NET Framework Data Provider for SQL Server 信任连接另一种写法<br>Server&#x3D;. 或者ip地址(需要允许远程连接);Database&#x3D;DataBase;Trusted_Connection&#x3D;True;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL/SQL/Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL/SQL/Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 调用WCF config</title>
      <link href="/wcf/js-diao-yong-wcf-config/"/>
      <url>/wcf/js-diao-yong-wcf-config/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connectionStrings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conn<span class="token punctuation">"</span></span> <span class="token attr-name">connectionString</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>server=.;database=Users;uid=sa;pwd=123456;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connectionStrings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.web</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilation</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">targetFramework</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.web</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.serviceModel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behaviors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpointBehaviors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behavior</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webBehavior<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enableWebScript</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behavior</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>endpointBehaviors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceBehaviors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>behavior</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- 为避免泄漏元数据信息，请在部署前将以下值设置为 false 并删除上面的元数据终结点 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceMetadata</span> <span class="token attr-name">httpGetEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token comment">&lt;!-- 要接收故障异常详细信息以进行调试，请将以下值设置为 true。在部署前设置为 false 以避免泄漏异常信息 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceDebug</span> <span class="token attr-name">includeExceptionDetailInFaults</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behavior</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>serviceBehaviors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>behaviors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceHostingEnvironment</span> <span class="token attr-name">aspNetCompatibilityEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name">multipleSiteBindingsEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseAddressPrefixFilters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseAddressPrefixFilters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>serviceHostingEnvironment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>services</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IUserTest<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endpoint</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">behaviorConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webBehavior<span class="token punctuation">"</span></span>          <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webHttpBinding<span class="token punctuation">"</span></span> <span class="token attr-name">contract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IUserTest<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--&lt;endpoint address="" binding="basicHttpBinding" contract="ReaderService"  />--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>services</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bindings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webHttpBinding</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>binding</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webBinding<span class="token punctuation">"</span></span> <span class="token attr-name">crossDomainScriptAccessEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>binding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webHttpBinding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bindings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.serviceModel</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span> <span class="token attr-name">runAllManagedModulesForAllRequests</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><h5 id="1-在svc的文件中要加上Factory-”System-ServiceModel-Activation-WebServiceHostFactory”"><a href="#1-在svc的文件中要加上Factory-”System-ServiceModel-Activation-WebServiceHostFactory”" class="headerlink" title="1.在svc的文件中&lt;%@ ServiceHost Language&#x3D;”C#” Debug&#x3D;”true” Service&#x3D;”WCFTest.UserTest” CodeBehind&#x3D;”UserTest.svc.cs” Factory&#x3D;”System.ServiceModel.Activation.WebServiceHostFactory” %&gt;要加上Factory&#x3D;”System.ServiceModel.Activation.WebServiceHostFactory”"></a>1.在svc的文件中&lt;%@ ServiceHost Language&#x3D;”C#” Debug&#x3D;”true” Service&#x3D;”WCFTest.UserTest” CodeBehind&#x3D;”UserTest.svc.cs” Factory&#x3D;”System.ServiceModel.Activation.WebServiceHostFactory” %&gt;要加上Factory&#x3D;”System.ServiceModel.Activation.WebServiceHostFactory”</h5><h5 id="2-在代码上加上-AspNetCompatibilityRequirements-RequirementsMode-AspNetCompatibilityRequirementsMode-Allowed"><a href="#2-在代码上加上-AspNetCompatibilityRequirements-RequirementsMode-AspNetCompatibilityRequirementsMode-Allowed" class="headerlink" title="2.在代码上加上 [AspNetCompatibilityRequirements(RequirementsMode &#x3D; AspNetCompatibilityRequirementsMode.Allowed)]"></a>2.在代码上加上 [AspNetCompatibilityRequirements(RequirementsMode &#x3D; AspNetCompatibilityRequirementsMode.Allowed)]</h5><h5 id="3-在接口上加上-WebInvoke-ResponseFormat-WebMessageFormat-Json-UriTemplate-”-方法名”-Method-”GET”-BodyStyle-WebMessageBodyStyle-Wrapped"><a href="#3-在接口上加上-WebInvoke-ResponseFormat-WebMessageFormat-Json-UriTemplate-”-方法名”-Method-”GET”-BodyStyle-WebMessageBodyStyle-Wrapped" class="headerlink" title="3.在接口上加上 [WebInvoke(ResponseFormat &#x3D; WebMessageFormat.Json,UriTemplate&#x3D;”&#x2F;方法名”, Method&#x3D;”GET” ,BodyStyle &#x3D; WebMessageBodyStyle.Wrapped)]"></a>3.在接口上加上 [WebInvoke(ResponseFormat &#x3D; WebMessageFormat.Json,UriTemplate&#x3D;”&#x2F;方法名”, Method&#x3D;”GET” ,BodyStyle &#x3D; WebMessageBodyStyle.Wrapped)]</h5>]]></content>
      
      
      <categories>
          
          <category> WCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XP IIS COM+ 应用程序无法打开</title>
      <link href="/computer/xp-iis-com-ying-yong-cheng-xu-wu-fa-da-kai/"/>
      <url>/computer/xp-iis-com-ying-yong-cheng-xu-wu-fa-da-kai/</url>
      
        <content type="html"><![CDATA[<p><strong>打开 “管理工具”-&gt;“组件服务”-&gt;“计算机”-&gt;“我的电脑”－&gt;“COM+应用程序”,(如果打不开看下面的A：提示) 然后在右边框中，右击“IIS Out-Of-Process Pooled Applications”，(如果没有看到此项看下面：B)选择属性，点“标识”选项卡，选择“系统帐户”，然后确定，在“服务”(不是刚才那个,打开 管理工具-服务)中重启IIS即可。</strong></p><p>1.如打开“COM+应用程序”时出现错误，错误代码：“8004E00F-COM+无法与Microsoft分布式事务协调程序 ”</p><p>解决办法：在”开始”-“运行“窗口中输入，msdtc -resetlog (注意-前面有一空格)即可。</p><p>2.在“COM+应用程序”右框的组件中“IIS Out-Of-Process Pooled Applications”找不到解决办法：</p><p>开始菜单-&gt;运行-&gt;cmd打开命令提示窗口。</p><p>输入cd %windir%&#x2F;system32&#x2F;inetsrv切换到了system32下inetsrv目录。</p><p>再输入rundll32 wamreg.dll, CreateIISPackage。（这里小写的时候是：createiispackage）</p><p>注意:必须准确键入“CreateIISPackage”，它区分大小写。</p><p>再输入regsvr32 asptxn.dll。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installshield 创建虚拟目录脚本</title>
      <link href="/tools/installshield-chuang-jian-xu-ni-mu-lu-jiao-ben/"/>
      <url>/tools/installshield-chuang-jian-xu-ni-mu-lu-jiao-ben/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> CreateVirtualDir<span class="token punctuation">(</span>VirtualName,VirtualDataPath<span class="token punctuation">)</span>    STRING szWaitTxt,szVirPath<span class="token punctuation">;</span>    OBJECT objIIS_Virtual,objVirtDir<span class="token punctuation">;</span>begin    <span class="token assign-left variable">szWaitTxt</span><span class="token operator">=</span> <span class="token string">"正在创建 "</span> + VirtualName + <span class="token string">" 虚拟目录...."</span><span class="token punctuation">;</span>    SdShowMsg <span class="token punctuation">(</span>szWaitTxt, TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    Delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token builtin class-name">set</span> objIIS_Virtual <span class="token operator">=</span> CoGetObject<span class="token punctuation">(</span><span class="token string">"IIS://localhost/W3SVC/1/Root"</span>, <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       szVirPath <span class="token operator">=</span> TARGETDIR + VirtualDataPath<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IsObject<span class="token punctuation">(</span>objIIS_Virtual<span class="token punctuation">))</span> <span class="token keyword">then</span>        try            <span class="token builtin class-name">set</span> objVirtDir <span class="token operator">=</span> objIIS_Virtual.Create<span class="token punctuation">(</span><span class="token string">"IISWebVirtualDir"</span>, VirtualName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsObject<span class="token punctuation">(</span>objVirtDir<span class="token punctuation">))</span> <span class="token keyword">then</span>                objVirtDir.Path <span class="token operator">=</span> szVirPath<span class="token punctuation">;</span>                 objVirtDir.AccessRead <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                objVirtDir.AccessScript <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                 objVirtDir.AccessWrite <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>                objVirtDir.EnableDirBrowsing <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>                  objVirtDir.EnableDefaultDoc <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                  objVirtDir.AppFriendlyName <span class="token operator">=</span> VirtualName<span class="token punctuation">;</span>                objVirtDir.SetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          objVirtDir.AppCreate2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                objVirtDir.SetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            endif<span class="token punctuation">;</span>          catch            MessageBox<span class="token punctuation">(</span><span class="token string">"无法创建虚拟目录，请自行创建虚拟目录！"</span>, INFORMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        endcatch<span class="token punctuation">;</span>     endif<span class="token punctuation">;</span>end<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由于 Web 服务器上的“ISAPI 和 CGI 限制”列表设置，无法提供您请求的页面</title>
      <link href="/computer/you-yu-web-fu-wu-qi-shang-de-isapi-he-cgi-xian-zhi-lie-biao-she-zhi-wu-fa-ti-gong-nin-qing-qiu-de-ye-mian/"/>
      <url>/computer/you-yu-web-fu-wu-qi-shang-de-isapi-he-cgi-xian-zhi-lie-biao-she-zhi-wu-fa-ti-gong-nin-qing-qiu-de-ye-mian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-打开IIS管理器"><a href="#1-打开IIS管理器" class="headerlink" title="1.打开IIS管理器"></a>1.打开IIS管理器</h3><p><img src="/images/2011122214481644.jpg" alt="2011122214481644.jpg"></p><h3 id="2-选中ISAPI和CGI限制，把-net版本设置为允许。"><a href="#2-选中ISAPI和CGI限制，把-net版本设置为允许。" class="headerlink" title="2.选中ISAPI和CGI限制，把.net版本设置为允许。"></a>2.选中ISAPI和CGI限制，把.net版本设置为允许。</h3><p><img src="/images/2011122214510872.jpg" alt="2011122214510872.jpg"></p><p><img src="/images/2011122214512447.jpg" alt="2011122214512447.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
